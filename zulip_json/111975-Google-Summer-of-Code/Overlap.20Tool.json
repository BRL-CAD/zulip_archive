[
    {
        "content": "<blockquote>\n<p>great <span class=\"user-mention\" data-user-email=\"sharan.nyn@gmail.com\" data-user-id=\"109608\">@Sharan Narayan</span> .. i'll see if i can review that page soon.  as for the check command, you currently have to run the <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> script <em>first</em>, then you provide the log file it produces to the check command</p>\n</blockquote>\n<p>Thanks that worked. I got a .overlaps file which I fed to check.tcl in mged.<br>\nNow I need to think about the new functional GUI changes I can bring to this tool.<br>\nAs of now I am going through the Tcl/Tk language and familiarizing myself with it. Any suggestions that I should keep in mind?</p>",
        "id": 122909872,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1519448433
    },
    {
        "content": "<p>nothing comes to mind other than we really want this interface to be as simple, automatic, and general as possible.  as to the code, tcl/tk is a relatively simple language.  be sure to check the TODO file in src/tclscripts/checker as it has all the past thoughts on what to do next.</p>",
        "id": 122921978,
        "sender_full_name": "Sean",
        "timestamp": 1519478577
    },
    {
        "content": "<p>Yeah I saw the TODO list. Tcl/Tk is simple as you said. But it uses itcl and itk. I'm gonna learn that now. When proposing for the idea I'll make sure to attach some prototype screenshots of what I hope to make <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span> also keeping the TODO in mind.</p>",
        "id": 122922224,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1519479240
    },
    {
        "content": "<p>After going through the TODO list, there are a few GUI and a few performance/efficiency related problems. Since the project is revamping the GUI of the overlap tool, should I only consider the GUI related problems? or think about the performance problems as well? <br>\nBy performance problems, I mean issues like Faster check command, Better overlap detection, etc.<br>\nAnd where would I post the proposal for preview before the actual submissions begin?</p>",
        "id": 123387784,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1520408910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"sharan.nyn@gmail.com\" data-user-id=\"109608\">@Sharan Narayan</span> if you're going to propose working on the overlap tool, performance is not a primary concern.  the biggest gap there is converting what is currently implemented in a shell script into code that will run cross-platform (either in C/C++ or Tcl).  you certainly could propose better overlap detection, but that's almost a project in itself.  regardless, you will need to be familiar with the existing overlap tools (gqa, rtcheck, and the overlap GUI).</p>",
        "id": 123499218,
        "sender_full_name": "Sean",
        "timestamp": 1520616019
    },
    {
        "content": "<p>you can post a preview anywhere that is convenient -- our wiki, google doc, etc</p>",
        "id": 123499231,
        "sender_full_name": "Sean",
        "timestamp": 1520616050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Thanks for the input, I have put together the proposal on google docs, please provide any comments or feedbacks. <br>\n<a href=\"https://docs.google.com/document/d/15vXuiRSQFjkswHcswRKEV3hW-kzvoyTvPN-BbwBdzz0/edit?usp=sharing\" target=\"_blank\" title=\"https://docs.google.com/document/d/15vXuiRSQFjkswHcswRKEV3hW-kzvoyTvPN-BbwBdzz0/edit?usp=sharing\">https://docs.google.com/document/d/15vXuiRSQFjkswHcswRKEV3hW-kzvoyTvPN-BbwBdzz0/edit?usp=sharing</a></p>",
        "id": 123572193,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1520780195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Sharan Narayan</span> thanks for sharing the write-up, looks like some good progress.  Did you read over the overlap tool TODO file?</p>",
        "id": 123589026,
        "sender_full_name": "Sean",
        "timestamp": 1520819419
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Sharan Narayan</span> thanks for sharing the write-up, looks like some good progress.  Did you read over the overlap tool TODO file?</p>\n</blockquote>\n<p>Yes I did read the TODO file in src/tclscripts/checker folder. I hope that's what you meant by overlap tool TODO.<br>\nI have got the list of issues and ideas from there only but there are a lot of things that I didn't understand from the file.<br>\nI have made a docs file with my doubts about the TODO file.<br>\n<a href=\"https://docs.google.com/document/d/1N3Enik_DhtmdHX6yynO0vg8rdjyiVTji2EA7HSjrLBo/edit?usp=sharing\" target=\"_blank\" title=\"https://docs.google.com/document/d/1N3Enik_DhtmdHX6yynO0vg8rdjyiVTji2EA7HSjrLBo/edit?usp=sharing\">https://docs.google.com/document/d/1N3Enik_DhtmdHX6yynO0vg8rdjyiVTji2EA7HSjrLBo/edit?usp=sharing</a><br>\nPlease add comments to that file so that they are clear for me, Thanks.</p>",
        "id": 123607202,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1520859141
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"109608\">@Sharan Narayan</span> will take a look and see -- have you had a chance to create and resolve overlaps using the current tools (like gqa or rtcheck) and the current gui?</p>",
        "id": 123608357,
        "sender_full_name": "Sean",
        "timestamp": 1520861168
    },
    {
        "content": "<p>there's a lot of terminology that cannot be easily explained until you actually get some experience with what overlaps are, and how they are dealt with</p>",
        "id": 123608368,
        "sender_full_name": "Sean",
        "timestamp": 1520861211
    },
    {
        "content": "<p>I had used the rtcheck command back in the GCI days. Which displayed the overlaps in yellow lines according to the perspective we are currently viewing ( az, el values). I still have to use gqa. I'll read the man page on how to use it. I will also try out the current GUI in MGED. <br>\nWill ask for help. If anything comes up.</p>",
        "id": 123613193,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1520868851
    },
    {
        "content": "<blockquote>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"109608\">@Sharan Narayan</span> will take a look and see -- have you had a chance to create and resolve overlaps using the current tools (like gqa or rtcheck) and the current gui?</p>\n</blockquote>\n<p>Thanks for the feedback on the TODO file.  <br>\nSorry for the late response, had my exams. Today was the last one <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span> , so back on track.<br>\nI have gone through it and did some research and made a few changes to it. <br>\nThere are still a few things I don't understand like: bboxes, cyclic hierarchies, cycles,matrices and ORCA geometry.<br>\nI tried finding any relevant documentations related to these but couldnâ€™t find any..<br>\nPlease have a look at the changes I made and the remaining doubts, Thank you.<br>\n<a href=\"https://docs.google.com/document/d/1N3Enik_DhtmdHX6yynO0vg8rdjyiVTji2EA7HSjrLBo/edit\" target=\"_blank\" title=\"https://docs.google.com/document/d/1N3Enik_DhtmdHX6yynO0vg8rdjyiVTji2EA7HSjrLBo/edit\">https://docs.google.com/document/d/1N3Enik_DhtmdHX6yynO0vg8rdjyiVTji2EA7HSjrLBo/edit</a></p>",
        "id": 123965743,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1521556707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Sharan Narayan</span> I talked with one of the other devs and I think it will be best if the focus of any work on the overlap tool was towards implementing it in C or C++ instead of new features or GUI work (other than reworking the GUI to call whatever new backend.</p>",
        "id": 123989197,
        "sender_full_name": "Sean",
        "timestamp": 1521594092
    },
    {
        "content": "<p>you're going to have trouble finding documentation because those are complex topics that are spread across multiple documents and are generally learned from hands-on modeling experience</p>",
        "id": 123989405,
        "sender_full_name": "Sean",
        "timestamp": 1521594498
    },
    {
        "content": "<p>see the bb command for bboxes; you can create a cyclic hierarchy in mged with the c, comb, or g commands (and probably many others); a cycle is a cyclic hierarchy; matrices are a fundamental modeling concept learned by doing -- do all the mged tutorials then the oed tutorial to understand; orca geometry is just geometry with unpushed matrices.</p>",
        "id": 123989475,
        "sender_full_name": "Sean",
        "timestamp": 1521594720
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Sharan Narayan</span> I talked with one of the other devs and I think it will be best if the focus of any work on the overlap tool was towards implementing it in C or C++ instead of new features or GUI work (other than reworking the GUI to call whatever new backend.</p>\n</blockquote>\n<p>That means I should remove everything related revamping the GUI ? from my proposal and focus more on the cross compatibility part.<br>\nI will rewrite the proposal and include the details about the initial GUI that should appear to provide arguments for creating the .overlap file.</p>",
        "id": 123997725,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1521613334
    },
    {
        "content": "<p>if you implement something clean in c/c++, there will be no need for writing an overlap file ... it'll be in memory and can be queried by a gui</p>",
        "id": 124009943,
        "sender_full_name": "Sean",
        "timestamp": 1521639312
    },
    {
        "content": "<blockquote>\n<p>if you implement something clean in c/c++, there will be no need for writing an overlap file ... it'll be in memory and can be queried by a gui</p>\n</blockquote>\n<p>Using C/C++ for processing outputs of commands like rtcheck would be difficult. <br>\nCan I use any external libraries to do string processing? like Boost for C++.</p>",
        "id": 124048737,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1521701581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <br>\nNevermind that. I managed to parse the rtcheck and gqa logs without using awk, sed and cut. <br>\nUsing C's fscanf function and scanset formatting, I extracted the information from the files.</p>",
        "id": 124061119,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1521726227
    },
    {
        "content": "<p>we don't want to add boost as a dependency if we don't have to -- there are a lot of string processing functions in libbu (and it's easy enough to add more as needed).</p>",
        "id": 124062031,
        "sender_full_name": "Sean",
        "timestamp": 1521727590
    },
    {
        "content": "<p>that said, we also don't really want to be doing string processing ultimately, because that means any change to one tool will break the other.  it should be working with the data in binary, keeping it in that form until it's time to print.</p>",
        "id": 124062044,
        "sender_full_name": "Sean",
        "timestamp": 1521727635
    },
    {
        "content": "<blockquote>\n<p>that said, we also don't really want to be doing string processing ultimately, because that means any change to one tool will break the other.  it should be working with the data in binary, keeping it in that form until it's time to print.</p>\n</blockquote>\n<p>Okay, but how do I get just the overlaps from the rtcheck command or gqa command?<br>\nI had to use text processing because the output logs from these files don't give the overlaps directly.</p>",
        "id": 124062172,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1521727808
    },
    {
        "content": "<p>using text processing is okay in the strict sense of that's what the current code is doing, but you'll want to keep it as modular as possible so that it can be replaced with overlaps from some binary interface (which doesn't exist)</p>",
        "id": 124062519,
        "sender_full_name": "Sean",
        "timestamp": 1521728404
    },
    {
        "content": "<p>you'd get the list by ... implementing something that gets them, and making rtcheck/gqa/check use that new interface</p>",
        "id": 124062551,
        "sender_full_name": "Sean",
        "timestamp": 1521728449
    },
    {
        "content": "<p>a plan would probably be something like refactoring rtcheck into a libanalyze function, then refactoring rtcheck to use the new function, then adding the parallel capabilities of gqa into the libanalyze function, then refactoring gqa to use it, then adding your new command in libged that also uses that function (doing the work of both rtcheck and gqa)</p>",
        "id": 124062675,
        "sender_full_name": "Sean",
        "timestamp": 1521728631
    },
    {
        "content": "<blockquote>\n<p>a plan would probably be something like refactoring rtcheck into a libanalyze function, then refactoring rtcheck to use the new function, then adding the parallel capabilities of gqa into the libanalyze function, then refactoring gqa to use it, then adding your new command in libged that also uses that function (doing the work of both rtcheck and gqa)</p>\n</blockquote>\n<p>This is what I understood from it.<br>\nTo implement a function in rtcheck that does not affect the current functionality of rtcheck, but returns the output as a list, which can be processed by the check command. And same for the gqa command.<br>\nFinally adding the command to libged.<br>\nPlease correct me if I am wrong. Thanks</p>",
        "id": 124063108,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1521729251
    },
    {
        "content": "<p>you almost said what I said .. and the places where you said something different aren't ideal (e.g., you said \"implement a function in rtcheck\" -- I said implement a function in libanalyze)</p>",
        "id": 124067668,
        "sender_full_name": "Sean",
        "timestamp": 1521735862
    },
    {
        "content": "<p>After going through rtcheck.c, I am not able to understand any of it. There are so many functions and data structures which are BRLCAD specific. To make sense of it, I thought I would check the header files. Same story there, the header files are depending on other header files.<br>\nAny suggestions ? :/ Without understanding them, I am stuck.</p>",
        "id": 124089404,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1521773637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Sharan Narayan</span> it sounds like you don't have that much experience reading code ... and that is an essential skill to work on as a developer.  what that means is the goals we've discussed are quite possibly beyond your abilities and you may need to consider proposing something different or spend a LOT more time studying the code</p>",
        "id": 124092805,
        "sender_full_name": "Sean",
        "timestamp": 1521781382
    },
    {
        "content": "<p>one thing that might help is to read through these, particularly the first one since it speaks to the structure of the rtcheck application (and other rt* applications and gqa): <a href=\"http://brlcad.org/wiki/Developing_applications\" target=\"_blank\" title=\"http://brlcad.org/wiki/Developing_applications\">http://brlcad.org/wiki/Developing_applications</a></p>",
        "id": 124092862,
        "sender_full_name": "Sean",
        "timestamp": 1521781486
    },
    {
        "content": "<p>if you still don't understand after studying those materials and looking again at the code, that would be a good time to re-plan</p>",
        "id": 124092873,
        "sender_full_name": "Sean",
        "timestamp": 1521781533
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> ,  Glad to say I made some progress and understood most of the rtcheck.c file.<br>\nread the linux implementation of rtcheck.c<br>\nUnderstood how tclfilehandler calls the functions for stdin and stderr, stdin is used for the output as plot3 file. stderr is the logs that get printed.<br>\nBut there are some things which I didn't understand which I have linked to this doc file,:<br>\n<a href=\"https://docs.google.com/document/d/1NTftagw4Ie7e_PgmF400dWPOAGHZOZEj5126fTh_qQw/edit?usp=sharing\" target=\"_blank\" title=\"https://docs.google.com/document/d/1NTftagw4Ie7e_PgmF400dWPOAGHZOZEj5126fTh_qQw/edit?usp=sharing\">https://docs.google.com/document/d/1NTftagw4Ie7e_PgmF400dWPOAGHZOZEj5126fTh_qQw/edit?usp=sharing</a><br>\nPlease give some feedbacks, Thank you.</p>",
        "id": 124113263,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1521820214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Sharan Narayan</span> I'm glad you've made some progress, but you've not understood it enough to realize that file is just a wrapper to the real rtcheck application...  the source code to the \"rtcheck\" application is not in rtcheck.c -- that's just the mged command which performs an exec of the real app.  all the questions you have are about how that wrapper works, which is rather irrelevant to the project you've mentioned.  you're going to need to spend many weeks researching and exploring like you've just done to understand your project's needs.  I want to be supportive but your proposal must be realistic.  make sure you don't propose doing too much.</p>",
        "id": 124136339,
        "sender_full_name": "Sean",
        "timestamp": 1521859514
    },
    {
        "content": "<p>I would suggest simplifying your proposal objectives and then shifting efforts onto a coding task, try to make a patch that does something simple like create a new mged command that just prints hello.</p>",
        "id": 124136383,
        "sender_full_name": "Sean",
        "timestamp": 1521859575
    },
    {
        "content": "<p>or fix some related libged/rtcheck/gqa issue in our TODO or BUGS file</p>",
        "id": 124136384,
        "sender_full_name": "Sean",
        "timestamp": 1521859602
    },
    {
        "content": "<p>Thank you for the feedback</p>\n<blockquote>\n<p>the source code to the \"rtcheck\" application is not in rtcheck.c -- that's just the mged command which performs an exec of the real app.  </p>\n</blockquote>\n<p>Haha, just what I thought, that is why it confused me, that rtcheck is calling itself. Little did I know command is defined somewhere else.</p>\n<blockquote>\n<p>you're going to need to spend many weeks researching and exploring like you've just done to understand your project's needs.</p>\n</blockquote>\n<p>Yup,  that is why I decided to learn how this works before proposing anything. So that I could evaluate myself, because proposing something that I cannot do is risky. The problem is I can't devote much time for that with my busy schedule of college. I believe, I would have more time during my holidays to go through the code thoroughly. </p>\n<blockquote>\n<p>I want to be supportive but your proposal must be realistic. make sure you don't propose doing too much.</p>\n</blockquote>\n<p>But after spending many days with this topic, I am really excited to work on it. So I don't want to propose any less than what we have discussed so far, because everything is crucial for the completion of the project.</p>\n<blockquote>\n<p>I would suggest simplifying your proposal objectives and then shifting efforts onto a coding task, try to make a patch that does something simple like create a new mged command that just prints hello.<br>\nor fix some related libged/rtcheck/gqa issue in our TODO or BUGS file</p>\n</blockquote>\n<p>Yes, I will complete my proposal before its late and focus on making a patch for something simple. <br>\nOne quick question, Can I submit the patch later and link it here in case I can't include that in my proposal?</p>",
        "id": 124137023,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1521861132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  As instructed on the Deadline Soon topic. I have submitted my final PDF. But please have a look at the draft and let me know if there is anything that needs to be changed. Thanks <br>\nI had submitted a patch regarding tables.c. it's unrelated to this project. But was under libged and seemed easy so I did it anyway.</p>",
        "id": 124237865,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1522088021
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> ,<br>\nI had posted a different design approach for the check command in my final proposal. I sure hope it was good.<br>\nHence I had been doing a couple of Tk tutorials and examples in the last few days.  Should I rather spend this time concentrating more on submitting patches fixing bugs and to-do ?</p>",
        "id": 124555702,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1522720873
    },
    {
        "content": "<p>Just submitted a patch, implementing a libbn function to support angles input in degrees and radians</p>",
        "id": 124588122,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1522781540
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>..<br>\nGlad to know you are my mentor for the project :). I will follow the checklist as said by Sean. <br>\nI had this one thing to let you know, my end semester exams got postponed to 26th April to 17th May 2018.  Previously it was from 23rd April to 8th May. Nonetheless I will manage by allocating time judiciously.</p>",
        "id": 125580056,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1524505543
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> , congratulations for being selected! And, these 3 days should me manageable, with a strong community bounding period, for example.</p>",
        "id": 125580592,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1524506252
    },
    {
        "content": "<blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> , congratulations for being selected! And, these 3 days should me manageable, with a strong community bounding period, for example.</p>\n</blockquote>\n<p>Thank you Daniel. Yeah, I am sure I can manage since I have good gaps between each exam.</p>",
        "id": 125580968,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1524506804
    },
    {
        "content": "<p>I added my profile here : <a href=\"http://brlcad.org/wiki/Google_Summer_of_Code/2018\" target=\"_blank\" title=\"http://brlcad.org/wiki/Google_Summer_of_Code/2018\">http://brlcad.org/wiki/Google_Summer_of_Code/2018</a><br>\nAlso posted the proposal, I will add the milestones in the coming days.</p>",
        "id": 125632430,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1524593302
    },
    {
        "content": "<p>I had this doubt regarding the  'agreement to the acceptance requirements'. I read that it must be done in writing. Can someone elaborate and where should this proof of agreement be uploaded or sent?</p>",
        "id": 125632639,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1524593594
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> Thanks a ton!<br>\nYea sure thing, it'll be up and updated soon.<br>\nWould you recommend hosting the devlogs on BRL-CAD's website or would you recommend using an external page (maybe a blog or a <a href=\"http://github.io\" target=\"_blank\" title=\"http://github.io\">github.io</a> page)<br>\nI'm on the verge of completion of my sessionals at university in a couple of days. I'll start work on formalizing the project, latest by the 1st of May. :)</p>",
        "id": 125666699,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1524654066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nI was trying to understand how calling rtcheck command in MGED works and made a flowchart as follows:<br>\n<a href=\"/user_uploads/1549/ov3IkNbSCbkqbWzb_MDBM2sR/rtcheck.jpg\" target=\"_blank\" title=\"rtcheck.jpg\">rtcheck.jpg</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/ov3IkNbSCbkqbWzb_MDBM2sR/rtcheck.jpg\" target=\"_blank\" title=\"rtcheck.jpg\"><img src=\"/user_uploads/1549/ov3IkNbSCbkqbWzb_MDBM2sR/rtcheck.jpg\"></a></div><p>What I don't understand is how does it reach viewcheck.c file.  Because the viewcheck.c handles the overlaps and the list of overlaps.</p>",
        "id": 125734405,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1524764235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> you got it right all the way up to that last block</p>",
        "id": 125738129,
        "sender_full_name": "Sean",
        "timestamp": 1524769100
    },
    {
        "content": "<p>in rt's main(), it makes calls into the RTUIF \"API\", which is basically a way to say that it calls a set of named functions directly, which each rt-style application provides.  So viewcheck.c defines a view_init for example,  and a bunch of other rtuif-functions, which main directly calls  (main.c line 382)</p>",
        "id": 125738237,
        "sender_full_name": "Sean",
        "timestamp": 1524769258
    },
    {
        "content": "<p>if you look at rtuif.h, you'll see the set of functions that must be defined for a given application</p>",
        "id": 125738258,
        "sender_full_name": "Sean",
        "timestamp": 1524769294
    },
    {
        "content": "<p>and you'll find all of those for rtcheck in viewcheck.c  -- we call that the \"backend\" file whereas main.c and opt.c and such are the \"frontend\"</p>",
        "id": 125738308,
        "sender_full_name": "Sean",
        "timestamp": 1524769332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> find it out by yourself - with the help of a debugger. I'll give you an example using the Gnu debugger <code>gdb</code>.</p>\n<p>You already found out that the program which hast to be examined is <code>rtcheck</code>. Therefore, start the debugger for this program:</p>\n<div class=\"codehilite\"><pre><span></span>gdb rtcheck\n</pre></div>\n\n\n<p>Then tell the debugger which function you want to examine and set a break point there. In your case it's some function from viewcheck.c, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span>break overlap\n</pre></div>\n\n\n<p>Next, run the rtcheck program inside the debugger with some useful parameters, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span>run -g10 -G10 m35.g all.g &gt; m35.plot3\n</pre></div>\n\n\n<p>After some seconds, the program execution will stop at the desired break point. Now, you can ask for the backtrace, i.e. the list of functions on the call stack:</p>\n<div class=\"codehilite\"><pre><span></span>bt\n</pre></div>",
        "id": 125762665,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1524814422
    },
    {
        "content": "<blockquote>\n<p>in rt's main(), it makes calls into the RTUIF \"API\", which is basically a way to say that it calls a set of named functions directly, which each rt-style application provides.  So viewcheck.c defines a view_init for example,  and a bunch of other rtuif-functions, which main directly calls  (main.c line 382)</p>\n</blockquote>\n<p>Yes, I did read about this in the 'application_development.pdf'</p>\n<blockquote>\n<p>and you'll find all of those for rtcheck in viewcheck.c  -- we call that the \"backend\" file whereas main.c and opt.c and such are the \"frontend\"</p>\n</blockquote>\n<p>That explains why it was written second half in the beginning of viewcheck.c. </p>\n<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> find it out by yourself - with the help of a debugger. I'll give you an example using the Gnu debugger <code>gdb</code>.</p>\n</blockquote>\n<p>Thanks for this tip! gdb is amazing.<br>\nIt did help a lot, but it showed a final jump from librt/bool.c to viewcheck.c. From a brief reading of bool.c, I think bool.c does the actual checking of the overlap. As <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> said I will go through main.c and also check bool.c in detail.</p>",
        "id": 125784075,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1524850117
    },
    {
        "content": "<p>Okay I think it's making sense now.<br>\nIn bool.c at the end when it jumped to viewcheck.c there is a call to  <code>ap-&gt;a_overlap( )</code> <br>\n<code>view_init( )</code> in viewcheck.c initializes  <code> ap-&gt;a_overlap = overlap</code> where overlap its the local function <code>overlap</code> in the viewcheck.c.</p>",
        "id": 125784735,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1524851055
    },
    {
        "content": "<p>but how does main.c know that it has to call the <code>view_init( )</code> of viewcheck.c only? Is it the way the linking is performed for rtcheck while compilation happens ?</p>",
        "id": 125784946,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1524851434
    },
    {
        "content": "<p>Yeah I checked the CMakeLists and for rtcheck, viewcheck.c is there along with other librtuif sources :)</p>",
        "id": 125785373,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1524852101
    },
    {
        "content": "<p>Yep, you got it.  It only links one view file.</p>",
        "id": 125789871,
        "sender_full_name": "Sean",
        "timestamp": 1524858794
    },
    {
        "content": "<p>That way we can (and do) have severa rt-style applications that all use the exact same front end code, recompiled for each one, with each also linking their respective view file.</p>",
        "id": 125789872,
        "sender_full_name": "Sean",
        "timestamp": 1524858795
    },
    {
        "content": "<p>The utilization of function pointers allows generic programming in C. You can read more about how to utilize the BRL-CAD ray trace functionality with the application struct here: <a href=\"https://brlcad.org/wiki/Developing_applications\" target=\"_blank\" title=\"https://brlcad.org/wiki/Developing_applications\">https://brlcad.org/wiki/Developing_applications</a></p>",
        "id": 125817331,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1524915246
    },
    {
        "content": "<blockquote>\n<p>The utilization of function pointers allows generic programming in C. You can read more about how to utilize the BRL-CAD ray trace functionality with the application struct here: <a href=\"https://brlcad.org/wiki/Developing_applications\" target=\"_blank\" title=\"https://brlcad.org/wiki/Developing_applications\">https://brlcad.org/wiki/Developing_applications</a></p>\n</blockquote>\n<p>Thank you,  I will check that! BTW this is my progress on rtcheck, Please let me know if there is anything missing. I created with some rough assumption without understanding most of it! :D should I be knowing everything that going on there?<br>\n<a href=\"/user_uploads/1549/l7JK8jA2hfD13tHGfYgX2tC3/rtcheck3.jpg\" target=\"_blank\" title=\"rtcheck3.jpg\">rtcheck3.jpg</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/l7JK8jA2hfD13tHGfYgX2tC3/rtcheck3.jpg\" target=\"_blank\" title=\"rtcheck3.jpg\"><img src=\"/user_uploads/1549/l7JK8jA2hfD13tHGfYgX2tC3/rtcheck3.jpg\"></a></div><p>I will also go through <code>gqa</code> in this manner.  Then I will try thinking about the project plan and discuss here :)</p>",
        "id": 125825929,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1524936142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> The rtcheck program is a BRL-CAD application of the kind described in the referenced documents: The application struct is prepared, the grid is set up, (librt is set up for parallel execution,) and then rt_shootray() will be called.</p>",
        "id": 125892686,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1525093283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Yes I got that from the PDF and the sample program <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 125896237,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525099047
    },
    {
        "content": "<p>Regarding the project, I had some questions like: <br>\nWhat are libanalyse functions generally used for ?<br>\nFor getting the list of overlaps I was suggested by <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  to refactor the rtcheck command into a libanalyse function, then refactoring rtcheck to use the libanalyse function. <br>\nWhat I had thought and initially planned was to call the libanalyse function that will handle the overlaps in place of the viewcheck's <code>overlap()</code>.  When rtcheck is called by MGED or as an application the execution is normal but when called via <code>check</code> command the overlap list is handed over to the <code>check</code> command along with the normal execution ( with some flags to denote that <code>check</code> is caller ). I somehow feel like this is not gonna work or is the wrong way to do it. <br>\nThe hard part is getting the list in a 'right' way. After that processing the list like removing duplicates and sorting should be straight forward.</p>",
        "id": 125898095,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525101459
    },
    {
        "content": "<p>libanalyze is a relatively new library and can/should be changed as tools are refactored</p>",
        "id": 125898185,
        "sender_full_name": "Sean",
        "timestamp": 1525101566
    },
    {
        "content": "<p>consider the current situation with most of the rt* applications using the \"rtuif\" code in src/rt to set up a grid of rays, shoot them, and then use their view*.c file to post-process them.</p>",
        "id": 125898253,
        "sender_full_name": "Sean",
        "timestamp": 1525101618
    },
    {
        "content": "<p>that's fine for single grids but then gqa comes along using a completely different method (shooting 3 grids iteratively)</p>",
        "id": 125898284,
        "sender_full_name": "Sean",
        "timestamp": 1525101678
    },
    {
        "content": "<p>there's obviously a lot of overlap (i.e., needs to shoot sets of rays), but adapting rtuif to gqa didn't make much sense as gqa is essentially view-agnostic and rtuif is specifically view-centric ... so then there was an idea to extract the common reusable parts into functions that both gqa and rtuif applications could use</p>",
        "id": 125898370,
        "sender_full_name": "Sean",
        "timestamp": 1525101783
    },
    {
        "content": "<p>and the place to put that function or those functions ... libanalyze</p>",
        "id": 125898381,
        "sender_full_name": "Sean",
        "timestamp": 1525101803
    },
    {
        "content": "<p>conceptually, libanalyze is intended to be where all \"higher-level\" volumetric geometry analysis occurs -- e.g., detecting overlaps, comparing for differences, moments of inertia, masses, volumes, etc.</p>",
        "id": 125898540,
        "sender_full_name": "Sean",
        "timestamp": 1525102054
    },
    {
        "content": "<p>it's not yet undergone any API design, so you're welcome to try designing what you need and I'd be glad to help you with that -- or just focus on exactly what you need for your project, that's fine too</p>",
        "id": 125898606,
        "sender_full_name": "Sean",
        "timestamp": 1525102144
    },
    {
        "content": "<p>Thank you for the explanation about the libanalyse functions and the origins of it.</p>\n<blockquote>\n<p>it's not yet undergone any API design, so you're welcome to try designing what you need and I'd be glad to help you with that -- or just focus on exactly what you need for your project, that's fine too</p>\n</blockquote>\n<p>I think right now for GSoC, I think I should be just focusing on the project. After completion of the GSoC project I will be more than happy to  discuss regarding the API design.</p>",
        "id": 125900164,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525104267
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>,<br>\nI needed your opinion on this :</p>\n<blockquote>\n<p>What I had thought and initially planned was to call the libanalyse function that will handle the overlaps in place of the viewcheck's <code>overlap()</code>.  When rtcheck is called by MGED or as an application the execution is normal but when called via <code>check</code> command the overlap list is handed over to the <code>check</code> command along with the normal execution ( with some flags to denote that <code>check</code> is caller ).</p>\n</blockquote>\n<p>I hoped this would work because the way linking is done for rtcheck command all the variables are accessible from main.c. So if linked similarly I would have access to the viewcheck's local overlap list.<br>\nAlso instead of replacing viewcheck's overlap(), I could add a function call to a libanalyse function that would append the list to a linkedlist locally available in libanalyse file. Finally my check command will free this new linked list after it's done processing it.<br>\nThis way I would be able to write a common append function for both gqa and rtcheck.</p>\n<p>The other way that came to my mind is to make a libanalyse function for rtcheck() which can be called by both <code>check</code> and the normal rt application by refactoring it use the new function. This rtcheck() function would do all the work the rt/main.c will do.<br>\n This way would involve a lot of code duplication ( I believe so, correct me if I am wrong :) )</p>\n<p>So which way would be best and feasible or is there any other way to it?</p>",
        "id": 126051755,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525363239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> I'm not sure if I understand you right. I try to go therefore step by step:</p>\n<p>First, you are right with the many global variables in the current rtcheck. These have to be eliminated when the functionality moves to libanalyze. A cheap method for a first step would be to put all these variables in a resource structure and have this structure as additional parameter for all relevant functions.</p>\n<p>Doing so, it would be relatively easy to move these functions from rt to libanalyze, which would be a code duplication first.</p>\n<p>You need then a method to separate the algorithm from the way the results are used. libanalyze will contain the algorithmic part then and the presentation part will be implemented in the library which wants to do the overlap analysis, i.e. for example libged or rt. This separation can be done with function pointers, similar to the application struct in rt_shootray(). Please, have a look at the voxelize() function in src/libanalyze/voxels.c which gives you an example. There, create_boxes is the function pointer parameter which determines the prozessing of the algorithm's output. Utilizations of voxelize() can be found in src/libged/voxelize.c and src/conv/g-voxel.c.</p>",
        "id": 126055625,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1525368610
    },
    {
        "content": "<p>Thanks for the input!</p>\n<blockquote>\n<p>Please, have a look at the voxelize() function in src/libanalyze/voxels.c which gives you an example. There, create_boxes is the function pointer parameter which determines the prozessing of the algorithm's output. Utilizations of voxelize() can be found in src/libged/voxelize.c and src/conv/g-voxel.c.</p>\n</blockquote>\n<p>Yeah, I will have a look at it. I still have some doubts :/ maybe the example will help me.</p>",
        "id": 126103726,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525452315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span><br>\nokay I read that but since rtcheck is a bit complex I am still having some concerns.<br>\nI had this idea on refactoring, Calling the the libanaylse function from <code>ged_rtcheck</code>. Then from libanalyse executing the <code>rtcheck</code> application using <code>execvp()</code> . This would make the execution go as it is now but at the end it will return to the libanalyse function. But the <code>viewcheck.c</code> frees the memory of the overlap list, to fix this I could do the freeing in my libanalyse function after appending it to a new local overlap list.<br>\nBut later I realized that if I do that its only applicable for calling <code>rtcheck</code> via MGED. But when I call it from terminal it would directly call the <code>main</code> in <code>rt/main.c</code> this would cause issues because then viewcheck.c won't be freeing the overlap list. <br>\nSince that wouldn't work, there is need to make the libanalyse independent and leave the executable <code>rtcheck</code> application as it is.<br>\nTo make it independent I would require do all the things going on in <code>rt/main.c</code> again in my libanalyse function. This is why I asked about code duplication.</p>",
        "id": 126113137,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525466994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span></p>\n<blockquote>\n<p>I had this idea on refactoring, Calling the the libanaylse function from <code>ged_rtcheck</code>. Then from libanalyse executing the <code>rtcheck</code> application using <code>execvp()</code> . This would make the execution go as it is now but at the end it will return to the libanalyse function. </p>\n</blockquote>\n<p>I'm afraid, execvp() won't return to the process it was started from. rtcheck will end usually with a call to exit() which terminates the whole process.</p>\n<p>Anyway, the calling of subprograms in BRL-CAD functions is something which we want to get rid of. It disturbs the program flow and has dependencies to the operating system which makes it more difficult to program OS independent. I'm afraid therefore that you need to understand how rtcheck works.</p>\n<p>viewcheck.c is very straight forward: hit() - do nothing, miss() - do nothing, overlap() is the function which implements the processing of the results, and you probable need something similar as a function pointer parameter for the libanalyze function. And then, there is the output of the result.<br>\nNext, there are the rt general purpose functions as e.g. the do_~(). To get familiar with them you could copy all relevant source files in a new directory (e.g. src/libanalyze/overlap), remove all functions and features not needed by rtcheck, and make them compile. The should give you a much smaller code to understand as the current in src/rt.<br>\nFinally, you know something about how rtcheck should work. It shoots grids of rays with -g width and -G height, etc.. Go through the rtcheck parameters and see where and how there are used.</p>\n<p>At the end, rtcheck should use the libanalyze function and not the ones from rt.</p>",
        "id": 126139589,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1525523575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nThanks for the reply! That clears most of my doubts.</p>\n<blockquote>\n<p>Next, there are the rt general purpose functions as e.g. the do_~(). To get familiar with them you could copy all relevant source files in a new directory (e.g. src/libanalyze/overlap), remove all functions and features not needed by rtcheck, and make them compile. The should give you a much smaller code to understand as the current in src/rt.</p>\n</blockquote>\n<p>I will try this tonight and see how it goes! I guess trying it out would help me the most rather than thinking of ideas :D</p>",
        "id": 126140155,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525524873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nI built a new version of the rtcheck command :)<br>\nI had commented out many things in main.c and other files which weren't related to rtcheck. Like statements using the options which rtcheck doesn't use. I believe I could remove out more content. Will do it soon, gonna sleep now.<br>\nBTW I did the following edits in CMakeLists. Not sure if what I did was proper because this was new to me.<br>\n<a href=\"/user_uploads/1549/AVwXpvixnBikhGqz2HPBB_j2/changes.patch\" target=\"_blank\" title=\"changes.patch\">changes.patch</a></p>",
        "id": 126150690,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525549486
    },
    {
        "content": "<p>Sounds like you are making progress :)<br>\nYour changes to CMakeLists.txt look reasonable. The only issue I found is that overlap/main.c shouldn't belong to CMAKEFILES.</p>",
        "id": 126174740,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1525608788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nPlease give your feedback about this plan.<br>\nAfter going through the example you suggested, i.e libged/voxelize.c and libanalyze/voxels.c<br>\nVoxelize.c - libged</p>\n<ul>\n<li>has the structure definition for voxelizedata</li>\n<li>has <code>createboxes()</code> which gets the callbackdata(voxData) from the libanalyze funciton.</li>\n<li>handles the arguments</li>\n<li>calls libanalyze <code>voxelize()</code>passing the pointer the voxData and pointer to the <code>createboxes()</code></li>\n</ul>\n<p>Voxels.c - libanalyze</p>\n<ul>\n<li><code>rt_prep()</code></li>\n<li><code>RT_APPLICATION_INIT()</code></li>\n<li><code>rt_shootray()</code></li>\n<li>calls back the libged's <code>createboxes()</code> with the pointer to the structure which was passed to libanalyze</li>\n</ul>\n<p>I similarly planned the same for rtcheck</p>\n<p>check.c - libged</p>\n<ul>\n<li>has overlap list structure</li>\n<li>calls libanalyze <code>rtchk()</code> with pointer to this struct, args for rtcheck command and pointer to the overlap function in check.c</li>\n<li>has custom <code>overlap()</code> and <code>viewend()</code> functions.</li>\n</ul>\n<p>rtcheck.c - libanalyze</p>\n<ul>\n<li>has all functions needed like hit,miss, view_2init, usage</li>\n<li>has a stripped down version of <code>main()</code> of rt/main.c as <code>rtchk()</code> that accepts the argc, argv, pointer to overlap struct and pointer to overlap function</li>\n<li>calls <code>getargs()</code> from rt/opt.c to parse the arguments</li>\n<li>prepares APP, set APP.a_overlap as the passed pointer to <code>overlap()</code> in libged</li>\n<li>calls do_ae, do_frame from rt/do.c<br>\nthe original <code>ged_rtcheck</code> will be using the libanalyze function similarly like the check.c but will have the original rt <code>viewend()</code> and <code>overlap()</code></li>\n</ul>",
        "id": 126224281,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525713522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span><br>\nBecause you emphasized the calBackData, let me explain that this structure is a simple pointer to the context where the call back function was defined. If you want for example fill a list, the call back function hast to get access to this list. To achieve this you could declare a global variable for this list or carry a pointer to the call back function which point to its original context with this list. (This \"context\" is a structure with pointers to all necessary data.)</p>\n<p>How can this be transferred to the overlap feature?<br>\nYou need an <code>analyze_overlaps()</code> function in libanalyze (I wouldn't call this function \"rtcheck\"). This function takes parameters similar to the ones of the rtcheck program - and a call back function with its context. These call back function with its context could be identical with <code>struct application.a_overlap</code> and <code>struct application.a_uptr</code>, but it could be advisable to have an adapter between them.</p>\n<p>Then e.g. in libged's check, you define an overlap list structure, a function which adds entries to this list, and hand it over to analyze_overlaps() together with the other parameters. When this function has finished your overlap list is filled and you can transfer it to the output. No viewend() any more!</p>\n<p>The new analyze_overlaps() is the front end of most of the code from rt, this is true, but this is all hidden behind this single entry point.</p>",
        "id": 126274146,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1525800364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Thank you for explaining it in detail, but I am afraid I didn't understand some of it.<br>\nThe usage of contexts got me really confused. <br>\nlibged - check.c</p>\n<ul>\n<li>has the definition of the overlapList struct declared globally in the check.c</li>\n<li>a function similar to <code>overlap()</code> as in viewcheck.c to add the entries to the list, call it <code>add_overlaps()</code></li>\n<li><code>ged_check()</code> calls the <code>analyze_overlaps()</code> with args (like the ones of executable rtcheck), pointer to the <code>add_overlap</code> function.</li>\n<li>you mentioned the need to pass the context, which I believe would be the data required for the <code>add_overlap()</code> that is the struct overlapList. But since it is declared in the check.c wouldn't the <code>add_overlap()</code> be able to access this list ? Were you mentioning it in the case if I don't have it declared globally?</li>\n</ul>",
        "id": 126325226,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525887332
    },
    {
        "content": "<p>And there are variables like noverlaps, overlap_count and unique_overlap_count which are used by <code>overlap()</code> in the original viewcheck.c (again defined globally) which are purely for printing purposes, which I don't need in my case.</p>",
        "id": 126325775,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525888030
    },
    {
        "content": "<p>In case of voxels I understood the need of passing the callbackData as voxDat is created in the local scope of ged_voxelize and create_boxes() actually used the data that was set by ged_voxelize.</p>",
        "id": 126326035,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525888381
    },
    {
        "content": "<blockquote>\n<ul>\n<li>you mentioned the need to pass the context, which I believe would be the data required for the <code>add_overlap()</code> that is the struct overlapList. But since it is declared in the check.c wouldn't the <code>add_overlap()</code> be able to access this list ? Were you mentioning it in the case if I don't have it declared globally?</li>\n</ul>\n</blockquote>\n<p>It's very bad practice to have or access globals in library code.  It's not \"great\" for application code either, but it's not nearly as big a problem ... until you want to turn that application code into library code.</p>",
        "id": 126326038,
        "sender_full_name": "Sean",
        "timestamp": 1525888383
    },
    {
        "content": "<p>in general, if we're working around any code, application or library, it's generally good to eliminate globals where you can easily, especially if you're already in there working on that code</p>\n<p>in fact for simply understanding the code, it might help you to eliminate globals one at a time, a patchfile each</p>",
        "id": 126326121,
        "sender_full_name": "Sean",
        "timestamp": 1525888504
    },
    {
        "content": "<p>some globals are super easy to eliminate, some require creating a context or some other structure to hold that data and then passing that around</p>",
        "id": 126326204,
        "sender_full_name": "Sean",
        "timestamp": 1525888609
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> that explains the need of contexts. Then I would have the variable of the overlapList in the local scope of ged_check() and call the analyze_overlaps() with args required, the pointer to the add_overlap function and the address of the variable overlapList.<br>\nSo this way when everything is done executing I would have the results in my local variable.</p>",
        "id": 126326513,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525888971
    },
    {
        "content": "<p>I would require contexts in case of re-factoring the ged_rtcheck to this libanalyze function because then I would need to print these variables like the rtcheck application does. </p>\n<blockquote>\n<p>And there are variables like noverlaps, overlap_count and unique_overlap_count which are used by <code>overlap()</code> in the original viewcheck.c (again defined globally) which are purely for printing purposes, which I don't need in my case.</p>\n</blockquote>",
        "id": 126326624,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525889134
    },
    {
        "content": "<p>And to pass the pointer the struct of context I should use the app.a_uptr because I cannot pass it as a function argument.</p>",
        "id": 126326704,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525889249
    },
    {
        "content": "<p>??</p>",
        "id": 126326773,
        "sender_full_name": "Sean",
        "timestamp": 1525889300
    },
    {
        "content": "<p>it depends ... if you're creating new API (in libanalyze), then you can do whatever you want including creating a user data pointer argument that allows it to be passed</p>",
        "id": 126326797,
        "sender_full_name": "Sean",
        "timestamp": 1525889352
    },
    {
        "content": "<p>hmm I am not sure what do u mean by the API, does it mean like writing your own functions instead of using the rt/librt ones?</p>",
        "id": 126326976,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525889641
    },
    {
        "content": "<p>yes, creating new functions vs using existing ones</p>",
        "id": 126327607,
        "sender_full_name": "Sean",
        "timestamp": 1525890497
    },
    {
        "content": "<p>\"it depends\"</p>",
        "id": 126327615,
        "sender_full_name": "Sean",
        "timestamp": 1525890507
    },
    {
        "content": "<p>Well, I would like to try to do the api, there is already some work done on it in libanalyze/api.c right?<br>\nBut seeing myself struggle in understanding simple things so far, I am doubtful that it would set me off-schedule, So I think it would be safer for me to stick with using the existing ones :D<br>\n<span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> I am gonna try to implement what we discussed.<br>\nAnd about the interaction schedule, I would be free all the time during my break, so when would be comfortable for you? I am 3hrs 30mins ahead of your time according to zulip.</p>",
        "id": 126328802,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525892111
    },
    {
        "content": "<p>you just need to be aware where the existing functions  are adequate or may be inadequate -- libanalyze is relatively new and hasn't had any design thought go into it.</p>\n<p>only a few functions have been added where something was needed in a couple places</p>",
        "id": 126328876,
        "sender_full_name": "Sean",
        "timestamp": 1525892243
    },
    {
        "content": "<p>I agree that you seem to be missing some \"simple things\" as you put it, but that will come with some experience and reading</p>",
        "id": 126328933,
        "sender_full_name": "Sean",
        "timestamp": 1525892293
    },
    {
        "content": "<p>this might be a helpful tutorial: <a href=\"https://opensourceforu.com/2012/02/function-pointers-and-callbacks-in-c-an-odyssey/\" target=\"_blank\" title=\"https://opensourceforu.com/2012/02/function-pointers-and-callbacks-in-c-an-odyssey/\">https://opensourceforu.com/2012/02/function-pointers-and-callbacks-in-c-an-odyssey/</a></p>",
        "id": 126328972,
        "sender_full_name": "Sean",
        "timestamp": 1525892378
    },
    {
        "content": "<p>this is also a good one that even speaks in terms of \"contexts\" which is just data being passed around:  <a href=\"http://mindtribe.com/2015/06/do-c-callbacks-like-this-not-like-that/\" target=\"_blank\" title=\"http://mindtribe.com/2015/06/do-c-callbacks-like-this-not-like-that/\">http://mindtribe.com/2015/06/do-c-callbacks-like-this-not-like-that/</a></p>",
        "id": 126329046,
        "sender_full_name": "Sean",
        "timestamp": 1525892450
    },
    {
        "content": "<p>Thank you so much for the links and being supportive :) I will go through them!<br>\nThen maybe read the current implementation of api.c and find what it is missing.</p>",
        "id": 126329150,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525892598
    },
    {
        "content": "<p>Don't stick on the api.c file, A functions isn't an API function because it is defined in a file called api.*.</p>",
        "id": 126329254,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1525892750
    },
    {
        "content": "<p>Creating an API function means to write a function which is for use outside the library, in this case libanalyze. If you write a analyze_overlaps() function which shall be called in libged you are writing a libanalyze API function.</p>",
        "id": 126329378,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1525892894
    },
    {
        "content": "<p>Ideally such a function would be defined in a canonical file like src/libanalyze/overlaps.c</p>",
        "id": 126329402,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1525892981
    },
    {
        "content": "<p>As a starting point you could choose a behavior based approach. This means to think about how an analyze_overlaps() functions ideally should look like, which parameters it should have. Grid sizes, angles, objects, generally the rtcheck parameters.<br>\nIf you have done this you can fill in the rtcheck code as the body of analyze_overlaps() and you are done <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 126329717,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1525893415
    },
    {
        "content": "<blockquote>\n<p>And about the interaction schedule, I would be free all the time during my break, so when would be comfortable for you? I am 3hrs 30mins ahead of your time according to zulip.</p>\n</blockquote>\n<p>Let's say, I'm usually available around 17:00 UTC, but it's hard to keep a strict schedule.</p>",
        "id": 126330034,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1525893898
    },
    {
        "content": "<blockquote>\n<p>Let's say, I'm usually available around 17:00 UTC, but it's hard to keep a strict schedule.</p>\n</blockquote>\n<p>Okay sure!</p>\n<blockquote>\n<p>As a starting point you could choose a behavior based approach. This means to think about how an analyze_overlaps() functions ideally should look like, which parameters it should have. Grid sizes, angles, objects, generally the rtcheck parameters.<br>\nIf you have done this you can fill in the rtcheck code as the body of analyze_overlaps() and you are done <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>Thanks for the explanation, I will need some thinking before I can say anything on this. Because right now what you say seems just what we had planned so far except to pass the parameters explicitly.</p>",
        "id": 126330430,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525894539
    },
    {
        "content": "<p>Don't fear to code, express your ideas in code and share this code. Ask questions as you are doing here and share your code which is as same important.</p>",
        "id": 126330585,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1525894702
    },
    {
        "content": "<p>Will do! :) next time I ask something I will share the code as well.</p>",
        "id": 126330853,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1525895056
    },
    {
        "content": "<p>Just a quick update:<br>\nI had my exam yesterday so I couldn't do much. I will post my progress tonight after working on it.<br>\nSo far I have added the check command in MGED and compiled it, right now it only prints the args. Was testing if the args are properly sent through because I was using the cmd_ged_plain_wrapper.</p>",
        "id": 126462503,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526133106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nFor start I just tried the callback functionality with a int. After compiling, it worked and printed 345. I am attaching the patch file. <a href=\"/user_uploads/1549/zzurTfAmq_JbaJpBQUDAlnMN/test_callback.patch\" target=\"_blank\" title=\"test_callback.patch\">test_callback.patch</a> <br>\nGonna try adding more to the libanalyze/overlaps/overlap_check.c</p>",
        "id": 126469675,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526149731
    },
    {
        "content": "<p>I think I need to add definition of struct overlap_list inside analyze.h because I used it inside in the overlaps_context struct's definition.</p>",
        "id": 126469841,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526150130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span><br>\nThis is a nice peace of code which allows us to discuss the basic structure of the analyze_overlaps() API function.  I like that you were able to omit everything which could block the view at the API design.</p>\n<p>First some words of introduction: You have two contexts here (you can translate context as \"data space\"): The one of the libanalyze and the one of libged, or to be more precise, the one of analyze_overlaps() and the one of ged_check(). What distinguishes the date of these two functions?<br>\nanalyze_overlaps() knows the algorithm which can find overlaps and its output, say \"object x\" overlaps with \"object y\" by \"z mm\".<br>\nged_check() knows about analyze_overlaps() interface, which is declared in include/analyze.h, and that it wants to create a list of all overlaps.<br>\nNotice, ged_check() doesn't know about the algorithm internals, like the ray-trace, and analyze_overlaps() doesn't know about the list the ged command wants to create. Furthermore, libanalyze has to disclosure the piece of its data to libged which contains the overlap algorithm's output.</p>\n<p>This works in the first place by delegating the processing from libanalyze to libged for the processing of the overlaps. But, when the processing moves from libanalyze to libged, libged needs its context (= data) back.<br>\nYou did this with the <code>struct overlaps_context</code>. The structure is okay, but declared at the wrong place. overlaps_context contains the data of ged_check() (the list, an int). That's why is has to be declared in libged (I would recommend src/libanalyze/overlaps/check_overlaps.c).</p>\n<p>Now, let's express this in code, starting with analyze_overlaps(). The function has the usual parameters as cell width and height etc., plus a function pointer to the call back function and a pointer to the other library's data space:</p>\n<div class=\"codehilite\"><pre><span></span>analyze_overlaps(double cellWidth, double ceelHeight, ..., analyse_overlaps_callback callBack, void* callBackData);\n</pre></div>\n\n\n<p>Next, when analyze_overlaps() transfers the processing to ged_check() it needs to transfer some data too (see above for the example I chose), especially to the call back function:</p>\n<div class=\"codehilite\"><pre><span></span>typedef void (*analyse_overlaps_callback)(const char* object1, const char* object2, double distance, ..., void* callBackData);\n</pre></div>\n\n\n<p>This way libanalyse can publish its overlap interface in include/analyze.h and via callBackData the calling library may get its data back when the processing is transferred to its call back function.</p>\n<p>I'm not sure how the overlap data really looks like. In principle it's the data the application.a_overlap function experiences. You may either transfer it as it is to analyse_overlaps_callback or compile it to better understandable terms.</p>\n<p>Be aware that the above code my contain bugs as it is untested.</p>",
        "id": 126500279,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526223497
    },
    {
        "content": "<p>Thanks for the feedback and input. I will look into it and see if I am able to follow :)</p>",
        "id": 126502899,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526229792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nAs you said that we would need to pass the usual parameters to the analyze_overlaps(), that would mean all the parameters of the rtcheck command right? so I added a parse_args() function to check.c to parse these args (ignoring the debug ones) to the following patch: <em>edited will add a new one</em></p>\n<p>I didn't add all the changes you mentioned because the list of parameters is a large list.<br>\nI was thinking if we could use a struct to pass the args, but then would that be okay if we are trying API?</p>",
        "id": 126506961,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526239006
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/u4zfGmOiw8bOPLngkEs5oA4s/test_patch.patch\" target=\"_blank\" title=\"test_patch.patch\">test_patch.patch</a></p>",
        "id": 126507292,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526239885
    },
    {
        "content": "<p>While I was waiting, I decided to remove more code from front-end of rt that is not required for rtcheck and compiled it, so that it would easier for me to understand.</p>",
        "id": 126545242,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526314622
    },
    {
        "content": "<p>You use global variables in src/libged/check.c, this is bad. Consider to make the argument parsing part of ged_check() and the matflag etc. local variables there.</p>",
        "id": 126545934,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526315631
    },
    {
        "content": "<blockquote>\n<p>You use global variables in src/libged/check.c, this is bad. Consider to make the argument parsing part of ged_check() and the matflag etc. local variables there.</p>\n</blockquote>\n<p>Yep that I will move to the ged_check()</p>",
        "id": 126546063,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526315818
    },
    {
        "content": "<p>Don't be afraid of a large parameter list. I's only a good idea to use a structure for them if many functions need them.<br>\nOn the other hand, using a large parameter list is more secure then using a structure because the user is forced to think about all of them this way. In case of a structure there is a high danger that they forget one and may use the wrong default.</p>",
        "id": 126546078,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526315852
    },
    {
        "content": "<blockquote>\n<p>Don't be afraid of a large parameter list. I's only a good idea to use a structure for them if many functions need them.<br>\nOn the other hand, using a large parameter list is more secure then using a structure because the user is forced to think about all of them this way. In case of a structure there is a high danger that they forget one and may use the wrong default.</p>\n</blockquote>\n<p>yeah it's a good idea but 14 parameters sounded too much that's why I hesitated. Will write code to pass them.</p>",
        "id": 126546326,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526316193
    },
    {
        "content": "<p>BTW, for a simple test I would let callBackData be a pointer to an integer which counts the overlaps:</p>\n<div class=\"codehilite\"><pre><span></span>HIDDEN void count_overlaps(..., void* callBackData) {\n    int* value = (int*)callBackData;\n    value++;\n}\nint ged_check(...) {\n    int numberOfOverlaps = 0;\n    analyze_overlaps(...., count_overlaps, &amp;numberOfOverlaps);\n    print(numberOfOverlaps);\n}\n</pre></div>",
        "id": 126546466,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526316367
    },
    {
        "content": "<p>I had this doubt like for the existing script only ran the rtcheck command with these : <br>\n<code> $rtcheck -o $OBJ.$az.$el.plot3 -s $sz -a $az -e $el $DB $obj </code> <br>\nthat means only o,s,a and e are used. So the parsing of args is larger now than I require.</p>",
        "id": 126546484,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526316433
    },
    {
        "content": "<p>The analyse_overlaps takes all the arguments but ged_check() only would use the above mention args only<br>\nwhen I refactor rtcheck then I would require all the parameters.</p>",
        "id": 126546565,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526316564
    },
    {
        "content": "<blockquote>\n<p>yeah it's a good idea but 14 parameters sounded too much that's why I hesitated. Will write code to pass them.</p>\n</blockquote>\n<p>Hmm, interesting.</p>\n<p>These are fore sure analyze_overlaps() parameters:</p>\n<ul>\n<li>Number of grid points in x</li>\n<li>Number of grid points in y</li>\n<li>Mesh size in x</li>\n<li>Mesh size in y</li>\n<li>Only unique overlaps</li>\n</ul>\n<p>These values can or <strong>must</strong> taken from the current view</p>\n<ul>\n<li>Azimuth</li>\n<li>Elevation</li>\n<li>Objects (I'm pretty sure that this is a must)</li>\n</ul>\n<p>Which one have I forgotten?</p>",
        "id": 126546987,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526317172
    },
    {
        "content": "<p>Thinking about this again, I would probably put the azimuth and elevation to the parameter list, the objects have to be selected before the call of analyze_overlaps(). In case of the mged command these objects are simply the currently displayed once. So, it behaves as one would expect it to behave.</p>",
        "id": 126547157,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526317410
    },
    {
        "content": "<blockquote>\n<p>Which one have I forgotten?</p>\n</blockquote>\n<p>square grid size, read from matrix, number of processors, plot file and a few debug flags like librt, rt, NMG</p>",
        "id": 126547273,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526317559
    },
    {
        "content": "<blockquote>\n<p>Thinking about this again, I would probably put the azimuth and elevation to the parameter list, the objects have to be selected before the call of analyze_overlaps(). In case of the mged command these objects are simply the currently displayed once. So, it behaves as one would expect it to behave.</p>\n</blockquote>\n<p>About the objects, I had planned to like give the objects list from GUI.</p>",
        "id": 126547351,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526317636
    },
    {
        "content": "<p>So it would be in argv</p>",
        "id": 126547359,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526317660
    },
    {
        "content": "<ul>\n<li>square grid size: -s is only a way to give the width and hight in one value, or?</li>\n<li>read from matrix: there is no stdin, so, what is it?</li>\n<li>number of processors: okey</li>\n<li>plot file: this is a post processing feature which has to be implemented in the call back.</li>\n<li>a few debug flags like librt, rt, NMG: they had to be set before, no matter of analyze_overlaps()(?)</li>\n</ul>",
        "id": 126547638,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526317957
    },
    {
        "content": "<blockquote>\n<ul>\n<li>square grid size: -s is only a way to give the width and hight in one value, or?</li>\n<li>read from matrix: there is no stdin, so, what is it?</li>\n<li>number of processors: okey</li>\n<li>plot file: this is a post processing feature which has to be implemented in the call back.</li>\n<li>a few debug flags like librt, rt, NMG: they had to be set before, no matter of analyze_overlaps()(?)</li>\n</ul>\n</blockquote>\n<p>square grid size fine<br>\nread from matrix was there in the usage string for rtcheck. This because I had planned to refactor MGED's rtcheck, should I drop that plan ? :D</p>",
        "id": 126547810,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526318203
    },
    {
        "content": "<p>well in MGED we can't give the stdin so that won't be necessary</p>",
        "id": 126547893,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526318297
    },
    {
        "content": "<blockquote>\n<p>About the objects, I had planned to like give the objects list from GUI.</p>\n</blockquote>\n<p>I'm not sure if it's possible to have more than one list of selected objects. If not, the command would change the object selection in mged which is undesirable.</p>",
        "id": 126547996,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526318488
    },
    {
        "content": "<p>However, in any case the objects had to be selected with rt_gettree() first before analyze_overlaps() can be called.</p>",
        "id": 126548070,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526318572
    },
    {
        "content": "<blockquote>\n<p>I'm not sure if it's possible to have more than one list of selected objects. If not, the command would change the object selection in mged which is undesirable.</p>\n</blockquote>\n<p>The existing overlap tool does have a text box to input objects</p>",
        "id": 126548345,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526318972
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/nXkNgK7Yi77TEf8S0Wp_qSfk/Selection_001.png\" target=\"_blank\" title=\"Selection_001.png\">Selection_001.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/nXkNgK7Yi77TEf8S0Wp_qSfk/Selection_001.png\" target=\"_blank\" title=\"Selection_001.png\"><img src=\"/user_uploads/1549/nXkNgK7Yi77TEf8S0Wp_qSfk/Selection_001.png\"></a></div>",
        "id": 126548399,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526319033
    },
    {
        "content": "<p>but this list is filled automatically with displayed objects</p>",
        "id": 126548413,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526319072
    },
    {
        "content": "<p>The matrix (matflag) seems to define the view, similar to azimuth and elevation. Therefore, to allow a matrix description of the view analyze_overlaps() could have a double* parameter which points to the projection matrix. If the user gave azimuth and elevation then the corresponding projection matrix had to be determined first and then handed over to analyze_overlaps().</p>",
        "id": 126548470,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526319133
    },
    {
        "content": "<blockquote>\n<p>The existing overlap tool does have a text box to input objects</p>\n</blockquote>\n<p>Yes but if I understood it correctly this tool calls another program where everything is possible, but if we want to stay in the same process ...</p>",
        "id": 126548558,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526319257
    },
    {
        "content": "<p>However, this doesn't influence the design and behavior of analyze_overlaps().</p>",
        "id": 126548587,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526319317
    },
    {
        "content": "<blockquote>\n<p>However, this doesn't influence the design and behavior of analyze_overlaps().</p>\n</blockquote>\n<p>yep that is true</p>",
        "id": 126548658,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526319376
    },
    {
        "content": "<blockquote>\n<p>The matrix (matflag) seems to define the view, similar to azimuth and elevation. Therefore, to allow a matrix description of the view analyze_overlaps() could have a double* parameter which points to the projection matrix. If the user gave azimuth and elevation then the corresponding projection matrix had to be determined first and then handed over to analyze_overlaps().</p>\n</blockquote>\n<p>This I am not very clear, where does the project matrix creation happen? I didnt't find it in code. Is it do_ae?</p>",
        "id": 126548742,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526319515
    },
    {
        "content": "<blockquote>\n<p>This I am not very clear, where does the project matrix creation happen? I didnt't find it in code. Is it do_ae?</p>\n</blockquote>\n<p>do_ae() does it implicitly by setting a global (sigh) matrix. The matflag stuff is implemented in src/rt/main.c line 469 ff. It reads in commands there which should set the view.</p>\n<p>This needs some considerations: Should analyze_overlaps() use the global view or a view direction from its parameter list?</p>",
        "id": 126549212,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526320125
    },
    {
        "content": "<p>I am not sure about the concept of view. I need to read up on it.</p>",
        "id": 126549600,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526320584
    },
    {
        "content": "<blockquote>\n<p>I am not sure about the concept of view. I need to read up on it.</p>\n</blockquote>\n<p>In principle it's a matrix which transformed the coordinates (they will be multiplied with the matrix). This way e.g. you simply print the x and y coordinates of the result on the screen, the matrix takes care of the rest.</p>",
        "id": 126550844,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526322261
    },
    {
        "content": "<p>Still don't get it :/. How can I use -M ? <br>\nHere is what I know: Using the saveview command I could generate a script that gives the viewsize, orientation, and eyept. That is processed by the rt_read_cmd.</p>",
        "id": 126551185,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526322730
    },
    {
        "content": "<blockquote>\n<p>The matflag stuff is implemented in src/rt/main.c line 469 ff. It reads in commands there which should set the view.</p>\n</blockquote>\n<p>on line 469 it calls the oldway. Is that the function you were talking about</p>",
        "id": 126551212,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526322838
    },
    {
        "content": "<blockquote>\n<p>on line 469 it calls the oldway. Is that the function you were talking about</p>\n</blockquote>\n<p>??? It says \"New way\" at line 473.</p>",
        "id": 126551378,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526323068
    },
    {
        "content": "<p>Okay the newway uses the rt_cmdtab to execute the cm_* functions according to the script right?</p>",
        "id": 126551543,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526323268
    },
    {
        "content": "<p>Right. But if it's old or new, it's simply another way to describe a matrix. (Or, the direction from where you want to shoot the rays.)</p>",
        "id": 126551619,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526323364
    },
    {
        "content": "<p>oh so this matrix is used to define the direction of the ray to be shot using a matix.</p>",
        "id": 126551707,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526323497
    },
    {
        "content": "<p>This matrix is to be created with or without the -M option?</p>",
        "id": 126551731,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526323554
    },
    {
        "content": "<p>Yes, the default is the identity matrix (1s in the diagonal, 0s otherwise).</p>",
        "id": 126551795,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526323614
    },
    {
        "content": "<p>Where is this matrix information stored? model2view view2model?</p>",
        "id": 126551973,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526323790
    },
    {
        "content": "<p>For src/rt: Yes. These two are inverse of each other: model2view = view2model^-1</p>",
        "id": 126552213,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526324076
    },
    {
        "content": "<blockquote>\n<p>This needs some considerations: Should analyze_overlaps() use the global view or a view direction from its parameter list?</p>\n</blockquote>\n<p>Okay back to this then. Since we need the view with/without the -M,  libanalyse would be the place to generate this view in my opinion</p>",
        "id": 126552332,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526324265
    },
    {
        "content": "<blockquote>\n<p>Okay back to this then. Since we need the view with/without the -M,  libanalyse would be the place to generate this view in my opinion</p>\n</blockquote>\n<p>Sounds reasonable :)</p>",
        "id": 126552381,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526324317
    },
    {
        "content": "<p>When writing the libanalyze function. I need to write the parts of main, do and worker of src/rt.</p>",
        "id": 126552505,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526324521
    },
    {
        "content": "<p>but in rt there are a lot of global variables which makes it really easy for it to communicate</p>",
        "id": 126552720,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526324822
    },
    {
        "content": "<p>So when writing the libanalyze function would I use the same concept or like have one single file which does everything</p>",
        "id": 126552893,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526325090
    },
    {
        "content": "<p>I am gonna summarize today's discussion and understand what ged_check should do and pass as parameters to libanalyze.</p>",
        "id": 126553151,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526325478
    },
    {
        "content": "<p>parameters of the libanalyze:</p>\n<ul>\n<li>width &amp; height</li>\n<li>cell width &amp; cell height</li>\n<li>azimuth &amp; elevation</li>\n<li>rpt_overlaps flag</li>\n<li>npsw</li>\n<li>mat flag</li>\n<li>objects : use the rt_gettrees in libged and pass the rtip as a parameter  ? or pass the nobjs and objtab as parameters ?</li>\n<li>callback function pointer</li>\n<li>callback data pointer</li>\n</ul>",
        "id": 126556270,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526329332
    },
    {
        "content": "<p>ged_check:<br>\naccording to what the current script is doing:</p>\n<div class=\"codehilite\"><pre><span></span>for obj in $tops ; do\n    for az in `$loop 0 179 45` ; do\n    for el in `$loop 0 179 45` ; do\n        $rtcheck -o $OBJ.$az.$el.plot3 -s $sz -a $az -e $el $DB $obj 2&gt; $OBJ.$az.$el.rtcheck.log\n</pre></div>\n\n\n<p>ged_check would get the list of objects as argument, using this list for each object it would call libanalyze in an iterative manner with az, el values changing, the other parameters have the default value.<br>\nFor each run, we would get an overlaplist which has to be preserved in an object based list. After each object run, this object list needs to be preserved in a final overlap list.<br>\n<span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> please give feedback like the feasibility on the above mentioned idea or should I think differently.</p>",
        "id": 126556783,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526330008
    },
    {
        "content": "<p>Just a thought, Since I need a UI for it written in Tcl/Tk, I would not be able to call MGED's check command right? Instead I must have an executable version of this command.</p>",
        "id": 126582282,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526374500
    },
    {
        "content": "<blockquote>\n<p>Just a thought, Since I need a UI for it written in Tcl/Tk, I would not be able to call MGED's check command right? Instead I must have an executable version of this command.</p>\n</blockquote>\n<p>Not necessarily. If you have a TCL shell which binds the mged commands you could use a mged check and present its output in a pleasant way.</p>",
        "id": 126601266,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526403772
    },
    {
        "content": "<blockquote>\n<p>but in rt there are a lot of global variables which makes it really easy for it to communicate</p>\n</blockquote>\n<p>You need to get rid of the global variables and transform them to ordinary local ones and function parameters and return values respective.</p>",
        "id": 126601358,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526403902
    },
    {
        "content": "<p>I had started work on design of libanalyze, will post my progress in a few minutes.</p>",
        "id": 126601517,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526404122
    },
    {
        "content": "<blockquote>\n<p>parameters of the libanalyze:<br>\n* width &amp; height<br>\n* cell width &amp; cell height<br>\n* azimuth &amp; elevation<br>\n* rpt_overlaps flag<br>\n* npsw<br>\n* mat flag<br>\n* objects : use the rt_gettrees in libged and pass the rtip as a parameter  ? or pass the nobjs and objtab as parameters ?<br>\n* callback function pointer<br>\n* callback data pointer</p>\n</blockquote>\n<p>Looks good.<br>\nThe \"azimuth &amp; elevation\" and \"mat flag\" are mutual exclusive. Maybe passing the model2view matrix would be the most flexible solution.<br>\nAnd, rtip sounds good.</p>",
        "id": 126601795,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526404540
    },
    {
        "content": "<p>Okay here is my progress: <a href=\"/user_uploads/1549/ZaRMCyYd9hRh55pWEyv7gjXt/15_05_progress.patch\" target=\"_blank\" title=\"15_05_progress.patch\">15_05_progress.patch</a> <br>\nIt's a work in progress so there will some things which I kept like placeholder so that it compiles.</p>",
        "id": 126601925,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526404694
    },
    {
        "content": "<blockquote>\n<p>Looks good.<br>\nThe \"azimuth &amp; elevation\" and \"mat flag\" are mutual exclusive. Maybe passing the model2view matrix would be the most flexible solution.<br>\nAnd, rtip sounds good.</p>\n</blockquote>\n<p>Okay I will add the passing of rtip as well.<br>\nThe matflag is a bit challenging without globals, like adding all those function for rt_cmd_tab, the cm_* ones.<br>\nAlso most of them take argc and argv as parameters so its best be done on the libged side only.</p>",
        "id": 126602110,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526405004
    },
    {
        "content": "<p>Okay there is a problem, the rt_cmdtab structure has the function pointers as : <br>\n<code>int (*ct_func)(const int, const char **);</code><br>\nSo they all need some global variables, if the function definition is fixed how will be able to pass the variables used inside them. :/</p>",
        "id": 126603001,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526406366
    },
    {
        "content": "<p>Don't pass a matflag, azimuth or elevation to analyze_overlaps() but the resulting matrix model2view (I think this is the interesting one). Do the computation of this matrix in the application (in libged ged_check, rt rtcheck, ...).</p>",
        "id": 126603046,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526406479
    },
    {
        "content": "<blockquote>\n<p>Don't pass a matflag, azimuth or elevation to analyze_overlaps() but the resulting matrix model2view (I think this is the interesting one). Do the computation of this matrix in the application (in libged ged_check, rt rtcheck, ...).</p>\n</blockquote>\n<p>yep understood.</p>",
        "id": 126603116,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526406565
    },
    {
        "content": "<p>BTW, I wouldn't include the matflag feature in the libged ged_check(), it looks a little bit artificial, or?</p>",
        "id": 126603451,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526406963
    },
    {
        "content": "<blockquote>\n<p>Okay here is my progress: <a href=\"/user_uploads/1549/ZaRMCyYd9hRh55pWEyv7gjXt/15_05_progress.patch\" target=\"_blank\" title=\"15_05_progress.patch\">15_05_progress.patch</a> <br>\nIt's a work in progress so there will some things which I kept like placeholder so that it compiles.</p>\n</blockquote>\n<p>I'm only a little bit confused by the line</p>\n<div class=\"codehilite\"><pre><span></span>typedef void (*test)(void* callBackData);\n</pre></div>\n\n\n<p>I think you are over the <em>test</em> stage here and can give it a real name ;)</p>",
        "id": 126603482,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526407080
    },
    {
        "content": "<blockquote>\n<p>BTW, I wouldn't include the matflag feature in the libged ged_check(), it looks a little bit artificial, or?</p>\n</blockquote>\n<p>yeah that's what I also thought :D.. for ged_check let's skip the -M option.</p>\n<blockquote>\n<p>I think you are over the <em>test</em> stage here and can give it a real name ;)</p>\n</blockquote>\n<p>Sure :) will make it real.</p>",
        "id": 126603563,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526407165
    },
    {
        "content": "<p>Otherwise it looks good, you are moving into the right direction.</p>",
        "id": 126603565,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526407168
    },
    {
        "content": "<p>Thank you for checking it !</p>",
        "id": 126603643,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526407247
    },
    {
        "content": "<p>How does -V option for aspect work? like we give two values then they are divided? We are essentially just mentioning the width/height ratio right? but I don't see it as mutually exclusive to height and width. What if the user gave two different values?</p>",
        "id": 126603819,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526407462
    },
    {
        "content": "<p>BTW, tomorrow (16th) I will be coding in the morning hours, I need to sleep early for my exam on 17th morning.</p>",
        "id": 126605006,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526408972
    },
    {
        "content": "<blockquote>\n<p>How does -V option for aspect work? like we give two values then they are divided? We are essentially just mentioning the width/height ratio right? but I don't see it as mutually exclusive to height and width. What if the user gave two different values?</p>\n</blockquote>\n<p>See grid_setup() in src/rt/worker.c. And yes, this are only different ways to describe the width and height. It's confusing if they are used together.</p>",
        "id": 126605078,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526409036
    },
    {
        "content": "<p>Good luck for your exam <span class=\"emoji emoji-1f91e\" title=\"hand with index and middle fingers crossed\">:hand_with_index_and_middle_fingers_crossed:</span></p>",
        "id": 126605207,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526409163
    },
    {
        "content": "<blockquote>\n<p>See grid_setup() in src/rt/worker.c. And yes, this are only different ways to describe the width and height. It's confusing if they are used together.</p>\n</blockquote>\n<p>Yeah i have to write that too because it is called by do_frame. So will have a look then.</p>\n<blockquote>\n<p>Good luck for your exam <span class=\"emoji emoji-1f91e\" title=\"hand with index and middle fingers crossed\">:hand_with_index_and_middle_fingers_crossed:</span></p>\n</blockquote>\n<p>Thank you :)</p>",
        "id": 126605334,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526409286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Please have a look and give your feedback, thanks :)<br>\nHere is my progress for today : <a href=\"/user_uploads/1549/TxxtEjMxV29sy7eY0g7Sm4m-/16_05_progress.patch\" target=\"_blank\" title=\"16_05_progress.patch\">16_05_progress.patch</a></p>\n<ul>\n<li>I added <code>do_frame()</code>,  <code>do_run()</code> and <code>grid_setup()</code>. </li>\n<li>I added model2view as a parameter, but with it came aspect and viewsize. (Will think of any ways to avoid the extras)</li>\n<li>To avoid more parameters passed to libanalyze I implemented part of grid_setup in libged and part of it in libanalyze.</li>\n<li>I also added a global variable <code>struct resource resource[]</code> I couldn't avoid that for now :/ (Will try to avoid it)</li>\n<li>For <code>worker()</code> the <code>bu_parallel()</code> had a fixed function pointer but gladly <code>bu_parallel()</code>and <code>worker()</code> had <code>void *args</code> as parameter, so I was thinking to use struct to pass the variables required for worker inside it and pass this context with a void pointer. What do u say?<br>\nFor single cpu mode I would pass it directly in <code>worker()</code> but for parallel case I can pass it in <code>bu_parallel()</code>'s arg</li>\n</ul>",
        "id": 126642081,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526472595
    },
    {
        "content": "<blockquote>\n<p>Just a thought, Since I need a UI for it written in Tcl/Tk, I would not be able to call MGED's check command right? Instead I must have an executable version of this command.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> it's FAR more important to get the logic that is currently in Tcl converted to C/C++ than it is to develop the UI...</p>",
        "id": 126645042,
        "sender_full_name": "Sean",
        "timestamp": 1526477379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I didn't get you, which tcl file? src/tclscripts/checker/check.tcl ?</p>",
        "id": 126645700,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526478260
    },
    {
        "content": "<p>Yes, doing what that command does as clean c/c++ instead of tcl, and by calling functions not programs</p>",
        "id": 126646197,
        "sender_full_name": "Sean",
        "timestamp": 1526478994
    },
    {
        "content": "<p>oh :D was not aware that it was to be done as well.  That would require planning. I will first complete the libanalyze part and read about what the TCL file does. I never discussed it, I thought that I had to just port the shell script to C so it would be platform independent.<br>\nThat means changes to project plan and timeline, I hope that is fine now.</p>",
        "id": 126647085,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526480243
    },
    {
        "content": "<p>Moving the code from the external program (src/rt) to a (core) library (src/libanalyze) is a prerequisite for being able to do the check by calling C/C++ functions (for example analyze_overlaps() from libanalyze) not programs (rtcheck).</p>",
        "id": 126653259,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526488618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> </p>\n<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Please have a look and give your feedback, thanks :)<br>\nHere is my progress for today : <a href=\"/user_uploads/1549/TxxtEjMxV29sy7eY0g7Sm4m-/16_05_progress.patch\" target=\"_blank\" title=\"16_05_progress.patch\">16_05_progress.patch</a></p>\n</blockquote>\n<p>I see that you have improved the API around the <code>analyze_overlaps_callback()</code> function.</p>\n<p>What came into my mind there was that <code>analyze_overlaps_callback()</code> has no <code>callBackData</code> parameter. This is because you use directly the call back function for <code>APP.a_overlap</code>. I think you should however use an adapter function between <code>APP.a_overlap</code> and <code>analyze_overlaps_callback()</code> which \"translates\" the ray-trace result to a more convenient form.</p>\n<blockquote>\n<ul>\n<li>I added <code>do_frame()</code>,  <code>do_run()</code> and <code>grid_setup()</code>. </li>\n<li>I added model2view as a parameter, but with it came aspect and viewsize. (Will think of any ways to avoid the extras)</li>\n<li>To avoid more parameters passed to libanalyze I implemented part of grid_setup in libged and part of it in libanalyze.</li>\n</ul>\n</blockquote>\n<p>This was to be expected. If one extracts a general usable library function from a program the program specific part of the logic stays at the program side.</p>\n<blockquote>\n<ul>\n<li>I also added a global variable <code>struct resource resource[]</code> I couldn't avoid that for now :/ (Will try to avoid it)</li>\n</ul>\n</blockquote>\n<p>I'm not sure if this is possible. I had to look at bu_parallel() and its applications. But, you first ;)</p>\n<blockquote>\n<ul>\n<li>For <code>worker()</code> the <code>bu_parallel()</code> had a fixed function pointer but gladly <code>bu_parallel()</code>and <code>worker()</code> had <code>void *args</code> as parameter, so I was thinking to use struct to pass the variables required for worker inside it and pass this context with a void pointer. What do u say?<br>\nFor single cpu mode I would pass it directly in <code>worker()</code> but for parallel case I can pass it in <code>bu_parallel()</code>'s arg</li>\n</ul>\n</blockquote>\n<p>Yes the <code>void*</code> parameter is for passing parameter(s) to <code>bu_parallel()</code>'s <code>func</code> function pointer parameter. If there is more than one, and especially if they are of different type, a structure should be used.</p>",
        "id": 126656005,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526492397
    },
    {
        "content": "<blockquote>\n<p>I'm not sure if this is possible. I had to look at bu_parallel() and its applications. But, you first ;)</p>\n</blockquote>\n<p>I'm don't think it currently is, at least not for anything that calls dirbuild.  We need to unwind and eliminate each item stored in the resource struct, but each one presents a different challenge.</p>",
        "id": 126678423,
        "sender_full_name": "Sean",
        "timestamp": 1526527716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nWill post my progress in a few minutes</p>",
        "id": 126708136,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526577580
    },
    {
        "content": "<p>Here is it :<br>\n<a href=\"/user_uploads/1549/-UKiHB47l35DZprfZZVPXi3L/17_05_progress.patch\" target=\"_blank\" title=\"17_05_progress.patch\">17_05_progress.patch</a> <br>\nI still have to design the adapter for overlaps. Was having a doubt like if the call reaches the adapter it should have same definition as a_overlap which restricts me to pass the callback function pointer, I could pass the callback data using a_uptr. Maybe I am thinking it at the wrong direction.<br>\nI also tried the command with real life parameters, getting segfault :/ trying to debug it at the moment</p>",
        "id": 126708290,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526577777
    },
    {
        "content": "<p>found out the issue was at rt_gettrees on line 396 in check.c</p>",
        "id": 126708566,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526578122
    },
    {
        "content": "<p>how about</p>\n<div class=\"codehilite\"><pre><span></span>void adapter(struct application* app, const struct partition* part1, const struct bu_ptbl* ptbl, const struct partition* part2) {\n    callback(part1, ptbl, part2, app-&gt;a_uptr);\n}\n</pre></div>",
        "id": 126708653,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526578208
    },
    {
        "content": "<p>BTW, I hope you were successful at your exams.</p>",
        "id": 126708681,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526578268
    },
    {
        "content": "<blockquote>\n<p>found out the issue was at rt_gettrees on line 396 in check.c</p>\n</blockquote>\n<p>humm I think I know why. It's because rt_gettrees expects rtip as a register but I am not passing it as a register</p>",
        "id": 126708800,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526578437
    },
    {
        "content": "<blockquote>\n<p>how about</p>\n</blockquote>\n<p>void adapter(struct application* app, const struct partition* part1, const struct bu_ptbl* ptbl, const struct partition* part2) {<br>\n    callback(part1, ptbl, part2, app-&gt;a_uptr);<br>\n}</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>\n\n\n<p>not sure if I follow. Oh do u mean like writing the adapter function in ged_check and passing a function pointer to adapter instead of the add_overlaps right now. That should work</p>",
        "id": 126708982,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526578631
    },
    {
        "content": "<blockquote>\n<p>Oh do u mean like writing the adapter function in ged_check and passing a function pointer to adapter instead of the add_overlaps right now. That should work</p>\n</blockquote>\n<p>No, the adapter is in libanalyze and will be called transparently (invisible for the user like ged_check()).</p>",
        "id": 126709063,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526578714
    },
    {
        "content": "<blockquote>\n<p>BTW, I hope you were successful at your exams.</p>\n</blockquote>\n<p>well I do not get the results right away :D, Have to wait 2 months for the evaluation. Other than that it was fine..</p>",
        "id": 126709083,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526578744
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Oh do u mean like writing the adapter function in ged_check and passing a function pointer to adapter instead of the add_overlaps right now. That should work</p>\n</blockquote>\n<p>No, the adapter is in libanalyze and will be called transparently (invisible for the user like ged_check()).</p>\n</blockquote>\n<p>then how will it know about the definition of callback ?</p>",
        "id": 126709110,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526578783
    },
    {
        "content": "<p>check.c is passing the function pointer to <code>callback</code> to analyze_overlaps, so only analyze_overlaps knows about <code>callback</code> right?</p>",
        "id": 126709221,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526578891
    },
    {
        "content": "<blockquote>\n<p>then how will it know about the definition of callback ?</p>\n</blockquote>\n<p>Good point!</p>\n<div class=\"codehilite\"><pre><span></span>struct analyze_private_callback_data {\n    analyze_overlaps_callback overlapHandler;\n    void*                     overlapHandlerData; // the callBackData\n};\n\nvoid adapter(struct application* app, const struct partition* part1, const struct bu_ptbl* ptbl, const struct partition* part2) {\n    struct analyze_private_callback_data* callBack = (struct analyze_private_callback_data*) app-&gt;a_uptr;\n    callBack-&gt;overlapHandler(part1, ptbl, part2, callBack-&gt;overlapHandlerData);\n}\n</pre></div>",
        "id": 126709389,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526579063
    },
    {
        "content": "<p>yep this will work :D but it would make passing the function pointer as an explicit parameter to analyze_overlaps redundant as it is already being passed through the callback data</p>",
        "id": 126709540,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526579236
    },
    {
        "content": "<p>why did u add private in its name?</p>",
        "id": 126709553,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526579271
    },
    {
        "content": "<blockquote>\n<p>yep this will work :D but it would make passing the function pointer as an explicit parameter to analyze_overlaps redundant as it is already being passed through the callback data</p>\n</blockquote>\n<p>That's why I called the structure <code>analyze_private_~</code>, it's only visible (and created) in libanalyze.</p>",
        "id": 126709618,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526579327
    },
    {
        "content": "<p>oh I get it now. Thanks :) that helped</p>",
        "id": 126709730,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526579420
    },
    {
        "content": "<p>like</p>\n<div class=\"codehilite\"><pre><span></span>void analyze_overlaps() {\n    struct analyze_private_callback_data callBack;\n    callBack.overlapHandler = add_overlaps;\n    callback.overlapHandlerData = callbackdata;\n    APP.a_uptr = &amp;callBack;\n}\n</pre></div>",
        "id": 126709768,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526579472
    },
    {
        "content": "<p>yep exactly... took a few mins to click inside my head :D</p>",
        "id": 126709834,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526579522
    },
    {
        "content": "<p>gonna implement it now</p>",
        "id": 126709885,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526579587
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>found out the issue was at rt_gettrees on line 396 in check.c</p>\n</blockquote>\n<p>humm I think I know why. It's because rt_gettrees expects rtip as a register but I am not passing it as a register</p>\n</blockquote>\n<p>? Where is it mentioned as <code>register</code>? And even <code>register</code> is only a hint for the compiler.</p>\n<p>The <code>objtab</code> is more suspicious. With casting it you remove the possibility for the compiler to check it.</p>",
        "id": 126710221,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526579926
    },
    {
        "content": "<p>Why don't you use <code>const char *objtab[];</code>?</p>",
        "id": 126710261,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526579970
    },
    {
        "content": "<p>And <code>objtab = argv + (bu_optind+1);</code>? (Only an idea, untested.)</p>",
        "id": 126710375,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526580077
    },
    {
        "content": "<blockquote>\n<p>? Where is it mentioned as <code>register</code>? And even <code>register</code> is only a hint for the compiler.</p>\n</blockquote>\n<p>In rt/main.c it called <code>def_tree(rtip)</code> looking at the definition in rt/do.c line 495, I saw it had rtip as register that is why I got that doubt.</p>\n<blockquote>\n<p>Why don't you use <code>const char *objtab[];</code>?</p>\n</blockquote>\n<p>Will see thanks</p>",
        "id": 126710458,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526580187
    },
    {
        "content": "<p>And <code>bu_optind</code> is always 1 despite what happens in the while loop.</p>",
        "id": 126710584,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526580346
    },
    {
        "content": "<blockquote>\n<p>And <code>bu_optind</code> is always 1 despite what happens in the while loop.</p>\n</blockquote>\n<p>I checked with a print statment giving -a10 -e10 it printed 3. So this is not true.</p>",
        "id": 126711121,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526581005
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>And <code>bu_optind</code> is always 1 despite what happens in the while loop.</p>\n</blockquote>\n<p>I checked with a print statment giving -a10 -e10 it printed 3. So this is not true.</p>\n</blockquote>\n<p>OK, I see. Or, I couldn't see it because it's a global variable.</p>",
        "id": 126711326,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526581301
    },
    {
        "content": "<p>yep defined in <code>bu/getopt.h</code></p>",
        "id": 126711453,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526581447
    },
    {
        "content": "<p>I am trying to figure out how to use objtab. The suggested method did not work because const char * objtab[] cannot be declared without a size.</p>",
        "id": 126711581,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526581642
    },
    {
        "content": "<blockquote>\n<p>I checked with a print statment giving -a10 -e10 it printed 3. So this is not true.</p>\n</blockquote>\n<p>Hmm, if it's 3, in this case is the <code>bu_optind + 1</code> okay? I mean, if there is no additional parameter, then <code>objtab = argv + 2;</code> but shouldn't it be \"+1\"?</p>",
        "id": 126711586,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526581647
    },
    {
        "content": "<p>I added this statement for checking.</p>\n<div class=\"codehilite\"><pre><span></span>    for (i=bu_optind;i&lt;argc;i++){\n    bu_vls_printf(gedp-&gt;ged_result_str, &quot; %s&quot;, argv[i]);\n    }\n    bu_vls_printf(gedp-&gt;ged_result_str, &quot;\\nargc: %d,bu_optind: %d&quot;,argc,bu_optind);\n    return GED_OK;\n</pre></div>\n\n\n<p>Output was :</p>\n<div class=\"codehilite\"><pre><span></span>mged&gt;check -a10 -e10 abc abcd\n abc abcd\nargc: 5, bu_optind:3\n</pre></div>",
        "id": 126711922,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526582109
    },
    {
        "content": "<blockquote>\n<p>Hmm, if it's 3, in this case is the <code>bu_optind + 1</code> okay? I mean, if there is no additional parameter, then <code>objtab = argv + 2;</code> but shouldn't it be \"+1\"?</p>\n</blockquote>\n<p>you are right but this was for rtcheck so it expects the argv at bu_optind is always the titlefile and following that is the objects.</p>",
        "id": 126712127,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526582373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nI found the problem, it wasn't the objtab.<br>\nIn original rt/main.c, <code>rt_gettrees()</code> is called only after resource is init but I had moved resource to libanalyze so that wasn't possible. I added that initialize statements in check.c. That fixed it. But I cannot pass this resource instance to the libanalyze.<br>\nIf I do <code>rt_gettrees()</code> inside libanaylze then there is issue of <code>do_ae()</code> running before <code>rt_gettrees()</code>. If I wanted to move <code>do_ae()</code> and <code>rt_gettrees</code> to libanalyze that means more arguments(nobjs, objtab, azimuth, elevation) to be passed to libanalyze :/.</p>\n<p>To test it out I moved the functions to libanalyze: <a href=\"/user_uploads/1549/9oCGWWjwc0HMp5abwfUoLovj/18_05_progress.patch\" target=\"_blank\" title=\"18_05_progress.patch\">18_05_progress.patch</a><br>\nBut still it won't work. Crashes after calling <code>rt_shootray(&amp;a)</code>. Trying to find out why.</p>",
        "id": 126757392,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526660292
    },
    {
        "content": "<p>Hmm, how about <code>rtip = rt_new_rti(gedp-&gt;ged_wdbp-&gt;dbip);</code> in <code>ged_check()</code>?</p>",
        "id": 126758705,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526662229
    },
    {
        "content": "<p>interesting, lemme try that out.</p>",
        "id": 126758775,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526662370
    },
    {
        "content": "<p>getting the crash after this in gdb:</p>\n<div class=\"codehilite\"><pre><span></span>655     RT_AP_CHECK(ap);\n(gdb) n\n\nThread 8 &quot;mged&quot; received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7fffda7f8700 (LWP 5821)]\n0x00007fffe460caaf in Tk_FreeGC ()\n   from /home/sharan/brlcad/build/lib/libtk.so.8.5\n</pre></div>",
        "id": 126758911,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526662572
    },
    {
        "content": "<p>I took this from voxelize.c It uses ray-trace as well.</p>",
        "id": 126758917,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526662587
    },
    {
        "content": "<p>yep I saw it in gqa.c as well</p>",
        "id": 126758924,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526662607
    },
    {
        "content": "<p>The <code>rt_gettrees()</code> in <code>analyze_overlaps()</code> maybe to much. It's supposed that they are already selected before calling <code>analyze_overlaps()</code>.</p>",
        "id": 126759112,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526662826
    },
    {
        "content": "<p>And, in case of using the <code>rt_i</code> with the data provided by mged the visible/edited objects should be already selected there.</p>",
        "id": 126759189,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526662945
    },
    {
        "content": "<p>yeah that is right</p>",
        "id": 126759215,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526663020
    },
    {
        "content": "<p>i saw this right now in gdb:</p>\n<div class=\"codehilite\"><pre><span></span>Thread 10 &quot;mged&quot; received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7fffdbbfa700 (LWP 5861)]\n0x00007ffff782a3ab in hit (ap=0x7fffdbbf9cf0, PartHeadp=0x7fffdbbf9600,\n    segs=0x7fffdbbf9880) at /home/sharan/brlcad/src/libged/gqa.c:1258\n1258        ((struct per_region_data *)pp-&gt;pt_regionp-&gt;reg_udata)-&gt;hits++;\n</pre></div>\n\n\n<p>not sure why the program would go to gqa's hit</p>",
        "id": 126759296,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526663098
    },
    {
        "content": "<p>That's a principle of <code>analyze_overlaps()</code>: <code>rt_i</code> already has the objects of interested selected.<br>\nWhen calling <code>analyze_overlaps()</code> from libged it's the case with <code>rtip = rt_new_rti(gedp-&gt;ged_wdbp-&gt;dbip);</code>. In case of calling it from rtcheck you have to call <code>rt_gettree()</code> first.</p>",
        "id": 126759377,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526663195
    },
    {
        "content": "<blockquote>\n<p>That's a principle of <code>analyze_overlaps()</code>: <code>rt_i</code> already has the objects of interested selected.<br>\nWhen calling <code>analyze_overlaps()</code> from libged it's the case with <code>rtip = rt_new_rti(gedp-&gt;ged_wdbp-&gt;dbip);</code>. In case of calling it from rtcheck you have to call <code>rt_gettree()</code> first.</p>\n</blockquote>\n<p>yeah understood!</p>",
        "id": 126759633,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526663605
    },
    {
        "content": "<p>will revert back to 17_05 and try that</p>",
        "id": 126759690,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526663665
    },
    {
        "content": "<blockquote>\n<p>i saw this right now in gdb:<br>\n...<br>\nnot sure why the program would go to gqa's hit</p>\n</blockquote>\n<p>After calling the <code>check</code> command? Beats me, I'll let you try to find the reason by yourself first. At the weekend I would be able to run it in a debugger then.</p>",
        "id": 126759778,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526663835
    },
    {
        "content": "<p>okay got it :)</p>",
        "id": 126759844,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526663932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nI added the line, <code> rtip = rt_new_rti(gedp-&gt;ged_wdbp-&gt;dbip);</code> But I still have t o call rt_getree after that right? if I don't do_ae says i have no primitives active.<br>\nBut if I add rt_getree the same error happens as before. Am I missing something?</p>",
        "id": 126761129,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526665593
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nI added the line, <code> rtip = rt_new_rti(gedp-&gt;ged_wdbp-&gt;dbip);</code> But I still have t o call rt_getree after that right? if I don't do_ae says i have no primitives active.<br>\nBut if I add rt_getree the same error happens as before. Am I missing something?</p>\n</blockquote>\n<p>No, you shouldn't have to call <code>rt_getree()</code>, but have to select objects in mged first before you call <code>check</code>.</p>",
        "id": 126761322,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526665812
    },
    {
        "content": "<p>yep I did, with draw command</p>",
        "id": 126761350,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526665878
    },
    {
        "content": "<p>If this won't work I need to have a deeper look at it. Maybe you can upload a patch file again if you are done for today.</p>",
        "id": 126761465,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526666036
    },
    {
        "content": "<p><code>rt_new_rti</code> doesn't do anything to <code>rtip-&gt;nsolids</code></p>",
        "id": 126761508,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526666047
    },
    {
        "content": "<p>Maybe it isn't necessary. <code>voxelize</code> works this way.</p>",
        "id": 126761520,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526666091
    },
    {
        "content": "<p>hmm but voxelize does call rt_gettree at line 190</p>",
        "id": 126761540,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526666137
    },
    {
        "content": "<p>Ups, indeed, must have overseen this...</p>",
        "id": 126761658,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526666303
    },
    {
        "content": "<p>that leaves us with one option to send resource[] to libanalyze. (is this possible?)</p>",
        "id": 126761830,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526666542
    },
    {
        "content": "<p>Isn't resource already in libanalyze? At least in your code?<br>\nBTW, I don't know if it's a good idea to give a variable the same name as its type.</p>",
        "id": 126762820,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526668012
    },
    {
        "content": "<blockquote>\n<p>Isn't resource already in libanalyze? At least in your quote?</p>\n</blockquote>\n<p>To run rt_gettrees I need to prepare the resources before calling it.</p>\n<blockquote>\n<p>BTW, I don't know if it's a good idea to give a variable the same name as its type.</p>\n</blockquote>\n<p>Oh yeah I will correct that</p>",
        "id": 126762904,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526668101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nsuccess! with 18_05_progress I changed the names of hit and miss functions to check_hit and check_miss. I think it was apparently calling gqa's hit and miss :O. The output printed the count of overlaps as expected :)<br>\nNow just need to figure out how to call rt_gettrees without moving everything to libanalyze.</p>",
        "id": 126764254,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526669991
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/1AyuKwMSPwsZ-d0p4cDb5QI1/Selection_003.png\" target=\"_blank\" title=\"Selection_003.png\">Selection_003.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/1AyuKwMSPwsZ-d0p4cDb5QI1/Selection_003.png\" target=\"_blank\" title=\"Selection_003.png\"><img src=\"/user_uploads/1549/1AyuKwMSPwsZ-d0p4cDb5QI1/Selection_003.png\"></a></div>",
        "id": 126765179,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526671355
    },
    {
        "content": "<blockquote>\n<p>i saw this right now in gdb: ...<br>\nnot sure why the program would go to gqa's hit</p>\n</blockquote>\n<p>This looks a bit to me like a resource was not initialized</p>",
        "id": 126781973,
        "sender_full_name": "Sean",
        "timestamp": 1526702365
    },
    {
        "content": "<p>awesome <span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> .. looks like great progress!  don't be shy about suggesting changes to libanalyze, thinking about how it can/should be developed to do what you need it to do.</p>",
        "id": 126782025,
        "sender_full_name": "Sean",
        "timestamp": 1526702479
    },
    {
        "content": "<blockquote>\n<p>success! with 18_05_progress I changed the names of hit and miss functions to check_hit and check_miss. I think it was apparently calling gqa's hit and miss :O. The output printed the count of overlaps as expected :)<br>\nNow just need to figure out how to call rt_gettrees without moving everything to libanalyze.</p>\n</blockquote>\n<p><em>hit</em> and <em>miss</em> are very general function names which are very likely to be used somewhere else as well. You should work around this kind of issues in your code:</p>\n<ul>\n<li>Don't use function and global variable names which could conflict with others. For example <em>do_run</em>, <em>do_ae</em>, etc. conflict with functions in src/rt. A solution could be a library, module, or file specific prefix like <em>analyze_overlaps_</em> or <em>analov_</em> or something like this.</li>\n<li>In addition, these functions should be marked for the compiler as local ones, only used in the actual source file. Then, they won't be exported and can't be used elsewhere. In BRL-CAD code this should be done with the <em>HIDDEN</em> define.</li>\n</ul>",
        "id": 126795624,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526735491
    },
    {
        "content": "<blockquote>\n<p><em>hit</em> and <em>miss</em> are very general function names which are very likely to be used somewhere else as well. You should work around this kind of issues in your code:<br>\n* Don't use function and global variable names which could conflict with others. For example <em>do_run</em>, <em>do_ae</em>, etc. conflict with functions in src/rt. A solution could be a library, module, or file specific prefix like <em>analyze_overlaps_</em> or <em>analov_</em> or something like this.<br>\n* In addition, these functions should be marked for the compiler as local ones, only used in the actual source file. Then, they won't be exported and can't be used elsewhere. In BRL-CAD code this should be done with the <em>HIDDEN</em> define.</p>\n</blockquote>\n<p>Yes! thanks for the heads up. Will do.</p>",
        "id": 126796235,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526736845
    },
    {
        "content": "<p>Hmm, with <em>18_05_progress.patch</em> and the <em>hit</em> and <em>miss</em> function names changed I don't get overlaps:</p>\n<div class=\"codehilite\"><pre><span></span>mged&gt; check -g10 -G10 truck.g g4\n truck.g g4\nargc: 5,bu_optind: 3\n g4\nNumber of Overlaps: 0\nAzimuth: 35.000000, elevation: 25.000000\n</pre></div>\n\n\n<p>Maybe you changed something else too?</p>",
        "id": 126797930,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526741032
    },
    {
        "content": "<p>oh.. I only remember adding rt_prep_parallel without which i got a few warnings. But without it too I had got output.<br>\nAnyway I will send the latest one with name changes we discussed.</p>",
        "id": 126798064,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526741318
    },
    {
        "content": "<p>creating patch.. I wonder why it takes so much time</p>",
        "id": 126798427,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526742188
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/U4hEr_wQl8hL1lYXN-EiU30P/19_05_progress.patch\" target=\"_blank\" title=\"19_05_progress.patch\">19_05_progress.patch</a></p>",
        "id": 126798487,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526742336
    },
    {
        "content": "<p>Add changes to use <code>rtip = rt_new_rti(gedp-&gt;ged_wdbp-&gt;dbip);</code> Now no need to mention file location. And objects count are without +1</p>",
        "id": 126799031,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526743582
    },
    {
        "content": "<p>Now it works :)<br>\nI'll look tomorrow in the resource vs. gettree issue then.</p>",
        "id": 126799183,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526743989
    },
    {
        "content": "<p>Okay thank you :)<br>\nI am thinking to now add code to populate the list.</p>",
        "id": 126799223,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526744065
    },
    {
        "content": "<p>Hmm, I couldn't find any issue: <a href=\"/user_uploads/1549/XOKbcfsEEZNAC0Fw9ig89z1f/analyze.h\" target=\"_blank\" title=\"analyze.h\">analyze.h</a> , <a href=\"/user_uploads/1549/ygISoeZap5d1AnVXJ2vZEkNo/check_overlaps.c\" target=\"_blank\" title=\"check_overlaps.c\">check_overlaps.c</a> , <a href=\"/user_uploads/1549/qwuZTWvVuM3m9jXw8F5mfBZN/check.c\" target=\"_blank\" title=\"check.c\">check.c</a></p>",
        "id": 126831034,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526820222
    },
    {
        "content": "<p>Yeah in the 19/05 one, I have done rt_gettrees in libanalyze which you had said is not okay.</p>",
        "id": 126832500,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526823439
    },
    {
        "content": "<p>BTW, I was trying to get the overlap pairs to print in <code>ged_check()</code>. I could't figure out why the output was all random.<br>\n<a href=\"/user_uploads/1549/nSwR7uPAI367qbjsdNPNDR_K/Selection_004.png\" target=\"_blank\" title=\"Selection_004.png\">pairs.png</a> <br>\nHere is the patch : <a href=\"/user_uploads/1549/f8O7dnDzQgO9PfmKYIQ9AhFs/20_05.patch\" target=\"_blank\" title=\"20_05.patch\">20_05.patch</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/nSwR7uPAI367qbjsdNPNDR_K/Selection_004.png\" target=\"_blank\" title=\"pairs.png\"><img src=\"/user_uploads/1549/nSwR7uPAI367qbjsdNPNDR_K/Selection_004.png\"></a></div>",
        "id": 126833092,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526824881
    },
    {
        "content": "<p>According to gdb:<br>\n<code>add_overlaps (reg1=0x7fffd0000e30 \"/g4/r25\", reg2=0x7fffd0000d50 \"/g4/r12\", depth=0.39530180591737007, context=0x7fffffffc650)</code><br>\nIt's getting the expected names.</p>",
        "id": 126833192,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526825081
    },
    {
        "content": "<blockquote>\n<p>BTW, I was trying to get the overlap pairs to print in <code>ged_check()</code>. I could't figure out why the output was all random.</p>\n</blockquote>\n<p>When <em>add_overlaps()</em> was called there was a string at the address but when <em>bu_vls_printf()</em> is called the string is gone (overwritten with something else). You need to make copies of the strings which you own, e.g. with <code>bu_strlcpy()</code> (it's a macro which calls <em>bu_strlcpym()</em>).<br>\nDon't forget to free the memory before leaving <em>ged_check()</em>, e.g. right after printing the names.</p>",
        "id": 126834894,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526829227
    },
    {
        "content": "<p>yep, I was trying that but with strcpy. Will use bu_strlcpy(). Thanks for the tip. :)</p>",
        "id": 126835403,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526830234
    },
    {
        "content": "<p>Okay got it working. Initially MGED got stuck, but after going through the definition of <code>bu_strlcpym()</code> saw the usage of <code>bu_semaphore_acquire(BU_SEM_SYSCALL)</code> and release, but I had acquired this semaphore in <code>add_overlaps()</code>.<br>\nAfter removing them in <code>add_overlaps</code> it was fine.</p>",
        "id": 126839034,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526838472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> ,<br>\nI was planning to start with gqa today, so reading libged/gqa.c now. I needed feedback on how it should be implemented in libanalyze.<br>\nIf I use an adapter like I did for rtcheck I could use the add_overlaps in libged/check.c. And make a new libanalyze c file that does the functions of gqa.</p>",
        "id": 126860944,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526887857
    },
    {
        "content": "<blockquote>\n<p>If I use an adapter like I did for rtcheck I could use the add_overlaps in libged/check.c. And make a new libanalyze c file that does the functions of gqa.</p>\n</blockquote>\n<p>Which functions?</p>",
        "id": 126867186,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526900382
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  saying to \"add parallel capabilities of gqa into the libanalyze function\", back in the application period.</p>\n<blockquote>\n<p>a plan would probably be something like refactoring rtcheck into a libanalyze function, then refactoring rtcheck to use the new function, then adding the parallel capabilities of gqa into the libanalyze function, then refactoring gqa to use it, then adding your new command in libged that also uses that function (doing the work of both rtcheck and gqa)</p>\n</blockquote>\n<p>I did not understand it back then. After going through the code of gqa seems like it shoots rays in 3 axises.<br>\nIt's very complex and does many analysis functions, I only would be requiring the overlap part for this project.</p>",
        "id": 126872907,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526910350
    },
    {
        "content": "<p>So that I would get the overlap list just like what we did for rtcheck, but we also had the goal of making it free from the executable form.<br>\nBut gqa is already in form of MGED command.</p>",
        "id": 126873036,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526910496
    },
    {
        "content": "<p>gqa puts a lot more functionality into the ray-trace. A single <em>analyze_overlaps()</em> isn't probable suited to be used there.<br>\nAnother way would be to have a generalized frame work for shooting grids of rays and doing analysis with them.</p>\n<p>And, <em>analyze_overlaps()</em> has already parallel capabilities.</p>\n<p>I would recommend that you start to prepare a patch with your current work which can be applied to BRL-CAD's svn repository. You can use ttps://sourceforge.net/p/brlcad/patches for this.</p>",
        "id": 126881259,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526921928
    },
    {
        "content": "<blockquote>\n<p>gqa puts a lot more functionality into the ray-trace. A single <em>analyze_overlaps()</em> isn't probable suited to be used there.<br>\nAnother way would be to have a generalized frame work for shooting grids of rays and doing analysis with them.</p>\n</blockquote>\n<p>hmm, so how to proceed with the framework? any examples I can read :D?</p>\n<blockquote>\n<p>And, <em>analyze_overlaps()</em> has already parallel capabilities.</p>\n</blockquote>\n<p>Yeah, the parallel execution using threads right?</p>\n<blockquote>\n<p>I would recommend that you start to prepare a patch with your current work which can be applied to BRL-CAD's svn repository. You can use <a href=\"https://sourceforge.net/p/brlcad/patches\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/patches\">https://sourceforge.net/p/brlcad/patches</a> for this.</p>\n</blockquote>\n<p>Okay will do it tonight! Anything I should keep in mind before submission? I had been cleaning up the code and adjusting indentation.</p>",
        "id": 126881603,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526922373
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>gqa puts a lot more functionality into the ray-trace. A single <em>analyze_overlaps()</em> isn't probable suited to be used there.<br>\nAnother way would be to have a generalized frame work for shooting grids of rays and doing analysis with them.</p>\n</blockquote>\n<p>hmm, so how to proceed with the framework? any examples I can read :D?</p>\n</blockquote>\n<p>This would mean to analyze both <em>analyze_overlaps()</em> and <em>ged_gqa()</em> for common functionalities and putting them into a common function.</p>\n<blockquote>\n<blockquote>\n<p>And, <em>analyze_overlaps()</em> has already parallel capabilities.</p>\n</blockquote>\n<p>Yeah, the parallel execution using threads right?</p>\n</blockquote>\n<p>Right.</p>\n<blockquote>\n<blockquote>\n<p>I would recommend that you start to prepare a patch with your current work which can be applied to BRL-CAD's svn repository. You can use <a href=\"https://sourceforge.net/p/brlcad/patches\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/patches\">https://sourceforge.net/p/brlcad/patches</a> for this.</p>\n</blockquote>\n<p>Okay will do it tonight! Anything I should keep in mind before submission? I had been cleaning up the code and adjusting indentation.</p>\n</blockquote>\n<p>I saw several issues with your code but I'll judge after you have reviewed it by yourself. None of them was serious.</p>",
        "id": 126882037,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526923061
    },
    {
        "content": "<p>Okay got it, thanks. I will try to find the common functionalities between them and the review the code to submit the patch.</p>",
        "id": 126882318,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526923452
    },
    {
        "content": "<p>These are the similarities I found , they both do :</p>\n<ul>\n<li>Initialize all the per-CPU memory resources. <code>rt_init_resource</code></li>\n<li>Walk trees. <code>rt_gettree</code></li>\n<li>Pre-computation of some values, sets up space partitioning, etc. <code>rt_prep_parallel</code></li>\n<li>Initialization of application instance. <code>RT_APPLICATION_INIT(&amp;ap);</code> and many others like <code>ap.a_overlap = overlap</code><ul>\n<li>But in gqa it happens inside worker function. Called in a rotation manner: xyz, yzx, zyx. depending on the number of views.</li>\n</ul>\n</li>\n<li>Overlap function is very similar.</li>\n</ul>\n<p>From this, the similarity of the overlap function seems the most useful.</p>",
        "id": 126925312,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1526998665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nRead you comments on the patch. About the object selection. Do you mean the active objects? or the rt_gettrees?</p>",
        "id": 126935761,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527011829
    },
    {
        "content": "<p>Exactly, something like</p>\n<div class=\"codehilite\"><pre><span></span>    while (argc &gt; 0) {\n        if (rt_gettree(rtip,argv[0]) &lt; 0) {\n            bu_vls_printf(gedp-&gt;ged_result_str, &quot;error: object &#39;%s&#39; does not exists, aborting\\n&quot;, argv[1]);\n            return GED_ERROR;\n        }\n\n        argc--;\n        argv++;\n    }\n</pre></div>",
        "id": 126936979,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527013211
    },
    {
        "content": "<p>Okay thanks for the input, If rt_gettree can be run without the initialization of resource, then it would work!<br>\nThat's why I had thought it was impossible with rt_gettrees.<br>\nWill do the requested changes and submit a new one :). Currently going through <code>rt_default_multioverlap()</code>.</p>",
        "id": 126937076,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527013436
    },
    {
        "content": "<p>wow that worked :) now I have reverted to an old progress, hence I would be able to do do_ae and grid_setup in libged it self :D</p>",
        "id": 126939828,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527017065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> please have a look at the v2 patch I had submitted yesterday</p>",
        "id": 126988323,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527098337
    },
    {
        "content": "<p>Don't worry ;)</p>",
        "id": 126988587,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527098567
    },
    {
        "content": "<p>BTW, why don't you use a_logoverlap?</p>",
        "id": 126988756,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527098734
    },
    {
        "content": "<p>hmm well since I was basically taking code from src/rt/. In viewcheck.c under view_init, logoverlap was set to rt_silent_logoverlap. That is why I did it that way</p>",
        "id": 126988919,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527098947
    },
    {
        "content": "<p>Do you plan to extend the mged check command with additional features?</p>",
        "id": 126988923,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527098956
    },
    {
        "content": "<p>I was planning to include the functionality of outputting plot file</p>",
        "id": 126989046,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527099103
    },
    {
        "content": "<blockquote>\n<p>hmm well since I was basically taking code from src/rt/. In viewcheck.c under view_init, logoverlap was set to rt_silent_logoverlap. That is why I did it that way</p>\n</blockquote>\n<p>Do you know what <em>rt_silent_logoverlap</em> does? It's defined in src/librt/bool.c. Well, nothing you have to worry about.</p>",
        "id": 126989097,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527099138
    },
    {
        "content": "<blockquote>\n<p>Do you know what <em>rt_silent_logoverlap</em> does? It's defined in src/librt/bool.c. Well, nothing you have to worry about.</p>\n</blockquote>\n<p>does nothing, just checks the magic number? for validity I think and returns. <br>\nwhere as rt_default_logoverlap prints lot of debug info to the user.</p>",
        "id": 126989203,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527099332
    },
    {
        "content": "<blockquote>\n<p>I was planning to include the functionality of outputting plot file</p>\n</blockquote>\n<p>I mean, <code>check</code> is a very general command. If you want to check for overlaps there only, <em>check_overlaps</em> or similar would be more suitable.</p>",
        "id": 126989206,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527099339
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Do you know what <em>rt_silent_logoverlap</em> does? It's defined in src/librt/bool.c. Well, nothing you have to worry about.</p>\n</blockquote>\n<p>does nothing, just checks the magic number? for validity I think and returns. <br>\nwhere as rt_default_logoverlap prints lot of debug info to the user.</p>\n</blockquote>\n<p>For me it looks like for any reason <em>a_logoverlap</em> shouldn't stay empty. That's why there is the <em>rt_silent_logoverlap()</em>. If you have a better entry, like <em>overlapsAdapter()</em>, you can use it in <em>a_logoverlap</em>.</p>",
        "id": 126989376,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527099591
    },
    {
        "content": "<blockquote>\n<p>I mean, <code>check</code> is a very general command. If you want to check for overlaps there only, <em>check_overlaps</em> or similar would be more suitable.</p>\n</blockquote>\n<p>Yeah true, initially I started writing that just to test the working of the libanalyze function.<br>\nI am still unclear about what I would be doing at the end. <br>\nInitially I had thought my task was to implement the functions the src/tclscripts/check.sh does because it was limited to linux and did lots of text processing.<br>\nAfter discussing with Sean, he said text processing must be removed. Hence the libanalyze function was the plan.<br>\nAccording to this I had planned that check command would take the objects as arguments and called libanalyze function to get the overlap lists in memory and did post processing similar to the shell script and hand it over to the check.tcl file.</p>\n<p>But a few days ago I was told that I had to implement the check.tcl file in C aswell. So I believe now I can call libanalyze from that C file itself, so there would be no need of check command.</p>",
        "id": 126989612,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527099892
    },
    {
        "content": "<blockquote>\n<p>For me it looks like for any reason <em>a_logoverlap</em> shouldn't stay empty. That's why there is the <em>rt_silent_logoverlap()</em>. If you have a better entry, like <em>overlapsAdapter()</em>, you can use it in <em>a_logoverlap</em>.</p>\n</blockquote>\n<p>Yeah if a_logoverlap is not set, there is seg-fault. Yep I could add something for a_logoverlap similar to overlapsAdapter, to do logging. Is this where the -r option helps? I am confused because -r option does not have an affect for rtcheck.</p>",
        "id": 126990011,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527100491
    },
    {
        "content": "<blockquote>\n<p>But a few days ago I was told that I had to implement the check.tcl file in C aswell. So I believe now I can call libanalyze from that C file itself, so there would be no need of check command.</p>\n</blockquote>\n<p>At least not in src/tclscripts, but as a ged command you wrote a nice function. I don't want to do without it. When it has a more precise name ...</p>",
        "id": 126990364,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527100972
    },
    {
        "content": "<p>yeah well then check_overlaps sounds good for the name</p>",
        "id": 126990459,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527101153
    },
    {
        "content": "<p>I was thinking it could replace rtcheck command as well. Since it does almost everything what rtcheck does. But better because it's not calling exec_vp</p>",
        "id": 126990542,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527101274
    },
    {
        "content": "<blockquote>\n<p>Yeah if a_logoverlap is not set, there is seg-fault. Yep I could add something for a_logoverlap similar to overlapsAdapter, to do logging. Is this where the -r option helps? I am confused because -r option does not have an affect for rtcheck.</p>\n</blockquote>\n<p>First, I would say <code>a_logoverlap = overlapsAdapter</code>, or?<br>\nLooking at src/rt/opt.c you see that <em>-r</em> is the default. <em>-R</em> switches it off.</p>",
        "id": 126990611,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527101389
    },
    {
        "content": "<blockquote>\n<p>Looking at src/rt/opt.c you see that <em>-r</em> is the default. <em>-R</em> switches it off.</p>\n</blockquote>\n<p>Yeah but look at the view_init in viewcheck.c. It does not consider any options.</p>",
        "id": 126990754,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527101551
    },
    {
        "content": "<blockquote>\n<p>I was thinking it could replace rtcheck command as well. Since it does almost everything what rtcheck does. But better because it's not calling exec_vp</p>\n</blockquote>\n<p>Definitely! This is why you are doing this, moving the functionality to a central place at libanalyze where every module should use it.<br>\nIt's the next step to let <em>rtchek</em> use <em>analyze_overlaps()</em>.</p>",
        "id": 126990776,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527101604
    },
    {
        "content": "<blockquote>\n<p>Yeah but look at the view_init in viewcheck.c. It does not consider any options.</p>\n</blockquote>\n<p>No, but <em>overlap()</em> and <em>view_end()</em> do.</p>",
        "id": 126990855,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527101711
    },
    {
        "content": "<blockquote>\n<p>Definitely! This is why you are doing this, moving the functionality to a central place at libanalyze where every module should use it.<br>\nIt's the next step to let <em>rtchek</em> use <em>analyze_overlaps()</em>.</p>\n</blockquote>\n<p>Yeah sounds good! plus lesser use of globals :P</p>\n<blockquote>\n<p>No, but <em>overlap()</em> and <em>view_end()</em> do.</p>\n</blockquote>\n<p>hmm interesting, so overlap can do both logging and adding to list.</p>",
        "id": 126991063,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527101858
    },
    {
        "content": "<blockquote>\n<p>First, I would say <code>a_logoverlap = overlapsAdapter</code>, or?</p>\n</blockquote>\n<p>How would this work? like passing the rpt_overlaps, then proceed in a similar fashion as overlap does? that wouldn't work because the signatures are different for logoverlap and multioverlap</p>",
        "id": 126991470,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527102350
    },
    {
        "content": "<blockquote>\n<p>hmm interesting, so overlap can do both logging and adding to list.</p>\n</blockquote>\n<p>Adding to a list is a kind of logging, or vice versa: Logging is adding to a list.</p>",
        "id": 126991513,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527102372
    },
    {
        "content": "<p>ohk understood. I get it now.. multioverlap should actually used for resolving the overlaps</p>",
        "id": 126991536,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527102425
    },
    {
        "content": "<p>that's why it had code for deleting the left and right partitions</p>",
        "id": 126991587,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527102482
    },
    {
        "content": "<blockquote>\n<p>How would this work? like passing the rpt_overlaps, then proceed in a similar fashion as overlap does? that wouldn't work because the signatures are different for logoverlap and multioverlap</p>\n</blockquote>\n<p>logoverlap hat const parameters and multioverlap not, that's all. Did I missed something?</p>",
        "id": 126991609,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527102511
    },
    {
        "content": "<blockquote>\n<p>that's why it had code for deleting the left and right partitions</p>\n</blockquote>\n<p>Yes, this is something I'm still thinking about: Should <em>analyze_overlaps()</em> allow to change the geometry or not?</p>",
        "id": 126991694,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527102603
    },
    {
        "content": "<p>hmm yeah if it's allowed then \"analyze\"overlaps wouldn't be the right name.<br>\nIf it's allowed tho then isn't like automatically doing the function of the overlap check tool</p>",
        "id": 126991806,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527102770
    },
    {
        "content": "<p><em>Checking</em> a bank account doesn't mean to drain it ;)</p>",
        "id": 126991821,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527102819
    },
    {
        "content": "<p>However, the signatures of logoverlap and multioverlap are similar. It would be possible to switch if needed.</p>",
        "id": 126991887,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527102914
    },
    {
        "content": "<p>Haha yeah! It helps to visualize as well!</p>",
        "id": 126991890,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527102923
    },
    {
        "content": "<blockquote>\n<p>However, the signatures of logoverlap and multioverlap are similar. It would be possible to switch if needed.</p>\n</blockquote>\n<p>yeah fine. So at the end an option to log or resolve the overlaps?</p>",
        "id": 126991955,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527103024
    },
    {
        "content": "<p>But how can we switch between them as one has const and one does not.</p>",
        "id": 126992250,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527103364
    },
    {
        "content": "<p>What if we switch inside the overlapHandler, just like it happens in viewcheck.c. <br>\nPass overlapsHandler as multioverlap only. We pass the option as a int variable using the APP.a_user and decide.</p>",
        "id": 126992481,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527103668
    },
    {
        "content": "<blockquote>\n<p>But how can we switch between them as one has const and one does not.</p>\n</blockquote>\n<p>You don't need to switch in <em>analyze_overlaps()</em>. You need only to decide if <em>analyze_overlaps_callback</em> can change the geometry or not. You can do logging with <em>a_multioverlap</em> as well, if you simply memorize that it was called and change nothing else. Bot, you remember the bank account? It would be more than just checking.</p>",
        "id": 126993845,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527105416
    },
    {
        "content": "<blockquote>\n<p>You don't need to switch in <em>analyze_overlaps()</em>. You need only to decide if <em>analyze_overlaps_callback</em> can change the geometry or not.</p>\n</blockquote>\n<p>Did you mean like decide whether to modify based on the return values from <em>analyze_overlaps_callback</em> ?</p>\n<blockquote>\n<p>You can do logging with <em>a_multioverlap</em> as well, if you simply memorize that it was called and change nothing else. Bot, you remember the bank account? It would be more than just checking.</p>\n</blockquote>\n<p>Not sure if I understand what you mean here by memorizing and the reference to bank account.</p>",
        "id": 127023536,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527159718
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>You don't need to switch in <em>analyze_overlaps()</em>. You need only to decide if <em>analyze_overlaps_callback</em> can change the geometry or not.</p>\n</blockquote>\n<p>Did you mean like decide whether to modify based on the return values from <em>analyze_overlaps_callback</em> ?</p>\n</blockquote>\n<p>The parameters of <em>a_multioverlap</em> and <em>a_logoverlap</em> are essentially the same. The difference is in the const specifier. This means, algorithms written for <em>a_logoverlap</em> work with <em>a_multioverlap</em> as well. The reverse isn't true. If an algorithm requires a <em>partition</em> or <em>bu_ptbl</em> parameter  to be modifiable it won't work with <em>a_logoverlap</em>.</p>\n<p>I.e., if you want to be flexible use <em>a_multioverlap</em>.</p>",
        "id": 127035217,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527177308
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>You can do logging with <em>a_multioverlap</em> as well, if you simply memorize that it was called and change nothing else. But, you remember the bank account? It would be more than just checking.</p>\n</blockquote>\n<p>Not sure if I understand what you mean here by memorizing and the reference to bank account.</p>\n</blockquote>\n<p>Suppose you want to be flexible and use <em>a_multioverlap</em>. Then, you should make sure that a <em>check</em> command can't modify the database. I.e., <em>analyze_overlaps()</em> (the implementation of the general algorithm in libanalyze) could be used to modify a BRL-CAD database, but <em>ged_check_overlaps()</em> doesn't use this. It does logging only (i.e. writing something on the screen).</p>",
        "id": 127035363,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527177559
    },
    {
        "content": "<blockquote>\n<p>Suppose you want to be flexible and use <em>a_multioverlap</em>. Then, you should make sure that a <em>check</em> command can't modify the database. I.e., <em>analyze_overlaps()</em> (the implementation of the general algorithm in libanalyze) could be used to modify a BRL-CAD database, but <em>ged_check_overlaps()</em> doesn't use this. It does logging only (i.e. writing something on the screen).</p>\n</blockquote>\n<p>Yup I got it. So as I was saying how to decide whether to modify or not? using a flag?</p>",
        "id": 127036049,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527178421
    },
    {
        "content": "<blockquote>\n<p>Yup I got it. So as I was saying how to decide whether to modify or not? using a flag?</p>\n</blockquote>\n<p>No, you don't need a flag. Just make sure that <em>ged_check_overlaps()</em> implemetation of <em>analyze_overlaps_callback</em>  (i.e. <em>add_overlaps()</em>) doesn' change a <em>partition</em> or <em>bu_ptbl</em> parameter.</p>",
        "id": 127036563,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527179270
    },
    {
        "content": "<blockquote>\n<p>No, you don't need a flag. Just make sure that <em>ged_check_overlaps()</em> implemetation of <em>analyze_overlaps_callback</em>  (i.e. <em>add_overlaps()</em>) doesn' change a <em>partition</em> or <em>bu_ptbl</em> parameter.</p>\n</blockquote>\n<p>Okay got it. Then next question comes to my mind is the adapter. It would be just to call the analyze_overlaps_callback with context passed to it right?<br>\nAnd are we restricting the user by providing a different signature for callback like one only capable of logging and one capable of modifying also</p>",
        "id": 127036793,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527179639
    },
    {
        "content": "<p>or just pass them without const and let the user decide..</p>",
        "id": 127036865,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527179692
    },
    {
        "content": "<p>In principle the adapter just hands over the parameters to the call-back function.<br>\nI had wished that the adapter preprocesses them as you are doing now, but I'm afraid this would't make things easier.</p>",
        "id": 127037559,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527180826
    },
    {
        "content": "<blockquote>\n<p>or just pass them without const and let the user decide..</p>\n</blockquote>\n<p>Just pass them without const and let the user decide.</p>",
        "id": 127037604,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527180852
    },
    {
        "content": "<p>Cool! Thanks for clearing it up!</p>",
        "id": 127037874,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527181208
    },
    {
        "content": "<p>So that is for v3 patch. Anything else?</p>",
        "id": 127037926,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527181268
    },
    {
        "content": "<blockquote>\n<p>Cool! Thanks for clearing it up!</p>\n</blockquote>\n<p>I had to think over this by myself as well.</p>",
        "id": 127038179,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527181660
    },
    {
        "content": "<blockquote>\n<p>So that is for v3 patch. Anything else?</p>\n</blockquote>\n<p>Who knows? ;) But - yes, this should be all for patch 3.</p>",
        "id": 127038224,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527181706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nhmm does <code>bu_ptbl_reset(regiontable)</code> count as modifying? because if I don't do that it wouldn't work gives seg-fault.<br>\nhere is the work : <a href=\"/user_uploads/1549/9Udz2F9NJDVg5F-yJOCCa2sI/check_overlaps_v3.patch\" target=\"_blank\" title=\"check_overlaps_v3.patch\">check_overlaps_v3.patch</a></p>\n<p>from <em>include/rt/overlap.h</em> it says at line 74: <br>\n<em>a_logoverlap() function is intended for logging only, and a_multioverlap() is intended for resolving the overlap, only.</em></p>\n<p>So according to me <code>a_multioverlap</code> can't return without modifying.</p>",
        "id": 127044944,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527189959
    },
    {
        "content": "<p>Oh and I changed the commands name to <em>check_overlaps</em> but I kept the filename same, was thinking like if anyone adds some functions like check_* it could go inside check.c</p>",
        "id": 127045306,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527190391
    },
    {
        "content": "<p><strong>Without <code>bu_ptbl_reset(regiontable)</code></strong><br>\nI was able to run the command for <em>single process</em>. It crashes when npsw is greater than 1.<br>\nBut when in single process, I get bunch (counted and they were equal to number of overlaps) of errors saying that a_multioverlap was not able to resolve overlap. <em>(check screenshot attached)</em> <a href=\"/user_uploads/1549/3vcuhIGf-Q1q7_0o5MCwi1GX/Screenshot-from-2018-05-25-05-48-20.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-25-05-48-20.png\">Screenshot</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/3vcuhIGf-Q1q7_0o5MCwi1GX/Screenshot-from-2018-05-25-05-48-20.png\" target=\"_blank\" title=\"Screenshot\"><img src=\"/user_uploads/1549/3vcuhIGf-Q1q7_0o5MCwi1GX/Screenshot-from-2018-05-25-05-48-20.png\"></a></div>",
        "id": 127057365,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527207907
    },
    {
        "content": "<p>Well, yes, it looks like I had a wrong understanding regarding what <em>a_multioverlap</em> does. I seems to resolve the overlap for the current ray-trace, without changing the underlying geometry. It is expected to tell the ray-trace algorithm what it shall do with the overlap. If it doesn't, a complaining message will be emitted.</p>\n<p>I'ts true that <em>a_multioverlap</em> and <em>a_logoverlap</em> are getting the same arguments (see src/librt/bool.c lines 1704 and 1705), but there default implementations are very different. Whereas <em>a_logoverlap</em> can stay empty (see <em>rt_silent_logoverlap()</em> for an example), <em>a_multioverlap</em> needs a body which resolves the overlap somehow (like in <em>rt_default_multioverlap()</em>).</p>\n<p>Because we aren't interested in how the overlaps are resolved in this ray-trace (<em>a_hit</em> and <em>a_miss</em> have no function), it's probable wise to leave <em>a_multioverlap</em> NULL and use this way <em>rt_default_multioverlap()</em>. I.e., set <code>APP.a_logoverlap = overlapsAdapter</code>.</p>",
        "id": 127089714,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527265716
    },
    {
        "content": "<blockquote>\n<p>Oh and I changed the commands name to <em>check_overlaps</em> but I kept the filename same, was thinking like if anyone adds some functions like check_* it could go inside check.c</p>\n</blockquote>\n<p>Use check_overlaps.c as file name similar to the bot_~.c stuff.</p>",
        "id": 127089822,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527265918
    },
    {
        "content": "<p>okay got it, just what I suspected.<br>\nSo now should I revert back to v2 and use the overlapHandler to do pre processing or let the user decide like in v3?</p>\n<blockquote>\n<p>Use check_overlaps.c as file name similar to the bot_~.c stuff.</p>\n</blockquote>\n<p>Okay understood :)</p>",
        "id": 127089890,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527266005
    },
    {
        "content": "<p>And, I would need the patch on sourceforge.</p>",
        "id": 127089892,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527266019
    },
    {
        "content": "<blockquote>\n<p>okay got it, just what I suspected.<br>\nSo now should I revert back to v2 and use the overlapHandler to do pre processing or let the user decide like in v3?</p>\n</blockquote>\n<p>Leave like it is now (v3). You can improve the interface if it's advisable later on.</p>",
        "id": 127089961,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527266142
    },
    {
        "content": "<p>okay, will submit updated v3 on sourceforge</p>",
        "id": 127090181,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527266441
    },
    {
        "content": "<p>Working as expected now :)</p>",
        "id": 127091060,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527267608
    },
    {
        "content": "<p>Posted on sourceforge</p>",
        "id": 127091681,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527268545
    },
    {
        "content": "<p>OK, I've seen it.</p>",
        "id": 127091732,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527268570
    },
    {
        "content": "<p>hmm thinking what to start next.. refactor rtcheck or think about gqa?</p>",
        "id": 127091824,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527268693
    },
    {
        "content": "<p>refactor rtcheck</p>",
        "id": 127091835,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527268735
    },
    {
        "content": "<p>okay. So the current src/libged/rtcheck.c is like a wrapper to run the executable rtcheck application.</p>",
        "id": 127091901,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527268813
    },
    {
        "content": "<p>Now all that we have a libanalyze function we donâ€™t need a wrapper I think</p>",
        "id": 127091926,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527268905
    },
    {
        "content": "<p>So I am thinking what really differentiates rtcheck.c from check_overlaps.c</p>",
        "id": 127091978,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527268944
    },
    {
        "content": "<p>we can call simply <em>rtcheck</em> it would then append the list of active primitives and run</p>",
        "id": 127092367,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527269591
    },
    {
        "content": "<p>there is option for outputting plot file</p>",
        "id": 127092376,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527269628
    },
    {
        "content": "<blockquote>\n<p>there is option for outputting plot file</p>\n</blockquote>\n<p>I should be possible to write the file with the callback function or afterwards.</p>",
        "id": 127092648,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527270016
    },
    {
        "content": "<p>after checking viewcheck.c,<br>\n<code>pdv_3space(outfp, rtip-&gt;rti_pmin, rtip-&gt;rti_pmax);</code> this happens in view_2init.<br>\nWill try to do this in libged before calling libanalyze</p>",
        "id": 127092730,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527270227
    },
    {
        "content": "<p>but there are some outfp related things going on in do_frame as well.</p>",
        "id": 127092783,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527270296
    },
    {
        "content": "<p>well in do_frame it only opens the file. So it can be done in libged as well</p>",
        "id": 127092986,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527270636
    },
    {
        "content": "<p>so, should I try it with check_overlaps or make a copy and name it rtcheck and add it there :D because of the similarity.</p>",
        "id": 127093700,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527271566
    },
    {
        "content": "<blockquote>\n<p>so, should I try it with check_overlaps or make a copy and name it rtcheck and add it there :D because of the similarity.</p>\n</blockquote>\n<p>Seriously? Use <em>analyze_overlaps()</em>!</p>",
        "id": 127095242,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527273678
    },
    {
        "content": "<p>no you misunderstood.. that is what I meant only</p>",
        "id": 127095292,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527273727
    },
    {
        "content": "<p>wouldn't the libged part be the same for both? check_overlaps.c and rtcheck.c</p>",
        "id": 127095408,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527273941
    },
    {
        "content": "<p>Similar, but I would't say the same. rtcheck has the file output and the matrix commands.</p>",
        "id": 127095516,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527274079
    },
    {
        "content": "<p>right</p>",
        "id": 127095595,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527274155
    },
    {
        "content": "<p>matrix commands... that would require a lot of rt/do.c functions in libged.. and they all have fixed signatures according to rt_cmdtab</p>",
        "id": 127095614,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527274199
    },
    {
        "content": "<p>check include/rt/cmd.h on line 37</p>",
        "id": 127095699,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527274265
    },
    {
        "content": "<p>all the cm_* functions have the same signatures <code>(const int argc, const char **argv)</code>and they all set variables but they are all in global scope.. how can I pass the variables to these function with fixed signatures.</p>",
        "id": 127095882,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527274488
    },
    {
        "content": "<p>Start with what you have in src/rt. If they require global variables there, use them, at least for the first version.</p>",
        "id": 127096274,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527274996
    },
    {
        "content": "<p>okay sounds good.</p>",
        "id": 127096355,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527275081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nI have added output as plot file and summary that is printed at the end for rtcheck. <a href=\"/user_uploads/1549/zkHP5dMyfy50vLxEkQgES48W/26.05.progress.patch\" target=\"_blank\" title=\"26.05.progress.patch\">26.05.progress.patch</a>. <br>\nI didn't touch the existing rtcheck.c because I use that to test and compare behaviour. Will make it rtcheck during the final submission.<br>\nI was wondering how to give stdin in MGED, so that I can start work on matflag.</p>",
        "id": 127131673,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527348299
    },
    {
        "content": "<p>The only way to give the stdin I think is by making an executable version. So I removed all the ged code and renamed the ged to main and compiled an executable.</p>",
        "id": 127133156,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527351473
    },
    {
        "content": "<p>The rtcheck code belongs to src/rt, not src/libged. What they have in common is the libanalyze routine.<br>\nThe mged/archer equivalent of rtcheck is check_overlaps. It doesn't need to write a file or execute matrix commands. (Rather, it should be enabled to use the current settings/view in mged and archer, but this is something we can think about later on.)</p>\n<p>OK, you explained why you didn't want to overwrite the original code, but why did you implemented it in libged?</p>",
        "id": 127133206,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527351593
    },
    {
        "content": "<blockquote>\n<p>OK, you explained why you didn't want to overwrite the original code, but why did you implemented it in libged?</p>\n</blockquote>\n<p>Yeah my bad. I did move it to src/rt now. <span class=\"emoji emoji-1f62c\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 127133291,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527351725
    },
    {
        "content": "<p>It isn't unusual to have multiple instances of a BRL-CAD repository on a machine, exactly because of this reason. E.g., I have 3 check-outs here. One of them is called <em>vanilla</em>. To avoid the extra network traffic you can simple make copies from your check-out and modify them independently.</p>",
        "id": 127133302,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527351807
    },
    {
        "content": "<p>Have you read my comment to your patch 488?<br>\nAnd, don't forget to write the documentation for the new <em>check_overlaps</em> command.</p>",
        "id": 127133351,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527351931
    },
    {
        "content": "<blockquote>\n<p>It isn't unusual to have multiple instances of a BRL-CAD repository on a machine, exactly because of this reason. E.g., I have 3 check-outs here. One of them is called <em>vanilla</em>. To avoid the extra network traffic you can simple make copies from your check-out and modify them independently.</p>\n</blockquote>\n<p>yeah I have a fresh copy as zip file stashed away in downloads. When I require a clean repo I just extract it and check it out to latest version. :)</p>\n<blockquote>\n<p>Have you read my comment to your patch 488?</p>\n</blockquote>\n<p>Yeah I did read it. The code changes will do, but I tried the command in archer and it didn't even detect that there was a command check_overlaps.</p>\n<blockquote>\n<p>And, don't forget to write the documentation for the new <em>check_overlaps</em> command.</p>\n</blockquote>\n<p>yeah got it, will do.<br>\nYou mentioned to <em>\"correct them with an own patch\"</em> which I did not understand. Should I comment the new patch or create a new ticket?</p>",
        "id": 127133455,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527352183
    },
    {
        "content": "<blockquote>\n<p>yeah I have a fresh copy as zip file stashed away in downloads. When I require a clean repo I just extract it and check it out to latest version. :)</p>\n</blockquote>\n<p>This means that you have to take care of your disk memory?</p>\n<blockquote>\n<p>Yeah I did read it. The code changes will do, but I tried the command in archer and it didn't even detect that there was a command check_overlaps.</p>\n</blockquote>\n<p>&lt;irony&gt;Really?&lt;/irony&gt; ;) It looks like you have something to do there.</p>\n<blockquote>\n<p>You mentioned to <em>\"correct them with an own patch\"</em> which I did not understand. Should I comment the new patch or create a new ticket?</p>\n</blockquote>\n<p>Create a new ticket.</p>",
        "id": 127133722,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527352747
    },
    {
        "content": "<blockquote>\n<p>This means that you have to take care of your disk memory?</p>\n</blockquote>\n<p>yeah, your idea of vanilla seems better though, that way the checking out everytime I want a new repo is not there.</p>\n<blockquote>\n<p>&lt;irony&gt;Really?&lt;/irony&gt; ;) It looks like you have something to do there.</p>\n</blockquote>\n<p>Hmmm, I will find it :D was just excited to start rtcheck first.</p>\n<blockquote>\n<p>Create a new ticket.</p>\n</blockquote>\n<p>Okay thanks for clearing it up!</p>",
        "id": 127133830,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527353030
    },
    {
        "content": "<p>When I say \"3 check-outs\" I mean I've 3 build directories too. This way I can easily switch between the versions. And, you could install them in different directories too. However, a build directory has a size of over 2 GByte.</p>",
        "id": 127133989,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527353388
    },
    {
        "content": "<p>oh yeah got it :). yeah 2.8 GB each..</p>",
        "id": 127134083,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527353526
    },
    {
        "content": "<p>BTW when I moved to srt/rt, I replaced all the bu_vls_printf(gedp-&gt;result_str,\"\") statements by fprintf(stdout,\"\") ones. That is fine right?</p>",
        "id": 127134105,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527353642
    },
    {
        "content": "<p>Using the <em>bu_</em> functions is the recommended way. It's true that in src/rt usually <em>fprintf()</em> is used, but e.g. reshoot.c uses <em>bu_vls_printf()</em> as well. Therefore, it isn't forbidden to use <em>fprintf()</em> but it isn't necessary to replace <em>bu_vls_printf()</em> there.</p>\n<p>It also depends on what you want to do with your code: Immediately write to the output or compose the whole string first.</p>",
        "id": 127134453,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527354377
    },
    {
        "content": "<p>okay understood. This just came to my mind, the script generated by saveview saves a logfile, it does this by redirecting stderr<code>2&gt; logfile.txt</code>.<br>\nSo I was thinking to switch to stderr, would bu_vls_printf contents come inside stderr?</p>",
        "id": 127134611,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527354729
    },
    {
        "content": "<p>but stderr doesn't seem to be the right place for normal outputs</p>",
        "id": 127134658,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527354850
    },
    {
        "content": "<blockquote>\n<p>&lt;irony&gt;Really?&lt;/irony&gt; ;) It looks like you have something to do there.</p>\n</blockquote>\n<p>Figured it out :)<br>\n<a href=\"/user_uploads/1549/d-HxK9COz79mh3XGm8z4jPni/Screenshot-from-2018-05-26-23-34-35.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-26-23-34-35.png\">Screenshot-from-2018-05-26-23-34-35.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/d-HxK9COz79mh3XGm8z4jPni/Screenshot-from-2018-05-26-23-34-35.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-26-23-34-35.png\"><img src=\"/user_uploads/1549/d-HxK9COz79mh3XGm8z4jPni/Screenshot-from-2018-05-26-23-34-35.png\"></a></div>",
        "id": 127135934,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527357921
    },
    {
        "content": "<p>though the 'g's appear to be cut off from the bottom..</p>",
        "id": 127135936,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527357953
    },
    {
        "content": "<p>submitted <a href=\"https://sourceforge.net/p/brlcad/patches/491/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/patches/491/\">https://sourceforge.net/p/brlcad/patches/491/</a></p>",
        "id": 127136443,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527359154
    },
    {
        "content": "<p><em>bu_vls_printf()</em> normally doesn't send anything to stdout or stderr, only if something bad happens like an unknown format specifier.</p>",
        "id": 127136534,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527359356
    },
    {
        "content": "<blockquote>\n<p>though the 'g's appear to be cut off from the bottom..</p>\n</blockquote>\n<p>That's probable an issue of Archer'd terminal widget.</p>",
        "id": 127136578,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527359409
    },
    {
        "content": "<blockquote>\n<p><em>bu_vls_printf()</em> normally doesn't send anything to stdout or stderr, only if something bad happens like an unknown format specifier.</p>\n</blockquote>\n<p>Okay, I will test and figure out what to use accordingly</p>",
        "id": 127136701,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527359756
    },
    {
        "content": "<blockquote>\n<p>though the 'g's appear to be cut off from the bottom..</p>\n</blockquote>\n<p>Looks OK on my machine: <a href=\"/user_uploads/1549/3s7wDA__RGCKcRq2B1-nusTJ/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/3s7wDA__RGCKcRq2B1-nusTJ/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/1549/3s7wDA__RGCKcRq2B1-nusTJ/pasted_image.png\"></a></div>",
        "id": 127161830,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527421613
    },
    {
        "content": "<p>hmm.. not sure why it is like that on mine.<br>\nedit: I think it could be because of the different distros we use and the fonts these distros use.</p>",
        "id": 127162102,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527422296
    },
    {
        "content": "<p>BTW I started to add that rt_cmd_tab things, it is sad that everything has to be made global for it work. Even parsing of the arguments must be done in function, because of cm_opt.</p>",
        "id": 127162159,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527422411
    },
    {
        "content": "<p>are all the cm_~ functions relevant for rtcheck?</p>",
        "id": 127162203,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527422523
    },
    {
        "content": "<blockquote>\n<p>are all the cm_~ functions relevant for rtcheck?</p>\n</blockquote>\n<p>Probable not, but for the other src/rt programs.</p>\n<p>Global variables in an executable aren't as bad as in a library. If an executable will be started multiple times the data of their instances are protected by running in different processes (each process has its own memory space).</p>\n<p>Library functions could be called in parallel in different threads of the same process which can lead to problems with global variables (the threads of a process run all in the same memory space).</p>",
        "id": 127162411,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527423083
    },
    {
        "content": "<blockquote>\n<p>Global variables in an executable aren't as bad as in a library. If an executable will be started multiple times the data of their instances are protected by running in different processes (each process has its own memory space).</p>\n<p>Library functions could be called in parallel in different threads of the same process which can lead to problems with global variables (the threads of a process run all in the same memory space).</p>\n</blockquote>\n<p>Thanks for the explanation! :)<br>\nand saw your comment on the patch, working on it.</p>",
        "id": 127162566,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527423366
    },
    {
        "content": "<p>hmm so for pp - partp and hp - InputHdp, sounds good?</p>",
        "id": 127162707,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527423647
    },
    {
        "content": "<p>I couldn't find anything for pp, so partp is my guess <span class=\"emoji emoji-1f62c\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 127162725,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527423699
    },
    {
        "content": "<p>What do pp and hp stand for? The last \"p\" is probable for \"partition\", but the first letters?</p>",
        "id": 127162831,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527423861
    },
    {
        "content": "<p>h is for head</p>",
        "id": 127162844,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527423937
    },
    {
        "content": "<p>And p?</p>",
        "id": 127162893,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527424015
    },
    {
        "content": "<p>PartHead ?</p>",
        "id": 127162899,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527424029
    },
    {
        "content": "<p>This would be \"ph\", but you have \"pp\" and \"hp\". The second one could be *headPartition\", but the first one?</p>",
        "id": 127162965,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527424175
    },
    {
        "content": "<p>meh.. It should be partPartition</p>",
        "id": 127163016,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527424315
    },
    {
        "content": "<p>Looking at src/librt/bool.c it looks like \"pp\" stands for \"partition pointer\" and \"hp\" for \"head pointer\". This isn't still very helpfull. Maybe <em>rt_default_multioverlap()</em> can explain this.</p>\n<p>All-in-all it looks like that <em>hp</em> is useless.<br>\nAnd I've just realized that you included <em>application</em> in <em>analyze_overlaps_callback</em>. You shouldn't do this. This callback function has its own context.</p>",
        "id": 127163236,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527424802
    },
    {
        "content": "<blockquote>\n<p>And I've just realized that you included <em>application</em> in <em>analyze_overlaps_callback</em>. You shouldn't do this. This callback function has its own context.</p>\n</blockquote>\n<p>yeah that is right :D, I kept ap unused there. Will correct that!</p>",
        "id": 127163336,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527425025
    },
    {
        "content": "<p>hmm, I cannot remove ap. Because it is need for plot file in rtcheck. But hp seems useless!</p>\n<div class=\"codehilite\"><pre><span></span>register struct xray *rp = &amp;ap-&gt;a_ray;\nvect_t ihit;\nvect_t ohit;\nVJOIN1(ihit, rp-&gt;r_pt, ihitp-&gt;hit_dist, rp-&gt;r_dir);\nVJOIN1(ohit, rp-&gt;r_pt, ohitp-&gt;hit_dist, rp-&gt;r_dir);\npdv_3line(outfp, ihit, ohit);\n</pre></div>",
        "id": 127164697,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527428198
    },
    {
        "content": "<p>Looks like <em>analyze_overlaps_callback</em> needs a <em>struct xray</em>* parameter.</p>",
        "id": 127172252,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527443839
    },
    {
        "content": "<p>correction: <em>const struct xray</em>*</p>",
        "id": 127172453,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527444333
    },
    {
        "content": "<p>yeah true :)</p>",
        "id": 127172492,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527444393
    },
    {
        "content": "<p>I am giving rp the name rayPointer in analyze.h</p>",
        "id": 127172721,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527444971
    },
    {
        "content": "<p><em>ray</em> or <em>rayp</em> is enough, or?</p>",
        "id": 127172885,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527445409
    },
    {
        "content": "<p>I think matflag is working for these commands, need to test the others<br>\n<a href=\"/user_uploads/1549/5HD5h2YVT9ENKggsGCyL3Sji/screenshot.png\" target=\"_blank\" title=\"screenshot.png\">screenshot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/5HD5h2YVT9ENKggsGCyL3Sji/screenshot.png\" target=\"_blank\" title=\"screenshot.png\"><img src=\"/user_uploads/1549/5HD5h2YVT9ENKggsGCyL3Sji/screenshot.png\"></a></div>",
        "id": 127207352,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527516699
    },
    {
        "content": "<p>woops no, I gave -a and -e so it deactivated matflag</p>",
        "id": 127207430,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527516833
    },
    {
        "content": "<p>okay removed and it still works :D</p>",
        "id": 127207552,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527516965
    },
    {
        "content": "<p>Here is the progress so far, <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\n<a href=\"/user_uploads/1549/HXNjyBWA5_YTYgn36sfN8MWr/rtck.c\" target=\"_blank\" title=\"rtck.c\">rtck.c</a></p>",
        "id": 127210458,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527521124
    },
    {
        "content": "<p>Only out of curiosity: Wasn't it possible to use functions from src/rt there, e.g. to do the command line parsing? (\"No\" is a valid answer ;)</p>",
        "id": 127211796,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527523224
    },
    {
        "content": "<p>there are a few changes like my do_frame is different and def_tree is different so anything that uses these functions need to be custom.</p>",
        "id": 127211913,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527523441
    },
    {
        "content": "<p>cmd_end, cm_multiview are different because of do_frame and def_tree</p>",
        "id": 127212047,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527523609
    },
    {
        "content": "<p>cm_tree is custom because I can only use rt_gettree not rt_gettrees</p>",
        "id": 127212115,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527523757
    },
    {
        "content": "<p>cm_start is custom because frame number is non functional for rtcheck I believe, my cm_start just returns without doing anything</p>",
        "id": 127212185,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527523841
    },
    {
        "content": "<p>cm_vsize, cm_eyept, cm_lookat_pt, cm_orientation can be reused because they are simple</p>",
        "id": 127212198,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527523912
    },
    {
        "content": "<p>some of them need APP.a_rt_i as global variable but I am not dealing with APP in rt, analyze_overlaps API uses it. But I have rtip, so they all can be changed to use rtip hence they need to be custom</p>",
        "id": 127212310,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527524096
    },
    {
        "content": "<p>OK.<br>\nTherefore you are making progress. Do you already have a schedule for your next patches?</p>",
        "id": 127212614,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527524733
    },
    {
        "content": "<p>BTW I was not able to test the old_way of processing stdin, i gave a text file containing 20 numbers, 1 for viewsize, 3 for eyept and 16 for Viewrotscale. I checked with rtcheck and my rtcheck both crashed with a bomb log</p>",
        "id": 127212666,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527524815
    },
    {
        "content": "<blockquote>\n<p>OK.<br>\nTherefore you are making progress. Do you already have a schedule for your next patches?</p>\n</blockquote>\n<p>Nope, not yet planned.</p>",
        "id": 127212713,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527524885
    },
    {
        "content": "<p>Did you run it in a debugger? It should stop when the exception happens.</p>",
        "id": 127212722,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527524930
    },
    {
        "content": "<p>not really, since it crashed with both I thought it could be issue with my input.</p>",
        "id": 127212788,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527525027
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Interpreting command stream in old format\n\nbn_mat_inv: singular matrix\n\nbn_mat_inv: singular matrix\n\nSaving stack trace to rtck-7930-bomb.log\n</pre></div>",
        "id": 127212806,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527525088
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/sSTKdgnVNG99o8bGDfEV4jof/example.txt\" target=\"_blank\" title=\"example.txt\">example.txt</a></p>",
        "id": 127212853,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527525162
    },
    {
        "content": "<p>this was the input <span class=\"emoji emoji-1f648\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 127212856,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527525179
    },
    {
        "content": "<p>I am sure that viewrotscale is wrong</p>",
        "id": 127212863,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527525211
    },
    {
        "content": "<p>Shouldn't the input be commands, like the ones on your last screen shot?</p>",
        "id": 127212908,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527525259
    },
    {
        "content": "<p>that I believe is the new way.. \"command driven\"</p>",
        "id": 127212913,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527525293
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    if (fscanf(fp, CPP_SCAN(NUMBER_LEN), number) != 1) return -1;\n    viewsize = atof(number);\n    if (fscanf(fp, CPP_SCAN(NUMBER_LEN), number) != 1) return -1;\n    eye_model[X] = atof(number);\n    if (fscanf(fp, CPP_SCAN(NUMBER_LEN), number) != 1) return -1;\n    eye_model[Y] = atof(number);\n    if (fscanf(fp, CPP_SCAN(NUMBER_LEN), number) != 1) return -1;\n    eye_model[Z] = atof(number);\n    for (i = 0; i &lt; 16; i++) {\n    if (fscanf(fp, CPP_SCAN(NUMBER_LEN), number) != 1)\n        return -1;\n    Viewrotscale[i] = atof(number);\n    }\n</pre></div>",
        "id": 127212920,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527525320
    },
    {
        "content": "<p>this is the snippet of old way</p>",
        "id": 127212927,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527525347
    },
    {
        "content": "<p>BTW, the matrix in your example is really singular. Try</p>\n<div class=\"codehilite\"><pre><span></span>1 0 0 0\n0 1 0 0\n0 0 1 0\n0 0 0 1\n</pre></div>",
        "id": 127212972,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527525392
    },
    {
        "content": "<p>okay thanks</p>",
        "id": 127212975,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527525407
    },
    {
        "content": "<p>works now :D</p>",
        "id": 127212986,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527525438
    },
    {
        "content": "<p>gonna test everything else now. Will see if libged/rtcheck works</p>",
        "id": 127213276,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527526056
    },
    {
        "content": "<p>or are we replacing it? with check_overlaps?</p>",
        "id": 127213310,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527526083
    },
    {
        "content": "<p>if so then archer needs some changes too, like there is a button in archer to run rtcheck from the menu bar</p>",
        "id": 127213329,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527526145
    },
    {
        "content": "<p>and also the objects from view</p>",
        "id": 127213332,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527526175
    },
    {
        "content": "<p>via libged/rtcheck wrapper there is no need to mention the objects :)<br>\n<a href=\"/user_uploads/1549/LuazPT-jM9d_7uYa5OdlDZa7/Screenshot-from-2018-05-28-22-21-12.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-28-22-21-12.png\">Screenshot-from-2018-05-28-22-21-12.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/LuazPT-jM9d_7uYa5OdlDZa7/Screenshot-from-2018-05-28-22-21-12.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-28-22-21-12.png\"><img src=\"/user_uploads/1549/LuazPT-jM9d_7uYa5OdlDZa7/Screenshot-from-2018-05-28-22-21-12.png\"></a></div>",
        "id": 127213390,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527526312
    },
    {
        "content": "<p><em>check_overlaps</em> shall replace <em>rtcheck</em>. We want to get rid of calling another executable there. And the feature of to not need to mention the objects is something I would like to see in <em>check_overlaps</em> too.</p>",
        "id": 127213530,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527526568
    },
    {
        "content": "<p>And, the adaption/improvement of the GUI is also part of your project.</p>",
        "id": 127213537,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527526613
    },
    {
        "content": "<p>And, I would put back the <em>gqa</em> stuff. <em>gqa</em> does its own thing, and everything in one run.</p>",
        "id": 127213595,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527526729
    },
    {
        "content": "<blockquote>\n<p><em>check_overlaps</em> shall replace <em>rtcheck</em>. We want to get rid of calling another executable there. And the feature of to not need to mention the objects is something I would like to see in <em>check_overlaps</em> too.</p>\n</blockquote>\n<p>Hmm, will work on it and get it working!</p>\n<blockquote>\n<p>And, the adaption/improvement of the GUI is also part of your project.</p>\n</blockquote>\n<p>okay understood, once check_overlaps is ready will adapt it.</p>\n<blockquote>\n<p>And, I would put back the <em>gqa</em> stuff. <em>gqa</em> does its own thing, and everything in one run.</p>\n</blockquote>\n<p>Yeah but I need the output of these tools rtcheck and gqa  in memory and not use text processing for the overlap checker tool I am gonna make</p>",
        "id": 127213661,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527526836
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>And, I would put back the <em>gqa</em> stuff. <em>gqa</em> does its own thing, and everything in one run.</p>\n</blockquote>\n<p>Yeah but I need the output of these tools rtcheck and gqa  in memory and not use text processing for the overlap checker tool I am gonna make</p>\n</blockquote>\n<p>? You don't need the output of <em>rtcheck</em>, you have <em>analyze_overlaps()</em> and <em>ged_check_overlaps()</em> now. And, don't look at <em>gqa</em>, at least for the moment.</p>",
        "id": 127213765,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527527044
    },
    {
        "content": "<p>In that case it is fine. Yeah analyze_overlaps and check_overlaps can do the job</p>",
        "id": 127213881,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527527311
    },
    {
        "content": "<p>the <a href=\"http://checker.sh\" target=\"_blank\" title=\"http://checker.sh\">checker.sh</a> uses gqa for 2nd opinion, it can work with just the output of check_overlaps</p>",
        "id": 127213891,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527527350
    },
    {
        "content": "<p>oh there is also one more thing missing in check_overlaps the display of overlaps in yellow color</p>",
        "id": 127214015,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527527607
    },
    {
        "content": "<blockquote>\n<p>oh there is also one more thing missing in check_overlaps the display of overlaps in yellow color</p>\n</blockquote>\n<p>This is something what has to happen in the callback function.</p>",
        "id": 127214120,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527527825
    },
    {
        "content": "<p>okay, I need to find the code that does it for rtcheck</p>",
        "id": 127214177,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527527944
    },
    {
        "content": "<p>looks like <code>_ged_cvt_vlblock_to_solids()</code> does it on line 121 in libged/rtcheck.c</p>",
        "id": 127214245,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527528083
    },
    {
        "content": "<p>humm I don't get it. There is usage of vlblock which is new to me</p>",
        "id": 127214418,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527528418
    },
    {
        "content": "<p>I'm in doubt. Can it be that <em>_ged_cvt_vlblock_to_solids()</em> codes only \"OVERLAPS\" for printing on the screen and <em>rt_process_uplot_value()</em> does the real work?</p>",
        "id": 127214531,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527528633
    },
    {
        "content": "<p>yeah that would be right, <em>_ged_cvt_vlblock_to_solids()</em> gives it the name OVERLAPSffff00 and <em>rt_process_uplot_value()</em> does the real work of plotting it</p>",
        "id": 127214709,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527529025
    },
    {
        "content": "<p>#FFFF00 is for yellow color</p>",
        "id": 127214713,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527529055
    },
    {
        "content": "<p>something to do with plot file, let me make it display in txt for readability</p>",
        "id": 127214864,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527529323
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/j6LVGPKTnmdwafE-pENNZHUZ/test.txt\" target=\"_blank\" title=\"test.txt\">test.txt</a></p>",
        "id": 127214993,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527529655
    },
    {
        "content": "<p>plot file for rtcheck -g10 -G10 -a10 -e102 truck.g g4</p>",
        "id": 127215033,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527529691
    },
    {
        "content": "<blockquote>\n<p>And the feature of to not need to mention the objects is something I would like to see in <em>check_overlaps</em> too.</p>\n</blockquote>\n<p>Done! :) <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\n<a href=\"/user_uploads/1549/DoiyIr4wg-o8lqEFzaPg0FTp/Screenshot-from-2018-05-29-01-10-51.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-29-01-10-51.png\">Screenshot-from-2018-05-29-01-10-51.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/DoiyIr4wg-o8lqEFzaPg0FTp/Screenshot-from-2018-05-29-01-10-51.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-29-01-10-51.png\"><img src=\"/user_uploads/1549/DoiyIr4wg-o8lqEFzaPg0FTp/Screenshot-from-2018-05-29-01-10-51.png\"></a></div>",
        "id": 127218917,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527536715
    },
    {
        "content": "<p>Please have a look if it's proper, only the changes I did to check_overlaps.c :<br>\n<a href=\"/user_uploads/1549/RjjR8o90DCo_xnuLbVpvjVVF/visibleobjs.patch\" target=\"_blank\" title=\"visibleobjs.patch\">visibleobjs.patch</a></p>",
        "id": 127219224,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527537201
    },
    {
        "content": "<p>Umm, I think I got plotting working, but again not sure if followed proper procedure to do that.<br>\n<a href=\"/user_uploads/1549/gpa0Qa-MFiig--DntKHe6Ma9/Screenshot-from-2018-05-29-21-32-12.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-29-21-32-12.png\">Screenshot-from-2018-05-29-21-32-12.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/gpa0Qa-MFiig--DntKHe6Ma9/Screenshot-from-2018-05-29-21-32-12.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-29-21-32-12.png\"><img src=\"/user_uploads/1549/gpa0Qa-MFiig--DntKHe6Ma9/Screenshot-from-2018-05-29-21-32-12.png\"></a></div>",
        "id": 127259247,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527609789
    },
    {
        "content": "<p>as you see from the image I am using temp file.</p>",
        "id": 127259263,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527609823
    },
    {
        "content": "<blockquote>\n<p>Please have a look if it's proper, only the changes I did to check_overlaps.c :<br>\n<a href=\"/user_uploads/1549/RjjR8o90DCo_xnuLbVpvjVVF/visibleobjs.patch\" target=\"_blank\" title=\"visibleobjs.patch\">visibleobjs.patch</a></p>\n</blockquote>\n<p>oh I also found a bug with this just now, if I <code>draw g4</code>. Then run <code>check_overlaps g4</code>.<br>\nThen it runs g4 twice :/</p>",
        "id": 127259750,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527610414
    },
    {
        "content": "<p>Today's work it also has the yesterday's work of visibleobjs.patch<br>\n<a href=\"/user_uploads/1549/31DV3ysONDGzXLvXTDJkLTc-/plot_overlaps.patch\" target=\"_blank\" title=\"plot_overlaps.patch\">plot_overlaps.patch</a></p>",
        "id": 127259868,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527610556
    },
    {
        "content": "<blockquote>\n<p>Please have a look if it's proper, only the changes I did to check_overlaps.c :<br>\n<a href=\"/user_uploads/1549/RjjR8o90DCo_xnuLbVpvjVVF/visibleobjs.patch\" target=\"_blank\" title=\"visibleobjs.patch\">visibleobjs.patch</a></p>\n</blockquote>\n<p>How about either using the given objects if there are given or use the ones from <em>ged_build_tops()</em> if there are none?</p>",
        "id": 127260052,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527610785
    },
    {
        "content": "<p>that is a good idea!</p>",
        "id": 127260118,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527610845
    },
    {
        "content": "<p>will do it now.</p>",
        "id": 127260134,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527610872
    },
    {
        "content": "<p>The plotting shouldn't need a temp file. In principle it should possible to build the plot stream in the callback function and draw it afterwords (or meanwhile?)</p>",
        "id": 127260152,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527610922
    },
    {
        "content": "<p>It should be a kind of vlist: <code>struct bu_list *vhead</code>, <code>RT_ADD_VLIST()</code>, <code>bn_vlist_2string()</code> to throw some keywords.</p>",
        "id": 127260382,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527611190
    },
    {
        "content": "<blockquote>\n<p>The plotting shouldn't need a temp file. In principle it should possible to build the plot stream in the callback function and draw it afterwords (or meanwhile?)</p>\n</blockquote>\n<p>yeah that is what I was hoping to do but all the functions need a FILE*.</p>",
        "id": 127260415,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527611249
    },
    {
        "content": "<blockquote>\n<p>It should be a kind of vlist: <code>struct bu_list *vhead</code>, <code>RT_ADD_VLIST()</code>, <code>bn_vlist_2string()</code> to throw some keywords.</p>\n</blockquote>\n<p>Didn't understand this..</p>",
        "id": 127260482,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527611304
    },
    {
        "content": "<p>The <em>vlist</em> is a list of vectors considered for displaying on the screen. The primitives have a <em>rt_~_plot()</em> function which generates such a list. These vector lists are used to generate the wireframe view in mged and Archer. The words I wrote are the list type and some functions/macro to build up such a list. I'm pretty sure that this is also how the highlighting of the overlaps works.</p>",
        "id": 127260747,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527611650
    },
    {
        "content": "<p>thanks, I think I am understanding it now. Like the function used <code>rt_process_uplot_value</code> does essentially gets the 6 values from the plot file and uses <code>BN_ADD_VLIST</code> to add these to <code>vbp-&gt;free_vlist_hd</code>.</p>",
        "id": 127261017,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527612017
    },
    {
        "content": "<p>Look at <em>rt_process_uplot_value()</em> in src/librt/vlist.c. There you can see that the <code>V x1 y1 z1x2 y2 z2</code> are translated to two <code>BN_ADD_VLIST()</code> commands.</p>",
        "id": 127261118,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527612227
    },
    {
        "content": "<p>I think I could merge <code>pdv_3line</code> and <code>rt_process_uplot_value</code> into a custom function that does not use FILE *</p>",
        "id": 127261121,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527612238
    },
    {
        "content": "<blockquote>\n<p>Look at <em>rt_process_uplot_value()</em> in src/librt/vlist.c. There you can see that the <code>V x1 y1 z1x2 y2 z2</code> are translated to two <code>BN_ADD_VLIST()</code> commands.</p>\n</blockquote>\n<p>Yeah exactly I remember the 6 values from the plot file I sent yesterday. First 3 for <code>BN_VLIST_LINE_MOVE</code> and next 3 for <code>BN_VLIST_LINE_DRAW</code></p>",
        "id": 127261197,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527612333
    },
    {
        "content": "<p>Give the callbackData a handle to this list (or a handle to the <em>ged_check_ovl</em> which contains this structure) and build it up in the callbacks.</p>",
        "id": 127261202,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527612347
    },
    {
        "content": "<p>by handle you mean the <code>struct bu_list *vhead</code> returned from running these:</p>\n<div class=\"codehilite\"><pre><span></span>struct bn_vlblock *vbp = rt_vlblock_init();\nstruct bu_list *vhead = bn_vlblock_find(vbp, 0xFF, 0xFF, 0x00);\n</pre></div>",
        "id": 127261359,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527612595
    },
    {
        "content": "<p>Yes. You are initializing <em>chk_ovl</em> this way. Maybe it's a good idea to keep this variable, but make it part of <em>overlapData</em>.</p>",
        "id": 127261491,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527612734
    },
    {
        "content": "<p>Then do what you are currently doing in <em>plotoverlaps()-&gt;rt_process_uplot_value()</em> in <em>overlapHandler()-&gt;log_overlaps()</em> now.</p>",
        "id": 127261534,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527612832
    },
    {
        "content": "<p>Okay got it :). And display the overlaps as overlay with <code>_ged_cvt_vlblock_to_solids</code> at the end</p>",
        "id": 127261583,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527612869
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 127261588,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527612894
    },
    {
        "content": "<p>Okay cool. There was one more bug I faced. Like once I ran check_overlaps and got the overlay if I run it again it would consider the OVERLAPSffff00 as a visible object and tries to rt_gettree it and crash.</p>",
        "id": 127261661,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527612972
    },
    {
        "content": "<p>Clean up the display first?</p>",
        "id": 127261916,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527613325
    },
    {
        "content": "<p>Sure thing!</p>",
        "id": 127261935,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527613358
    },
    {
        "content": "<p>Umm that object issues is solved now :)<br>\nAnd passed the structure to logoverlaps and tested with a simple print statement with gedp. So that is working as well. Gonna cleanup the display now.</p>",
        "id": 127263611,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527615582
    },
    {
        "content": "<p>Success! :) Thanks <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> for such wonderful suggestions.</p>",
        "id": 127266450,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527618981
    },
    {
        "content": "<p>now it is just 3 lines to build up the list and display is 2 lines :D</p>",
        "id": 127266467,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527619014
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/DfQEQ99erilJGchrZ_6kkFHl/Screenshot-from-2018-05-30-00-14-21.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-30-00-14-21.png\">Screenshot-from-2018-05-30-00-14-21.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/DfQEQ99erilJGchrZ_6kkFHl/Screenshot-from-2018-05-30-00-14-21.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-30-00-14-21.png\"><img src=\"/user_uploads/1549/DfQEQ99erilJGchrZ_6kkFHl/Screenshot-from-2018-05-30-00-14-21.png\"></a></div>",
        "id": 127266854,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527619476
    },
    {
        "content": "<blockquote>\n<p>Okay cool. There was one more bug I faced. Like once I ran check_overlaps and got the overlay if I run it again it would consider the OVERLAPSffff00 as a visible object and tries to rt_gettree it and crash.</p>\n</blockquote>\n<p>I don't understand why it thinks it a visible object. But I kinda hard-coded it for now <span class=\"emoji emoji-1f62c\" title=\"grimacing\">:grimacing:</span> to erase overlays just before buildingtops :</p>\n<div class=\"codehilite\"><pre><span></span>    if ((db_lookup(gedp-&gt;ged_wdbp-&gt;dbip, &quot;OVERLAPSffff00&quot;, LOOKUP_QUIET)) != RT_DIR_NULL) {\n             dl_erasePathFromDisplay(gedp-&gt;ged_gdp-&gt;gd_headDisplay, gedp-&gt;ged_wdbp-&gt;dbip, gedp-&gt;ged_free_vlist_callback, &quot;OVERLAPSffff00&quot;, 0, gedp-&gt;freesolid);\n    }\n</pre></div>\n\n\n<p>hopefully there is another way</p>",
        "id": 127271550,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527624680
    },
    {
        "content": "<blockquote>\n<p>Okay cool. There was one more bug I faced. Like once I ran check_overlaps and got the overlay if I run it again it would consider the OVERLAPSffff00 as a visible object and tries to rt_gettree it and crash.</p>\n</blockquote>\n<p>I'm most interested in rt_gettree crashing .. it shouldn't.  can you provide a backtrace?</p>",
        "id": 127292138,
        "sender_full_name": "Sean",
        "timestamp": 1527660234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <br>\n<a href=\"https://pastebin.com/gkz865p7\" target=\"_blank\" title=\"https://pastebin.com/gkz865p7\">https://pastebin.com/gkz865p7</a><br>\nThis is 2nd run of  <code>check_overlaps</code> from the logs <code>rt_gettree (rtip=0x13a64c0,\n    node=0x132abc0 \"g4\")</code> this is alright.<br>\nThen later there is one more call <code>rt_gettree (rtip=0x13a64c0, node=0x0)</code> this is causing the crash.</p>\n<div class=\"codehilite\"><pre><span></span>Thread 1 &quot;mged&quot; received signal SIGSEGV, Segmentation fault.\n0x00007fffe83d5253 in db_follow_path_for_state (tsp=0x7fffffffbf70, total_path=0x7fffffffbf30, orig_str=0x0, noisy=1) at /home/sharan/brlcad/src/librt/db_tree.c:849\n</pre></div>\n\n\n<p>Gonna investigate it</p>",
        "id": 127294314,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527664600
    },
    {
        "content": "<p>humm. So I ran the original <code>rtcheck</code> then ran a modded version <code>check_overlaps</code> that prints number of tops and names then returns.<br>\n<a href=\"/user_uploads/1549/Ve_YpU2vNUs0174qhyniVrIU/Screenshot-from-2018-05-30-13-12-10.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-30-13-12-10.png\">Screenshot-from-2018-05-30-13-12-10.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/Ve_YpU2vNUs0174qhyniVrIU/Screenshot-from-2018-05-30-13-12-10.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-30-13-12-10.png\"><img src=\"/user_uploads/1549/Ve_YpU2vNUs0174qhyniVrIU/Screenshot-from-2018-05-30-13-12-10.png\"></a></div>",
        "id": 127295160,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527666168
    },
    {
        "content": "<p>okay I think I know how <code>rtcheck</code> doesn't crash when running it for the second time but check_overlaps does now.<br>\n<code>rtcheck</code> uses <code>ged_count_tops</code> to allocate memory for the <code>gedp-&gt;ged_gdp-&gt;gd_rt_cmd</code>to fit the visible tops.<br>\nBut it only considers the count of objects returned from <code>ged_build_tops</code>.<br>\nSo I did that experiment on my check_overlaps turns out <code>ged_build_tops</code> returned one less number than <code>ged_count_tops</code> when there are overlays displayed.<br>\n<a href=\"/user_uploads/1549/SkQANOUq25cKjDKHKyIyCuVb/Screenshot-from-2018-05-30-13-33-16.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-30-13-33-16.png\">Screenshot-from-2018-05-30-13-33-16.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/SkQANOUq25cKjDKHKyIyCuVb/Screenshot-from-2018-05-30-13-33-16.png\" target=\"_blank\" title=\"Screenshot-from-2018-05-30-13-33-16.png\"><img src=\"/user_uploads/1549/SkQANOUq25cKjDKHKyIyCuVb/Screenshot-from-2018-05-30-13-33-16.png\"></a></div>",
        "id": 127295983,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527667663
    },
    {
        "content": "<p>BTW before fixing that I had one thing in mind,<br>\nI can run <code>check_overlaps g4</code> and get it to display the overlays without actually drawing g4, which displays overlays just floating in the air making no sense.<br>\nI can also do this <code>draw g2</code> and then doing <code>check_overlaps g4</code> which would display overlaps of g4 as overlays on g2, again making no sense.<br>\nThere are a these options to solve this in my opinion :<br>\n1) if a user runs <code>check_overlaps g4</code> and g4 is not drawn then it shouldn't display the overlaps<br>\nBut displays overlays when g4 is drawn. This method would require checking of mentioned objects and visible objects.<br>\n2) if a user runs <code>check_overlaps g4</code> and g4 is not drawn then it could automatically draw g4 for the user and display the overlays.<br>\n3) like <code>rtcheck</code> command does not allow to explicitly mention objects (but executable rtcheck does allow it) with command like <code>rtcheck g4</code>, I could make check_overlaps work strictly for only visible objects.</p>",
        "id": 127296734,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527668849
    },
    {
        "content": "<p>Fixed the issue with a quick fix for now <a href=\"/user_uploads/1549/QO1c4wcbAeloTHCsFV6T0jex/quick_fix.c\" target=\"_blank\" title=\"quick_fix.c\">quick_fix.c</a><br>\nWill do a clean fix when the above doubt is cleared :)</p>",
        "id": 127297023,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527669333
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Okay cool. There was one more bug I faced. Like once I ran check_overlaps and got the overlay if I run it again it would consider the OVERLAPSffff00 as a visible object and tries to rt_gettree it and crash.</p>\n</blockquote>\n<p>I don't understand why it thinks it a visible object. But I kinda hard-coded it for now <span class=\"emoji emoji-1f62c\" title=\"grimacing\">:grimacing:</span> to erase overlays just before buildingtops :</p>\n<p>hopefully there is another way</p>\n</blockquote>\n<p>The question which came into my mind is: Should you clean up the display before creating a new overlay?</p>\n<p>How does rtcheck handle this?</p>",
        "id": 127317028,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527699014
    },
    {
        "content": "<p>BTW, <em>rtcheck</em>draws nothing here. Do I need to do something extra to get the overlay?</p>",
        "id": 127317111,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527699150
    },
    {
        "content": "<p>Umm it cleans up using the function call : <code>_ged_cvt_vlblock_to_solids(gedp, chk_overlay.vbp, \"OVERLAPS\", 0)</code><br>\nWhich calls <code>invent_solid</code> in src/libged/display_list.c : 1132 which zaps the overlaps if drawing again</p>",
        "id": 127317172,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527699256
    },
    {
        "content": "<blockquote>\n<p>BTW, <em>rtcheck</em> draws nothing here. Do I need to do something extra to get the overlay?</p>\n</blockquote>\n<p>nothing extra, try to run with a lower g,G value, less number of overlaps aren't easy to see. something like -g5 -G5 would make it display good.</p>",
        "id": 127317199,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527699315
    },
    {
        "content": "<p>OK, thanks. With <em>1</em> I can see something.<br>\nDo you have a current patch which allow me to look for the reason of the crash?</p>",
        "id": 127317336,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527699491
    },
    {
        "content": "<blockquote>\n<p>OK, thanks. With <em>1</em> I can see something.<br>\nDo you have a current patch which allow me to look for the reason of the crash?</p>\n</blockquote>\n<p>I mentioned the reason above, it is clear now.<br>\nI quote it here:</p>\n<blockquote>\n<p>okay I think I know how <code>rtcheck</code> doesn't crash when running it for the second time but check_overlaps does now.<br>\n<code>rtcheck</code> uses <code>ged_count_tops</code> to allocate memory for the <code>gedp-&gt;ged_gdp-&gt;gd_rt_cmd</code>to fit the visible tops.<br>\nBut it only considers the count of objects returned from <code>ged_build_tops</code>.<br>\nSo I did that experiment on my check_overlaps turns out <code>ged_build_tops</code> returned one less number than <code>ged_count_tops</code> when there are overlays displayed.</p>\n</blockquote>",
        "id": 127317379,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527699562
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/d076iq7OMO2J_b2mF3yHGBB6/check_overlaps_crash.patch\" target=\"_blank\" title=\"check_overlaps_crash.patch\">check_overlaps_crash.patch</a></p>",
        "id": 127317628,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527699843
    },
    {
        "content": "<p>here is what i did to fix it: <br>\n<a href=\"/user_uploads/1549/7eUzFrRR8_jcRUfFeTxCyec9/check_overlaps_fix.patch\" target=\"_blank\" title=\"check_overlaps_fix.patch\">check_overlaps_fix.patch</a></p>",
        "id": 127317650,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527699879
    },
    {
        "content": "<p>... and I had to wait some time until the overlay appeared.</p>\n<p>Just looked at the implementation of <em>ged_count_tops()</em> and <em>ged_build_tops()</em>. These functions iterate over the display list. The overlay has a RT_DIR_PHONY_ADDR flag, which means that it isn't (yet) in the database.</p>\n<p><code>tops -a</code> will show the overlays as well.</p>",
        "id": 127318438,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527700875
    },
    {
        "content": "<blockquote>\n<p>... and I had to wait some time until the overlay appeared.</p>\n</blockquote>\n<p>performance issues? when I try with -g1 -G1 it takes around 3mins for me with 100% CPU</p>\n<blockquote>\n<p>Just looked at the implementation of <em>ged_count_tops()</em> and <em>ged_build_tops()</em>. These functions iterate over the display list. The overlay has a RT_DIR_PHONY_ADDR flag, which means that it isn't (yet) in the database.</p>\n</blockquote>\n<p>Yeah RT_DIR_PHONY_ADDR is set by invent_solid.</p>\n<blockquote>\n<p><code>tops -a</code> will show the overlays as well.</p>\n</blockquote>\n<p>yup saw it.</p>",
        "id": 127318696,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527701219
    },
    {
        "content": "<p>so are you suggesting that I write a custom ged_count_tops that skips the <code>RT_DIR_PHONY_ADDR</code> flag?</p>",
        "id": 127318790,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527701328
    },
    {
        "content": "<p>like in <code>ged_build_tops</code> it continues when flag is detected</p>",
        "id": 127318820,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527701361
    },
    {
        "content": "<p>Is this necessary? I think, the solution you found is okey. Can it be improved?</p>",
        "id": 127318935,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527701484
    },
    {
        "content": "<p>I'm satisfied.</p>",
        "id": 127319016,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527701549
    },
    {
        "content": "<blockquote>\n<p>Is this necessary? I think, the solution you found is okey. Can it be improved?</p>\n</blockquote>\n<p>Yeah but the improvement would be negligible, because right now <code>tobjtab = (char **)bu_calloc(tnobjs, sizeof(char *), \"alloc tobjtab\")</code> is allocating memory for one extra object which is not used.</p>",
        "id": 127319044,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527701581
    },
    {
        "content": "<p>only in case of when there are overlay</p>",
        "id": 127319065,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527701597
    },
    {
        "content": "<p>according to this image <a href=\"user_uploads/1549/SkQANOUq25cKjDKHKyIyCuVb/Screenshot-from-2018-05-30-13-33-16.png\" target=\"_blank\" title=\"user_uploads/1549/SkQANOUq25cKjDKHKyIyCuVb/Screenshot-from-2018-05-30-13-33-16.png\">https://brlcad.zulipchat.com/user_uploads/1549/SkQANOUq25cKjDKHKyIyCuVb/Screenshot-from-2018-05-30-13-33-16.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/1549/SkQANOUq25cKjDKHKyIyCuVb/Screenshot-from-2018-05-30-13-33-16.png\" target=\"_blank\" title=\"https://brlcad.zulipchat.com/user_uploads/1549/SkQANOUq25cKjDKHKyIyCuVb/Screenshot-from-2018-05-30-13-33-16.png\"><img src=\"user_uploads/1549/SkQANOUq25cKjDKHKyIyCuVb/Screenshot-from-2018-05-30-13-33-16.png\"></a></div>",
        "id": 127319185,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527701707
    },
    {
        "content": "<p>that null was the space allocated for overlay which is not filled by build_tops</p>",
        "id": 127319218,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527701745
    },
    {
        "content": "<blockquote>\n<p>BTW before fixing that I had one thing in mind,<br>\nI can run <code>check_overlaps g4</code> and get it to display the overlays without actually drawing g4, which displays overlays just floating in the air making no sense.<br>\nI can also do this <code>draw g2</code> and then doing <code>check_overlaps g4</code> which would display overlaps of g4 as overlays on g2, again making no sense.<br>\nThere are a these options to solve this in my opinion :<br>\n1) if a user runs <code>check_overlaps g4</code> and g4 is not drawn then it shouldn't display the overlaps<br>\nBut displays overlays when g4 is drawn. This method would require checking of mentioned objects and visible objects.<br>\n2) if a user runs <code>check_overlaps g4</code> and g4 is not drawn then it could automatically draw g4 for the user and display the overlays.<br>\n3) like <code>rtcheck</code> command does not allow to explicitly mention objects (but executable rtcheck does allow it) with command like <code>rtcheck g4</code>, I could make check_overlaps work strictly for only visible objects.</p>\n</blockquote>\n<p>also what to do about this problem</p>",
        "id": 127319877,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527702427
    },
    {
        "content": "<blockquote>\n<p>BTW before fixing that I had one thing in mind,<br>\nI can run <code>check_overlaps g4</code> and get it to display the overlays without actually drawing g4, which displays overlays just floating in the air making no sense.<br>\nI can also do this <code>draw g2</code> and then doing <code>check_overlaps g4</code> which would display overlaps of g4 as overlays on g2, again making no sense.<br>\nThere are a these options to solve this in my opinion :<br>\n1) if a user runs <code>check_overlaps g4</code> and g4 is not drawn then it shouldn't display the overlaps<br>\nBut displays overlays when g4 is drawn. This method would require checking of mentioned objects and visible objects.<br>\n2) if a user runs <code>check_overlaps g4</code> and g4 is not drawn then it could automatically draw g4 for the user and display the overlays.<br>\n3) like <code>rtcheck</code> command does not allow to explicitly mention objects (but executable rtcheck does allow it) with command like <code>rtcheck g4</code>, I could make check_overlaps work strictly for only visible objects.</p>\n</blockquote>\n<p>I would say: If the user wants to examine the overlaps in a different context (like the overlaps of <em>g4</em> in the context of <em>g2</em>), do it. If there is no context yet: That's OK too.</p>",
        "id": 127320475,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527703149
    },
    {
        "content": "<p>ok then so that is solved, I have prepared a few more question to ask today.</p>",
        "id": 127320723,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527703377
    },
    {
        "content": "<p>should I print this information ? for the new rtcheck program.</p>\n<div class=\"codehilite\"><pre><span></span>View: 35 azimuth, 25 elevation off of front view\nOrientation: 0.248097, 0.476591, 0.748097, 0.389435\nEye_pos: 10588.7, 4181.26, 4710.67\nSize: 11224.1mm\nGrid: (21.9221, 21.9221) mm, (512, 512) pixels\n</pre></div>\n\n\n<p>It was useful to me to debug but for the end user?</p>",
        "id": 127320738,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527703415
    },
    {
        "content": "<p><code>_ged_wait_status</code> defined in <em>/libged/rtcheck.c:79</em> is declared in header file : <em>libged/ged_private.h: 349</em><br>\nis used in <em>libged/nirt.c : 530</em>. So when I remove <em>rtcheck.c</em> from libged was thinking to move <em>_ged_wait_status</em> to <em>libged/nirt.c</em></p>",
        "id": 127321381,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527704202
    },
    {
        "content": "<p>what to do about the rtcheck related code from <code>cmd_rt</code> wrapper in <em>mged/rtif.c : 57</em>? remove it ? as I am using plain wrapper for <code>check_overlaps</code></p>",
        "id": 127321935,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527704784
    },
    {
        "content": "<blockquote>\n<p>should I print this information ? for the new rtcheck program.</p>\n<div class=\"codehilite\"><pre><span></span>View: 35 azimuth, 25 elevation off of front view\nOrientation: 0.248097, 0.476591, 0.748097, 0.389435\nEye_pos: 10588.7, 4181.26, 4710.67\nSize: 11224.1mm\nGrid: (21.9221, 21.9221) mm, (512, 512) pixels\n</pre></div>\n\n\n<p>It was useful to me to debug but for the end user?</p>\n</blockquote>\n<p><em>rtcheck</em> prints similar stuff, but is in general annoying, that's true. How about giving <em>check_overlaps</em> a flag to print such debug information?</p>",
        "id": 127322156,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527705018
    },
    {
        "content": "<blockquote>\n<p><code>_ged_wait_status</code> defined in <em>/libged/rtcheck.c:79</em> is declared in header file : <em>libged/ged_private.h: 349</em><br>\nis used in <em>libged/nirt.c : 530</em>. So when I remove <em>rtcheck.c</em> from libged was thinking to move <em>_ged_wait_status</em> to <em>libged/nirt.c</em></p>\n</blockquote>\n<p>Sounds good and reasonable.</p>",
        "id": 127322183,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527705092
    },
    {
        "content": "<blockquote>\n<p><em>rtcheck</em> prints similar stuff, but is in general annoying, that's true. How about giving <em>check_overlaps</em> a flag to print such debug information?</p>\n</blockquote>\n<p>sounds good, by flag you meant like an option right?</p>",
        "id": 127322274,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527705212
    },
    {
        "content": "<blockquote>\n<p>what to do about the rtcheck related code from <code>cmd_rt</code> wrapper in <em>mged/rtif.c : 57</em>? remove it ? as I am using plain wrapper for <code>check_overlaps</code></p>\n</blockquote>\n<p>Yes, remove it. Does Archer have similar issues?</p>",
        "id": 127322344,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527705286
    },
    {
        "content": "<p>Yes archer also has similar code but I think it is exclusive for rtcheck, so I will need to adapt them for check_overlaps</p>",
        "id": 127322384,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527705361
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><em>rtcheck</em> prints similar stuff, but is in general annoying, that's true. How about giving <em>check_overlaps</em> a flag to print such debug information?</p>\n</blockquote>\n<p>sounds good, by flag you meant like an option right?</p>\n</blockquote>\n<p>Yes, like <code>-d</code> for debug or <code>-v</code> for verbose.</p>",
        "id": 127322532,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527705504
    },
    {
        "content": "<p>Now related to -M flag,<br>\nthere is a command <code>multiview</code>if mentioned in the stdin would make rtcheck to run for a array of az/el values.<br>\nBut my rtcheck works with error messages like : <br>\n<code>WARNING: rt_prep_parallel(/home/sharan/brlcad/build/bin/truck.g, 1) invoked a second time, ignored </code></p>",
        "id": 127322836,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527705897
    },
    {
        "content": "<p>edit: found the mistake I did for the crash for original rtcheck</p>",
        "id": 127322907,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527705969
    },
    {
        "content": "<p>humm there is also seg fault at the end, I will investigate. <br>\nAt first glance it looks like the plot file is kept the same.<br>\nThe original rtcheck adds a suffix of digit for each run, have to find how it does this.</p>",
        "id": 127323236,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527706428
    },
    {
        "content": "<p>found it, so framenumber really has significance for rtcheck too :D</p>\n<div class=\"codehilite\"><pre><span></span>    if (outputfile != (char *)0) {\n    if (framenumber &lt;= 0) {\n        snprintf(framename, 128, &quot;%s&quot;, outputfile);\n    } else {\n        snprintf(framename, 128, &quot;%s.%d&quot;, outputfile, framenumber);\n    }\n</pre></div>",
        "id": 127323413,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527706682
    },
    {
        "content": "<blockquote>\n<p>But my rtcheck works with error messages like : <br>\n<code>WARNING: rt_prep_parallel(/home/sharan/brlcad/build/bin/truck.g, 1) invoked a second time, ignored </code></p>\n</blockquote>\n<p>also found this, it because I run <code>rt_prep_parallel(rtip, npsw)</code> without checking <code>rtip-&gt;needprep</code></p>",
        "id": 127323749,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527707073
    },
    {
        "content": "<p>If there is something left you couldn't fix provide me with a patch file and a description of how to reproduce the error. I'll look at it tomorrow then.</p>",
        "id": 127323833,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527707177
    },
    {
        "content": "<p>Thank you. I will try to fix these bugs tonight. If not I would have the patch posted here.</p>",
        "id": 127323869,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527707232
    },
    {
        "content": "<p>Fixed all the bugs for now, still have to test cm_anim and cm_set options.</p>",
        "id": 127354065,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527759865
    },
    {
        "content": "<p>humm fixed one major flaw in the overlapHandler, it was not properly giving overlap pairs. It was giving the same name for reg1 and reg2.<br>\n So the outputs of old rtcheck and new rtcheck didn't match</p>",
        "id": 127355568,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527762905
    },
    {
        "content": "<p>now the plotting also is correct :)</p>",
        "id": 127355639,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527763073
    },
    {
        "content": "<p>Here is the patch of all changes I did :<br>\n<a href=\"/user_uploads/1549/zkXZv26nYagez7pj9en0QhQ6/31.05.progress.patch\" target=\"_blank\" title=\"31.05.progress.patch\">31.05.progress.patch</a> <br>\nI just discovered one issue with check_overlaps, it doesn't get the values from the view like az/el, instead if not mentioned it uses the default values but rtcheck gets these values from the screen and runs rtcheck.</p>",
        "id": 127357885,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527766904
    },
    {
        "content": "<p>Will try to fix that issue, I think I figured it out</p>",
        "id": 127363143,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527775017
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/wnk6f2Cvt222rjOoRcCp1agG/Selection_006.png\" target=\"_blank\" title=\"Selection_006.png\">Selection_006.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/wnk6f2Cvt222rjOoRcCp1agG/Selection_006.png\" target=\"_blank\" title=\"Selection_006.png\"><img src=\"/user_uploads/1549/wnk6f2Cvt222rjOoRcCp1agG/Selection_006.png\"></a></div>",
        "id": 127366819,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527779400
    },
    {
        "content": "<p>done :)</p>",
        "id": 127366871,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527779416
    },
    {
        "content": "<p>added a flag that is enabled by default and gets disabled when the user mentions az/el explicitly.<br>\naccording to that flag this is run: </p>\n<div class=\"codehilite\"><pre><span></span>if(getfromview){\n    _ged_rt_set_eye_model(gedp, eye_model);\n    viewsize =  gedp-&gt;ged_gvp-&gt;gv_size;\n    quat_mat2quat(quat, gedp-&gt;ged_gvp-&gt;gv_rotation);\n    quat_quat2mat(Viewrotscale, quat);\n} else {\n    check_do_ae(...)\n}\n</pre></div>\n\n\n<p>the rest is handled by grid_setup.<br>\nfor printing the az/el value from the view2model generated from grid_setup I had to use:</p>\n<div class=\"codehilite\"><pre><span></span>    vect_t work, temp;\n    VSET(work, 0, 0, 1);\n    MAT3X3VEC(temp, view2model, work);\n    bn_ae_vec(&amp;azimuth, &amp;elevation, temp);\n    bu_vls_printf(gedp-&gt;ged_result_str, &quot;\\nView: %g azimuth, %g elevation off of front view\\n&quot;, azimuth, elevation);\n</pre></div>",
        "id": 127367085,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527779721
    },
    {
        "content": "<p>I moved <code>rt_prep_parallel(rtip, npsw)</code> to libged, rt from libanalyze because without preping it first I was getting the first value in the plot file as <em>W 0 0 0 0 0 0</em>, these are the values set by <code>pdv_3space(outfp, rtip-&gt;rti_pmin, rtip-&gt;rti_pmax)</code>. <br>\n<code>rt_prep_parallel</code> sets the values for <em>rtip-&gt;rti_pmin</em> and <em>rtip-&gt;rti_pmax</em>. Since I am not passing outfp to libanalyze, I decided to do <code>rt_prep_parallel</code> in libged, rt.</p>",
        "id": 127367651,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527780504
    },
    {
        "content": "<blockquote>\n<p>I moved <code>rt_prep_parallel(rtip, npsw)</code> to libged, rt from libanalyze because without preping it first I was getting the first value in the plot file as <em>W 0 0 0 0 0 0</em>, these are the values set by <code>pdv_3space(outfp, rtip-&gt;rti_pmin, rtip-&gt;rti_pmax)</code>. <br>\n<code>rt_prep_parallel</code> sets the values for <em>rtip-&gt;rti_pmin</em> and <em>rtip-&gt;rti_pmax</em>. Since I am not passing outfp to libanalyze, I decided to do <code>rt_prep_parallel</code> in libged, rt.</p>\n</blockquote>\n<p>This sounds like it could cause problems if somebody doesn't call <em>rt_prep_parallel()</em> before <em>analyze_overlaps()</em>. It is a bad thing if there are non-obvious preconditions for a function call.</p>",
        "id": 127367963,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527780898
    },
    {
        "content": "<p>okay I have a solution in mind, </p>\n<div class=\"codehilite\"><pre><span></span>if (rtip-&gt;needprep) {\n    rt_prep_parallel(rtip, npsw);\n}\n</pre></div>\n\n\n<p>This would be in libanalyze and if I want I can do rt_prep_parallel before as well without no harm</p>",
        "id": 127368483,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527781591
    },
    {
        "content": "<p>What exactly is the issue with calling <em>rt_prep_parallel()</em> in libanalyze? <em>rti_pmin</em> and <em>rti_pmax</em> are different then? Why?</p>",
        "id": 127368731,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527781922
    },
    {
        "content": "<p>umm for outputting plot file in rtcheck, the first row is <code>W 0 0 0 0 0 0</code>, which is wrong,( though W doesn't have any significance )<br>\nThat is caused by <em>rti_pmin</em> and <em>rti_pmax</em> not having any value initialized.<br>\nTheir values are initialized by <em>rt_prep_parallel</em>.</p>",
        "id": 127369131,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527782458
    },
    {
        "content": "<p>once analyze_overlaps is called the only way back to libged is the overlapHandler which is called multiple times for per overlap, so that was not the right place to put the 'first' row of plot-file.</p>",
        "id": 127369199,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527782532
    },
    {
        "content": "<p>I would say the line <code>pdv_3space(outfp, rtip-&gt;rti_pmin, rtip-&gt;rti_pmax);</code> in src/rt/rtcheck.c is wrong. Use the right values there.</p>",
        "id": 127369508,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527782994
    },
    {
        "content": "<p>Did not understand what you mean by right values.</p>",
        "id": 127369603,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527783121
    },
    {
        "content": "<p>According what you say, <em>rtip-&gt;rti_pmin</em> and <em>rtip-&gt;rti_pmax</em> are uninitialized when you call <em>pdv_3space()</em>. What are the right values? The bounding box of the geometry? Should the line be therefore <code>pdv_3space(outfp, bounding_box_min, bounding_box_max);</code>?</p>",
        "id": 127369733,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527783292
    },
    {
        "content": "<p>oh the <code>rtip-&gt;mdl_min</code> and <code>rtip-&gt;mdl_max</code> values?<br>\nbut there some kind of processing happening on <code>rtip-&gt;mdl_min</code> and <code>rtip-&gt;mdl_max</code> on line 377 src/librt/prep.c</p>",
        "id": 127369966,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527783585
    },
    {
        "content": "<p>Yes, this is true. If you want to get the min-max-box you have to call <em>rt_prep()</em> or <em>rt_prep_parallel()</em> first.</p>\n<p>Looking at my own code I saw that I write <code>if (m_rtip-&gt;needprep)</code> before calling the preparation function. Therefore this is probable what you should do too in <em>analyze_overlaps()</em>.<br>\nAnd, only when you need the min-max-box you should call the prep function in advance, i.e. for example in rtcheck.c.</p>",
        "id": 127370451,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527784180
    },
    {
        "content": "<p>Okay cool, so I would remove that from libged/check_overlap.c but keep it in src/rt/rtcheck.c  and in libanalyze will check if it needs prep and call rt_prep</p>",
        "id": 127370610,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527784347
    },
    {
        "content": "<p>The getting from view code I wrote today is fine right? which is not there in progress patch I sent.</p>",
        "id": 127370722,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527784528
    },
    {
        "content": "<p>Do you mean this one?</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">getfromview</span><span class=\"p\">){</span>\n    <span class=\"n\">_ged_rt_set_eye_model</span><span class=\"p\">(</span><span class=\"n\">gedp</span><span class=\"p\">,</span> <span class=\"n\">eye_model</span><span class=\"p\">);</span>\n    <span class=\"n\">viewsize</span> <span class=\"o\">=</span>  <span class=\"n\">gedp</span><span class=\"o\">-&gt;</span><span class=\"n\">ged_gvp</span><span class=\"o\">-&gt;</span><span class=\"n\">gv_size</span><span class=\"p\">;</span>\n    <span class=\"n\">quat_mat2quat</span><span class=\"p\">(</span><span class=\"n\">quat</span><span class=\"p\">,</span> <span class=\"n\">gedp</span><span class=\"o\">-&gt;</span><span class=\"n\">ged_gvp</span><span class=\"o\">-&gt;</span><span class=\"n\">gv_rotation</span><span class=\"p\">);</span>\n    <span class=\"n\">quat_quat2mat</span><span class=\"p\">(</span><span class=\"n\">Viewrotscale</span><span class=\"p\">,</span> <span class=\"n\">quat</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">check_do_ae</span><span class=\"p\">(...)</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n</blockquote>\n<p>This looks OK.</p>",
        "id": 127370797,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527784624
    },
    {
        "content": "<p>yup. Okay <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 127370979,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527784830
    },
    {
        "content": "<p>now what remains to test is cm_anim (<em>rt/do.c:360</em>) option and cm_set (<em>rt/do.c:437</em>) option for matflag, <br>\nI had tried cm_set with just the keyword 'set' but it didn't print anything for both rtcheck and old rtcheck. So I am not sure how it works</p>",
        "id": 127371225,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527785217
    },
    {
        "content": "<p><em>set</em> should work as <code>set width=10</code> for example. You can see the possible values in src/rt/do.c:410 ff. I don't know which of them (if any) are relevant for <em>rtcheck</em>.</p>\n<p><em>anim</em> is marked as experimental, probable not considered to be used with rtcheck. See e.g. <a href=\"http://brlcad.org/OLD/reports/tr-313/chapt3.html#The%20RT%20Matrix%20Operations%20for%20Animation\" target=\"_blank\" title=\"http://brlcad.org/OLD/reports/tr-313/chapt3.html#The%20RT%20Matrix%20Operations%20for%20Animation\">http://brlcad.org/OLD/reports/tr-313/chapt3.html#The%20RT%20Matrix%20Operations%20for%20Animation</a></p>",
        "id": 127372491,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527786865
    },
    {
        "content": "<p>okay with set width=10 and set height=10 it is working</p>",
        "id": 127373068,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527787641
    },
    {
        "content": "<p>humm I had tried <code>set width = 512</code><br>\nthe space caused problems</p>",
        "id": 127373120,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527787683
    },
    {
        "content": "<p>The parser is implemented in src/libbu/parse.c. It is a very simple one.</p>",
        "id": 127373170,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527787751
    },
    {
        "content": "<p>yup got it <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 127373439,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527788080
    },
    {
        "content": "<p>so I think rtcheck is ready. These were the patches I had in mind to submit:</p>\n<ul>\n<li>once check_overlaps is ready will push version 2 for #491.<ul>\n<li>which I believe is ready now.</li>\n</ul>\n</li>\n<li>patch replacing the old rtcheck executable.<ul>\n<li>ready to submit after review.</li>\n</ul>\n</li>\n<li>patch adapting archer and mged for check_overlap command.</li>\n<li>patch covering the documentation related to check_overlap command and updation of documentation for rtcheck.</li>\n</ul>",
        "id": 127373640,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527788301
    },
    {
        "content": "<p>umm I was getting some random outputs as overlays :<br>\n<a href=\"/user_uploads/1549/MZT0IXdKWblnFncbOqgdvrwd/scrambled.png\" target=\"_blank\" title=\"scrambled.png\">scrambled.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/MZT0IXdKWblnFncbOqgdvrwd/scrambled.png\" target=\"_blank\" title=\"scrambled.png\"><img src=\"/user_uploads/1549/MZT0IXdKWblnFncbOqgdvrwd/scrambled.png\"></a></div><p>and crash on a re-run of check_overlaps:</p>\n<div class=\"codehilite\"><pre><span></span>Thread 17 &quot;mged&quot; received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7fffdb168700 (LWP 11854)]\n0x00007ffff77c8405 in log_overlaps (reg1=0x14ff1b0 &quot;/g4/r80&quot;, reg2=0x13165d0 &quot;/g4/r64&quot;, depth=3.4213709577525151,\n    ihit=0x7fffdb167320, ohit=0x7fffdb167340, context=0x7fffffffc430) at /home/sharan/brlcad/src/libged/check_overlaps.c:68\n68      BN_ADD_VLIST(callbackdata-&gt;vbp-&gt;free_vlist_hd, callbackdata-&gt;vhead, ihit, BN_VLIST_LINE_MOVE);\n</pre></div>\n\n\n<p>What I noticed was that the number of overlaps were not matching like the summary prints different count but my count variable says different. So I tried with <code>-P 1</code> option and it worked fine without any strange behaviours.</p>\n<p>Hence it was a issue of threads so I protected the critical section with semaphores in overlapHandler and it fixed it.</p>\n<div class=\"codehilite\"><pre><span></span> bu_semaphore_acquire(BU_SEM_SYSCALL);\n log_overlaps(reg1-&gt;reg_name, reg2-&gt;reg_name, depth, ihit, ohit, context);\n bu_semaphore_release(BU_SEM_SYSCALL);\n</pre></div>",
        "id": 127412226,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527853188
    },
    {
        "content": "<p>found one more issue,<br>\nif I run <code>check_overlaps g4</code> it would plot the overlays.<br>\nBut if next I run <code>check_overlaps</code> the check <code>if (tnobjs &lt;= 0 )</code> passes because <code>ged_count_tops</code> considers the overlay as object and continues execution which is wrong and I get an error from rt_prep_parallel saying <em>no primitives left to prep</em><br>\nso to fix this I added this check <code>if (tnobjs &lt;= 0 )</code> once again after <code>ged_build_tops</code> but now the check <code>if (tnobjs &lt;= 0 )</code> fails and it aborts the execution because <code>ged_build_tops</code> corrects the count.<br>\none other way to solve it would be write the <code>ged_count_tops</code>code inside check_overlaps.c to not count <code>RT_DIR_PHONY_ADDR</code> objects</p>",
        "id": 127412747,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527854055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nI implemented the overlaps_list using bu_list. Because there was a comment <em>(rt/viewcheck.c:341)</em> about the need of doubly linked list to iterate the list backwards looking for duplicate entries.<br>\n<a href=\"user_uploads/1549/iwHpTHHQnMTMVoT46jVhcKct/rtcheck.c\" target=\"_blank\" title=\"user_uploads/1549/iwHpTHHQnMTMVoT46jVhcKct/rtcheck.c\">rtcheck.c</a></p>",
        "id": 127470962,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527957428
    },
    {
        "content": "<p>It looks like you are on a good way. I'm looking forward to get the patches from you which I can apply to the trunk.</p>",
        "id": 127472956,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527961949
    },
    {
        "content": "<p>Thank you :)<br>\nYep I will send the patches soon.. just testing everything to solve any bugs.</p>",
        "id": 127473062,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527962188
    },
    {
        "content": "<blockquote>\n<p>found one more issue,<br>\nif I run <code>check_overlaps g4</code> it would plot the overlays.<br>\nBut if next I run <code>check_overlaps</code> the check <code>if (tnobjs &lt;= 0 )</code> passes because <code>ged_count_tops</code> considers the overlay as object and continues execution which is wrong and I get an error from rt_prep_parallel saying <em>no primitives left to prep</em><br>\nso to fix this I added this check <code>if (tnobjs &lt;= 0 )</code> once again after <code>ged_build_tops</code> but now the check <code>if (tnobjs &lt;= 0 )</code> fails and it aborts the execution because <code>ged_build_tops</code> corrects the count.<br>\none other way to solve it would be write the <code>ged_count_tops</code>code inside check_overlaps.c to not count <code>RT_DIR_PHONY_ADDR</code> objects</p>\n</blockquote>\n<p>what should I do about this? the 2nd time check was a quick fix</p>",
        "id": 127473072,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527962260
    },
    {
        "content": "<p>OK, this issue is still open. I'll look at it tomorrow. Can I reproduce it with your last patch?</p>",
        "id": 127473244,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527962587
    },
    {
        "content": "<p>I will send a full patch right now <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 127473289,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527962652
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/_OAGgKS53r8UYT2YUHEpWwZE/02.06.progress.patch\" target=\"_blank\" title=\"02.06.progress.patch\">02.06.progress.patch</a></p>",
        "id": 127473454,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527963068
    },
    {
        "content": "<p>oh and I saw these function calls in libged/rtcheck: line 283<br>\n<code>GED_CHECK_DRAWABLE(gedp, GED_ERROR)</code> and <code>GED_CHECK_VIEW(gedp, GED_ERROR)</code> <br>\nNot sure what they do</p>",
        "id": 127473510,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527963210
    },
    {
        "content": "<p>they check <code>_gedp-&gt;ged_gdp == GED_DRAWABLE_NULL</code> and <code>_gedp-&gt;ged_gvp == GED_VIEW_NULL</code> but what do they signify?</p>",
        "id": 127473562,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527963313
    },
    {
        "content": "<p>Maybe the <em>gedp</em> hasn't always a view attached. I cannot test it at the moment, but you can start mged without graphics attached, for example.</p>",
        "id": 127473764,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527963774
    },
    {
        "content": "<p>yep that is it, I launched mged with -c and ran rtcheck it said <em>A view does not exist.</em></p>",
        "id": 127473917,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527964149
    },
    {
        "content": "<p>You see, we learned something again :)</p>",
        "id": 127473968,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1527964282
    },
    {
        "content": "<p>okay then once that issue is resolved I would submit the v2 for patch #491, gonna review rtcheck for submission in the meantime.</p>",
        "id": 127474059,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1527964505
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/* else copy all the objects in view if any */</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nobjs</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">nvobjs</span> <span class=\"o\">=</span> <span class=\"n\">ged_build_tops</span><span class=\"p\">(</span><span class=\"n\">gedp</span><span class=\"p\">,</span> <span class=\"n\">objp</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">tobjtab</span><span class=\"p\">[</span><span class=\"n\">tnobjs</span><span class=\"p\">]);</span>\n\n    <span class=\"cm\">/* now, as we know the exact number of objects in the view, check again for &gt; 0 */</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nvobjs</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">bu_vls_printf</span><span class=\"p\">(</span><span class=\"n\">gedp</span><span class=\"o\">-&gt;</span><span class=\"n\">ged_result_str</span><span class=\"p\">,</span><span class=\"s\">&quot;no objects specified or in view, aborting</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n        <span class=\"n\">bu_free</span><span class=\"p\">(</span><span class=\"n\">tobjtab</span><span class=\"p\">,</span> <span class=\"s\">&quot;free tobjtab&quot;</span><span class=\"p\">);</span>\n        <span class=\"n\">tobjtab</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">GED_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 127502171,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528030266
    },
    {
        "content": "<p>What bothers me more is the <code>if (!nobjs &amp;&amp; getfromview) {</code> line. It makes that <code>draw g4</code> + <code>check_overlaps</code> gives a different result as <code>check_overlaps g4</code>, but I don't have a better idea. Omitting the <code>!nobjs &amp;&amp;</code> part leads to not finding any overlap because of a degenerated view.</p>",
        "id": 127502284,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528030513
    },
    {
        "content": "<p>Probably it's best as it is.</p>",
        "id": 127502293,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528030544
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/* else copy all the objects in view if any */</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nobjs</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">nvobjs</span> <span class=\"o\">=</span> <span class=\"n\">ged_build_tops</span><span class=\"p\">(</span><span class=\"n\">gedp</span><span class=\"p\">,</span> <span class=\"n\">objp</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">tobjtab</span><span class=\"p\">[</span><span class=\"n\">tnobjs</span><span class=\"p\">]);</span>\n\n    <span class=\"cm\">/* now, as we know the exact number of objects in the view, check again for &gt; 0 */</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nvobjs</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">bu_vls_printf</span><span class=\"p\">(</span><span class=\"n\">gedp</span><span class=\"o\">-&gt;</span><span class=\"n\">ged_result_str</span><span class=\"p\">,</span><span class=\"s\">&quot;no objects specified or in view, aborting</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n        <span class=\"n\">bu_free</span><span class=\"p\">(</span><span class=\"n\">tobjtab</span><span class=\"p\">,</span> <span class=\"s\">&quot;free tobjtab&quot;</span><span class=\"p\">);</span>\n        <span class=\"n\">tobjtab</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">GED_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n</blockquote>\n<p>yeah this looks good, a comment so that it's not confusing</p>\n<blockquote>\n<p>What bothers me more is the <code>if (!nobjs &amp;&amp; getfromview) {</code> line. It makes that <code>draw g4</code> + <code>check_overlaps</code> gives a different result as <code>check_overlaps g4</code>, but I don't have a better idea. Omitting the <code>!nobjs &amp;&amp;</code> part leads to not finding any overlap because of a degenerated view.</p>\n</blockquote>\n<p>it gives a different result because, when doing <code>check_overlaps g4</code> it expects the view info from the user and if not provided uses the default values on the other hand <code>draw g4</code> + <code>check_overlaps</code> takes the view info and checks for overlaps as it is shown on the screen</p>",
        "id": 127502383,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528030694
    },
    {
        "content": "<p>welp the recent changes broke <em>multiview</em> command, but I know how to fix it :)</p>",
        "id": 127504071,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528034682
    },
    {
        "content": "<p>I am only initializing overlaplist pointer olist in main and free it in printoverlaps fuction.<br>\nbut multiview doesn't exit instead it loops in do_frame,  so in 2nd run causes seg fault.</p>",
        "id": 127504169,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528034939
    },
    {
        "content": "<p>hence I am moving the initializing of overlaplist to do_frame therefore for every run it creates a new overlaplist. and frees the overlaplist after printing them</p>",
        "id": 127504219,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528035017
    },
    {
        "content": "<blockquote>\n<p>it gives a different result because, when doing <code>check_overlaps g4</code> it expects the view info from the user and if not provided uses the default values on the other hand <code>draw g4</code> + <code>check_overlaps</code> takes the view info and checks for overlaps as it is shown on the screen</p>\n</blockquote>\n<p>Understood, but the idea was: If an information isn't provided by command line parameters, use the view to get them. The issue which came up with this is, that the view may not contain no useful data too. Therefore, it's probable OK as it is now.</p>",
        "id": 127504221,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528035055
    },
    {
        "content": "<blockquote>\n<p>I am only initializing overlaplist pointer olist in main and free it in printoverlaps fuction.<br>\nbut multiview doesn't exit instead it loops in do_frame,  so in 2nd run causes seg fault.</p>\n</blockquote>\n<p>Then, why don't you free it in <em>main()</em>?</p>",
        "id": 127504263,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528035124
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I am only initializing overlaplist pointer olist in main and free it in printoverlaps fuction.<br>\nbut multiview doesn't exit instead it loops in do_frame,  so in 2nd run causes seg fault.</p>\n</blockquote>\n<p>Then, why don't you free it in <em>main()</em>?</p>\n</blockquote>\n<p>yeah that works but wouldn't I need a new overlaplist for every run with different az/el values else all the runs would have the data from previous run?</p>",
        "id": 127504318,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528035265
    },
    {
        "content": "<p>Expected : <a href=\"/user_uploads/1549/JyvXFltkezddur3yG8qBOHYQ/rtcheck_old_output.txt\" target=\"_blank\" title=\"rtcheck_old_output.txt\">rtcheck_old_output.txt</a> </p>\n<p>What I get if free only in main: <a href=\"/user_uploads/1549/puJeiouRHAWuKoVdNzQgHmy8/rtcheck_output.txt\" target=\"_blank\" title=\"rtcheck_output.txt\">rtcheck_output.txt</a></p>",
        "id": 127504477,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528035706
    },
    {
        "content": "<p>check frame 1 and frame 2 the difference would be clear. rtcheckold gets 0 overlaps but my rtcheck since it is freeing only in the end gets the same overlaps as frame 0 because it appends to the previous result</p>",
        "id": 127504532,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528035803
    },
    {
        "content": "<p>OK, that's why you moved the allocation and free to <em>rtcheck_do_frame()</em>. Sounds reasonable.</p>",
        "id": 127504743,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528036224
    },
    {
        "content": "<p>yep <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 127504768,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528036262
    },
    {
        "content": "<p>okay so I am gonna submit the patch for check_overlaps</p>",
        "id": 127504946,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528036609
    },
    {
        "content": "<p>will do a quick test on archer and see how it behaves with plotting now</p>",
        "id": 127505043,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528036803
    },
    {
        "content": "<p>Accepted. Some comments:</p>\n<ul>\n<li>src/libged/check_overlaps.c<ul>\n<li>file name (in the first line)</li>\n<li>bn/plot3.h really necessary?</li>\n<li>double new-line in lines 66/67</li>\n</ul>\n</li>\n</ul>",
        "id": 127507621,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528042869
    },
    {
        "content": "<p>okay got it. Will do one more patch fixing that.</p>",
        "id": 127508092,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528043848
    },
    {
        "content": "<p>Made additional changes as well. Using const char for options and help string and a typo fix.</p>",
        "id": 127508721,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528045137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nI don't know how to fix the comment <em>on line 421 rt/do.c</em> its in the <code>struct bu_structparse set_parse[]</code>, I have copied this struct in rtcheck.c too.</p>",
        "id": 127509183,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528046163
    },
    {
        "content": "<p>in the meantime I thought I will start working on the next patch, that is adaptation of GUI to use check_overlaps instead of rtcheck and get rid of <em>libged/rtcheck.c</em></p>",
        "id": 127541530,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528113692
    },
    {
        "content": "<p>while doing that I hit a few questions like:<br>\n1) <em>tclscripts/lib/Display.tcl</em>  and <em>tclscripts/lib/Drawable.tcl</em> there is definition of rtcheck but the file is deprecated, so I can just remove them right? without adding check_overlaps there.<br>\n2) in <em>tclscripts/lib/Ged.tcl</em> at line 3213 there is a method called pane_rtcheck. I am not sure what it does different than normal rtcheck which is also defined in the file.</p>",
        "id": 127555866,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528133210
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nI don't know how to fix the comment <em>on line 421 rt/do.c</em> its in the <code>struct bu_structparse set_parse[]</code>, I have copied this struct in rtcheck.c too.</p>\n</blockquote>\n<p>I see two solutions:<br>\n1. Leave it as it is. This may not be optimal, but you don't change the behavior this way. This is a valid course of action.<br>\n2. Introduce <em>rtcheck_bot_minpieces</em> etc. variables and use <code>bu_byteoffset(rtcheck_bot_minpieces)</code> etc. in <em>set_parse</em>. Then set <code>rtcheck_bot_minpieces = rt_bot_minpieces;</code> etc. before parsing the arguments and <code>rt_bot_minpieces = rtcheck_bot_minpieces;</code> etc. afterward.</p>",
        "id": 127556005,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528133379
    },
    {
        "content": "<p>hmm, yeah 2nd option seems fine would try it out..</p>",
        "id": 127556327,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528133747
    },
    {
        "content": "<blockquote>\n<p>while doing that I hit a few questions like:<br>\n1) <em>tclscripts/lib/Display.tcl</em>  and <em>tclscripts/lib/Drawable.tcl</em> there is definition of rtcheck but the file is deprecated, so I can just remove them right? without adding check_overlaps there.</p>\n</blockquote>\n<p>Right.</p>\n<blockquote>\n<p>2) in <em>tclscripts/lib/Ged.tcl</em> at line 3213 there is a method called pane_rtcheck. I am not sure what it does different than normal rtcheck which is also defined in the file.</p>\n</blockquote>\n<p>You probable need the <em>pane_~</em> method too. They look like a window specific version of the commands, and you handle with the view in <em>ged_check_overlaps()</em>.</p>",
        "id": 127556787,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528134249
    },
    {
        "content": "<p>okay got it thanks!<br>\nbut then normal rtcheck uses something like : <br>\n<code>eval $mGed rtcheck $itk_component($itk_option(-pane)) $args</code><br>\nbut my check_overlaps just uses :<br>\n<code>eval $mGed check_overlaps $args</code><br>\nI tried the same like :<br>\n<code>eval $mGed check_overlaps $itk_component($itk_option(-pane)) $args</code> <br>\nBut gave an error : <br>\n<em>Error: error: object '.archer0.hpane.pane0.childsite.vpane.pane1.childsite.canvasF.mged.pane0.childsite.pw.pane1.childsite.view' does not exists, aborting.</em><br>\nand these in logs.. </p>\n<div class=\"codehilite\"><pre><span></span>db_lookup(.archer0.hpane.pane0.childsite.vpane.pane1.childsite.canvasF.mged.pane0.childsite.pw.pane1.childsite.view) failed: .archer0.hpane.pane0.childsite.vpane.pane1.childsite.canvasF.mged.pane0.childsite.pw.pane1.childsite.view does not exist\ndb_string_to_path() of &#39;.archer0.hpane.pane0.childsite.vpane.pane1.childsite.canvasF.mged.pane0.childsite.pw.pane1.childsite.view&#39; failed on &#39;.archer0.hpane.pane0.childsite.vpane.pane1.childsite.canvasF.mged.pane0.childsite.pw.pane1.childsite.view&#39;\ndb_walk_tree: warning - .archer0.hpane.pane0.childsite.vpane.pane1.childsite.canvasF.mged.pane0.childsite.pw.pane1.childsite.view not found.\n</pre></div>",
        "id": 127557089,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528134631
    },
    {
        "content": "<p>Maybe, you can find out how the other commands handle the pane information?</p>",
        "id": 127557495,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528135184
    },
    {
        "content": "<p>okay sure I will have a look at it :)</p>",
        "id": 127557605,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528135274
    },
    {
        "content": "<p>will post my progress for today</p>",
        "id": 127557829,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528135545
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/0fNdX5IlhbSDCzQSzfB4LDSr/4.06_progress.patch\" target=\"_blank\" title=\"4.06_progress.patch\">4.06_progress.patch</a></p>",
        "id": 127557906,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528135657
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/qmjewR95soO3Z0g7XaaUTyoE/Screenshot-from-2018-06-04-23-38-34.png\" target=\"_blank\" title=\"Screenshot-from-2018-06-04-23-38-34.png\">Screenshot-from-2018-06-04-23-38-34.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/qmjewR95soO3Z0g7XaaUTyoE/Screenshot-from-2018-06-04-23-38-34.png\" target=\"_blank\" title=\"Screenshot-from-2018-06-04-23-38-34.png\"><img src=\"/user_uploads/1549/qmjewR95soO3Z0g7XaaUTyoE/Screenshot-from-2018-06-04-23-38-34.png\"></a></div><p>I also noticed when I draw it won't show up on the screen, I tried the same with prebuild archer it worked fine. Is it a archer bug? or did I do something :/<br>\n<a href=\"/user_uploads/1549/rHdDYFVekVMZX6xzBogILAti/Archer-7.27.0_011.png\" target=\"_blank\" title=\"Archer-7.27.0_011.png\">Archer-7.27.0_011.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/rHdDYFVekVMZX6xzBogILAti/Archer-7.27.0_011.png\" target=\"_blank\" title=\"Archer-7.27.0_011.png\"><img src=\"/user_uploads/1549/rHdDYFVekVMZX6xzBogILAti/Archer-7.27.0_011.png\"></a></div>",
        "id": 127558063,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528135830
    },
    {
        "content": "<p>Hmm, <code>draw g4</code> works for me (compiled yesterday with your patch).</p>",
        "id": 127558644,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528136638
    },
    {
        "content": "<p>oh and you didn't do anything extra?</p>",
        "id": 127558707,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528136695
    },
    {
        "content": "<p>doing <code>rt</code> shows it but it wont show as wireframe</p>",
        "id": 127558975,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528137049
    },
    {
        "content": "<p>But, didn't you posted Archer screen shots here with wireframe images on them?</p>",
        "id": 127559056,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528137149
    },
    {
        "content": "<p>nope I have not, all screenshots were from mged. Is compiling any different, I just do <code>cmake ..</code> and then <code>make -j4</code></p>",
        "id": 127559154,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528137283
    },
    {
        "content": "<p>Beats me, have you checked that you've installed all required libraries from <a href=\"https://brlcad.org/wiki/Compiling\" target=\"_blank\" title=\"https://brlcad.org/wiki/Compiling\">https://brlcad.org/wiki/Compiling</a>? Does the cmake run print any complains about missing libraries?</p>",
        "id": 127560148,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528138642
    },
    {
        "content": "<p><a href=\"https://pastebin.com/msdrMFYt\" target=\"_blank\" title=\"https://pastebin.com/msdrMFYt\">https://pastebin.com/msdrMFYt</a></p>",
        "id": 127560348,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528138911
    },
    {
        "content": "<p>cmake logs<br>\nI don't see any complaints though there are a few things it says not found etc</p>",
        "id": 127560401,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528138946
    },
    {
        "content": "<p>but if its critical it should have aborted it <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span></p>",
        "id": 127560417,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528138971
    },
    {
        "content": "<p>all the dependencies on <a href=\"https://brlcad.org/wiki/Compiling\" target=\"_blank\" title=\"https://brlcad.org/wiki/Compiling\">https://brlcad.org/wiki/Compiling</a> are statisfied</p>",
        "id": 127560535,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528139123
    },
    {
        "content": "<p>I see, that you don't compile with OpenGL. This could lead to unexpected behavior.</p>",
        "id": 127560543,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528139136
    },
    {
        "content": "<p>Okay I will try with OpenGL. Let me see if I can figure out how to do that</p>",
        "id": 127560898,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528139545
    },
    {
        "content": "<p>yes! that was it. Now it is working great :)</p>",
        "id": 127564111,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528143606
    },
    {
        "content": "<p>Yeah, Archer (unlike MGED) requires OpenGL for display.</p>",
        "id": 127576025,
        "sender_full_name": "starseeker",
        "timestamp": 1528161781
    },
    {
        "content": "<p>what's odd is that archer actually started with opengl compiled off</p>",
        "id": 127581463,
        "sender_full_name": "Sean",
        "timestamp": 1528172589
    },
    {
        "content": "<p>Odd indeed</p>",
        "id": 127585138,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528180335
    },
    {
        "content": "<p>humm after hours of figuring out how pane info is handled in <em>tclscripts/archer/</em> I had almost given up :/<br>\nBut <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> your suggestion helped ; ) I tried to backtrace rtcheck on a vannila build and found out that it was actually handled in libtclcad/tclcadobj.c using <code>to_view_func</code>. <br>\nchanging <code>{\"check_overlaps\", (char *)0, TO_UNLIMITED, to_pass_through_func, ged_check_overlaps}</code> to <code>{\"check_overlaps\", (char *)0, TO_UNLIMITED, to_view_func, ged_check_overlaps}</code> solved it :)</p>",
        "id": 127610266,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528217597
    },
    {
        "content": "<p>I also ended up adding cmd_~ wrapper for check_overlaps instead of plainwrapper.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span>\n<span class=\"nf\">cmd_check_overlaps</span><span class=\"p\">(</span><span class=\"n\">ClientData</span> <span class=\"n\">UNUSED</span><span class=\"p\">(</span><span class=\"n\">clientData</span><span class=\"p\">),</span>  <span class=\"n\">Tcl_Interp</span> <span class=\"o\">*</span><span class=\"n\">interp</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span>  <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n    <span class=\"n\">Tcl_DString</span> <span class=\"n\">ds</span><span class=\"p\">;</span>\n\n    <span class=\"n\">CHECK_DBI_NULL</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/* skip past _mged_ */</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;_&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;m&#39;</span> <span class=\"o\">&amp;&amp;</span>\n    <span class=\"n\">bu_strncmp</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s\">&quot;_mged_&quot;</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n\n    <span class=\"n\">Tcl_DStringInit</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ds</span><span class=\"p\">);</span>\n\n    <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">ged_check_overlaps</span><span class=\"p\">(</span><span class=\"n\">gedp</span><span class=\"p\">,</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">argv</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Tcl_DStringAppend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"n\">bu_vls_addr</span><span class=\"p\">(</span><span class=\"n\">gedp</span><span class=\"o\">-&gt;</span><span class=\"n\">ged_result_str</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">Tcl_DStringResult</span><span class=\"p\">(</span><span class=\"n\">interp</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">ds</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">==</span> <span class=\"n\">GED_OK</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">TCL_OK</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">TCL_ERROR</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>It is quite similar to cmd_rt <em>(just difference is <code>ged_check_overlaps</code> in-place of <code>ged_rt</code>)</em>, but I don't know how this will help xD. Like when does the skipping of <em>_mged_</em> is required?</p>",
        "id": 127610683,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528218161
    },
    {
        "content": "<p>hey the adaptation helped MGED also. Now I can press tab after type <em>ch</em> and it will complete to <em>check_overlaps</em> :)</p>",
        "id": 127614285,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528222842
    },
    {
        "content": "<p>Today's progress..<br>\n<a href=\"/user_uploads/1549/JUKOFYB2_EQRfftrLQeWJwgY/5.06.progress.patch\" target=\"_blank\" title=\"5.06.progress.patch\">5.06.progress.patch</a></p>",
        "id": 127615795,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528224608
    },
    {
        "content": "<p>Impressive :)<br>\nRegarding <em>_mged_</em> I had to look at the code (at the earliest on Thursday). But, my first idea would be that this TCL script is considered to run on mged too. However, I'm not sure, had to look at the code first.</p>",
        "id": 127620814,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528230404
    },
    {
        "content": "<p>OK, you found this too :)</p>",
        "id": 127620907,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528230491
    },
    {
        "content": "<p>BTW i submitted the patch for rtcheck, in that I had deleted viewcheck.c but later I thought is deleting okay?  should I have had put a <em>deprecated</em> comment and just remove it from cmakelists?</p>",
        "id": 127657144,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528293126
    },
    {
        "content": "<p>I have started to update the documentation now ..</p>",
        "id": 127676313,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528317071
    },
    {
        "content": "<p>humm I don't understand why I can't see the changes. make says it built but when I open the html page no change :/</p>",
        "id": 127677339,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528318244
    },
    {
        "content": "<p>okay I am seeing the changes I made in man1 and mann in MGED</p>",
        "id": 127678921,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528320195
    },
    {
        "content": "<blockquote>\n<p>humm I don't understand why I can't see the changes. make says it built but when I open the html page no change :/</p>\n</blockquote>\n<p>Okay scratch that xD I was looking the wrong directory</p>",
        "id": 127679817,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528320798
    },
    {
        "content": "<blockquote>\n<p>So I did that experiment on my check_overlaps turns out <code>ged_build_tops</code> returned one less number than <code>ged_count_tops</code> when there are overlays displayed.</p>\n</blockquote>\n<p>I can see how this would be confusing, one building from the .g and the other counting what's displayed (not from the .g)</p>",
        "id": 127690484,
        "sender_full_name": "Sean",
        "timestamp": 1528339416
    },
    {
        "content": "<blockquote>\n<p>1) if a user runs <code>check_overlaps g4</code> and g4 is not drawn then it shouldn't display the overlaps<br>\nBut displays overlays when g4 is drawn. This method would require checking of mentioned objects and visible objects.</p>\n</blockquote>\n<p>On the surface, this seems reasonable behavior.  I'd suggest also adding a flag to explicitly draw or not draw overlaps, something like \"check overlaps -V g4\" and \"check overlaps -v g4\" to turn off/on respectively.</p>\n<blockquote>\n<p>3) like <code>rtcheck</code> command does not allow to explicitly mention objects (but executable rtcheck does allow it) with command like <code>rtcheck g4</code>, I could make check_overlaps work strictly for only visible objects.</p>\n</blockquote>\n<p>Also reasonable.</p>",
        "id": 127692265,
        "sender_full_name": "Sean",
        "timestamp": 1528343279
    },
    {
        "content": "<blockquote>\n<p>It is quite similar to cmd_rt <em>(just difference is <code>ged_check_overlaps</code> in-place of <code>ged_rt</code>)</em>, but I don't know how this will help xD. Like when does the skipping of <em>_mged_</em> is required?</p>\n</blockquote>\n<p>You don't really need to worry about the _mged_ bit.  But if you want to know, it's because all commands are registered twice with the Tcl interpreter, one with and without a _mged_ prefix.  This is because users can override commands and certain places in the code, we need to make sure we're calling the original.</p>",
        "id": 127693400,
        "sender_full_name": "Sean",
        "timestamp": 1528345458
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>1) if a user runs <code>check_overlaps g4</code> and g4 is not drawn then it shouldn't display the overlaps<br>\nBut displays overlays when g4 is drawn. This method would require checking of mentioned objects and visible objects.</p>\n</blockquote>\n<p>On the surface, this seems reasonable behavior.  I'd suggest also adding a flag to explicitly draw or not draw overlaps, something like \"check overlaps -V g4\" and \"check overlaps -v g4\" to turn off/on respectively.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I thought about this for a while and discovered the following cases: </p>\n<ul>\n<li>Case 1 : If no objects are mentioned : gets objects from view, gets view info and plots the overlays.</li>\n<li>Case 2 : If objects are mentioned :<ul>\n<li>Case 2.1 : No objects are actually drawn : gets objects from argv, use view info provided by the user else default values, plot overlays if explicitly mentioned.</li>\n<li>Case 2.2 : If the mentioned objects are already drawn : follow Case 1.</li>\n<li>Case 2.3 : If mentioned objects not match the visible objects : follow Case 2.1. </li>\n</ul>\n</li>\n</ul>\n<p>Implementation can be a bit complicated but not impossible.<br>\nAnd when thinking all this I found a flaw, what if the user says <code>check_overlaps g4 g4</code> the current implementation of check_overlaps doesn't handle this exception.</p>\n<blockquote>\n<blockquote>\n<p>3) like <code>rtcheck</code> command does not allow to explicitly mention objects (but executable rtcheck does allow it) with command like <code>rtcheck g4</code>, I could make check_overlaps work strictly for only visible objects.</p>\n</blockquote>\n<p>Also reasonable.</p>\n</blockquote>\n<p>At the end this seems best with very straight forward implementation.</p>",
        "id": 127713472,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528370775
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>It is quite similar to cmd_rt <em>(just difference is <code>ged_check_overlaps</code> in-place of <code>ged_rt</code>)</em>, but I don't know how this will help xD. Like when does the skipping of <em>_mged_</em> is required?</p>\n</blockquote>\n<p>You don't really need to worry about the _mged_ bit.  But if you want to know, it's because all commands are registered twice with the Tcl interpreter, one with and without a _mged_ prefix.  This is because users can override commands and certain places in the code, we need to make sure we're calling the original.</p>\n</blockquote>\n<p>okay, I did find the code that adds the _mged_ prefix but was confused when I saw it being registered twice with <em>Tcl_CreateCommand</em>. Thanks for clearing the confusion :)</p>",
        "id": 127713524,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528370919
    },
    {
        "content": "<p>In general your task is a restructuring and refactoring one, so you certainly donâ€™t have to figure out the best usage.. you can focus on the code and making it do what it currently does.  Overlaps are just one of a whole suite of things that users want to check, and even overlaps arenâ€™t done the best we could.</p>",
        "id": 127720528,
        "sender_full_name": "Sean",
        "timestamp": 1528381606
    },
    {
        "content": "<p>Thatâ€™s to say youâ€™re doing great :) keep up the good work!</p>",
        "id": 127720916,
        "sender_full_name": "Sean",
        "timestamp": 1528381974
    },
    {
        "content": "<blockquote>\n<p>In general your task is a restructuring and refactoring one, so you certainly donâ€™t have to figure out the best usage.. you can focus on the code and making it do what it currently does.  Overlaps are just one of a whole suite of things that users want to check, and even overlaps arenâ€™t done the best we could.</p>\n</blockquote>\n<p>Okay understood! So I will make check_overlaps behave like existing rtcheck command and always get objects from view.<br>\nAnd I fixed the flaw of duplicate objects given for the my version of rtcheck program, because the existing rtcheck handles it fine.<br>\nHere is what I did:</p>\n<ul>\n<li>This function in main to add the objects to list</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">nobjs</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">add_to_objlist</span><span class=\"p\">(</span><span class=\"n\">objtab</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">objlist</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">bu_log</span><span class=\"p\">(</span><span class=\"s\">&quot;&#39;%s&#39; object repeated, duplicates ignored</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span><span class=\"n\">objtab</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<ul>\n<li>add_to_objlist looks like this :</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">HIDDEN</span> <span class=\"kt\">int</span>\n<span class=\"nf\">add_to_objlist</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">object</span><span class=\"p\">,</span> <span class=\"k\">struct</span> <span class=\"n\">object_list</span> <span class=\"o\">**</span><span class=\"n\">objlistp</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">object_list</span> <span class=\"o\">*</span><span class=\"n\">op</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">object_list</span> <span class=\"o\">*</span><span class=\"n\">new_op</span><span class=\"p\">;</span>\n    <span class=\"n\">BU_GET</span><span class=\"p\">(</span><span class=\"n\">new_op</span><span class=\"p\">,</span> <span class=\"k\">struct</span> <span class=\"n\">object_list</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">BU_LIST_FOR</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">objlistp</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">l</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">BU_STR_EQUAL</span><span class=\"p\">(</span><span class=\"n\">object</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n        <span class=\"n\">bu_free</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">new_op</span><span class=\"p\">,</span> <span class=\"s\">&quot;object list&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">new_op</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">object</span><span class=\"p\">;</span>\n    <span class=\"n\">BU_LIST_INSERT</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">objlistp</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">l</span><span class=\"p\">),</span> <span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">new_op</span><span class=\"o\">-&gt;</span><span class=\"n\">l</span><span class=\"p\">));</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<ul>\n<li>and then used a BU_LIST_FOR for rt_gettree as well, at the end freed the list.</li>\n</ul>\n<p>did the same for the <em>tree</em> command that is used to input obj list from a file using matflag.<br>\nPS: don't mind indentation shown here, It's alright in the actual program ;)</p>",
        "id": 127721476,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528382547
    },
    {
        "content": "<blockquote>\n<p>Thatâ€™s to say youâ€™re doing great :) keep up the good work!</p>\n</blockquote>\n<p>Thank you :)</p>",
        "id": 127721488,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528382567
    },
    {
        "content": "<p>now check_overlaps will take objects from view only. I also updated the related help data too.</p>",
        "id": 127725359,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528387368
    },
    {
        "content": "<p>humm I don't understand the relevance of <em>doc/html/manuals/cadwidgets/</em> and also Database, Display, Drawable, QuadDisplay, MGED are deprecated. So as discussed before I am removing rtcheck related things but not adding check_overlaps there.</p>",
        "id": 127726919,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528389516
    },
    {
        "content": "<p><em>doc/tool_categories.txt</em> is the list of programs or commands? it seems like list of programs. So not adding check_overlaps there.</p>",
        "id": 127726999,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528389634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> If I submit a v2 for <a href=\"https://sourceforge.net/p/brlcad/patches/494/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/patches/494/\">https://sourceforge.net/p/brlcad/patches/494/</a> should I do it with the changes I did today to check_overlaps?</p>",
        "id": 127729583,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528392992
    },
    {
        "content": "<blockquote>\n<p>In general your task is a restructuring and refactoring one, so you certainly donâ€™t have to figure out the best usage.. you can focus on the code and making it do what it currently does.  Overlaps are just one of a whole suite of things that users want to check, and even overlaps arenâ€™t done the best we could.</p>\n</blockquote>\n<p>This doesn't mean however that you can't realize own ideas and improve the behavior.</p>\n<p>I don't understand what the issue with the drawing of overlaps of not displayed elements is. What's the problem there? I've rather a problem with drawing the overlaps on visible elements because they are hard to see. I've just tried<code>check_overlaps g4</code> an a clear screen in Archer. This gave me a better view on the problem areas as I got before.</p>",
        "id": 127729738,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528393142
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> If I submit a v2 for <a href=\"https://sourceforge.net/p/brlcad/patches/494/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/patches/494/\">https://sourceforge.net/p/brlcad/patches/494/</a> should I do it with the changes I did today to check_overlaps?</p>\n</blockquote>\n<p>Put them back.</p>",
        "id": 127729846,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528393252
    },
    {
        "content": "<blockquote>\n<p><em>doc/tool_categories.txt</em> is the list of programs or commands? it seems like list of programs. So not adding check_overlaps there.</p>\n</blockquote>\n<p>Right.</p>",
        "id": 127730018,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528393497
    },
    {
        "content": "<blockquote>\n<p>I don't understand what the issue with the drawing of overlaps of not displayed elements is. What's the problem there? I've rather a problem with drawing the overlaps on visible elements because they are hard to see. I've just tried<code>check_overlaps g4</code> an a clear screen in Archer. This gave me a better view on the problem areas as I got before.</p>\n</blockquote>\n<p>Agreed they are hard to see with objects shown but for me seeing them float in air also doesn't help much.<br>\nThe objects are helpful when checking for overlaps very closely like : <br>\n<a href=\"/user_uploads/1549/yEIbN2pOFKjyay_jnuuYzUbw/Screenshot-from-2018-06-07-23-16-04.png\" target=\"_blank\" title=\"Screenshot-from-2018-06-07-23-16-04.png\">Screenshot-from-2018-06-07-23-16-04.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/yEIbN2pOFKjyay_jnuuYzUbw/Screenshot-from-2018-06-07-23-16-04.png\" target=\"_blank\" title=\"Screenshot-from-2018-06-07-23-16-04.png\"><img src=\"/user_uploads/1549/yEIbN2pOFKjyay_jnuuYzUbw/Screenshot-from-2018-06-07-23-16-04.png\"></a></div><blockquote>\n<p>Put them back.</p>\n</blockquote>\n<p>Yeah I had a backup :D</p>",
        "id": 127730105,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528393611
    },
    {
        "content": "<blockquote>\n<p>Agreed they are hard to see with objects shown but for me seeing them float in air also doesn't help much.</p>\n</blockquote>\n<p>But, you can do this only if you have seen them. For example, I could only see the overlaps at the tires, but <em>seeing them float in air</em> showed the ones below the driver's cab too. Now, I can have a closer look at them with <em>g4</em> switched on.</p>",
        "id": 127730309,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528393863
    },
    {
        "content": "<p>yeah that is true!</p>",
        "id": 127730559,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528394211
    },
    {
        "content": "<p>the floating in air is helpful because the constructor knows where he placed the objects and if some standard view like left/right is used then it can be easy to identify</p>",
        "id": 127730645,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528394339
    },
    {
        "content": "<p>It was really reasonable to let <em>check_overlaps</em> behave like <em>rtchek</em> in mged. It was, until you had the great idea of allowing to explicitly mention the objects. This extends the possibilities and makes things easier. Sorry, but by implementing this feature messed it up ;) I don't want the old behavior back.</p>",
        "id": 127730849,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528394570
    },
    {
        "content": "<blockquote>\n<p>It was really reasonable to let <em>check_overlaps</em> behave like <em>rtchek</em> in mged. It was, until you had the great idea of allowing to explicitly mention the objects. This extends the possibilities and makes things easier. Sorry, but by implementing this feature messed it up ;) I don't want the old behavior back.</p>\n</blockquote>\n<p>haha it was not an idea but for testing purposes before I get into the code of getting objects from view xD. Well if that now counts as a good one then I am good :)</p>",
        "id": 127730957,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528394751
    },
    {
        "content": "<p>Umm I think my patch for adaptation is ready<br>\ndocumentation one would be ready by tomorrow.</p>",
        "id": 127731636,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528395689
    },
    {
        "content": "<p>That's OK. I couldn't check them today anyway.</p>",
        "id": 127731722,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528395783
    },
    {
        "content": "<p>okay cool <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 127731793,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528395853
    },
    {
        "content": "<p>hey can we rename executable rtcheck to check_overlaps as well for consistency ?</p>",
        "id": 127765928,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528455327
    },
    {
        "content": "<p>the documentation would be less confusing if that is done, in my opinion.</p>",
        "id": 127766027,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528455489
    },
    {
        "content": "<blockquote>\n<p>This doesn't mean however that you can't realize own ideas and improve the behavior.</p>\n</blockquote>\n<p>yes, absolutely this too!  apologies if it came across as suggesting you <em>not</em> think about and make things better.  sometimes the best solutions come from fresh eyes.</p>",
        "id": 127778128,
        "sender_full_name": "Sean",
        "timestamp": 1528472092
    },
    {
        "content": "<blockquote>\n<p>hey can we rename executable rtcheck to check_overlaps as well for consistency ?</p>\n</blockquote>\n<p>we'd have to follow our change policy (see top-level CHANGES file), but that's a bit too specific for my command sense taste.</p>\n<p>we did a whole command planning overhaul a while back to plan out how we're going to consolidate the crazy top-level namespace.   the intention is to merge the features of rtcheck+gqa+glint+analyze into one command.  I don't recall what we settled on, but I'd expect something a little generalized with subcommands like \"check overlaps ...\" or \"analyze overlaps ...\" or \"evaluate overlaps ...\" etc</p>",
        "id": 127779444,
        "sender_full_name": "Sean",
        "timestamp": 1528473662
    },
    {
        "content": "<blockquote>\n<p>hey can we rename executable rtcheck to check_overlaps as well for consistency ?</p>\n</blockquote>\n<p>I'm in favor for different names, because I think it could be confusing to have a TCL command and a program with the same name but (slightly) different behavior/parameters. And regarding Sean's comment, the names may be changed later on.</p>",
        "id": 127780854,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528475615
    },
    {
        "content": "<blockquote>\n<p>we'd have to follow our change policy (see top-level CHANGES file), but that's a bit too specific for my command sense taste.</p>\n</blockquote>\n<p>humm the CHANGES file is interesting.</p>\n<blockquote>\n<p>I'm in favor for different names, because I think it could be confusing to have a TCL command and a program with the same name but (slightly) different behavior/parameters. And regarding Sean's comment, the names may be changed later on.</p>\n</blockquote>\n<p>Okay got it.<br>\nyeah the confusion arising from what you say sound true.</p>",
        "id": 127781144,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528476024
    },
    {
        "content": "<p>I had this doubt when doing the documentation to whether to explain the options for check_overlaps, because the -h option prints the usage info already.</p>",
        "id": 127781299,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528476247
    },
    {
        "content": "<p>I think I should do that at least in the man pages</p>",
        "id": 127781416,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528476471
    },
    {
        "content": "<p>there's a school of thinking that help should be pervasive and in many forms as you don't know where the user is at and they may not know how/where to find help (e.g., that there is a -h option or that there is a manual page).. especially in an inconsistent system like ours</p>",
        "id": 127782643,
        "sender_full_name": "Sean",
        "timestamp": 1528478102
    },
    {
        "content": "<p>okay got it adding the options everywhere.<br>\nThe confusion arose from manual for rtcheck <em>command</em> not describing it and saying to refer to rthcheck <em>program's</em> manual for description of the options, but now that we have two different names so doing that is not correct!</p>",
        "id": 127782817,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528478345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> sorry if I made extra work for you to undo changes or made things confusing.  as usual daniel's insights are spot on.  having a deterministic command line that works the same inside and out are better than one that does has different usage, though I think we're moving towards there only being one.</p>",
        "id": 127782829,
        "sender_full_name": "Sean",
        "timestamp": 1528478395
    },
    {
        "content": "<p>saran, would it be hard to make your command take a subcommand (overlaps) as a required argument?  that would be useful to set the stage for adding  more sub-commands down the road (and it's the same number of chars usability-wise), even if you only are concerned with this one.</p>",
        "id": 127782967,
        "sender_full_name": "Sean",
        "timestamp": 1528478581
    },
    {
        "content": "<p>oh, and something to think about ...</p>",
        "id": 127782976,
        "sender_full_name": "Sean",
        "timestamp": 1528478600
    },
    {
        "content": "<p>I'm in favor of a pervasive help too.</p>",
        "id": 127782983,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528478611
    },
    {
        "content": "<p>there is the possibility for different overlap visualization methods ... the yellow wireframe lines are okay, but certainly not the only way</p>",
        "id": 127783074,
        "sender_full_name": "Sean",
        "timestamp": 1528478711
    },
    {
        "content": "<p>one of the things the checker script did in a previous form was calculate the overlapping volume via tessellation and then draw that as a solid yellow volume.  it was quite effective!</p>",
        "id": 127783085,
        "sender_full_name": "Sean",
        "timestamp": 1528478756
    },
    {
        "content": "<p>i think I have a picture somewhere...</p>",
        "id": 127783125,
        "sender_full_name": "Sean",
        "timestamp": 1528478765
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/UXceQ4bNOKh6jkQH3lJ3llAu/Screenshot-1.png\" target=\"_blank\" title=\"Screenshot-1.png\">Screenshot-1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/UXceQ4bNOKh6jkQH3lJ3llAu/Screenshot-1.png\" target=\"_blank\" title=\"Screenshot-1.png\"><img src=\"/user_uploads/1549/UXceQ4bNOKh6jkQH3lJ3llAu/Screenshot-1.png\"></a></div>",
        "id": 127783150,
        "sender_full_name": "Sean",
        "timestamp": 1528478831
    },
    {
        "content": "<p>not suggesting you do that .. just something to keep in mind, that we might not stick with yellow lines or might have other options</p>",
        "id": 127783210,
        "sender_full_name": "Sean",
        "timestamp": 1528478913
    },
    {
        "content": "<p>sounds interesting and looks good!</p>",
        "id": 127783234,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528478956
    },
    {
        "content": "<p>options that deal with grid sampling (e.g., the -s size and -n, -w options) are similarly tied to the current implementation -- not the generic conceptual notion of telling a user where there are overlaps</p>",
        "id": 127783305,
        "sender_full_name": "Sean",
        "timestamp": 1528479009
    },
    {
        "content": "<p>there's (what I believe to be) a far superior method for finding overlaps using quasirandom spherical sampling, halting at convergence or density criteria</p>",
        "id": 127783350,
        "sender_full_name": "Sean",
        "timestamp": 1528479085
    },
    {
        "content": "<p>even gqa shooting three grids has proven quite inadequate by our professional modelers</p>",
        "id": 127783408,
        "sender_full_name": "Sean",
        "timestamp": 1528479130
    },
    {
        "content": "<p>The content of the overlay is generated in the <em>log_overlaps()</em> function. I.e. if someone wants to improve it one day, the entrypoint is well determinate.</p>",
        "id": 127783422,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528479163
    },
    {
        "content": "<blockquote>\n<p>options that deal with grid sampling (e.g., the -s size and -n, -w options) are similarly tied to the current implementation -- not the generic conceptual notion of telling a user where there are overlaps</p>\n</blockquote>\n<p>I would be in favor of a more generic interface, which is implementation independent, too. But, how much can we break the existing interface (i.e. parameters)?</p>",
        "id": 127783503,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528479264
    },
    {
        "content": "<blockquote>\n<p>saran, would it be hard to make your command take a subcommand (overlaps) as a required argument?  that would be useful to set the stage for adding  more sub-commands down the road (and it's the same number of chars usability-wise), even if you only are concerned with this one.</p>\n</blockquote>\n<p>I think this can be done in the wrapper itself</p>",
        "id": 127783592,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528479379
    },
    {
        "content": "<blockquote>\n<p>I would be in favor of a more generic interface, which is implementation independent, too. But, how much can we break the existing interface (i.e. parameters)?</p>\n</blockquote>\n<p>a new command can do whatever we want it to do :)</p>\n<p>the only consideration is a practical one that one of the goals of this project is turning that shell script into C (so it can run on windows), with it's specific overlap reporting behavior as that's tied to an entire production workflow in active use</p>",
        "id": 127783708,
        "sender_full_name": "Sean",
        "timestamp": 1528479527
    },
    {
        "content": "<p>that begs having a command (maybe a separate command? or maybe it's the first implementation guts to this command?) that does what the current does -- but even then doesn't need to expose the parameters of gqa or rtcheck or anything else</p>",
        "id": 127783763,
        "sender_full_name": "Sean",
        "timestamp": 1528479599
    },
    {
        "content": "<p>it's being called by a gui and is essentially unpublished, so it can change or be whatever is needed</p>",
        "id": 127783816,
        "sender_full_name": "Sean",
        "timestamp": 1528479615
    },
    {
        "content": "<blockquote>\n<p>a new command can do whatever we want it to do :)</p>\n</blockquote>\n<p>That's true, but how about a command which shall replace another one? It isn't the goal to have a bunch of commands which do the same thing all a bit different (rtcheck, qga, check_overlaps, ...).</p>",
        "id": 127783966,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528479838
    },
    {
        "content": "<p>what I kind of thought would happen, in libanalyze terms, is that we end up with an interface that merely generates ray patterns.  it doesn't shoot them, just creates them.  so rtcheck would call this routine to create a grid of rays based on the current view, gqa would call the same routine, but pass the three orthogonal views.  another pattern that could be supported might be \"random spherical\".  this new command could either be the generalization that lets you specify what pattern(s) you want or has some notion of predefined pattern sets (or both).</p>",
        "id": 127784026,
        "sender_full_name": "Sean",
        "timestamp": 1528479906
    },
    {
        "content": "<p>so the tool only has to concern itself with what patterns it needs to generate and something parallelizes them all (iteratively based on some other criteria)</p>",
        "id": 127784091,
        "sender_full_name": "Sean",
        "timestamp": 1528479974
    },
    {
        "content": "<p>the goal would indeed be to replace all those commands, so there fundamentally needs to be \"some\" way to specify a direction vector and generate a pattern (grid) of rays so I can get current rtcheck and/or gqa output</p>",
        "id": 127784125,
        "sender_full_name": "Sean",
        "timestamp": 1528480051
    },
    {
        "content": "<p>Regarding r71050, the rtcheck command can't just disappear without going through deprecation.  It's an ancient tool in production use (within mged) that predates me even joining development.</p>",
        "id": 127831163,
        "sender_full_name": "Sean",
        "timestamp": 1528573991
    },
    {
        "content": "<p>yup got it, so how to proceed since it has been committed? A commit adding back the rtcheck command?</p>",
        "id": 127831448,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528574641
    },
    {
        "content": "<p>essentially -- you'll need to reverse-merge at least the rtcheck.c file to undo the delete.  that way it will retain the history of edits when it's restored.</p>",
        "id": 127831505,
        "sender_full_name": "Sean",
        "timestamp": 1528574729
    },
    {
        "content": "<p>something like this <a href=\"http://www.thedumbterminal.co.uk/posts/2012/04/restoring_a_deleted_file_or_directory_from_subversion.html\" target=\"_blank\" title=\"http://www.thedumbterminal.co.uk/posts/2012/04/restoring_a_deleted_file_or_directory_from_subversion.html\">http://www.thedumbterminal.co.uk/posts/2012/04/restoring_a_deleted_file_or_directory_from_subversion.html</a></p>",
        "id": 127831549,
        "sender_full_name": "Sean",
        "timestamp": 1528574802
    },
    {
        "content": "<p>it might be easiest to undo all of r71050 and then redo the gui changes</p>",
        "id": 127831699,
        "sender_full_name": "Sean",
        "timestamp": 1528575136
    },
    {
        "content": "<p>s/redo/reapply/</p>",
        "id": 127831701,
        "sender_full_name": "Sean",
        "timestamp": 1528575143
    },
    {
        "content": "<blockquote>\n<p>something like this <a href=\"http://www.thedumbterminal.co.uk/posts/2012/04/restoring_a_deleted_file_or_directory_from_subversion.html\" target=\"_blank\" title=\"http://www.thedumbterminal.co.uk/posts/2012/04/restoring_a_deleted_file_or_directory_from_subversion.html\">http://www.thedumbterminal.co.uk/posts/2012/04/restoring_a_deleted_file_or_directory_from_subversion.html</a></p>\n</blockquote>\n<p>well I didn't delete the files, so it should be good, just moved _ged_wait_status from rtcheck to nirt.c</p>\n<blockquote>\n<p>it might be easiest to undo all of r71050 and then redo the gui changes</p>\n</blockquote>\n<p>yup this seems the way to go with the gui changes.<br>\nso I should revert using <code>svn merge -r [current_version]:[previous_version] [repository_url]</code> and then <code>svn commit -m \"Revert bad commit r71050\"</code></p>",
        "id": 127831901,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528575613
    },
    {
        "content": "<p>but this would revert all the commit in between</p>",
        "id": 127831911,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528575671
    },
    {
        "content": "<p>welp, actually I am not sure :/ svn is kinda new to me</p>",
        "id": 127831968,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528575778
    },
    {
        "content": "<p>no, that looks right</p>",
        "id": 127832024,
        "sender_full_name": "Sean",
        "timestamp": 1528575905
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/13330011/how-do-i-revert-an-svn-commit\" target=\"_blank\" title=\"https://stackoverflow.com/questions/13330011/how-do-i-revert-an-svn-commit\">https://stackoverflow.com/questions/13330011/how-do-i-revert-an-svn-commit</a></p>",
        "id": 127832031,
        "sender_full_name": "Sean",
        "timestamp": 1528575952
    },
    {
        "content": "<p>it's not a \"bad\" commit, so I would change the message to just that you're reverting r71050 and say why (can't delete rtcheck without deprecation)</p>",
        "id": 127832077,
        "sender_full_name": "Sean",
        "timestamp": 1528576037
    },
    {
        "content": "<p>ok understood, I sent a commit..</p>",
        "id": 127832321,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528576556
    },
    {
        "content": "<p>humm it got aborted</p>",
        "id": 127832364,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528576580
    },
    {
        "content": "<p>you're probably out of date -- I just made a few commits</p>",
        "id": 127832366,
        "sender_full_name": "Sean",
        "timestamp": 1528576599
    },
    {
        "content": "<p>svn up</p>",
        "id": 127832367,
        "sender_full_name": "Sean",
        "timestamp": 1528576601
    },
    {
        "content": "<p>hehe ok</p>",
        "id": 127832368,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528576609
    },
    {
        "content": "<p>done :)</p>",
        "id": 127832415,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528576709
    },
    {
        "content": "<p>BTW since I cannot remove rtcheck. What must be done to the new rtcheck program (that uses libanalyze)? <br>\nI had removed the compilation of previous rtcheck from cmakelists in src/rt/ and replaced it with mine.</p>",
        "id": 127833955,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528580369
    },
    {
        "content": "<p>there is no \"new rtcheck program\" ... you named it something else :)</p>",
        "id": 127834001,
        "sender_full_name": "Sean",
        "timestamp": 1528580419
    },
    {
        "content": "<p>that was the check_overlaps <em>command</em>, I also wrote the rtcheck <em>program</em>.  <a href=\"https://sourceforge.net/p/brlcad/patches/495/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/patches/495/\">https://sourceforge.net/p/brlcad/patches/495/</a></p>",
        "id": 127834055,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528580546
    },
    {
        "content": "<p>they're essentially just independent commands at this point.  if the new command essentially does everything rtcheck did, then we can schedule rtcheck for formal deprecation.  one of us familiar with all rtcheck can do can evaluate what is missing, if anything.   the gui menus can still be updated to call the new one because they're functionally the same.</p>",
        "id": 127834103,
        "sender_full_name": "Sean",
        "timestamp": 1528580676
    },
    {
        "content": "<p>AH, now that's a different question! sorry, misunderstood</p>",
        "id": 127834111,
        "sender_full_name": "Sean",
        "timestamp": 1528580701
    },
    {
        "content": "<p>what's needed and doesn't exist to answer that question is a regression test -- do you know if it behaves the same, produces the same output?</p>",
        "id": 127834168,
        "sender_full_name": "Sean",
        "timestamp": 1528580795
    },
    {
        "content": "<p>it should behave the same, I did do unit tests comparing the old rtcheck and new rtcheck.<br>\nBut output is different. It does not display all the debug information that current rtcheck prints.</p>",
        "id": 127834217,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528580904
    },
    {
        "content": "<p>debug info?</p>",
        "id": 127834219,
        "sender_full_name": "Sean",
        "timestamp": 1528580926
    },
    {
        "content": "<p>this is how it would put <a href=\"https://pastebin.com/sHDxtUw3\" target=\"_blank\" title=\"https://pastebin.com/sHDxtUw3\">https://pastebin.com/sHDxtUw3</a></p>",
        "id": 127834326,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528581174
    },
    {
        "content": "<p>orignal output of rtcheck <a href=\"https://pastebin.com/aQxYipPY\" target=\"_blank\" title=\"https://pastebin.com/aQxYipPY\">https://pastebin.com/aQxYipPY</a></p>",
        "id": 127834373,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528581275
    },
    {
        "content": "<p>ah, the setup and shutdown performance metrics... interesting</p>",
        "id": 127834379,
        "sender_full_name": "Sean",
        "timestamp": 1528581341
    },
    {
        "content": "<p>probably fine, but let me get back to you on it in a few hours.  can you show something with more interesting/complicated output, like maybe run on havoc in havoc.g?</p>",
        "id": 127834419,
        "sender_full_name": "Sean",
        "timestamp": 1528581385
    },
    {
        "content": "<p>old and new</p>",
        "id": 127834420,
        "sender_full_name": "Sean",
        "timestamp": 1528581389
    },
    {
        "content": "<p>okay will do <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 127834423,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528581422
    },
    {
        "content": "<p>wow the outputs are different for the pairs themselves! need to investigate..</p>",
        "id": 127834535,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528581706
    },
    {
        "content": "<p>the count of overlaps is fine</p>",
        "id": 127834576,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528581753
    },
    {
        "content": "<blockquote>\n<p>Regarding r71050, the rtcheck command can't just disappear without going through deprecation.  It's an ancient tool in production use (within mged) that predates me even joining development.</p>\n</blockquote>\n<p>Reverting the whole r71050 commit looks a bit like an overreaction. Wouldn't it be sufficient to let the TCL <em>rtcheck</em> point to <em>ged_check_overlaps()</em>?</p>",
        "id": 127856764,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528635327
    },
    {
        "content": "<p>humm I believe we want the rtcheck menu also in Archer under raytrace where I added check_overlaps. So there was a lot of changes to do, so I thought revert was a good way to go.</p>",
        "id": 127859267,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528641299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <br>\nthe new rtcheck output:<br>\n<a href=\"https://pastebin.ca/4044082\" target=\"_blank\" title=\"https://pastebin.ca/4044082\">https://pastebin.ca/4044082</a> - without -R flag<br>\n<a href=\"https://pastebin.ca/4044098\" target=\"_blank\" title=\"https://pastebin.ca/4044098\">https://pastebin.ca/4044098</a> - with -R flag<br>\nold rtcheck output:<br>\n<a href=\"https://pastebin.ca/4044120\" target=\"_blank\" title=\"https://pastebin.ca/4044120\">https://pastebin.ca/4044120</a> - without -R flag<br>\n<a href=\"https://pastebin.ca/4044109\" target=\"_blank\" title=\"https://pastebin.ca/4044109\">https://pastebin.ca/4044109</a> - with -R flag</p>",
        "id": 127863487,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528650992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nI fixed a big derp with the reg1 and reg2 names being copied<br>\nThis was what I had before:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">BU_ALLOC</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">reg1</span><span class=\"p\">,</span><span class=\"kt\">char</span><span class=\"p\">);</span>\n    <span class=\"n\">BU_ALLOC</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">reg2</span><span class=\"p\">,</span><span class=\"kt\">char</span><span class=\"p\">);</span>\n    <span class=\"n\">bu_strlcpy</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">reg1</span><span class=\"p\">,</span> <span class=\"n\">reg1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">reg1</span><span class=\"p\">));</span>\n    <span class=\"n\">bu_strlcpy</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">reg2</span><span class=\"p\">,</span> <span class=\"n\">reg2</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">reg2</span><span class=\"p\">));</span>\n</pre></div>\n\n\n<p>this worked for truck.g because all the region names were less than 8 characters, but with havoc the regions names were just \"/havoc/\".<br>\nI fixed it with :</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">new_op</span><span class=\"o\">-&gt;</span><span class=\"n\">reg1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">bu_malloc</span><span class=\"p\">(</span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">reg1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&quot;reg1&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">new_op</span><span class=\"o\">-&gt;</span><span class=\"n\">reg2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">bu_malloc</span><span class=\"p\">(</span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">reg2</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&quot;reg2&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">bu_strlcpy</span><span class=\"p\">(</span><span class=\"n\">new_op</span><span class=\"o\">-&gt;</span><span class=\"n\">reg1</span><span class=\"p\">,</span> <span class=\"n\">reg1</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">reg1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">bu_strlcpy</span><span class=\"p\">(</span><span class=\"n\">new_op</span><span class=\"o\">-&gt;</span><span class=\"n\">reg2</span><span class=\"p\">,</span> <span class=\"n\">reg2</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">reg2</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>this looks fine right?<br>\nI need to update check_overlaps.c with this.</p>",
        "id": 127863546,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528651176
    },
    {
        "content": "<p>looks fine to me, gonna commit :)</p>",
        "id": 127863698,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528651557
    },
    {
        "content": "<blockquote>\n<p>humm I believe we want the rtcheck menu also in Archer under raytrace where I added check_overlaps. So there was a lot of changes to do, so I thought revert was a good way to go.</p>\n</blockquote>\n<p>If this is the easiest way for you, OK, but you have to commit the parts which were uncritical now separately.</p>",
        "id": 127864276,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528652881
    },
    {
        "content": "<p>yep got it <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> <br>\nhave to fix the documentation patch too.. without removal of rtcheck related stuffs</p>",
        "id": 127864367,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528653004
    },
    {
        "content": "<p>Do the functionality part first. Then, describe what you did in the documentation. And yes, if we keep the <em>rtcheck</em> command, then we need to keep its documentation too.</p>",
        "id": 127864417,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528653142
    },
    {
        "content": "<p>Okay got it. <br>\nYour comment on #496<br>\n1) Please have a look at the following widgt: mged-&gt;Tools-&gt;Overlap Tool.<br>\nWhat to do about this? This seems to be broken.</p>\n<p>2) Please test the widget Archer-&gt;Raytrace-&gt;check overlaps-&gt;512x512 with an empty view (nothing is drawn).<br>\nThis I had fixed with a catch statement and print the warning as pop-up message/</p>",
        "id": 127864521,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528653444
    },
    {
        "content": "<blockquote>\n<p>1) Please have a look at the following widgt: mged-&gt;Tools-&gt;Overlap Tool.<br>\nWhat to do about this? This seems to be broken</p>\n</blockquote>\n<p>Maybe you can fix it?</p>\n<blockquote>\n<p>2) Please test the widget Archer-&gt;Raytrace-&gt;check overlaps-&gt;512x512 with an empty view (nothing is drawn).<br>\nThis I had fixed with a catch statement and print the warning as pop-up message/</p>\n</blockquote>\n<p>For example. (I think there is already a pop-up message, but the only way to close it is to exit the program.)</p>",
        "id": 127864690,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528653820
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>1) Please have a look at the following widgt: mged-&gt;Tools-&gt;Overlap Tool.<br>\nWhat to do about this? This seems to be broken</p>\n</blockquote>\n<p>Maybe you can fix it?</p>\n</blockquote>\n<p>Okay I will have a look after all the pending work is done. </p>\n<blockquote>\n<blockquote>\n<p>2) Please test the widget Archer-&gt;Raytrace-&gt;check overlaps-&gt;512x512 with an empty view (nothing is drawn).<br>\nThis I had fixed with a catch statement and print the warning as pop-up message/</p>\n</blockquote>\n<p>For example. (I think there is already a pop-up message, but the only way to close it is to exit the program.)</p>\n</blockquote>\n<p>Yeah, now the message is not that serious. Like a informational message. If this is not fine then I could print the message in command area.</p>",
        "id": 127864799,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528654057
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p>1) Please have a look at the following widgt: mged-&gt;Tools-&gt;Overlap Tool.<br>\nWhat to do about this? This seems to be broken</p>\n</blockquote>\n<p>Maybe you can fix it?</p>\n</blockquote>\n<p>Okay I will have a look after all the pending work is done. </p>\n</blockquote>\n<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>2) Please test the widget Archer-&gt;Raytrace-&gt;check overlaps-&gt;512x512 with an empty view (nothing is drawn).<br>\nThis I had fixed with a catch statement and print the warning as pop-up message/</p>\n</blockquote>\n<p>For example. (I think there is already a pop-up message, but the only way to close it is to exit the program.)</p>\n</blockquote>\n<p>Yeah, now the message is not that serious. Like a informational message. If this is not fine then I could print the message in command area.</p>\n</blockquote>\n<p>I don't complain about the message. I complain about that I can't close it. I could exit it only by closing the whole program.</p>",
        "id": 127864908,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528654263
    },
    {
        "content": "<p>hehe I fixed that. I will show it once, I reapply the changes :)</p>",
        "id": 127864965,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528654373
    },
    {
        "content": "<p>If you have fixed it for you and will commit the changes later on, I'm fine. I wanted only mention that there is an issue.</p>",
        "id": 127865018,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528654449
    },
    {
        "content": "<p>yeah thanks for pointing it out.  Was a serious bug, like the message would keep on coming back to back.</p>",
        "id": 127865107,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528654639
    },
    {
        "content": "<p>I was comparing the outputs of rtcheck programs, these are the difference. I was wondering why this happened <br>\n<a href=\"https://www.diffchecker.com/iTmDvAKR\" target=\"_blank\" title=\"https://www.diffchecker.com/iTmDvAKR\">https://www.diffchecker.com/iTmDvAKR</a></p>",
        "id": 127865443,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528655208
    },
    {
        "content": "<p>left is old and right is new</p>",
        "id": 127865496,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528655299
    },
    {
        "content": "<p>Looks like the entries are in different order?</p>",
        "id": 127865581,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528655480
    },
    {
        "content": "<p>but there is one pair that is extra on new rtcheck, which makes the unique count 20</p>",
        "id": 127865633,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528655582
    },
    {
        "content": "<p>one on line 14,15</p>",
        "id": 127865641,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528655599
    },
    {
        "content": "<p>humm those are identical pairs</p>",
        "id": 127865685,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528655652
    },
    {
        "content": "<p>so that condition which checks reg1 == reg2 is not working.. will check it out</p>",
        "id": 127865687,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528655694
    },
    {
        "content": "<p>Indeed <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span> <br>\nIt seems to overlap with itself. Shall this be reported?</p>",
        "id": 127865845,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528656049
    },
    {
        "content": "<p>No that is not it I think, Look at 20,21 lines on both side they also have reg1==reg2</p>",
        "id": 127865901,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528656171
    },
    {
        "content": "<p>can the outputs vary with each run o_O.. once old rtcheck reported 18 unique pairs now it is reporting 20</p>",
        "id": 127866030,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528656423
    },
    {
        "content": "<p><a href=\"https://pastebin.ca/4044821\" target=\"_blank\" title=\"https://pastebin.ca/4044821\">https://pastebin.ca/4044821</a> back to back ran twice. different outputs each time</p>",
        "id": 127866075,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528656502
    },
    {
        "content": "<p>The order can vary, but the number? You should check it single thread (one processor) first.</p>",
        "id": 127866145,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528656699
    },
    {
        "content": "<p>okay now it is better :)</p>",
        "id": 127866238,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528656867
    },
    {
        "content": "<p><a href=\"https://www.diffchecker.com/Z090oQsR\" target=\"_blank\" title=\"https://www.diffchecker.com/Z090oQsR\">https://www.diffchecker.com/Z090oQsR</a></p>",
        "id": 127866239,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528656870
    },
    {
        "content": "<p>Hmm, there is still a difference.</p>\n<p>However, you should check your semaphores next. I could imagine that there is an unprotected variable.</p>",
        "id": 127866299,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528657044
    },
    {
        "content": "<p>okay it seems like it</p>",
        "id": 127866344,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528657101
    },
    {
        "content": "<p>I ran with -R flag and both were identical! :D</p>",
        "id": 127866345,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528657116
    },
    {
        "content": "<p>oh I think I know why it was showing that slight variation.<br>\nThe older implementation used a singly linked list and to check for any reverse duplicates it went to the beginning and used the next pointer to check for it: <a href=\"https://pastebin.ca/4045571\" target=\"_blank\" title=\"https://pastebin.ca/4045571\">https://pastebin.ca/4045571</a><br>\nto improve this behaviour I used bu_list so it would go from current pair and backwards until it reaches head: <a href=\"https://pastebin.ca/4045594\" target=\"_blank\" title=\"https://pastebin.ca/4045594\">https://pastebin.ca/4045594</a><br>\nSo I believe the new rtcheck displays correct output <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span></p>",
        "id": 127867266,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528659141
    },
    {
        "content": "<p>Since the -R flag outputs are same, <br>\nthere are 4 times this pair:<br>\n<code>/havoc/main_rotor/mr_bldassys/mr_bldassy101/mr_phorn101/r.rot138  /havoc/main_rotor/mr_bldassys/mr_bldassy101/mr_bldroot101/r.bld101</code><br>\nand only one of the : <code>/havoc/main_rotor/mr_bldassys/mr_bldassy101/mr_bldroot101/r.bld101  /havoc/main_rotor/mr_bldassys/mr_bldassy101/mr_phorn101/r.rot138 </code><br>\nand checking this : <a href=\"/user_uploads/1549/OHlD0lTqiKocqcvLtLDwDZKC/rtcheck.txt\" target=\"_blank\" title=\"rtcheck.txt\">rtcheck.txt</a> <br>\nwe see that the single pair is at 31st position, where as the one that gave 4 count is at 26th, 27th, 28th and 30th.<br>\nThe output is different because of the direction of iteration.</p>",
        "id": 127867536,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528659754
    },
    {
        "content": "<p>I am gonna push three commits for check_overlaps adaptation to Archer and MGED.</p>",
        "id": 127901667,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528726965
    },
    {
        "content": "<p>One pushed..</p>",
        "id": 127901675,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528726971
    },
    {
        "content": "<p>it has been awfully slow for me :/</p>",
        "id": 127901683,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528726990
    },
    {
        "content": "<p>svn: E175002: Commit failed (details follow):<br>\nsvn: E175002: Unexpected HTTP status 504 'Gateway Time-out' on '/p/brlcad/code/brlcad/trunk/src/tclscripts/archer'</p>",
        "id": 127901888,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528727265
    },
    {
        "content": "<p>gonna try ssh checkout maybe that will solve the issues</p>",
        "id": 127902135,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528727528
    },
    {
        "content": "<p>I prepared the docbook changes after reverting any rtcheck <em>command</em> changes I previously did: <a href=\"/user_uploads/1549/jG53EBAsIB9eqZS7q-fAUwjM/new_doc.patch\" target=\"_blank\" title=\"new_doc.patch\">new_doc.patch</a> <br>\nOnce the doubt about new rtcheck vs old rtcheck (programs) is clear, documentation would be good to go! Because in this patch I have added <em>-d</em> flag to new rtcheck <em>program</em>.</p>",
        "id": 127907261,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528734258
    },
    {
        "content": "<p>Just a remark: You should, whenever possible, have only one issue per commit.</p>",
        "id": 127910472,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528738977
    },
    {
        "content": "<p>For example: The commit for revision 71065 handles two issues.</p>",
        "id": 127910551,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528739067
    },
    {
        "content": "<p>ohh got it. <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span> <br>\neven those three to commit were hard, I don't know why but commit and checkout seems very slow. Took multiple tries to get one commit pushed. I decided to checkout using ssh, hoping it would improve all this problems, it has been running for 5 hours now :/ still not completed.</p>",
        "id": 127910685,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528739234
    },
    {
        "content": "<p>Yes, sourceforge has had its days :(</p>",
        "id": 127910967,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528739537
    },
    {
        "content": "<p>ahh, well GitHub soon I suppose :)</p>",
        "id": 127911099,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528739686
    },
    {
        "content": "<p>what is your opinion on the difference between the old rtcheck and new rtcheck. It happens because of the direction of iteration of the lists as I had explained earlier.</p>",
        "id": 127911202,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528739769
    },
    {
        "content": "<p>yay ssh checkout is ready :)</p>",
        "id": 127912594,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528741499
    },
    {
        "content": "<blockquote>\n<p>ahh, well GitHub soon I suppose :)</p>\n</blockquote>\n<p>I'm personally not a fan of git. And, especially with such a big repository as BRL-CAD, I'm expecting huge checkouts. Well, let's see.</p>",
        "id": 127912907,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528741897
    },
    {
        "content": "<blockquote>\n<p>what is your opinion on the difference between the old rtcheck and new rtcheck. It happens because of the direction of iteration of the lists as I had explained earlier.</p>\n</blockquote>\n<p>Yea, I saw it and thought: okay ;)</p>",
        "id": 127913176,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528742189
    },
    {
        "content": "<p>hmm okay <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span>, still need a final answer on whether to replace old rtcheck while I wait for it, I will have a look at the MGED's overlap tool to fix the error.</p>",
        "id": 127913372,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528742462
    },
    {
        "content": "<p>According to the <a href=\"https://sourceforge.net/p/brlcad/code/61110/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/61110/\">r61110</a> g_lint was renamed to glint, so overlap tool was broken because it was expecting g_lint which no longer exists. So renaming g_lint to glint  in <em>src/tclscripts/mged/overlap.tcl</em> fixed it.</p>",
        "id": 127946827,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528799117
    },
    {
        "content": "<p>I was thinking to add getting view information like az, el and size information as default values when the overlap tool is open. Because the defaults 0, 0 and 3.937008in (100mm)  for az, el and size is not helpful.</p>",
        "id": 127947077,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528799556
    },
    {
        "content": "<p>I was wondering on what to do next, I started to read the checker.tcl file to understand it.</p>",
        "id": 127965648,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528825883
    },
    {
        "content": "<blockquote>\n<p>According to the <a href=\"https://sourceforge.net/p/brlcad/code/61110/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/61110/\">r61110</a> g_lint was renamed to glint, so overlap tool was broken because it was expecting g_lint which no longer exists. So renaming g_lint to glint  in <em>src/tclscripts/mged/overlap.tcl</em> fixed it.</p>\n</blockquote>\n<p>Good catch Saran.  That warrants a \"fixed bug\" line in the top level NEWS file with your name on it.</p>",
        "id": 128009610,
        "sender_full_name": "Sean",
        "timestamp": 1528898146
    },
    {
        "content": "<blockquote>\n<p>I was wondering on what to do next, I started to read the checker.tcl file to understand it.</p>\n</blockquote>\n<p>I read through what you wrote on the ordering of old vs new rtcheck and didn't fully understand the situation.  Is the problem that one of them is not collapsing ordered pairs into the same result?  That is A overlaps B and B overlaps A is treated as two instead of one result?</p>",
        "id": 128009706,
        "sender_full_name": "Sean",
        "timestamp": 1528898259
    },
    {
        "content": "<p>I believe the original intention is to just list such and  A and B pairing once, not twice</p>",
        "id": 128009754,
        "sender_full_name": "Sean",
        "timestamp": 1528898287
    },
    {
        "content": "<p>regardless, users need the shortest useful list of overlaps because the typical workflow is to go through them one at a time for the \"important\" ones until all overlaps are below some size</p>",
        "id": 128009814,
        "sender_full_name": "Sean",
        "timestamp": 1528898361
    },
    {
        "content": "<p>if you have that all working with the new rtcheck, I'd think your next step would be integrating the next thing the shell script was doing</p>",
        "id": 128009875,
        "sender_full_name": "Sean",
        "timestamp": 1528898406
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>According to the <a href=\"https://sourceforge.net/p/brlcad/code/61110/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/61110/\">r61110</a> g_lint was renamed to glint, so overlap tool was broken because it was expecting g_lint which no longer exists. So renaming g_lint to glint  in <em>src/tclscripts/mged/overlap.tcl</em> fixed it.</p>\n</blockquote>\n<p>Good catch Saran.  That warrants a \"fixed bug\" line in the top level NEWS file with your name on it.</p>\n</blockquote>\n<p>done :)</p>\n<blockquote>\n<blockquote>\n<p>I was wondering on what to do next, I started to read the checker.tcl file to understand it.</p>\n</blockquote>\n<p>I read through what you wrote on the ordering of old vs new rtcheck and didn't fully understand the situation.  Is the problem that one of them is not collapsing ordered pairs into the same result?  That is A overlaps B and B overlaps A is treated as two instead of one result?</p>\n</blockquote>\n<p>Humm after actually scribbling the linkedlist on a paper and seeing the iteration it goes through, the direction should not matter, so what I told didn't make sense xD.<br>\nSo I started debugging and found out why:<br>\nOriginal rtcheck, when it sees that a pair is seen in reverse it breaks and inserts the new pair before that and discards the old pair by setting the new_op-&gt; next = NULL. See lines 191-193 and 209 in rt/viewcheck.c. <br>\nIt cleverly does this by using a prev pointer which, I thought was kept in the for loop <em>(that checks for reverse pair)</em> just for reaching the end of the list. <br>\nNow I need to find a way to do this in bu_list for my new rtcheck.</p>",
        "id": 128014525,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528904200
    },
    {
        "content": "<p>Fixed! This is the final diff of the outputs for havoc.g <a href=\"https://www.diffchecker.com/aW9UNTRM\" target=\"_blank\" title=\"https://www.diffchecker.com/aW9UNTRM\">https://www.diffchecker.com/aW9UNTRM</a> <em>(left is old and right is new)</em></p>",
        "id": 128016214,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528906178
    },
    {
        "content": "<p>I ran with multiview and compared the outputs of 15 runs, there are still some differences in some frames :/ will work on it.</p>",
        "id": 128016809,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528906995
    },
    {
        "content": "<p>BTW the behaviour of old rtcheck removing the link doesn't seem right to me. That could mean a loss of data</p>",
        "id": 128020564,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528911941
    },
    {
        "content": "<p>like check this : <a href=\"https://www.diffchecker.com/6eUp2NXS\" target=\"_blank\" title=\"https://www.diffchecker.com/6eUp2NXS\">https://www.diffchecker.com/6eUp2NXS</a><br>\nI have print some extra information for debugging. Left is old and right is new.<br>\nLook at line 84 the reverse pair it found was actually at position line 81.<br>\nWhat the old rtcheck did was remove the pairs  on line 81 and 82 and inserted the pair at line 95.<br>\nWhat the new rtcheck did was just remove the pair on line 81 only. <br>\nold rtcheck just removed the information at line 82 which is not correct IMO.</p>",
        "id": 128021343,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528912949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> please have a look</p>",
        "id": 128021421,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528913048
    },
    {
        "content": "<blockquote>\n<p>like check this : <a href=\"https://www.diffchecker.com/6eUp2NXS\" target=\"_blank\" title=\"https://www.diffchecker.com/6eUp2NXS\">https://www.diffchecker.com/6eUp2NXS</a><br>\nI have print some extra information for debugging. Left is old and right is new.<br>\nLook at line 84 the reverse pair it found was actually at position line 81.<br>\nWhat the old rtcheck did was remove the pairs  on line 81 and 82 and inserted the pair at line 95.<br>\nWhat the new rtcheck did was just remove the pair on line 81 only. <br>\nold rtcheck just removed the information at line 82 which is not correct IMO.</p>\n</blockquote>\n<p>I'm confused: Does <em>old rtcheck</em> remove lines 81 and 82 and inserted line 95, or just removes line 82?</p>\n<p>When I understood you right, <em>old rtcheck</em> replaces line 82 by line 95, and <em>new rtcheck</em> doesn't do this. But lines 82 and 95 differ by the number of matches, right?</p>",
        "id": 128022896,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528914825
    },
    {
        "content": "<p>old rtcheck removes  pairs at line 81 and 82 to insert the pair on line 95(on left side)</p>",
        "id": 128023074,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528914992
    },
    {
        "content": "<p>while inserting the new pair on line 85, it detects that a reverse pair <em>(the pair on line 81)</em> exist.<br>\nOld rtcheck in attempt to remove this reverse pair, it makes the <code>next</code> pointer of pair at line 80 to pair line 85. But what it does is it discards the information on line 82 with it. Get it?</p>",
        "id": 128023292,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528915303
    },
    {
        "content": "<p>what old rtcheck does:<br>\n<a href=\"/user_uploads/1549/JLCm1ihd9effzb-Dt9Kae1Tb/Untitled-Diagram4.jpg\" target=\"_blank\" title=\"Untitled-Diagram4.jpg\">representation</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/JLCm1ihd9effzb-Dt9Kae1Tb/Untitled-Diagram4.jpg\" target=\"_blank\" title=\"representation\"><img src=\"/user_uploads/1549/JLCm1ihd9effzb-Dt9Kae1Tb/Untitled-Diagram4.jpg\"></a></div>",
        "id": 128024435,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528916666
    },
    {
        "content": "<p>what I did that gave the above diff which I think should be done. Since I am using bu_list it is a circular doubly linked list<br>\n<a href=\"/user_uploads/1549/DRWRsqkaMc-eTaOi4bHNOQD7/Untitled-Diagram5.jpg\" target=\"_blank\" title=\"Untitled-Diagram5.jpg\">representation2</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/DRWRsqkaMc-eTaOi4bHNOQD7/Untitled-Diagram5.jpg\" target=\"_blank\" title=\"representation2\"><img src=\"/user_uploads/1549/DRWRsqkaMc-eTaOi4bHNOQD7/Untitled-Diagram5.jpg\"></a></div>",
        "id": 128024687,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528917065
    },
    {
        "content": "<p>OK, I see what you mean. The <code>prev_ol=op,</code> in line 189 of src/rt/viewcheck.c was probable unintentional (copy-n-paste error?).</p>",
        "id": 128027285,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528920511
    },
    {
        "content": "<p>I think it serves the purpose when inserting at line 203, because it inserts new pairs at the end.</p>",
        "id": 128027365,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528920651
    },
    {
        "content": "<p>but there is already one prev_ol = op on top too at line 174</p>",
        "id": 128027436,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528920769
    },
    {
        "content": "<p>so either one of them could be unintentional but as you said line 189 seems like a copy paste error</p>",
        "id": 128027522,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528920848
    },
    {
        "content": "<p>yeah definitely seems like a copy-n-paste error. Because the upper loop either returns when a duplicate is found or reaches the end of the list for insertion</p>",
        "id": 128027775,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528921199
    },
    {
        "content": "<p>finally same, after removing that error in old rtcheck : <a href=\"https://www.diffchecker.com/2xw8qsYG\" target=\"_blank\" title=\"https://www.diffchecker.com/2xw8qsYG\">https://www.diffchecker.com/2xw8qsYG</a></p>",
        "id": 128029408,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528923276
    },
    {
        "content": "<p>So, it's OK now, I suppose?</p>",
        "id": 128029751,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528923663
    },
    {
        "content": "<p>yeah good to go!</p>",
        "id": 128029765,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528923684
    },
    {
        "content": "<p>just different ordering without that -P1 flag</p>",
        "id": 128030066,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528924018
    },
    {
        "content": "<blockquote>\n<p>if you have that all working with the new rtcheck, I'd think your next step would be integrating the next thing the shell script was doing</p>\n</blockquote>\n<p>We have not yet started with the shell script. Hence I had some basic questions related to the implementation, so that a plan can be made before proceeding.</p>",
        "id": 128060028,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528976100
    },
    {
        "content": "<p>I am hoping to discuss it tonight with Daniel.</p>",
        "id": 128060137,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528976266
    },
    {
        "content": "<blockquote>\n<p>just different ordering without that -P1 flag</p>\n</blockquote>\n<p>This is because the parallel execution introduces an element of chance. Depending on how much time the different threads get from the operating system their results can show op in different orders.</p>",
        "id": 128076500,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1528998187
    },
    {
        "content": "<p>since the overlap tool requires one shell script and one tcl file. And our plan is to combine them into one right? <br>\nSo would it be like a command or an executable?</p>",
        "id": 128076934,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528998608
    },
    {
        "content": "<p>how would it be possible to provide GUI like the checker.tcl, with a c/c++ file? like \"Wrap C/C++ code to make it callable from Tcl\" in this <a href=\"https://wiki.tcl.tk/3474\" target=\"_blank\" title=\"https://wiki.tcl.tk/3474\">https://wiki.tcl.tk/3474</a>?</p>",
        "id": 128077059,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528998761
    },
    {
        "content": "<p>Maybe I'm wrong, but the GUI can be still written in TCL/Tk, but it shouldn't call another program but work as mged or Archer by calling libged functions.</p>",
        "id": 128079660,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529001894
    },
    {
        "content": "<p>by libged you mean MGED commands right? like it does in checker.tcl file line 1093 it calls the draw command :</p>\n<div class=\"codehilite\"><pre><span></span> if [catch {draw -C255/0/0 $path} path_error] {\n    puts &quot;ERROR: $path_error&quot;\n    }\n</pre></div>",
        "id": 128079959,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529002253
    },
    {
        "content": "<p>I am confused on why are we even converting the checker.tcl file to a C/C++ file? Aren't tcl files cross-compatible ?</p>",
        "id": 128080245,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529002594
    },
    {
        "content": "<p>Hmm, I thought the main issue regarding portability is with the shell script <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a>.</p>",
        "id": 128080669,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529003134
    },
    {
        "content": "<p>yeah the shell script has to be implemented in C. That I agree</p>",
        "id": 128080743,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529003255
    },
    {
        "content": "<p>the shell script needs a list of objects to check overlaps for.</p>",
        "id": 128080842,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529003380
    },
    {
        "content": "<p>Probable a mixture of TCL and libged. Maybe, <em>check_overlaps</em> has already everything what you need. However, I haven't looked at <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> closely yet.</p>",
        "id": 128080846,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529003386
    },
    {
        "content": "<blockquote>\n<p>the shell script needs a list of objects to check overlaps for.</p>\n</blockquote>\n<p>This is what the Tk GUI is for?</p>",
        "id": 128080908,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529003432
    },
    {
        "content": "<p>like I was hoping like to click the Overlap Tool from a drop down menu, which shows a UI to input the objects. Then it runs the check_overlaps command and gives the ouput to the checker.tcl</p>",
        "id": 128081024,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529003537
    },
    {
        "content": "<p>the script does basically run rtcheck and gqa 16 times with different az/el values ( 0, 45, 90, 135),then using a combination of text processing tools on the output to get just the region names and volume (multiplying max-depth with count). Then sorting and removing any duplicates. Saving this all to a pairing file which the checker.tcl reads</p>",
        "id": 128081228,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529003781
    },
    {
        "content": "<p>OK, TCL should have the necessary text processing functions build in already.<br>\nLeft <em>gqa</em>.</p>",
        "id": 128081614,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529004377
    },
    {
        "content": "<p>A TCL file that calls the check_overlaps command and reads the ouput using regex.</p>",
        "id": 128081662,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529004457
    },
    {
        "content": "<p>Something like this.</p>",
        "id": 128081714,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529004496
    },
    {
        "content": "<p>yeah sounds alright to me. Shouldn't we remove the requirement of files? and keep everything in memory when we invoke checker.tcl ?</p>",
        "id": 128081826,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529004647
    },
    {
        "content": "<p>You should look for <em>gqa</em> and see if there is already a libged function for it. There is already some functionality in libanalyze to support <em>gqa</em> functionality, but I don't know how it's used.</p>",
        "id": 128081856,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529004718
    },
    {
        "content": "<blockquote>\n<p>yeah sounds alright to me. Shouldn't we remove the requirement of files? and keep everything in memory when we invoke checker.tcl ?</p>\n</blockquote>\n<p>Definitely!</p>",
        "id": 128081913,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529004754
    },
    {
        "content": "<blockquote>\n<p>You should look for <em>gqa</em> and see if there is already a libged function for it. There is already some functionality in libanalyze to support <em>gqa</em> functionality, but I don't know how it's used.</p>\n</blockquote>\n<p>well <em>gqa</em> is already a libged function. Infact the executable version just calls <em>ged_gqa</em></p>",
        "id": 128081936,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529004806
    },
    {
        "content": "<p>So, we are fine there :)</p>",
        "id": 128081986,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529004855
    },
    {
        "content": "<p>gqa uses the libanalyze function <code>add_unique_pair</code> in libanalyze/overlaps.c to basically check for duplicates and increase the count and update the max depth</p>",
        "id": 128082062,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529004965
    },
    {
        "content": "<blockquote>\n<p>So, we are fine there :)</p>\n</blockquote>\n<p>yeah :)</p>\n<blockquote>\n<blockquote>\n<p>yeah sounds alright to me. Shouldn't we remove the requirement of files? and keep everything in memory when we invoke checker.tcl ?</p>\n</blockquote>\n<p>Definitely!</p>\n</blockquote>\n<p>So I was looking at the usage for check.tcl. It expects <code>check [-F] [overlaps_file]</code> so the check.tcl file would need some change.</p>",
        "id": 128082166,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529005098
    },
    {
        "content": "<blockquote>\n<p>gqa uses the libanalyze function <code>add_unique_pair</code> in libanalyze/overlaps.c to basically check for duplicates and increase the count and update the max depth</p>\n</blockquote>\n<p>This is another issue, which Sean has mentioned too, that several functions have the similar functionality to shoot a grid of rays and analyzing the callbacks. This is something you should look at in the next stage, when you are familiar with gqa and did the checker GUI.</p>",
        "id": 128082249,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529005225
    },
    {
        "content": "<blockquote>\n<p>This is another issue, which Sean has mentioned too, that several functions have the similar functionality to shoot a grid of rays and analyzing the callbacks. This is something you should look at in the next stage, when you are familiar with gqa and did the checker GUI.</p>\n</blockquote>\n<p>okay got it.</p>",
        "id": 128082415,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529005503
    },
    {
        "content": "<p>to get started with checker GUI, I will first make a simple UI with a text box and calls the check_overlaps command with the inputed objects.</p>",
        "id": 128082568,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529005737
    },
    {
        "content": "<p>Got this far, then my ISP went down :(. Using mobile data now.<br>\n<a href=\"/user_uploads/1549/4a29VISNW4f7gvqtBzpFaBeM/Screenshot-from-2018-06-15-23-21-34.png\" target=\"_blank\" title=\"Screenshot-from-2018-06-15-23-21-34.png\">Screenshot-from-2018-06-15-23-21-34.png</a><br>\nright now I am just getting the values and printing instantly without storing.<br>\nI was planning to do something like a database using dicts with keys as reg1, reg2 and volume.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/4a29VISNW4f7gvqtBzpFaBeM/Screenshot-from-2018-06-15-23-21-34.png\" target=\"_blank\" title=\"Screenshot-from-2018-06-15-23-21-34.png\"><img src=\"/user_uploads/1549/4a29VISNW4f7gvqtBzpFaBeM/Screenshot-from-2018-06-15-23-21-34.png\"></a></div>",
        "id": 128132826,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529085982
    },
    {
        "content": "<p>oh just received the mail regarding the first evaluations, thank you for the feedback <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 128133453,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529086823
    },
    {
        "content": "<p>Maybe you can store the overlaps in a list similar to the one you created for <em>check_overlaps()</em>?</p>",
        "id": 128136674,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529090714
    },
    {
        "content": "<p>Yep, that was the plan. But linked list not there in Tcl. I'll read up and find something to use for it.</p>",
        "id": 128155005,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529122542
    },
    {
        "content": "<p>This looks fine<br>\n<a href=\"http://www.wellho.net/resources/ex.php?item=t245/itlist\" target=\"_blank\" title=\"http://www.wellho.net/resources/ex.php?item=t245/itlist\">http://www.wellho.net/resources/ex.php?item=t245/itlist</a></p>",
        "id": 128175467,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529170692
    },
    {
        "content": "<p>For example. Another possibility would be to use a set of lists. Each one for the first object, second object, number of overlaps, depth, etc..</p>",
        "id": 128175690,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529171269
    },
    {
        "content": "<p>But, the example you found is more elegant.</p>",
        "id": 128175735,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529171309
    },
    {
        "content": "<p>yeah true, the set of lists was the first thing that came to mind but using objects I would be able deal with them as pairs</p>",
        "id": 128175794,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529171453
    },
    {
        "content": "<p>and have a common variable containing everything</p>",
        "id": 128175799,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529171482
    },
    {
        "content": "<p>That is done, I also added a sorting function which is passed to <code>lsort -command</code>.<br>\nNext things to do include <em>gqa</em> command's output, then imitate the behaviour of <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> of grouping the pairs by name with increasing volume accordingly.</p>",
        "id": 128179342,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529179804
    },
    {
        "content": "<p>So I was going through <em>src/tclscripts/checker/check.sh</em> <br>\nOn line 141, I was wondering why keep that line inside the loops that iterate the az, el values.</p>",
        "id": 128248303,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529330862
    },
    {
        "content": "<p>if line 139 was not appending to the $OBJ.pairings with <code>&gt;&gt;</code> I would have understood why. <br>\nBut keeping both line 139 and line 141 is actually redundant, was it a typo?</p>",
        "id": 128249734,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529332407
    },
    {
        "content": "<p>After adjusting the possible typo in <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a>,  and pointing <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> to the compiled rtcheck instead of prebuilt one.<br>\nI was able to get this <a href=\"https://www.diffchecker.com/f4Kn2zVh\" target=\"_blank\" title=\"https://www.diffchecker.com/f4Kn2zVh\">https://www.diffchecker.com/f4Kn2zVh</a>.<br>\nThere is minute changes in rounding/decimal places. On left is ouput from <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> and right is the output of my tool</p>",
        "id": 128259785,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529344573
    },
    {
        "content": "<p>Well yes, it looks like line 141 should be put after the az-el loop.</p>",
        "id": 128262565,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529347484
    },
    {
        "content": "<p>Cool thanks for checking it out.</p>",
        "id": 128299311,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529406944
    },
    {
        "content": "<p>I removed the class and objects now using a nested list. It is way less complex than using classes.</p>",
        "id": 128302200,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529411809
    },
    {
        "content": "<p>I was testing the overlap tool with havoc.g.  It was crashing, to inspect it :<br>\nI ran <code>check_overlaps -s1024 -a45 -e0 havoc</code> it gave a seg fault. <a href=\"https://hastebin.com/ezagerajet.cs\" target=\"_blank\" title=\"https://hastebin.com/ezagerajet.cs\">Backtrace</a><br>\nI also ran <code>gqa -q -Ao -g10mm,10mm havoc</code> that too gave seg fault.  <a href=\"https://hastebin.com/upipimicul.cs\" target=\"_blank\" title=\"https://hastebin.com/upipimicul.cs\">Backtrace</a><br>\nRunning same with rtcheck in terminal is fine : <a href=\"https://hastebin.com/yobawabira.sql\" target=\"_blank\" title=\"https://hastebin.com/yobawabira.sql\">log</a> also for gqa : <a href=\"https://hastebin.com/vebelonovi.swift\" target=\"_blank\" title=\"https://hastebin.com/vebelonovi.swift\">log</a>. Those extra messages being printed by bu_log is causing the issue in MGED I think judging by the backtrace.<br>\nBut there are other messages like <em>Trying initial grid spacing: 10 mm</em> in gqa which are printed using bu_log. in <em>libged/gqa.c</em> . Am I missing something here?</p>",
        "id": 128314247,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529426939
    },
    {
        "content": "<p>Any suggestions to link the tools together removing the file dependency?</p>",
        "id": 128317685,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529431328
    },
    {
        "content": "<p>Hmm isn't it better to store the overlaps as a file ?<br>\nBecause it's a lengthy process - running check overlaps 16 times and gqa at 1mm,1mm. <br>\nThe user shouldn't have to wait everytime the tool is opened, how about display a window asking to either \"load previous data\" or \" create new overlaps data\"?</p>",
        "id": 128329906,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529444343
    },
    {
        "content": "<p>I made some progress with the above idea :)<br>\nNow a menu is displayed : <a href=\"/user_uploads/1549/eTE7w8aStEz9jYrwU9CZAVpO/overlapmenu.png\" target=\"_blank\" title=\"overlapmenu.png\">overlapmenu.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/eTE7w8aStEz9jYrwU9CZAVpO/overlapmenu.png\" target=\"_blank\" title=\"overlapmenu.png\"><img src=\"/user_uploads/1549/eTE7w8aStEz9jYrwU9CZAVpO/overlapmenu.png\"></a></div><p>The user has three options - 1) Browse for overlaps file, 2) Create new overlap file, 3) if overlap file is found in the directory of the db then user can launch checker directly.<br>\nBrowse menu is pretty straightforward, once browsed it displays the status and Go is enabled : <a href=\"/user_uploads/1549/zaoX1qLs35KjxAjT6t7S3XWt/browse.png\" target=\"_blank\" title=\"browse.png\">browse.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/zaoX1qLs35KjxAjT6t7S3XWt/browse.png\" target=\"_blank\" title=\"browse.png\"><img src=\"/user_uploads/1549/zaoX1qLs35KjxAjT6t7S3XWt/browse.png\"></a></div><p>Create new overlaps file launches the tool I made: <a href=\"/user_uploads/1549/2Han9G8m7ysQchBGtWVHecHT/overlaptool.png\" target=\"_blank\" title=\"overlaptool.png\">overlaptool.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/2Han9G8m7ysQchBGtWVHecHT/overlaptool.png\" target=\"_blank\" title=\"overlaptool.png\"><img src=\"/user_uploads/1549/2Han9G8m7ysQchBGtWVHecHT/overlaptool.png\"></a></div><p>which closes the overlap menu and opens checker when overlaps file is created.<br>\n<a href=\"/user_uploads/1549/423PdI2GtLC1l_-kvZkOUGhJ/check.png\" target=\"_blank\" title=\"check.png\">check.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/423PdI2GtLC1l_-kvZkOUGhJ/check.png\" target=\"_blank\" title=\"check.png\"><img src=\"/user_uploads/1549/423PdI2GtLC1l_-kvZkOUGhJ/check.png\"></a></div>",
        "id": 128436856,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529611540
    },
    {
        "content": "<p>right now menu+overlap tool is in one tcl file and the checker separate.</p>",
        "id": 128437063,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529611790
    },
    {
        "content": "<blockquote>\n<p>I was testing the overlap tool with havoc.g.  It was crashing, to inspect it :<br>\nI ran <code>check_overlaps -s1024 -a45 -e0 havoc</code> it gave a seg fault. <a href=\"https://hastebin.com/ezagerajet.cs\" target=\"_blank\" title=\"https://hastebin.com/ezagerajet.cs\">Backtrace</a><br>\nI also ran <code>gqa -q -Ao -g10mm,10mm havoc</code> that too gave seg fault.  <a href=\"https://hastebin.com/upipimicul.cs\" target=\"_blank\" title=\"https://hastebin.com/upipimicul.cs\">Backtrace</a><br>\nRunning same with rtcheck in terminal is fine : <a href=\"https://hastebin.com/yobawabira.sql\" target=\"_blank\" title=\"https://hastebin.com/yobawabira.sql\">log</a> also for gqa : <a href=\"https://hastebin.com/vebelonovi.swift\" target=\"_blank\" title=\"https://hastebin.com/vebelonovi.swift\">log</a>. Those extra messages being printed by bu_log is causing the issue in MGED I think judging by the backtrace.<br>\nBut there are other messages like <em>Trying initial grid spacing: 10 mm</em> in gqa which are printed using bu_log. in <em>libged/gqa.c</em> . Am I missing something here?</p>\n</blockquote>\n<p>I can't see anything at <a href=\"http://hastebin.com\" target=\"_blank\" title=\"http://hastebin.com\">hastebin.com</a>. Therefore, I tried it myself and got a crash in <em>Tk_FreeGC()</em> while outputting a \"Root solver reported %d intersections != {0, 2, 4} on %s\" error message. Because it works with the <code>-P1</code> option, I'm in favor for a multithread related issue.</p>",
        "id": 128564184,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529863151
    },
    {
        "content": "<blockquote>\n<p>I can't see anything at <a href=\"http://hastebin.com\" target=\"_blank\" title=\"http://hastebin.com\">hastebin.com</a>. Therefore, I tried it myself and got a crash in <em>Tk_FreeGC()</em> while outputting a \"Root solver reported %d intersections != {0, 2, 4} on %s\" error message. Because it works with the <code>-P1</code> option, I'm in favor for a multithread related issue.</p>\n</blockquote>\n<p>Then it is a multi thread issue, but unclear on why it happens. It once didn't crash and actually worked so unexpected behaviour can be linked to threads again.</p>",
        "id": 128565442,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529866185
    },
    {
        "content": "<p>Regarding the usage of files: I prefer to not use files for handing over data from one function to another but to use the direct way. If you  want however to use them to save the results of an analysis run for later evaluation its another story and maybe reasonable.</p>",
        "id": 128565485,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529866216
    },
    {
        "content": "<p>yeah the use of files not only helps to save time spent in finding out the overlaps and there is also a marked file generated by the tool to save progress of resolved overlaps</p>",
        "id": 128565532,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529866329
    },
    {
        "content": "<blockquote>\n<p>Then it is a multi thread issue, but unclear on why it happens. It once didn't crash and actually worked so unexpected behaviour can be linked to threads again.</p>\n</blockquote>\n<p>It looks like the log call hook to TCL/Tk isn't protected by a mutex(?)</p>",
        "id": 128565533,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529866356
    },
    {
        "content": "<p>That looks like it, lemme try protecting it.</p>",
        "id": 128565656,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529866654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> that didn't work, I wrapped with <code>bu_semaphore_acquire(BU_SEM_SYSCALL)</code> and <code>bu_semaphore_release(BU_SEM_SYSCALL)</code> It still crashed :/</p>\n<p>I also noticed a weird behaviour. Here is how I was able to reproduce it : <br>\n1) Run <em>check_overlaps -a45 -e0 -P1 havoc</em><br>\n2) Run <em>check_overlaps -a45 -e0 havoc</em> (without P option) <br>\nThen MGED would freeze. The command appears twice: <a href=\"/user_uploads/1549/31SgXTWambt234_nh1dVWOIU/Screenshot-from-2018-06-25-13-45-43.png\" target=\"_blank\" title=\"Screenshot-from-2018-06-25-13-45-43.png\"></a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/31SgXTWambt234_nh1dVWOIU/Screenshot-from-2018-06-25-13-45-43.png\" target=\"_blank\" title=\"\"><img src=\"/user_uploads/1549/31SgXTWambt234_nh1dVWOIU/Screenshot-from-2018-06-25-13-45-43.png\"></a></div><p>Another weird behaviour. Steps:<br>\n1) Run <em>check_overlaps -a45 -e0 -P1 havoc</em> (7 root solver messages)<br>\n2) Run <em>check_overlaps -a45 -e0 -P1 havoc</em> (Only 3 root solver messages)<br>\n3) Run <em>check_overlaps -a45 -e0 -P1 havoc</em> (NO root solver messages)<br>\n4) Run <em>check_overlaps -a45 -e0 havoc</em> (without P option, NO crashes)<br>\nThen for all subsequent runs root solver messages don't show up.</p>",
        "id": 128589045,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529915355
    },
    {
        "content": "<p>That the root solver messages go away is surprising, that the havoc (or to be more precise the cone primitive) has issues is not, e.g. <a href=\"https://sourceforge.net/p/brlcad/bugs/288\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/bugs/288\">https://sourceforge.net/p/brlcad/bugs/288</a></p>",
        "id": 128612584,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529948191
    },
    {
        "content": "<p>hmm interesting..</p>",
        "id": 128612785,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529948489
    },
    {
        "content": "<p>I found one more strange behaviour.  This time its gqa,<br>\nRun <em>gqa -q -Ao -g30mm,30mm havoc</em> and then run <em>gqa -q -Ao -g20mm,20mm havoc</em>. MGED gets frozen with nothing happening.</p>",
        "id": 128613082,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529948865
    },
    {
        "content": "<p>\"processing with grid spacing ...\" message appears twice</p>",
        "id": 128613167,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529948945
    },
    {
        "content": "<blockquote>\n<p>I found one more strange behaviour.  This time its gqa,<br>\nRun <em>gqa -q -Ao -g30mm,30mm havoc</em> and then run <em>gqa -q -Ao -g20mm,20mm havoc</em>. MGED gets frozen with nothing happening.</p>\n</blockquote>\n<p>The debugger shows the same reason here: During ray-trace <em>bu_log()</em> is called which results in a segmentation fault in <em>Tk_FreeGC()</em>.</p>",
        "id": 128613645,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529949480
    },
    {
        "content": "<p>It gets stuck here then I have to use crtl+c to show this backtrace on gdb <a href=\"https://hastebin.com/yukugegefa\" target=\"_blank\" title=\"https://hastebin.com/yukugegefa\">https://hastebin.com/yukugegefa</a></p>",
        "id": 128613833,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529949694
    },
    {
        "content": "<p>Hmm, strange.</p>\n<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> that didn't work, I wrapped with <code>bu_semaphore_acquire(BU_SEM_SYSCALL)</code> and <code>bu_semaphore_release(BU_SEM_SYSCALL)</code> It still crashed :/</p>\n</blockquote>\n<p>What did you wrapped with the semaphore?</p>",
        "id": 128617422,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1529953952
    },
    {
        "content": "<p>I wrapped <code>bu_hook_call(...)</code> on line 85 in <em>src/libbu/log.c</em>, since it seemed the most appropriate.<br>\nAs that didn't work, I removed the previous changes and  tried with <code>call_hook-&gt;hookfunc(...)</code> on line 83 in <em>src/libbu/hook.c</em>.<br>\nAlso with <code>Tcl_Eval(...)</code> on line 162 in <em>src/mged/cmd.c</em> since it seemed like the entry to TCL/Tk.<br>\nThe last two attempts also didn't work and required including <em>bu/parallel.h</em> which seemed not right.</p>",
        "id": 128618510,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1529955333
    },
    {
        "content": "<p>BTW this is the work I have done so far for removing the <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a>.<br>\n<a href=\"/user_uploads/1549/IBRc2gBKhdlf-wpjeilNeOlw/overlaps_tool.patch\" target=\"_blank\" title=\"overlaps_tool.patch\">overlaps_tool.patch</a> <br>\nAfter patching run from mged using <em>overlaps_tool [-F] [overlap_file]</em> (If overlap file is mentioned, then no menu will be shown, directly runs the checker tool)</p>",
        "id": 128670783,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530036847
    },
    {
        "content": "<blockquote>\n<p>I wrapped <code>bu_hook_call(...)</code> on line 85 in <em>src/libbu/log.c</em>, since it seemed the most appropriate.</p>\n</blockquote>\n<p>The whole <em>bu_log()</em> doesn't look thread safe. See for example at the global variables below the header in src/libbu/log.c.<br>\nHowever, I don't think that these are the reason for the crash. I suppose it is something with the TCL call, but what?</p>",
        "id": 128671187,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530037279
    },
    {
        "content": "<blockquote>\n<p>The whole <em>bu_log()</em> doesn't look thread safe. See for example at the global variables below the header in src/libbu/log.c.</p>\n</blockquote>\n<p>Yeah that is true!</p>",
        "id": 128671396,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530037552
    },
    {
        "content": "<p>even a simple message like <code>bu_log(\"%s\\n\",reg1-&gt;reg_name);</code> at the end in overlapHandler(), in check_overlaps.c can crash MGED</p>",
        "id": 128672290,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530038509
    },
    {
        "content": "<blockquote>\n<p>BTW this is the work I have done so far for removing the <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a>.<br>\n<a href=\"/user_uploads/1549/IBRc2gBKhdlf-wpjeilNeOlw/overlaps_tool.patch\" target=\"_blank\" title=\"overlaps_tool.patch\">overlaps_tool.patch</a> <br>\nAfter patching run from mged using <em>overlaps_tool [-F] [overlap_file]</em> (If overlap file is mentioned, then no menu will be shown, directly runs the checker tool)</p>\n</blockquote>\n<p>Thanks, I'll have a look at it. I'ts probably the best to proceed with this.</p>",
        "id": 128672343,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530038528
    },
    {
        "content": "<blockquote>\n<p>even a simple message like <code>bu_log(\"%s\\n\",reg1-&gt;reg_name);</code> at the end in overlapHandler(), in check_overlaps.c can crash MGED</p>\n</blockquote>\n<p>welp its the same deal here too, with -P1 it works fine!</p>",
        "id": 128672665,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530038939
    },
    {
        "content": "<p>I've just looked at the mged code to see which semaphores there are used. But, I could find only one call to <em>bu_semaphore_release()</em>, no call to <em>bu_semaphore_acquire()</em>.</p>",
        "id": 128673696,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530040031
    },
    {
        "content": "<blockquote>\n<p>welp its the same deal here too, with -P1 it works fine!</p>\n</blockquote>\n<p>Yes, it works with <code>-P1</code> or if the algorithm runs in another process.</p>",
        "id": 128673777,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530040120
    },
    {
        "content": "<blockquote>\n<p>I've just looked at the mged code to see which semaphores there are used. But, I could find only one call to <em>bu_semaphore_release()</em>, no call to <em>bu_semaphore_acquire()</em>.</p>\n</blockquote>\n<p>By MGED's code where do you mean? Did you try adding <em>bu_semaphore_acquire()</em> before the <em>bu_semaphore_release()</em> ?  or could it like it is acquired somewhere else..</p>\n<blockquote>\n<p>Yes, it works with <code>-P1</code> or if the algorithm runs in another process.</p>\n</blockquote>\n<p>Didn't understand the algorithm runs in another process. How do we do that?</p>",
        "id": 128673978,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530040362
    },
    {
        "content": "<blockquote>\n<p>By MGED's code where do you mean? Did you try adding <em>bu_semaphore_acquire()</em> before the <em>bu_semaphore_release()</em> ?  or could it like it is acquired somewhere else..</p>\n</blockquote>\n<p>I did simply a grep on BU_SEM_ in the src/mged directory.<br>\nI cannot test setting <em>bu_semaphore_acquire()</em> now because this laptop has only one core (it's an old one).</p>\n<blockquote>\n<p>Didn't understand the algorithm runs in another process. How do we do that?</p>\n</blockquote>\n<p>If <em>rtcheck</em> is called to execute the algorithm it runs in another process. I.e., <em>mged</em> and <em>rtcheck</em> run in different processes.</p>",
        "id": 128674729,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530041291
    },
    {
        "content": "<blockquote>\n<p>I cannot test setting <em>bu_semaphore_acquire()</em> now because this laptop has only one core (it's an old one).</p>\n</blockquote>\n<p>Okay I will try to find it and check it out.</p>\n<blockquote>\n<p>If <em>rtcheck</em> is called to execute the algorithm it runs in another process. I.e., <em>mged</em> and <em>rtcheck</em> run in different processes.</p>\n</blockquote>\n<p>oh yeah that is right.</p>",
        "id": 128674846,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530041429
    },
    {
        "content": "<p>Hmm that is in cmd.c in the function <code>cmdline(struct bu_vls *vp, int record)</code> but cmdline is never called according to gdb when I run check_overlaps.<br>\nSo that didn't help but good catch :)</p>",
        "id": 128675972,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530042645
    },
    {
        "content": "<p>It reminds me on <a href=\"https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=171353\" target=\"_blank\" title=\"https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=171353\">https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=171353</a></p>",
        "id": 128724795,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530116994
    },
    {
        "content": "<p>Yeah looks quite similar, and seems fixed with Tcl 8.4.4. But we are running tcl 8.5.19 (? According to NEWS) so should have been fixed.</p>",
        "id": 128725369,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530117607
    },
    {
        "content": "<p>still why can't we make the entry point to Tcl single threaded</p>",
        "id": 128725534,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530117865
    },
    {
        "content": "<blockquote>\n<p>Yeah looks quite similar, and seems fixed with Tcl 8.4.4. But we are running tcl 8.5.19 (? According to NEWS) so should have been fixed.</p>\n</blockquote>\n<p>They fixed another part of Tk (I think it was Tkinter). Tk_FreeGC() and TkGetDisplay() are still the same.</p>",
        "id": 128725925,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530118328
    },
    {
        "content": "<blockquote>\n<p>still why can't we make the entry point to Tcl single threaded</p>\n</blockquote>\n<p>Because TkGetDisplay() uses thread specific memory. I.e., the call must come from the main thread, otherwise it won't find the display.</p>",
        "id": 128725972,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530118417
    },
    {
        "content": "<blockquote>\n<p>They fixed another part of Tk (I think it was Tkinter). Tk_FreeGC() and TkGetDisplay() are still the same.</p>\n</blockquote>\n<p>hmm that is a bummer!</p>",
        "id": 128726152,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530118637
    },
    {
        "content": "<p>Maybe we can apply the patch they did for tkinter</p>",
        "id": 128726221,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530118707
    },
    {
        "content": "<p>hmm running <em>output_hook</em> command first and then running <em>check_overlaps -a45 -e0 havoc</em> seems to solve the issue</p>",
        "id": 128727050,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530119768
    },
    {
        "content": "<p>but the color of bu_log messages change from red to blue and order also changes i.e it gets printed at the end only</p>",
        "id": 128727105,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530119867
    },
    {
        "content": "<p>because it deletes the existing hook</p>",
        "id": 128727222,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530119998
    },
    {
        "content": "<p>the default output_hook command is <em>output_callback</em></p>",
        "id": 128727679,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530120549
    },
    {
        "content": "<p>I send an email to the developer mailing list to find out if it's reasonable to fix the Tk binding. It should be possible (in one post they write about \"specific APIs for queuing events from one thread into another\") but I couldn't find a hint in the Tkinter history yet.</p>\n<p>Or, one could do it the same way as in Archer: Send the bu_log() messages to the console (?)</p>\n<p>Or, one could allow single thread ged commands only.</p>",
        "id": 128728901,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530121994
    },
    {
        "content": "<p>For me the Archer way seems the best. After all these are log messages and shouldn't disturb the user.</p>",
        "id": 128729037,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530122170
    },
    {
        "content": "<p>BTW did you get a chance to look at the overlaps tool I sent yesterday. Since I am still learning Tcl/Tk, I was hoping for some feedback to improve the code.</p>",
        "id": 128729211,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530122434
    },
    {
        "content": "<blockquote>\n<p>BTW did you get a chance to look at the overlaps tool I sent yesterday. Since I am still learning Tcl/Tk, I was hoping for some feedback to improve the code.</p>\n</blockquote>\n<p>Hmm, how can I run it?</p>",
        "id": 128731982,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530125694
    },
    {
        "content": "<p><em>overlaps_tool</em></p>",
        "id": 128732012,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530125745
    },
    {
        "content": "<p>The <em>Go</em> results in wild db_lookup() messages. Is this supposed to be so at the moment?</p>",
        "id": 128732442,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530126263
    },
    {
        "content": "<p>I have not seen any messages like that</p>",
        "id": 128732533,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530126379
    },
    {
        "content": "<p>which go button BTW? the menu's or the overlap file one? edit: nvm there is only one GO</p>",
        "id": 128732568,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530126445
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>db_lookup(v\u0001ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½\u00015v$) failed: v\u0001ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½\u00015v$ does not exist\ndb_string_to_path() of &#39;v\u0001ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½\u00015v$&#39; failed on &#39;v\u0001ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½\u00015v$&#39;\n</pre></div>",
        "id": 128732664,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530126571
    },
    {
        "content": "<p>oh that looks bad :O. Can you please tell me how to reproduce this?</p>",
        "id": 128732738,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530126629
    },
    {
        "content": "<p>It was the truck with g4.</p>",
        "id": 128732865,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530126834
    },
    {
        "content": "<p>The path to the overlaps file is <a href=\"http://truck.g.ck/ck.truck.g.overlaps\" target=\"_blank\" title=\"http://truck.g.ck/ck.truck.g.overlaps\">truck.g.ck/ck.truck.g.overlaps</a></p>",
        "id": 128732928,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530126896
    },
    {
        "content": "<p>hmm that sounds alright. Can you check the overlaps file in that folder?</p>",
        "id": 128732948,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530126945
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>/g4/r136 /g4/r176 305504.8500\n/g4/r54 /g4/r74 34041.2306\n/g4/r59 /g4/r74 34036.0681\n/g4/r69 /g4/r80 33660.9235\n/g4/r64 /g4/r80 33648.8302\n/g4/r12 /g4/r25 16537.3320\n/g4/r20 /g4/r27 16537.3171\n/g4/r103 /g4/r105 15767.0500\n/g4/r104 /g4/r105 15767.0500\n/g4/r103 /g4/r93 14959.0125\n/g4/r104 /g4/r95 14959.0125\n/g4/r3 /g4/r93 4313.0296\n/g4/r3 /g4/r95 4311.5429\n/g4/r136 /g4/r179 705.6438\n/g4/r178 /g4/r179 705.6438\n/g4/r136 /g4/r180 700.0875\n/g4/r119 /g4/r93 685.8000\n/g4/r119 /g4/r95 685.8000\n/g4/r25 /g4/r3 122.2375\n/g4/r1 /g4/r27 81.1188\n/g4/r1 /g4/r25 81.0265\n/g4/r27 /g4/r3 80.9625\n/g4/r121 /g4/r122 0.0000\n</pre></div>",
        "id": 128733075,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530127095
    },
    {
        "content": "<p>yeah that is as expected!</p>",
        "id": 128733106,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530127174
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/dKxsBTSeith84mEPBP-fd5ZH/Screenshot-from-2018-06-28-00-51-08.png\" target=\"_blank\" title=\"Screenshot-from-2018-06-28-00-51-08.png\">Screenshot-from-2018-06-28-00-51-08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/dKxsBTSeith84mEPBP-fd5ZH/Screenshot-from-2018-06-28-00-51-08.png\" target=\"_blank\" title=\"Screenshot-from-2018-06-28-00-51-08.png\"><img src=\"/user_uploads/1549/dKxsBTSeith84mEPBP-fd5ZH/Screenshot-from-2018-06-28-00-51-08.png\"></a></div>",
        "id": 128733235,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530127328
    },
    {
        "content": "<p>When I restart the overlap_tool it works with the existing file.</p>",
        "id": 128733257,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530127367
    },
    {
        "content": "<p>yeah it loads from previously generated overlaps file. So with that no wild db_lookup messages?</p>",
        "id": 128733301,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530127424
    },
    {
        "content": "<p>Right, but after hitting \"Create New Overlaps File\" I get no window with the overlaps as in your screenshot.</p>",
        "id": 128734398,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530128956
    },
    {
        "content": "<p>After creating new overlaps it loads the created new overlaps file in the menu and ready to run. That window in screenshot is after pressing the Go button on the menu once it is loaded</p>",
        "id": 128734487,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530129055
    },
    {
        "content": "<p>I was trying to visualize gqa using <a href=\"http://geogebra.org\" target=\"_blank\" title=\"http://geogebra.org\">geogebra.org</a> with the coordinates printed out with -d option. Now I have an idea of how gqa shoots the ray! I am impressed by how it works like shooting the rays in all 3 axis covering the whole bounding box with uniform grid spacing.</p>",
        "id": 128784188,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530207599
    },
    {
        "content": "<p>I also like how it skips the repeated rays when refining to a lower grid spacing</p>",
        "id": 128785437,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530209017
    },
    {
        "content": "<p>fixed a small bug  with gqa :) <a href=\"https://sourceforge.net/p/brlcad/code/71101/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/71101/\">r71101</a></p>",
        "id": 128786627,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530210529
    },
    {
        "content": "<blockquote>\n<p>fixed a small bug  with gqa :) <a href=\"https://sourceforge.net/p/brlcad/code/71101/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/71101/\">r71101</a></p>\n</blockquote>\n<p>I saw your commit <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 128788742,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530212949
    },
    {
        "content": "<blockquote>\n<p>After creating new overlaps it loads the created new overlaps file in the menu and ready to run. That window in screenshot is after pressing the Go button on the menu once it is loaded</p>\n</blockquote>\n<p>I've to leave the <em>Overlap Menu</em> and restart it to make the <em>Go</em> button work.</p>\n<p>In addition: Why do I have to Browse for a .g file? I'm getting an error when it isn't the same what is currently loaded in mged.</p>",
        "id": 128788938,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530213186
    },
    {
        "content": "<blockquote>\n<p>I've to leave the <em>Overlap Menu</em> and restart it to make the <em>Go</em> button work.</p>\n</blockquote>\n<p>I will have a look at it.</p>\n<blockquote>\n<p>In addition: Why do I have to Browse for a .g file? I'm getting an error when it isn't the same what is currently loaded in mged.</p>\n</blockquote>\n<p>It's not for browsing .g file :P I kept it there in case someone needs to load overlaps file from anywhere.</p>",
        "id": 128789707,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530214202
    },
    {
        "content": "<p>Here is a GIF on how it works for me:<br>\n<a href=\"/user_uploads/1549/Xgi5UK59MHdfQCUNRews98hQ/Peek-2018-06-29-01-35.gif\" target=\"_blank\" title=\"Peek-2018-06-29-01-35.gif\">Peek-2018-06-29-01-35.gif</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/Xgi5UK59MHdfQCUNRews98hQ/Peek-2018-06-29-01-35.gif\" target=\"_blank\" title=\"Peek-2018-06-29-01-35.gif\"><img src=\"/user_uploads/1549/Xgi5UK59MHdfQCUNRews98hQ/Peek-2018-06-29-01-35.gif\"></a></div><p>Not sure why you can't run it in one go :/</p>",
        "id": 128791439,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530216462
    },
    {
        "content": "<p>I made the grid spacing 10mm for making the GIF short. With 1mm it takes some time.</p>",
        "id": 128791507,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530216548
    },
    {
        "content": "<p>now the text-entry field for objects take focus when it is created and &lt;Return&gt; key is binded to run the check_overlaps button in the overlap file tool</p>",
        "id": 128816775,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530259576
    },
    {
        "content": "<blockquote>\n<p>Not sure why you can't run it in one go :/</p>\n</blockquote>\n<p>hmm, maybe I know why it didn't work you. I think you were loading the .g file then running \"create new overlaps file\". <br>\nThere is a bug that only loaded the filename once on widget creation only. That is why you had to reload the overlaps_tool.<br>\nThanks for finding it out!, will fix it.</p>",
        "id": 128827486,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530278094
    },
    {
        "content": "<p>that also explains the wild db_lookup messages :D. I need to think of a way to validate the browsed file. Or should I remove the browse feature ?</p>",
        "id": 128827614,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530278291
    },
    {
        "content": "<p>It could be handy in case one wants to open overlaps file located elsewhere but then there rises an issue of loading incorrect files or even overlaps file for a different .g file !</p>",
        "id": 128827706,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530278473
    },
    {
        "content": "<p>well now it restricts browsing only .overlaps file<br>\n<a href=\"/user_uploads/1549/fLyrAQIqNQzljpax1BZDPYWc/filetypes.png\" target=\"_blank\" title=\"filetypes.png\">filetypes.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/fLyrAQIqNQzljpax1BZDPYWc/filetypes.png\" target=\"_blank\" title=\"filetypes.png\"><img src=\"/user_uploads/1549/fLyrAQIqNQzljpax1BZDPYWc/filetypes.png\"></a></div>",
        "id": 128828005,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530278945
    },
    {
        "content": "<p>got the idea to validate the overlaps file with help of <code>pathlist</code> command.</p>",
        "id": 128828915,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530280221
    },
    {
        "content": "<p>All should be okay now :) <br>\n<a href=\"/user_uploads/1549/eA-mR7ivC3SK-e3EwOlmp56Y/overlaps_tool_v2.patch\" target=\"_blank\" title=\"overlaps_tool_v2.patch\">overlaps_tool_v2.patch</a></p>",
        "id": 128837765,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530290294
    },
    {
        "content": "<p>Made the overlaps_tool such that once it is launched the user can only click/type inside the overlaps tool. I did so that the user cannot modify the database while the overlaps file is generated.</p>",
        "id": 128840199,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530293513
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Not sure why you can't run it in one go :/</p>\n</blockquote>\n<p>hmm, maybe I know why it didn't work you. I think you were loading the .g file then running \"create new overlaps file\". <br>\nThere is a bug that only loaded the filename once on widget creation only. That is why you had to reload the overlaps_tool.<br>\nThanks for finding it out!, will fix it.</p>\n</blockquote>\n<p>Exactly this was the reason.</p>",
        "id": 128887592,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530378912
    },
    {
        "content": "<p>You should make clear that there is an either-or in the dialog: Either create a new overlaps file or use an existing one.</p>",
        "id": 128887661,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530379001
    },
    {
        "content": "<p>I misinterpreted is as: Hit first button, then hit second button, then hit third button.</p>",
        "id": 128887672,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530379049
    },
    {
        "content": "<p>oh yeah that is a problem, what if I kept the two buttons on one level with a 'OR' label between them</p>",
        "id": 128887721,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530379120
    },
    {
        "content": "<p>radio buttons would have been nice but there is also the feature of loading previously used overlaps file.</p>",
        "id": 128887798,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530379269
    },
    {
        "content": "<p>And usually you haven't to browse for the overlaps file because it has a canonical name which will be loaded automatically. On the other hand, you cannot set the file name in <em>Create New Overlaps File</em>.</p>",
        "id": 128887800,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530379295
    },
    {
        "content": "<p>what do you say we remove the browse button?</p>",
        "id": 128887852,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530379421
    },
    {
        "content": "<p>there are other problems from loading overlaps like the progress file wouldn't match ( <em>.marked</em> file created by checker tool to keep the resolved overlaps )</p>",
        "id": 128887909,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530379505
    },
    {
        "content": "<blockquote>\n<p>And usually you haven't to browse for the overlaps file because it has a canonical name which will be loaded automatically. On the other hand, you cannot set the file name in <em>Create New Overlaps File</em>.</p>\n</blockquote>\n<p>yeah that naming helps load automatically that's why I didn't add option to save overlaps file with a different name</p>",
        "id": 128888030,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530379789
    },
    {
        "content": "<p>You could use multiple (or a changing) dialogs. The first could have two buttons: <em>Create New File</em> and <em>Load Existing File</em>. If one hits the <em>Create New File</em> the dialog which asks for the group will appear. If one hits the <em>Load existing File</em> button a new dialog which could appear which lets the user select between <em>Use Last File (/home/blablabla)</em> and <em>Browse for Overlaps File</em>. ...</p>",
        "id": 128888158,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530379922
    },
    {
        "content": "<p>Or one dialog with <em>Create New File</em>, <em>Use Last File (/home/blablabla)</em>, and <em>Browse for Overlaps File</em>.</p>",
        "id": 128888224,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530380059
    },
    {
        "content": "<p>okay both sounds good. So no <em>go</em> buttons.</p>",
        "id": 128888243,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530380123
    },
    {
        "content": "<p>I liked the one with three buttons because it's less clicks to actually get to the checker tool</p>",
        "id": 128888292,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530380205
    },
    {
        "content": "<p>If previous file not there then <em>Use Last File</em> would be disabled</p>",
        "id": 128888349,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530380290
    },
    {
        "content": "<p>I will have the changes ready by the next day. Thank you for the inputs :)</p>",
        "id": 128888599,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530380802
    },
    {
        "content": "<p>How about  something like this  :<br>\n<a href=\"/user_uploads/1549/N6mccMKaWqGDXNsm7eOM5HT-/Peek-2018-07-01-16-50.gif\" target=\"_blank\" title=\"Peek-2018-07-01-16-50.gif\"></a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/N6mccMKaWqGDXNsm7eOM5HT-/Peek-2018-07-01-16-50.gif\" target=\"_blank\" title=\"\"><img src=\"/user_uploads/1549/N6mccMKaWqGDXNsm7eOM5HT-/Peek-2018-07-01-16-50.gif\"></a></div>",
        "id": 128918135,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530445045
    },
    {
        "content": "<p>Looks good. I like especially the tooltips.</p>",
        "id": 128929031,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530470038
    },
    {
        "content": "<p>Great :)</p>",
        "id": 128929092,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530470143
    },
    {
        "content": "<p>So I guess it's good to go now and ready to be committed . (?)</p>",
        "id": 128929186,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530470336
    },
    {
        "content": "<p>Yes, it's a new feature which can be tweaked afterwards if something needs to be improved.</p>",
        "id": 128929251,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530470486
    },
    {
        "content": "<p>cool! Moving on to the next task. With libanalyze doing the grid setup. I read gqa's code and was thinking how much can be moved to libanalyze. There is this one loop that decides the axis and which calls bu_parallel to run planeworker which actually prepares the ray to shoot.</p>",
        "id": 128929397,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530470818
    },
    {
        "content": "<p>So if it needs to be moved to libanalyze the arguments could be like the rtip for the models dimensions and it would return like an array or linked list with origin and direction for the rays.</p>",
        "id": 128929457,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530470980
    },
    {
        "content": "<p>then gqa will be actually shoot the rays by iterating this list preparing the rays</p>",
        "id": 128929459,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530470997
    },
    {
        "content": "<p>is something like that in mind? because I am a bit confused</p>",
        "id": 128929512,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530471065
    },
    {
        "content": "<p>Something like that. However, I wonder if passing a large array is the best solution. Another possibility is to pass a function which returns the rays one after the other (i.e. a call-back function).</p>",
        "id": 128929688,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530471465
    },
    {
        "content": "<p>hmm that sounds better.</p>",
        "id": 128929738,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530471567
    },
    {
        "content": "<p>what was the basic goal? was it something like merging gqa and check_overlaps. So that we can run check_overlaps within gqa but with a single grid?</p>",
        "id": 128929787,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530471644
    },
    {
        "content": "<p>The idea was to get a set of functions for all the grid-shooting routines.</p>",
        "id": 128929837,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530471741
    },
    {
        "content": "<p>oh when we call these functions we can pass like an option to get a single gird or three grids like gqa?</p>",
        "id": 128929900,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530471925
    },
    {
        "content": "<p>or separate functions for single and three grids</p>",
        "id": 128929946,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530471972
    },
    {
        "content": "<p>At the moment <em>analyze_overlaps()</em> generates the grid by itself, but how about having grid generating functions which can be passed as parameter to <em>analyze_overlaps()</em>. For example there could be a generator for parallel rays starting from a rectangular grid. Then, <em>gqa</em> could use it three times for the three coordinate axis directions.</p>",
        "id": 128930153,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530472519
    },
    {
        "content": "<p>didn't understand the part \"having grid generating functions which can be passed as parameter to analyze_overlaps()\". how would we be passing the function? and from where? libged?</p>",
        "id": 128930309,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530472866
    },
    {
        "content": "<p>How: As a parameter of <em>analyze_overlaps()</em>. It has currently many other parameters for the internal grid generation.<br>\nFrom where: For example libged. Currently it passes a set of parameters for the internall grid generation. It could be a call-back function instead.</p>",
        "id": 128930768,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530473962
    },
    {
        "content": "<p>BTW, here is an example for a call-back implementation in C++ (untested ;)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// typedef for the call-back</span>\n<span class=\"k\">class</span> <span class=\"nc\">NumberProvider</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"k\">virtual</span> <span class=\"o\">~</span><span class=\"n\">NumberProvider</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{]</span>\n\n    <span class=\"k\">virtual</span> <span class=\"kt\">int</span> <span class=\"k\">operator</span><span class=\"p\">()(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"k\">protected</span><span class=\"o\">:</span>\n    <span class=\"n\">NumberProvider</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// the function which uses the call-back</span>\n<span class=\"kt\">void</span> <span class=\"nf\">PrintNumber</span><span class=\"p\">(</span><span class=\"n\">NumberProvider</span><span class=\"o\">&amp;</span> <span class=\"n\">provider</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">provider</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"nl\">std</span><span class=\"p\">:</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// an implemetation of the call-back</span>\n<span class=\"k\">class</span> <span class=\"nc\">Counter</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">NumberProvider</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">NumberProvider</span><span class=\"p\">(),</span> <span class=\"n\">m_lastNumber</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">virtual</span> <span class=\"kt\">int</span> <span class=\"k\">operator</span><span class=\"p\">()(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">++</span><span class=\"n\">m_lastNumber</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"k\">private</span><span class=\"o\">:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">m_lastNumber</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span>    <span class=\"n\">argn</span><span class=\"p\">,</span>\n         <span class=\"kt\">char</span><span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">Counter</span> <span class=\"n\">counter</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span><span class=\"p\">(;;)</span>\n        <span class=\"n\">PrintNumber</span><span class=\"p\">(</span><span class=\"n\">counter</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 128930824,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530474104
    },
    {
        "content": "<p>Thanks for the example will have a look :)</p>",
        "id": 128930925,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530474324
    },
    {
        "content": "<blockquote>\n<p>How: As a parameter of <em>analyze_overlaps()</em>. It has currently many other parameters for the internal grid generation.<br>\nFrom where: For example libged. Currently it passes a set of parameters for the internall grid generation. It could be a call-back function instead.</p>\n</blockquote>\n<p>so we are passing the grid generating function defined in libged as a function pointer to libanalyze. How would this help? why not call this function directly in libged</p>",
        "id": 128930966,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530474401
    },
    {
        "content": "<blockquote>\n<p>Yes, it's a new feature which can be tweaked afterwards if something needs to be improved.</p>\n</blockquote>\n<p>Committed : <a href=\"https://sourceforge.net/p/brlcad/code/71106/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/71106/\">r71106</a>, <a href=\"https://sourceforge.net/p/brlcad/code/71107/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/71107/\">r71107</a><br>\nWas thinking about the line 301 in TODO file inside <em>tclscripts/checker/</em></p>",
        "id": 128965799,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530540909
    },
    {
        "content": "<blockquote>\n<p>BTW, here is an example for a call-back implementation in C++ (untested ;)</p>\n</blockquote>\n<p>had to brush up my C++ to understand this :D</p>",
        "id": 128967460,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530542540
    },
    {
        "content": "<blockquote>\n<p>Was thinking about the line 301 in TODO file inside <em>tclscripts/checker/</em></p>\n</blockquote>\n<p>Isn't this the one you are working on right now?</p>",
        "id": 128975528,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530551009
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Was thinking about the line 301 in TODO file inside <em>tclscripts/checker/</em></p>\n</blockquote>\n<p>Isn't this the one you are working on right now?</p>\n</blockquote>\n<p>yeah whether to remove this line from TODO</p>",
        "id": 128975541,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530551038
    },
    {
        "content": "<p>Can you test it on Windows? How does <em>gqa</em> behave there?</p>",
        "id": 128975610,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530551098
    },
    {
        "content": "<p>Sure can do! Will test it out.</p>",
        "id": 128975724,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530551241
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>BTW, here is an example for a call-back implementation in C++ (untested ;)</p>\n</blockquote>\n<p>had to brush up my C++ to understand this :D</p>\n</blockquote>\n<p>It was meant as an example that using a call-back mechanism doesn't need to look ugly.</p>\n<p>Only an idea, don't know if it's a good one: Stay with the current <em>analyze_overlaps()</em> libanalyze API function, but making analyze_overlaps.c a C++ file and use C++ features there to implement <em>analyze_overlaps()</em> with a separate grid generator. Other programs as <em>gqa</em> could use these directly if transformed to C++ too.</p>",
        "id": 128976031,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530551635
    },
    {
        "content": "<p>umm not sure about CPP. I am more comfortable with C. <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span><br>\nBut the whole idea of the task still doesn't make much sense to me yet.</p>",
        "id": 128976365,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530551966
    },
    {
        "content": "<p>The idea was to use a grid generator function which will be passed a callback function to shoot the rays right?</p>",
        "id": 128976469,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530552109
    },
    {
        "content": "<p>Right, but the separation in the core algorithm and the grid generator needn't to be done in libged.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">analyze_overlaps</span><span class=\"p\">(...)</span> <span class=\"p\">{</span>\n    <span class=\"n\">RectangularParallelRayGenerator</span> <span class=\"n\">gridGenerator</span><span class=\"p\">(...);</span>\n\n    <span class=\"n\">analyze_overlaps_core</span><span class=\"p\">(</span><span class=\"n\">gridGenerator</span><span class=\"p\">,</span> <span class=\"p\">...);</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 128976649,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530552324
    },
    {
        "content": "<p>It's OK to stay with C.</p>",
        "id": 128976711,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530552366
    },
    {
        "content": "<p>hmm.. Need to clear some more basic questions. I am not sure what are we trying to do here. Yes we need grid generating functions but which command will be using these functions? check_overlaps?</p>",
        "id": 128976853,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530552591
    },
    {
        "content": "<blockquote>\n<p>hmm.. Need to clear some more basic questions. I am not sure what are we trying to do here. Yes we need grid generating functions but which command will be using these functions? check_overlaps?</p>\n</blockquote>\n<p>For example, and rtcheck, and maybe gqa.</p>",
        "id": 128978235,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530554116
    },
    {
        "content": "<p>okay,  so what will be doing with analyze_overlaps in rtcheck and gqa? I am confused because gqa does a lot more than just checks for overlaps</p>",
        "id": 128978308,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530554199
    },
    {
        "content": "<p>gqa would use the same grid generator but with a different base algorithm.</p>",
        "id": 128978959,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530554896
    },
    {
        "content": "<p>different base algorithm ? you mean splitting the gqa code to libged and libanalyze as we did for check_overlaps?</p>",
        "id": 128979127,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530555076
    },
    {
        "content": "<p>Yes, and to gtools.</p>",
        "id": 128979795,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530555823
    },
    {
        "content": "<p>gtools?</p>",
        "id": 128979907,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530555939
    },
    {
        "content": "<p>Home of the gqa algorithm?</p>",
        "id": 128979975,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530555985
    },
    {
        "content": "<p>humm. gqa is fully written in libged. in gtools gqa.c only calls the ged_gqa</p>",
        "id": 128980003,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530556036
    },
    {
        "content": "<p>Ah, I see, it calls <em>ged_gqa()</em>.</p>",
        "id": 128980087,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530556135
    },
    {
        "content": "<p>Not like rtcheck.</p>",
        "id": 128980106,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530556169
    },
    {
        "content": "<p>yeah that is right</p>",
        "id": 128980110,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530556184
    },
    {
        "content": "<p>now would that information change anything we have discussed so far?</p>",
        "id": 128980418,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530556527
    },
    {
        "content": "<p>No, not really. Your plan sounds good.</p>",
        "id": 128980487,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530556589
    },
    {
        "content": "<p>we would need a different file in libanalyze for gqa right?</p>",
        "id": 128980517,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530556648
    },
    {
        "content": "<p>Maybe two: One for gqa and one for the grid generator.</p>",
        "id": 128980631,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530556802
    },
    {
        "content": "<p>ahh so we wont be passing function pointer to grid-generator from libged right? as you had said yesterday</p>",
        "id": 128980710,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530556875
    },
    {
        "content": "<p>instead call the grid generator defined in the libanalyze</p>",
        "id": 128980721,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530556898
    },
    {
        "content": "<p>I thought we want to pass the pointer to the grid generator (defined in libanalyze) ton <em>analyze_overlaps()</em> (defined in libanalyze too) in libged's <em>ged_check_overlaps()</em>?</p>",
        "id": 128980975,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530557173
    },
    {
        "content": "<p>oh, yeah that works. I had misunderstood it before as to define grid generator in libged and pass a pointer to analyze_overlaps in ged_check_overlaps</p>",
        "id": 128981103,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530557335
    },
    {
        "content": "<p>to summarize it :<br>\n1) need a rectangular grid generator function in libanalyze.<br>\n2) pass pointer to this function from libged to analyze_overlaps(in case of check_overlaps).<br>\n3) call grid setup in analyze_overlaps.</p>\n<p>Now grid setup needs function pointer to the function that shoots the rays right. How are we dealing with that?<br>\nIn analyze_overlaps, <em>analov_do_pixel</em> shoots the rays.</p>",
        "id": 128981481,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530557801
    },
    {
        "content": "<p>Putting this data in the \"context\" (the additional variable to the function pointer)?</p>",
        "id": 128981848,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530558286
    },
    {
        "content": "<p>Hmm not following the idea completely, but I will start coding hopefully then things will be clear to me.</p>",
        "id": 128982178,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530558782
    },
    {
        "content": "<blockquote>\n<p>Can you test it on Windows? How does <em>gqa</em> behave there?</p>\n</blockquote>\n<p>I did test it. check_overlaps was crashing due to a derp, but fixed it.<br>\nOverlaps_tool works fine now on windows but it freezes in case of havoc. The same <em>bu_log</em> problem there too I think.  But it is stranger there, some parts of the messages gets printed then it freezes. I think after some part gets printed the thread gets switched causing the issue.<br>\nOf course -P1 works.</p>",
        "id": 129009854,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530605672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\nToday I was going through check_overlaps/rtcheck, on how it produces the grid.<br>\nThere is one major difference between check_overlaps and gqa. <br>\nIn the check_overlaps:<br>\nThere is  ability to provide az/el values and shoot from eye. Also the grid formed is on the basis of the size value(zoomed in or out).<br>\nIf zoomed out, the eye is near and the grid formed is large with high gridspacing. <br>\nIf zoomed in, the eye goes very far and the grid formed is small with lesser gridspacing.<br>\nIn gqa, The grid shape and position remains consistent, only grid spacing can be changed.</p>\n<p>So I was trying to figure out how can these two use the same grid generator. Like maybe some common arguments.</p>",
        "id": 129035447,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530637502
    },
    {
        "content": "<p>Just a plotting for three different az/el values and zoom level.<br>\n<a href=\"/user_uploads/1549/ZtaqbSHEYMsMd_QhJ-3Tx4-s/Screenshot-from-2018-07-03-22-39-03.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-03-22-39-03.png\"></a><br>\ntruck.g g4</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/ZtaqbSHEYMsMd_QhJ-3Tx4-s/Screenshot-from-2018-07-03-22-39-03.png\" target=\"_blank\" title=\"\"><img src=\"/user_uploads/1549/ZtaqbSHEYMsMd_QhJ-3Tx4-s/Screenshot-from-2018-07-03-22-39-03.png\"></a></div>",
        "id": 129035725,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530637801
    },
    {
        "content": "<p>For example, there could be a function <code>grid_generator()</code> (don't take my naming too serious) which has a parameter <code>grid_layout</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">grid_layout</span> <span class=\"p\">{</span>\n    <span class=\"n\">point_t</span> <span class=\"n\">ray_direction</span><span class=\"p\">;</span>\n    <span class=\"n\">point_t</span> <span class=\"n\">start_point</span><span class=\"p\">;</span>\n    <span class=\"n\">point_t</span> <span class=\"n\">grid_x_direction</span><span class=\"p\">;</span>\n    <span class=\"n\">point_t</span> <span class=\"n\">grid_y_direction</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">points_in_x_direction</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">points_in_y_direction</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">current_x_count</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">current_y_count</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>and one or two initializing functions <code>init_grid_layout(&lt;all possible parameters&gt;)</code> or <code>init_grid_1(&lt;check_overlaps() parameters&gt;)</code> and <code>init_grid_2(&lt;gqa parameters&gt;)</code>.</p>",
        "id": 129036135,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530638269
    },
    {
        "content": "<p>BTW, the <code>grid_layout</code> would be the <em>context</em> I wrote about.</p>",
        "id": 129036226,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530638368
    },
    {
        "content": "<p>sounds like a good plan. Thanks for the input.<br>\nI got the ray_direction, start_point in the structure. <br>\nAre <em>grid_x_direction</em> and <em>grid_y_direction</em> same as <em>dx_model</em> and <em>dy_model</em> which are scaled by <em>cell_width</em> and <em>cell_height</em> of the unit vectors  <em>dx_unit</em> and <em>dy_unit</em> or are they just the unit vectors?</p>",
        "id": 129036570,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530638760
    },
    {
        "content": "<p><em>points_in_x_direction</em> and <em>points_in_y_direction</em> must be the width and height in pixels right?</p>",
        "id": 129036768,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530638945
    },
    {
        "content": "<p>Didn't understand the purpose of the last two ints - <em>current_x_count</em> and <em>current_y_count</em></p>",
        "id": 129036923,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530639116
    },
    {
        "content": "<p>The following is incomplete!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">grid_generator</span><span class=\"p\">(</span><span class=\"n\">gl</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">x_index</span> <span class=\"o\">=</span> <span class=\"n\">gl</span><span class=\"p\">.</span><span class=\"n\">current_x_count</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">y_index</span> <span class=\"o\">=</span> <span class=\"n\">gl</span><span class=\"p\">.</span><span class=\"n\">current_y_count</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">gl</span><span class=\"p\">.</span><span class=\"n\">current_x_count</span> <span class=\"o\">==</span> <span class=\"n\">gl</span><span class=\"p\">.</span><span class=\"n\">points_in_x_direction</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">gl</span><span class=\"p\">.</span><span class=\"n\">current_x_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"o\">++</span><span class=\"n\">gl</span><span class=\"p\">.</span><span class=\"n\">current_y_count</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">gl</span><span class=\"p\">.</span><span class=\"n\">start_point</span> <span class=\"o\">+</span> <span class=\"n\">x_index</span> <span class=\"o\">*</span> <span class=\"n\">gl</span><span class=\"p\">.</span><span class=\"n\">grid_x_direction</span> <span class=\"o\">+</span> <span class=\"n\">y_index</span> <span class=\"o\">*</span> <span class=\"n\">gl</span><span class=\"p\">.</span><span class=\"n\">grid_y_direction</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 129037098,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530639301
    },
    {
        "content": "<p>You could call them <code>current_~_index</code> too.</p>",
        "id": 129037216,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530639420
    },
    {
        "content": "<p>gotcha! I can relate the above code to <code>VJOIN2 (point, workerData-&gt;viewbase_model, a.a_x, workerData-&gt;dx_model, a.a_y, workerData-&gt;dy_model)</code></p>",
        "id": 129037217,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530639421
    },
    {
        "content": "<p>Probable ;) I wrote mine with C++ in mind.</p>",
        "id": 129037250,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530639467
    },
    {
        "content": "<p>great! now I am understanding most of the grid generator function. Thanks a ton for the help :)</p>",
        "id": 129037401,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530639615
    },
    {
        "content": "<p>Right now confusing me is where would be calling this grid_generator function.<br>\nWith above code it seems like we can call this right before shooting the rays in case of check_overlaps.<br>\nWe can get the direction and point with functions returning these values from the structure we initialize .</p>",
        "id": 129037523,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530639831
    },
    {
        "content": "<p>and in case of gqa just before calling bu_parallel in the <em>views</em> loop we can initialize the structure and use functions similarly in <em>plane_worker</em> to shoot the rays</p>",
        "id": 129037724,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530640052
    },
    {
        "content": "<p>You could make <code>grid_generator()</code> accepting <code>struct xray*</code> as parameter and returning an <code>int</code> saying if the last point was reached.</p>",
        "id": 129037737,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530640076
    },
    {
        "content": "<p>oh you mean like passing the a_ray to the grid_generator which would plug in the values for r_dir and r_pt.</p>",
        "id": 129037996,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530640386
    },
    {
        "content": "<p>Ok then, I will get started on making check_overlaps to use new grid generator function. :)</p>",
        "id": 129040288,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530642706
    },
    {
        "content": "<blockquote>\n<p>just different ordering without that -P1 flag</p>\n</blockquote>\n<p>adding the -B flag will let you test parallel while eliminating the element of chance -- it essentially zeros out the random number tables</p>",
        "id": 129063085,
        "sender_full_name": "Sean",
        "timestamp": 1530678382
    },
    {
        "content": "<blockquote>\n<p>I was able to get this <a href=\"https://www.diffchecker.com/f4Kn2zVh\" target=\"_blank\" title=\"https://www.diffchecker.com/f4Kn2zVh\">https://www.diffchecker.com/f4Kn2zVh</a>.<br>\nThere is minute changes in rounding/decimal places. On left is ouput from <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> and right is the output of my tool</p>\n</blockquote>\n<p>Sorry to revisit an old point, but <span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> did you ever figure out what exactly was the source of the rounding differences?  differences may be to be expected, but we still need to know what exactly introduced them for this particular feature.  your rtcheck diffs seemed spot on, so that even raises the curiosity level.</p>",
        "id": 129064128,
        "sender_full_name": "Sean",
        "timestamp": 1530680563
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I was able to get this <a href=\"https://www.diffchecker.com/f4Kn2zVh\" target=\"_blank\" title=\"https://www.diffchecker.com/f4Kn2zVh\">https://www.diffchecker.com/f4Kn2zVh</a>.<br>\nThere is minute changes in rounding/decimal places. On left is ouput from <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> and right is the output of my tool</p>\n</blockquote>\n<p>Sorry to revisit an old point, but <span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> did you ever figure out what exactly was the source of the rounding differences?  differences may be to be expected, but we still need to know what exactly introduced them for this particular feature.  your rtcheck diffs seemed spot on, so that even raises the curiosity level.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Yes I did. I believe it has to do with awk printing the size value after multiplying the length with depth. It does this rounding that limits output to six digits (like 0.123456, 1.23456, 12.3456, 123.456 ...) see <a href=\"https://www.diffchecker.com/EY0VNKhF\" target=\"_blank\" title=\"https://www.diffchecker.com/EY0VNKhF\">https://www.diffchecker.com/EY0VNKhF</a>  on the left is the output of awk multiplying it in <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> and on the right is the output of tcl multiplying it in my script.</p>",
        "id": 129074141,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530695604
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>just different ordering without that -P1 flag</p>\n</blockquote>\n<p>adding the -B flag will let you test parallel while eliminating the element of chance -- it essentially zeros out the random number tables</p>\n</blockquote>\n<p>Thanks! I didn't know about the -B flag. It was not there in rtcheck's man. I would need to add this to my current rtcheck.</p>",
        "id": 129074229,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530695761
    },
    {
        "content": "<p>Here is my progress :<br>\n<a href=\"/user_uploads/1549/wG1u5V6xMfSJj4Ft2qMRAzjv/4_07_progress.patch\" target=\"_blank\" title=\"4_07_progress.patch\">4_07_progress.patch</a> <br>\nThere is a lot of things that can be removed. Its WIP :)</p>",
        "id": 129095561,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530724140
    },
    {
        "content": "<p>Here I initialized the grid normally without any functions. What exactly does the initializer function take as parameters? are they similar to check_overlaps's grid_setup ?</p>",
        "id": 129095658,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530724281
    },
    {
        "content": "<p>Why has <em>analyze_overlaps()</em> still so many parameters?</p>",
        "id": 129096475,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530725555
    },
    {
        "content": "<p>yeah I am removing them.</p>",
        "id": 129096529,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530725644
    },
    {
        "content": "<p>OK :)</p>",
        "id": 129096530,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530725661
    },
    {
        "content": "<p><code>APP.a_rbeam = 0.5 * viewsize / width</code> because of this line I have to pass viewsize and width</p>",
        "id": 129096532,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530725684
    },
    {
        "content": "<p>This means, that <em>a_rbeam</em> is related to the grid cell size?</p>",
        "id": 129096617,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530725874
    },
    {
        "content": "<p>yeah 0.5 * cell_width</p>",
        "id": 129096677,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530725964
    },
    {
        "content": "<p>I could pass cell_width in the grid_context then it would be fine.</p>",
        "id": 129096733,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530726044
    },
    {
        "content": "<p>Then, there should be a function like <code>double rectangular_grid_cell_width(struct rectangular_grid* grid)</code>, but how. It would be easier to do this with C++, but this isn't a real alternative here ...</p>",
        "id": 129096817,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530726208
    },
    {
        "content": "<p>humm that is right! I did not think that way</p>",
        "id": 129096882,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530726324
    },
    {
        "content": "<p>You could use a table of function pointers like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">grid_generator</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">next_ray</span><span class=\"p\">)(</span><span class=\"k\">struct</span> <span class=\"n\">xray</span> <span class=\"o\">*</span><span class=\"n\">ray</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">);</span>\n    <span class=\"kt\">double</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">cell_width</span><span class=\"p\">)(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>",
        "id": 129097016,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530726541
    },
    {
        "content": "<p>yeah this should work. But it could be a bit messy..</p>",
        "id": 129097194,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530726830
    },
    {
        "content": "<p>ah but with this we can reduce the parameters further.</p>",
        "id": 129097264,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530726919
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">grid_generator</span> <span class=\"p\">{</span>\n    <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">next_ray</span><span class=\"p\">)(</span><span class=\"k\">struct</span> <span class=\"n\">xray</span> <span class=\"o\">*</span><span class=\"n\">ray</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">);</span>\n    <span class=\"kt\">double</span> <span class=\"o\">*</span><span class=\"n\">cell_width</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>something like this would be needed right? CMIIW</p>",
        "id": 129097492,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530727247
    },
    {
        "content": "<p>oh nevermind got it!</p>",
        "id": 129097588,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530727441
    },
    {
        "content": "<p>Okay that is done. Thanks for the idea :)</p>",
        "id": 129098181,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530728494
    },
    {
        "content": "<p>Now that we are doing grid setup completely on libged I should move rt_prep_parallel to libged</p>",
        "id": 129098308,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530728753
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">grid_generator</span> <span class=\"p\">{</span>\n    <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">next_ray</span><span class=\"p\">)(</span><span class=\"k\">struct</span> <span class=\"n\">xray</span> <span class=\"o\">*</span><span class=\"n\">ray</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">);</span>\n    <span class=\"kt\">double</span> <span class=\"o\">*</span><span class=\"n\">cell_width</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>something like this would be needed right? CMIIW</p>\n</blockquote>\n<p>I personally would like to have the two functions, because I don't like redundant data. It was even hard for me to accept the <code>rectangular_grid.total_points</code>.</p>",
        "id": 129098435,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530728930
    },
    {
        "content": "<blockquote>\n<p>Now that we are doing grid setup completely on libged I should move rt_prep_parallel to libged</p>\n</blockquote>\n<p>Ohh, no? For me this is an <em>analyze_overlaps()</em> internal matter.</p>",
        "id": 129098501,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530729020
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Now that we are doing grid setup completely on libged I should move rt_prep_parallel to libged</p>\n</blockquote>\n<p>Ohh, no? For me this is an <em>analyze_overlaps()</em> internal matter.</p>\n</blockquote>\n<p>humm I thought about it because I saw my comment above rt_prep_parallel saying it needs to be run before grid_setup.</p>",
        "id": 129098608,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530729240
    },
    {
        "content": "<p>yeah it is not need.</p>",
        "id": 129098654,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530729264
    },
    {
        "content": "<p>I will keep it in libanalyze</p>",
        "id": 129098660,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530729274
    },
    {
        "content": "<p>I tried to implement the changes in gqa.<br>\n<a href=\"/user_uploads/1549/9RJDnKGONDfEeJuwxSlpBxPw/5_07_progress.patch\" target=\"_blank\" title=\"5_07_progress.patch\">5_07_progress.patch</a></p>",
        "id": 129150567,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530810528
    },
    {
        "content": "<p>I don't know if it's wise to do these changes on gqa while it's still in libged (and not in libanalyze).<br>\nYou are setting up the grid there directly, but then, you forget that you know <em>struct rectangular_grid</em> and introduce two new functions grid_x_index() and grid_y_index(). I may need some time to form an opinion ...</p>",
        "id": 129152075,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530812275
    },
    {
        "content": "<p>Yeah I thought of it as an attempt before moving it fully to libanalyze.</p>",
        "id": 129152345,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530812500
    },
    {
        "content": "<p>BTW What are benefits of moving gqa to libanalyze ?</p>",
        "id": 129152448,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530812584
    },
    {
        "content": "<p>Shouldn't be vmath.h included in analyze.h?</p>",
        "id": 129152481,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530812628
    },
    {
        "content": "<blockquote>\n<p>Shouldn't be vmath.h included in analyze.h?</p>\n</blockquote>\n<p>yeah that sounds good. But all the other libanalyze files have them included separately.</p>",
        "id": 129152602,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530812756
    },
    {
        "content": "<blockquote>\n<p>BTW What are benefits of moving gqa to libanalyze ?</p>\n</blockquote>\n<p>Same reason as for rtcheck/analyze_overlaps(), to get the basic algorithm separated in a function which could be used in other contexts too?<br>\nHmm, however, I'm not sure about this.</p>",
        "id": 129152800,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530812968
    },
    {
        "content": "<p>if it were like different commands for like overlaps,  volume,  weight then having one common algorithm that does basics would have made sense in my opinion. But it is already aggregated together as one command.</p>",
        "id": 129152980,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530813135
    },
    {
        "content": "<p>Right.</p>\n<p>I thought about the grid_x_index() and grid_y_index() thing because I don't like it. They feel somehow artificial (this is subjective, I know). The reason why they are there is that the grid can be refined and already computed grid points shall not be computed again. (Right?) It would look better if there would be a function like <em>refine_grid_in_between</em> which sets up the grid structure in a way that it behaves so.</p>",
        "id": 129155890,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530815806
    },
    {
        "content": "<blockquote>\n<p>The reason why they are there is that the grid can be refined and already computed grid points shall not be computed again. (Right?) It would look better if there would be a function like <em>refine_grid_in_between</em> which sets up the grid structure in a way that it behaves so.</p>\n</blockquote>\n<p>Yeah for refinement and as well for app.a_user line 1379 (<em>unedited gqa.c</em>) which is used in <code>hit():1223</code><br>\nBut a function to refine would look good.</p>",
        "id": 129156274,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530816154
    },
    {
        "content": "<p>hmm I didn't know what to do next. Since we weren't sure about moving gqa to libanalyze.<br>\nI just changed the rtcheck program I wrote earlier to use the new grid generating function.</p>",
        "id": 129195991,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530876786
    },
    {
        "content": "<p>Maybe you could integrate the grid generator in check_overlaps first.</p>",
        "id": 129215088,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530899026
    },
    {
        "content": "<p>I already did that right? Like did the changes for check_overlaps + analyze_overlaps</p>",
        "id": 129215242,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530899187
    },
    {
        "content": "<p>Yes, in the patch you send me it was contained.</p>",
        "id": 129216833,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530901303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> What do you want?</p>",
        "id": 129216907,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530901428
    },
    {
        "content": "<blockquote>\n<p>Yes, in the patch you send me it was contained.</p>\n</blockquote>\n<p>I will commit those changes then. Will not do those extra functions I added for gqa.</p>",
        "id": 129216973,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530901497
    },
    {
        "content": "<p>I'll have more time to look into your matter at the weekend. This week was very busy.</p>",
        "id": 129218153,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530902906
    },
    {
        "content": "<p>Okay got it. Thanks :)</p>",
        "id": 129218171,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530902957
    },
    {
        "content": "<p>I had added a folder to libanalyze as GridGeneration. So when I commit by <code>svn commit src/libanalyze/GridGeneration/ -m \"...\" </code> should work right?</p>",
        "id": 129218398,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530903273
    },
    {
        "content": "<p>well I committed but I kinda mixed it up :/</p>",
        "id": 129219117,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530904121
    },
    {
        "content": "<p>I didn't realize I was committing the changes for analyze_overlaps too in include/analyze.h in <a href=\"https://sourceforge.net/p/brlcad/code/71117/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/71117/\">r71117</a></p>",
        "id": 129219194,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530904230
    },
    {
        "content": "<p>I could compile and run it, i.e. it should be OK now.</p>",
        "id": 129220265,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530905515
    },
    {
        "content": "<p>From your perspective, would it make sense to use the grid generator in gqa?</p>\n<p>Would it make sense to replace gqa by a function using analyze_overlaps() because it give you a better control on analyzing the overlaps?</p>\n<p>In your proposal there is an image of your prototype for an improved object selection. Do you still want to use it in overlaps_tool?</p>\n<p>Do you have other ideas of how the overlaps_tool could be improved?<br>\nCurrently, the left region is displayed in red and the right in blue. But, when I draw e.g. g4 first, it will be displayed in red too, which makes it impossible to see where the two overlapping regions are. Only the right/blue one can be identified.</p>\n<p>Why can't I check the overlaps between /g4/r25 and /g4/r12 of truck.g in overlaps_tool?</p>",
        "id": 129264132,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1530982292
    },
    {
        "content": "<blockquote>\n<p>From your perspective, would it make sense to use the grid generator in gqa?</p>\n</blockquote>\n<p>Well Sean once told me that libanalyze was like a place for common tools used by these analyzing programs like rtcheck, gqa. So having and using grid generator does make sense to me.<br>\nIn case of gqa, for rectangular grid it does not seem to help much but if there were more types of grid generating functions. Then having a common place for these grid generating functions and using them does make sense.</p>\n<blockquote>\n<p>Would it make sense to replace gqa by a function using analyze_overlaps() because it give you a better control on analyzing the overlaps?</p>\n</blockquote>\n<p>well gqa does a lot more than just checks for overlaps. So something like analyze_overlaps cannot replace it.<br>\nYeah the better control of analyzing just some regions is better but then with gqa shooting three grids, all overlaps are found.<br>\nI would think <em>gqa</em> as a tool to check for overlaps as a whole and <em>check_overlaps</em> as something that can be used to analyze them in detail.</p>\n<blockquote>\n<p>In your proposal there is an image of your prototype for an improved object selection. Do you still want to use it in overlaps_tool?</p>\n</blockquote>\n<p>Yeah something like that is good.  Like having the tree displayed would give a better idea of the database.</p>\n<blockquote>\n<p>Do you have other ideas of how the overlaps_tool could be improved?<br>\nCurrently, the left region is displayed in red and the right in blue. But, when I draw e.g. g4 first, it will be displayed in red too, which makes it impossible to see where the two overlapping regions are. Only the right/blue one can be identified.</p>\n</blockquote>\n<p>Yes that is true that having the colors mixed up is bad. <br>\nAbout the ideas well the TODO list is full of ideas :D. I initially had proposed to improve <em>checker_tool</em> by doing those TODO task but then I was told that converting the unix script to a command was higher priority. Well I could start with that next and try to do those TODO tasks.</p>\n<blockquote>\n<p>Why can't I check the overlaps between /g4/r25 and /g4/r12 of truck.g in overlaps_tool?</p>\n</blockquote>\n<p>It worked for me I could display them on screen. But subtracting wont work unless you launch the overlaps_tool with -F option. <br>\nWith -F option we are displayed a warning message: </p>\n<div class=\"codehilite\"><pre><span></span>WARNING: Running with -F means check will assume that only the first unioned\n         solid in a region is responsible for any overlap. When subtracting\n         region A from overlapping region B, the first unioned solid in A will\n         be subtracted from the first unioned solid in B. This may cause the\n         wrong volume to be subtracted, leaving the overlap unresolved.\n</pre></div>",
        "id": 129266390,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1530986251
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Yes I did. I believe it has to do with awk printing the size value after multiplying the length with depth. It does this rounding that limits output to six digits (like 0.123456, 1.23456, 12.3456, 123.456 ...) see <a href=\"https://www.diffchecker.com/EY0VNKhF\" target=\"_blank\" title=\"https://www.diffchecker.com/EY0VNKhF\">https://www.diffchecker.com/EY0VNKhF</a>  on the left is the output of awk multiplying it in <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> and on the right is the output of tcl multiplying it in my script.</p>\n</blockquote>\n<p>Ah, yes that makes sense.  Could be confirmed by using printf in awk instead of print, with the same print specifier, but it certainly makes sense.  Thanks!</p>",
        "id": 129285784,
        "sender_full_name": "Sean",
        "timestamp": 1531028527
    },
    {
        "content": "<blockquote>\n<p>Thanks! I didn't know about the -B flag. It was not there in rtcheck's man. I would need to add this to my current rtcheck.</p>\n</blockquote>\n<p>It's really only intended as a developer option, but it probably should be documented better somewhere.  I think it's in rt's manual page, so it would make sense if it were on all of the rt* tool docs.</p>",
        "id": 129285835,
        "sender_full_name": "Sean",
        "timestamp": 1531028649
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>BTW What are benefits of moving gqa to libanalyze ?</p>\n</blockquote>\n<p>Same reason as for rtcheck/analyze_overlaps(), to get the basic algorithm separated in a function which could be used in other contexts too?<br>\nHmm, however, I'm not sure about this.</p>\n</blockquote>\n<p>Not only this.  At heart, a main distinction of rtcheck vs gqa is time vs quality.  Generalizing their behavior into library routine(s) is intended to get us closer to controling time vs quality more easily.  When you consider what <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> does, it is essentially sacrificing time for even more \"quality\" -- more overlaps reported.  In a near future, we want even more advanced methods that run faster (time, e.g., quick real-time checking) or give better results (quality, e.g., spherical sampling or brep CSG evaluation).</p>",
        "id": 129286363,
        "sender_full_name": "Sean",
        "timestamp": 1531029850
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> What do you want?</p>\n</blockquote>\n<p>Your entire discussion over the past few days has been SPOT on, same considerations I've thought through myself.  I think the answer could just fine in any number of directions, and a good path is hopefully made self-evident with focus being on the short-term goal of doing what <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> is doing from C/C++ code without exec's and refining away code duplication from there.</p>",
        "id": 129286433,
        "sender_full_name": "Sean",
        "timestamp": 1531030073
    },
    {
        "content": "<p>Beyond that, the decision is really up for discussion or just try something so we can have \"some time to form an opinion\" :)<br>\nI think it would be good to think beyond gridded sampling methods -- like s/grid_generator/ray_generator/ where you still have an iterator that returns the \"next\" ray, but it might not be limited to a grid pattern.  The difficulty will likely be how to control parameters of the pattern.</p>",
        "id": 129286629,
        "sender_full_name": "Sean",
        "timestamp": 1531030507
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Would it make sense to replace gqa by a function using analyze_overlaps() because it give you a better control on analyzing the overlaps?</p>\n</blockquote>\n<p>well gqa does a lot more than just checks for overlaps. So something like analyze_overlaps cannot replace it.<br>\nYeah the better control of analyzing just some regions is better but then with gqa shooting three grids, all overlaps are found.<br>\nI would think <em>gqa</em> as a tool to check for overlaps as a whole and <em>check_overlaps</em> as something that can be used to analyze them in detail.</p>\n</blockquote>\n<p>I've just realized that my question was missing an important addition, namely \"in the <em>overlaps_tool</em>\". I didn't meant it in general.</p>",
        "id": 129308130,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1531071574
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Why can't I check the overlaps between /g4/r25 and /g4/r12 of truck.g in overlaps_tool?</p>\n</blockquote>\n<p>It worked for me I could display them on screen.</p>\n</blockquote>\n<p>When I write for example <em>/g4/r25</em> in the Object(s) field of the overlap_tool I get the error message \"Unrecognized object names: /g4/r25\".</p>",
        "id": 129308233,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1531071802
    },
    {
        "content": "<blockquote>\n<p>I've just realized that my question was missing an important addition, namely \"in the <em>overlaps_tool</em>\". I didn't meant it in general.</p>\n</blockquote>\n<p>Well I don't get the \"better control\" on analyzing the overlaps in <em>overlaps_tool</em>. To the end user it is just running the commands and listing the overlaps.  As a developer yes I had better control in specifying the az/el values but then at the end I had to run it for 16 different combinations of az/el values to get an overall count which gqa does for me with just one command.</p>",
        "id": 129308496,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531072319
    },
    {
        "content": "<blockquote>\n<p>When I write for example <em>/g4/r25</em> in the Object(s) field of the overlap_tool I get the error message \"Unrecognized object names: /g4/r25\".</p>\n</blockquote>\n<p>Humm I am using the <em>t [obj]</em> command to check if the object actually exists in the db. And running <em>t /g4/r25</em> gives me a db_lookup error.<br>\nthe t command works for <em>t r25</em>.<br>\nWhat if I use pathlist command? That works with both g4 and /g4/r25<br>\nPS: I am using the pathlist command for verifying the overlaps file browsed is correct or not.</p>",
        "id": 129308693,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531072720
    },
    {
        "content": "<p><em>paths</em> command also works</p>",
        "id": 129308841,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531073007
    },
    {
        "content": "<blockquote>\n<p>Beyond that, the decision is really up for discussion or just try something so we can have \"some time to form an opinion\" :)<br>\nI think it would be good to think beyond gridded sampling methods -- like s/grid_generator/ray_generator/ where you still have an iterator that returns the \"next\" ray, but it might not be limited to a grid pattern.  The difficulty will likely be how to control parameters of the pattern.</p>\n</blockquote>\n<p>First, you have a point here: It's in fact a ray and not only a grid generator. If Saran agrees too, he could rename it some day.</p>\n<p>And regarding the not being limited to a rectangular pattern: This was a goal of this reorganization of the code too. Currently, the ray generator has only two functions: <code>next_ray()</code> and <code>grid_cell_width()</code>, where <code>grid_cell_width()</code> has in fact the meaning of \"ray thickness\". This is still very general and could be applied to patterns starting from a sphere or randomly in 3D space or ...<br>\n<em>gqa</em> has an additional requirement: It wants to control the fineness. There Saran's first attempt relies on the rectangularity of the grid. But, one could think of a ray generator function <code>refine_grid()</code>, which abstract this for any kind of grids.</p>\n<p>However, currently the libanalyze analyze_overlaps() would work with any kind of ray generator whereas libged's check_overlaps relies on the rectangular shape (its input values are designed for this only).</p>",
        "id": 129309402,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1531074086
    },
    {
        "content": "<p>To sum our discussion up, I see the following tasks as the next development steps:</p>\n<ul>\n<li>Better object selection via GUI in overlaps_tool similar to the prototype in the proposal.</li>\n<li>Go through the ideas in the TODO for improving the checker_tool and implement some of them, etc..</li>\n<li>Move the core algorithm of <em>gqa</em> to libanalyze and make it work with a generalized ray generator.</li>\n</ul>\n<p>Any comments?</p>",
        "id": 129309608,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1531074518
    },
    {
        "content": "<blockquote>\n<p><em>paths</em> command also works</p>\n</blockquote>\n<p>Liked this, because it threw lesser error messages in validating the overlaps file. With <em>pathlist</em> it gave a big error message in MGED's command window.<br>\nAnd now it should be fixed <a href=\"/user_uploads/1549/C6fBJLcUjEqCTPAywH08YfCZ/overlaps_tool_objects_fix.patch\" target=\"_blank\" title=\"overlaps_tool_objects_fix.patch\">overlaps_tool_objects_fix.patch</a></p>",
        "id": 129309735,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531074761
    },
    {
        "content": "<blockquote>\n<p>To sum our discussion up, I see the following tasks as the next development steps:<br>\n* Better object selection via GUI in overlaps_tool similar to the prototype in the proposal.<br>\n* Go through the ideas in the TODO for improving the checker_tool and implement some of them, etc..<br>\n* Move the core algorithm of <em>gqa</em> to libanalyze and make it work with a generalized ray generator.</p>\n<p>Any comments?</p>\n</blockquote>\n<p>Okay I will start with the better object selection. Will do some reading on how MGED's geometry browser GUI works.</p>",
        "id": 129309981,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531075309
    },
    {
        "content": "<blockquote>\n<p><em>gqa</em> has an additional requirement: It wants to control the fineness. There Saran's first attempt relies on the rectangularity of the grid. But, one could think of a ray generator function <code>refine_grid()</code>, which abstract this for any kind of grids.</p>\n</blockquote>\n<p>gqa's refinement could even be simply embedded in the natural progression of \"next ray\" where its pattern is an X grid, a Y grid, a Z grid, an X grid with a different thickness (and offset), a Y grid at the new thickness, etc.</p>\n<blockquote>\n<p>However, currently the libanalyze analyze_overlaps() would work with any kind of ray generator whereas libged's check_overlaps relies on the rectangular shape (its input values are designed for this only).</p>\n</blockquote>\n<p>the abstract concepts I'm hearing are ray creation/generation (e.g., grid, 3grid, spherical, etc), dispatch pattern (e.g., sequentially, random, hilbert, etc), and evaluation method (e.g., overlaps, volume, surface area, etc)</p>",
        "id": 129328041,
        "sender_full_name": "Sean",
        "timestamp": 1531113297
    },
    {
        "content": "<p>I was able to get the geometry listed, using some code from Geometry browser. Changed the double click to add to objs list and color it yellow.<br>\n<a href=\"/user_uploads/1549/wRVbp3eI7P6Jftx3UnxSXSv4/Screenshot-from-2018-07-09-17-46-00.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-09-17-46-00.png\"></a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/wRVbp3eI7P6Jftx3UnxSXSv4/Screenshot-from-2018-07-09-17-46-00.png\" target=\"_blank\" title=\"\"><img src=\"/user_uploads/1549/wRVbp3eI7P6Jftx3UnxSXSv4/Screenshot-from-2018-07-09-17-46-00.png\"></a></div><p>That got me thinking, the overlaps tool runs the check_overlaps and gqa on per objects from the entry box  like this :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">foreach</span> obj <span class=\"nv\">$_objs</span> <span class=\"k\">{</span>\n    <span class=\"nv\">$this</span> <span class=\"nv\">runCheckOverlaps</span> <span class=\"nv\">$obj</span>\n    <span class=\"nv\">$this</span> <span class=\"nv\">runGqa</span> <span class=\"nv\">$obj</span>\n<span class=\"k\">}</span>\n</pre></div>\n\n\n<p>This is how the <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> also behaved. So giving individual regions in the _objs list won't make sense like <code>/g4/r25 /g4/r12</code> this would make the tool run <code>check_overlaps /g4/r25</code> and <code>gqa /g4/r25</code> then <code>check_overlaps /g4/r12</code> and <code>gqa /g4/r12</code>. Both regions individually would give zero overlaps.</p>\n<p>So should I change the behaviour to something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nv\">$this</span> <span class=\"nv\">runCheckOverlaps</span> <span class=\"nv\">$_objs</span>\n<span class=\"nv\">$this</span> <span class=\"nv\">runGqa</span> <span class=\"nv\">$_objs</span>\n</pre></div>\n\n\n<p>So that it would run the tools like <code>check_overlaps /g4/r25 /g4/r12</code> and <code>gqa /g4/r25 /g4/r12</code> hence get overlaps between the regions.</p>",
        "id": 129345695,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531139473
    },
    {
        "content": "<p>This is confusing me:</p>\n<div class=\"codehilite\"><pre><span></span>mged&gt; gqa -Ao -g1mm,1mm /g4/r25 /g4/r12\nTrying initial grid spacing: 1 mm\nUsing grid spacing lower limit: 1 mm\nProcessing with grid spacing 1 mm 1241 x 688 x 864\n/home/sharan/brlcad/mod_ssh/src/libged/gqa.c:1461 Didn&#39;t find object named &quot;g4/r25&quot; in 2 entries\n/home/sharan/brlcad/mod_ssh/src/libged/gqa.c:1461 Didn&#39;t find object named &quot;g4/r12&quot; in 2 entries\nNOTE: Stopped, grid spacing refined to 0.5 (below lower limit 1).\nSummary (1mm grid spacing):\nlist Overlaps:\n/g4/r12 /g4/r25 count:727 dist:363.945mm @ (7443 833.03 1093)\n</pre></div>\n\n\n<p>it says it can't find objects but then reports the overlaps.</p>",
        "id": 129346570,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531140550
    },
    {
        "content": "<p>Progress so far :<br>\n<a href=\"/user_uploads/1549/hCwFcLxhqpw2ZNXi8Zw_en55/Peek-2018-07-10-01-42.gif\" target=\"_blank\" title=\"Peek-2018-07-10-01-42.gif\">Peek-2018-07-10-01-42.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/hCwFcLxhqpw2ZNXi8Zw_en55/Peek-2018-07-10-01-42.gif\" target=\"_blank\" title=\"Peek-2018-07-10-01-42.gif\"><img src=\"/user_uploads/1549/hCwFcLxhqpw2ZNXi8Zw_en55/Peek-2018-07-10-01-42.gif\"></a></div>",
        "id": 129371123,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531167245
    },
    {
        "content": "<blockquote>\n<p>it says it can't find objects but then reports the overlaps.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> that is odd.  looking at the code, I think you found a bug -- when an object isn't found, find_cmd_line_obj() returns GED_ERROR which is a 1 ... which is a valid object table entry (but wrong!).  want to try and fix it?</p>",
        "id": 129388393,
        "sender_full_name": "Sean",
        "timestamp": 1531193779
    },
    {
        "content": "<p>umm yeah I am trying to fix it but figuring out how it works,  gqa expects the objects like g4 or havoc as entry, anything like /g4/ or g4/ throws that error message.</p>\n<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> that is odd.  looking at the code, I think you found a bug -- when an object isn't found, find_cmd_line_obj() returns GED_ERROR which is a 1 ... which is a valid object table entry (but wrong!).  want to try and fix it?</p>\n</blockquote>\n<p>Here you say 1 is valid but wrong and in the FIXME comment you said the type is not valid and value is correct. <br>\nSo the fix would be returning a 'int' with value as 1 ? But that doesn't fix the <em>Didn't find object</em> messages.</p>",
        "id": 129396671,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531207708
    },
    {
        "content": "<blockquote>\n<p>umm yeah I am trying to fix it but figuring out how it works,  gqa expects the objects like g4 or havoc as entry, anything like /g4/ or g4/ throws that error message.</p>\n</blockquote>\n<p>Well yes, because you can see in find_cmd_line_obj() that it does a simple iteration over the arguments and compares against all regions (&amp;regp-&gt;reg_name[1])...<br>\nsince those are region names and not paths, they'll never match a path, so find_cmd_line_obj() returns an index of 1 (i.e., GED_ERROR... which is wrong/bad).</p>",
        "id": 129418334,
        "sender_full_name": "Sean",
        "timestamp": 1531237724
    },
    {
        "content": "<blockquote>\n<p>Here you say 1 is valid but wrong and in the FIXME comment you said the type is not valid and value is correct. <br>\nSo the fix would be returning a 'int' with value as 1 ? But that doesn't fix the <em>Didn't find object</em> messages.</p>\n</blockquote>\n<p>I didn't say the value was \"correct\".  I wrote that the value (1) could be a _valid_ index and in your example it is a valid index.  right now, the return \"type\" of that function is an index into an array (see where find_cmd_line_obj() is called) ... so returning anything non-negative is probably going to be bad... do you see why?</p>",
        "id": 129418479,
        "sender_full_name": "Sean",
        "timestamp": 1531237905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> any progress?</p>",
        "id": 129422080,
        "sender_full_name": "Sean",
        "timestamp": 1531242119
    },
    {
        "content": "<blockquote>\n<p>Well yes, because you can see in find_cmd_line_obj() that it does a simple iteration over the arguments and compares against all regions (&amp;regp-&gt;reg_name[1])...<br>\nsince those are region names and not paths, they'll never match a path, so find_cmd_line_obj() returns an index of 1 (i.e., GED_ERROR... which is wrong/bad).</p>\n</blockquote>\n<p>yeah  I did see this. In the call to <code>find_cmd_line_obj()</code>  pointer to reg_name[1] is passed which cuts off the front \"/\" in the region name and inside the <code>find_cmd_line_obj()</code> it replaces the next occurance of \"/\" with \"null termination\". <br>\nSo from /g4/r1 it becomes g4/r1, then the next \"/\" is replaced by null termination making it just g4. which matches the object, (i.e g4)</p>",
        "id": 129422161,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531242211
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> any progress?</p>\n</blockquote>\n<p>I had made some progress with the overlap tool- added ability to batch add/remove elements into the objectlist with wildcards, but nothing related the bug fix</p>",
        "id": 129422226,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531242285
    },
    {
        "content": "<p>I don't know what should be the expected behaviour in case if paths are supplied in cmd-line arguments.</p>",
        "id": 129422496,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531242653
    },
    {
        "content": "<p>should it be like for input <code>gqa /g4/r25 /g4/r12</code> on  call to <code>find_cmd_line_objs()</code> for <em>/g4/r25</em> it must return 0 and for <em>/g4/r12</em> it must return 1</p>",
        "id": 129422974,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531243313
    },
    {
        "content": "<p>According to current behaviour it is like linking the objects with the regions i.e /g4/r1, /g4/r2 all return the index of g4 in the obj_table.</p>",
        "id": 129423862,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531244385
    },
    {
        "content": "<blockquote>\n<p>so returning anything non-negative is probably going to be bad... do you see why?</p>\n</blockquote>\n<p>yeah that is right because it would match incorrectly. Should the fix be something like this? <a href=\"/user_uploads/1549/JsYpwJvZeBK6oY3Z2bOi_0GS/gqa_fix.patch\" target=\"_blank\" title=\"gqa_fix.patch\">gqa_fix.patch</a></p>",
        "id": 129425376,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531246121
    },
    {
        "content": "<p>Today's progress regarding overlaps_tool's objection selection:<br>\n<a href=\"/user_uploads/1549/rQs0rGSYMSl65vYF8HPA0KTn/Peek-2018-07-10-23-49.gif\" target=\"_blank\" title=\"Peek-2018-07-10-23-49.gif\"></a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/rQs0rGSYMSl65vYF8HPA0KTn/Peek-2018-07-10-23-49.gif\" target=\"_blank\" title=\"\"><img src=\"/user_uploads/1549/rQs0rGSYMSl65vYF8HPA0KTn/Peek-2018-07-10-23-49.gif\"></a></div>",
        "id": 129425952,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531246897
    },
    {
        "content": "<p>the top entry can also be used to add individual items as well ( not shown in the gif )</p>",
        "id": 129426111,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531247074
    },
    {
        "content": "<p>now I think what's left is to add Check Tops and Clear Selection buttons.</p>",
        "id": 129426244,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531247229
    },
    {
        "content": "<blockquote>\n<p>I don't know what should be the expected behaviour in case if paths are supplied in cmd-line arguments.</p>\n</blockquote>\n<p>what happens if you \"draw /g4/r25 /g4/r12\" and \"gqa\" in mged?  probably the expected behavior ;)</p>",
        "id": 129426950,
        "sender_full_name": "Sean",
        "timestamp": 1531248073
    },
    {
        "content": "<blockquote>\n<p>yeah that is right because it would match incorrectly. Should the fix be something like this? <a href=\"/user_uploads/1549/JsYpwJvZeBK6oY3Z2bOi_0GS/gqa_fix.patch\" target=\"_blank\" title=\"gqa_fix.patch\">gqa_fix.patch</a></p>\n</blockquote>\n<p>This looks good to me except that you left the fixme comment ;)</p>",
        "id": 129427037,
        "sender_full_name": "Sean",
        "timestamp": 1531248173
    },
    {
        "content": "<p>what is the default selection?  if something is drawn?  if nothing is drawn?</p>",
        "id": 129427361,
        "sender_full_name": "Sean",
        "timestamp": 1531248569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> I haven't seen you commit anything recently ... at this point, you should be committing daily, throughout the day while you work.  each one of the \"today's progress\" postings here should have been preceded by at least 1 or 10 commits.  don't be shy ;)</p>",
        "id": 129435446,
        "sender_full_name": "Sean",
        "timestamp": 1531258506
    },
    {
        "content": "<p>also, regarding r71117 ... if you're going to introduce anything into public headers in the top-level include/ directory, they need to be documented with /** */ doxygen comments</p>",
        "id": 129437001,
        "sender_full_name": "Sean",
        "timestamp": 1531260542
    },
    {
        "content": "<blockquote>\n<p>what happens if you \"draw /g4/r25 /g4/r12\" and \"gqa\" in mged?  probably the expected behavior ;)</p>\n</blockquote>\n<p>I get the same behaviour <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span>  for <em>gqa -Ao</em> after drawing /g4/r25 and /g4/r12</p>",
        "id": 129455817,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531293117
    },
    {
        "content": "<blockquote>\n<p>what is the default selection?  if something is drawn?  if nothing is drawn?</p>\n</blockquote>\n<p>right now for both the default selection is nothing. On previous iteration of my overlaps_tool I had made it get the currently drawn objects using the <em>who</em> command. I would restore that behaviour here too.</p>",
        "id": 129455956,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531293346
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> I haven't seen you commit anything recently ... at this point, you should be committing daily, throughout the day while you work.  each one of the \"today's progress\" postings here should have been preceded by at least 1 or 10 commits.  don't be shy ;)</p>\n</blockquote>\n<p>Okay got it!. Will commit regularly.</p>",
        "id": 129456029,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531293480
    },
    {
        "content": "<p>Committed lots of things. Now its up to date with my progress.</p>",
        "id": 129459805,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531300514
    },
    {
        "content": "<p>Tested it out on windows 10. Seems to be working alright.</p>",
        "id": 129468666,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531313755
    },
    {
        "content": "<p>Woot!  Looking good.  So where do we stand on the original script?  Do you do everything it does now?</p>",
        "id": 129478023,
        "sender_full_name": "Sean",
        "timestamp": 1531322636
    },
    {
        "content": "<p>Not really there are two things missing: <br>\n1) dry_run with -d option : this was not feasible because I am dealing with the overlaps in the memory and it doesn't write the intermediate files to the disk like rtcheck <em>program</em> does.<br>\n2) There is a block code disabled with a false flag in <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> at line 264, but it deals with the plot files so again as I am using check_overlaps command instead of rtcheck <em>program</em> it does not write any plot files.</p>",
        "id": 129482615,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531326828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> 1) I don't think dry_run is important ... I think that was just to make sure the script was iterating correctly and that it wasn't going to explode into too many rtcheck runs if the iteration wasn't right or some size changed</p>",
        "id": 129486422,
        "sender_full_name": "Sean",
        "timestamp": 1531330635
    },
    {
        "content": "<p>2) can also be ignored for now -- that was a means to generate visualization aids for resolving overlaps.  there's other things we can do there that would be better</p>",
        "id": 129486501,
        "sender_full_name": "Sean",
        "timestamp": 1531330691
    },
    {
        "content": "<p>SO ... then it sounds like you're there or close to it?  does check_overlaps (without the GUI) still write out an overlaps file?</p>",
        "id": 129486525,
        "sender_full_name": "Sean",
        "timestamp": 1531330731
    },
    {
        "content": "<p>what's the usage like?</p>",
        "id": 129486541,
        "sender_full_name": "Sean",
        "timestamp": 1531330750
    },
    {
        "content": "<p>(command-line usage)</p>",
        "id": 129486547,
        "sender_full_name": "Sean",
        "timestamp": 1531330758
    },
    {
        "content": "<p>check_overlaps does not write an overlaps file.</p>",
        "id": 129486633,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531330833
    },
    {
        "content": "<blockquote>\n<p>(command-line usage)</p>\n</blockquote>\n<p>do you mean from terminal like we can run rtcheck or gqa?</p>",
        "id": 129486671,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531330880
    },
    {
        "content": "<p>usage inside MGED would be check_overlaps [options] [object(s)]</p>",
        "id": 129486764,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531330968
    },
    {
        "content": "<p>I mean from the mged command line</p>",
        "id": 129486811,
        "sender_full_name": "Sean",
        "timestamp": 1531331040
    },
    {
        "content": "<p>so yeah, what are those options :)</p>",
        "id": 129486855,
        "sender_full_name": "Sean",
        "timestamp": 1531331051
    },
    {
        "content": "<p>options:<br>\n-a #, -e #for the az/el values<br>\n-s # for size value<br>\n-d for printing information like the eye_pos, orientation, grid size...<br>\n- w #, -n # for mentioning the width/height<br>\n-g # ,-G # for cell width/height.<br>\n-P# to set processors used<br>\n-V# to set pixel ratio (width/height)</p>",
        "id": 129487039,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531331278
    },
    {
        "content": "<p>if the options and objects are not mentioned then default values are used -a 35 -e25 -s 512</p>",
        "id": 129487120,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531331353
    },
    {
        "content": "<p>if objects are mentioned but not options again the default values are used</p>",
        "id": 129487139,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531331395
    },
    {
        "content": "<p>but if both are not mentioned then it takes the view information runs the tools on the visible objects</p>",
        "id": 129487202,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531331427
    },
    {
        "content": "<p>so essentially  it has rtcheck's usage</p>",
        "id": 129487244,
        "sender_full_name": "Sean",
        "timestamp": 1531331480
    },
    {
        "content": "<p>yeah basically a replacement for the rtcheck command with the added option of mentioning the objects</p>",
        "id": 129487262,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531331512
    },
    {
        "content": "<p>you can specify objects to rtcheck</p>",
        "id": 129487316,
        "sender_full_name": "Sean",
        "timestamp": 1531331533
    },
    {
        "content": "<p>not in MGED</p>",
        "id": 129487325,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531331547
    },
    {
        "content": "<p>well you have to mention the database too</p>",
        "id": 129487342,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531331574
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/BCF8avF2aDWHz_kotfWlFMf-/Screenshot-from-2018-07-11-23-26-29.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-11-23-26-29.png\">Screenshot-from-2018-07-11-23-26-29.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/BCF8avF2aDWHz_kotfWlFMf-/Screenshot-from-2018-07-11-23-26-29.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-11-23-26-29.png\"><img src=\"/user_uploads/1549/BCF8avF2aDWHz_kotfWlFMf-/Screenshot-from-2018-07-11-23-26-29.png\"></a></div>",
        "id": 129487557,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531331804
    },
    {
        "content": "<p>I have truck.g in the bin folder for quick running and it shows this if run rtcheck with objects mentioned</p>",
        "id": 129487577,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531331834
    },
    {
        "content": "<p>it does find overlaps</p>",
        "id": 129487592,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531331855
    },
    {
        "content": "<p>that's not the right usage for inside mged</p>",
        "id": 129487655,
        "sender_full_name": "Sean",
        "timestamp": 1531331898
    },
    {
        "content": "<p>what is it then? running <em>rtcheck g4</em> also fails</p>",
        "id": 129487674,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531331931
    },
    {
        "content": "<p>there's rtcheck the application, and rtcheck the command -- they're similar obviously as one wraps the other, but different expectations</p>",
        "id": 129487682,
        "sender_full_name": "Sean",
        "timestamp": 1531331936
    },
    {
        "content": "<p>the command does not take a .g file -- it uses whatever is open in mged</p>",
        "id": 129487706,
        "sender_full_name": "Sean",
        "timestamp": 1531331969
    },
    {
        "content": "<p>the app takes a file and list of objects</p>",
        "id": 129487715,
        "sender_full_name": "Sean",
        "timestamp": 1531331977
    },
    {
        "content": "<p>in mged, it defaults to objects displayed, but will also take a list of objects</p>",
        "id": 129487722,
        "sender_full_name": "Sean",
        "timestamp": 1531331993
    },
    {
        "content": "<blockquote>\n<p>the app takes a file and list of objects</p>\n</blockquote>\n<p>yeah. The rtcheck command uses the -M option of the app to feed the parameters and the objects</p>",
        "id": 129487875,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531332109
    },
    {
        "content": "<p>what's probably confusing matters is the rtcheck command in mged does try to detect when it looks like you're trying to override the defaults (like specifying a different .g file) but it probably doesn't do a very great job at it as that's not common usage</p>",
        "id": 129487918,
        "sender_full_name": "Sean",
        "timestamp": 1531332124
    },
    {
        "content": "<p>so here's where it gets interesting.</p>",
        "id": 129487986,
        "sender_full_name": "Sean",
        "timestamp": 1531332208
    },
    {
        "content": "<p>from a design perspective, I've been enjoying listening to you and daniel talk through this new overlaps interface because you have a fresh perspective</p>",
        "id": 129488044,
        "sender_full_name": "Sean",
        "timestamp": 1531332245
    },
    {
        "content": "<p>detecting and resolving overlaps is one of our most central and frequently used features, and one of the few features that I dare say we handle considerably better and faster than the big-name commercial CAD systems</p>",
        "id": 129488079,
        "sender_full_name": "Sean",
        "timestamp": 1531332304
    },
    {
        "content": "<p>anyways, we're at a point now where we need it to be even better because we've had this accumulation of features go in three different directions for years</p>",
        "id": 129488099,
        "sender_full_name": "Sean",
        "timestamp": 1531332356
    },
    {
        "content": "<p>rtcheck, glint, and gqa</p>",
        "id": 129488142,
        "sender_full_name": "Sean",
        "timestamp": 1531332367
    },
    {
        "content": "<p>there was an old overlap resolution GUI that simply ran rtcheck and let you iterate through the pairs, subtract left from right or right from left or raw edit the combs -- it was terrible</p>",
        "id": 129488169,
        "sender_full_name": "Sean",
        "timestamp": 1531332423
    },
    {
        "content": "<p>there's the new one that you've been working with that runs lots of rtchecks and also gqa (which is essentially three more axis-aligned rtchecks), presents them in priority order, and provides a workflow interface for fixing them -- this is not terrible</p>",
        "id": 129488267,
        "sender_full_name": "Sean",
        "timestamp": 1531332523
    },
    {
        "content": "<blockquote>\n<p>there was an old overlap resolution GUI that simply ran rtcheck and let you iterate through the pairs, subtract left from right or right from left or raw edit the combs -- it was terrible</p>\n</blockquote>\n<p>humm it still exists right? under tools-&gt;overlap tool</p>",
        "id": 129488313,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531332579
    },
    {
        "content": "<p>however, we still have rtcheck and gqa as rather different tools, and now a check_overlaps command that is highly related but also dissimilar</p>",
        "id": 129488317,
        "sender_full_name": "Sean",
        "timestamp": 1531332586
    },
    {
        "content": "<p>yes, still exists but entirely unused by anyone</p>",
        "id": 129488325,
        "sender_full_name": "Sean",
        "timestamp": 1531332601
    },
    {
        "content": "<p>it'd be great to <em>get rid of</em> rtcheck and gqa and glint ... replace them with one tool that checks geometry for issues, but that tool definitely does not (or at least should not) have rtcheck's usage as the prima fascia interface to users</p>",
        "id": 129488544,
        "sender_full_name": "Sean",
        "timestamp": 1531332816
    },
    {
        "content": "<p>oh that is where you were going with <em>check</em> as command and <em>overlaps</em> as sub-command. So that we can have other sub-commands like what gqa offers?</p>",
        "id": 129488852,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531333111
    },
    {
        "content": "<p>and how would we have a different interface to the user? If these tools were to be merged we can have like a grid pattern option where single grid would mean it shoots rays like rtcheck and 3 axis aligned grid which would shoot the grids like gqa does.<br>\nBut we still need some of the options of rtcheck like grid spacing, az/el values.<br>\nI am not really sure what glint does because I have not read the code for glint or used it before, from the man page it seems very similar to rtcheck. But it reports other information like vacuums and air region problems.<br>\nSo those other functions/information can be like options or sub-commands.</p>",
        "id": 129489764,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531334081
    },
    {
        "content": "<blockquote>\n<p>oh that is where you were going with <em>check</em> as command and <em>overlaps</em> as sub-command. So that we can have other sub-commands like what gqa offers?</p>\n</blockquote>\n<p>bingo (and even more suboptions like glint offers)</p>",
        "id": 129491241,
        "sender_full_name": "Sean",
        "timestamp": 1531335464
    },
    {
        "content": "<p>hmm then maybe we can have all the algorithms of these three programs in libanalyze. Then have one common driver that calls these libanalyze functions</p>",
        "id": 129491529,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531335801
    },
    {
        "content": "<p>breaking it down, there's two or three fundamental operations going on -- we're 1) figuring out where there is and is not geometry and 2) asking some question(s) about that geometry and 3) presenting answers to those questions in some meaningful way</p>",
        "id": 129491534,
        "sender_full_name": "Sean",
        "timestamp": 1531335811
    },
    {
        "content": "<p>rtcheck for example, 1) shoots a rectangular grid of rays to get partitions, 2) figures out and keeps a list of where there are overlapping partitions, 3)  presents that list as sets of ordered pairs with their quantities of overlap</p>",
        "id": 129491656,
        "sender_full_name": "Sean",
        "timestamp": 1531335958
    },
    {
        "content": "<p>gqa for -Ao (overlaps) is the same for 2 and 3 but for (1) it recursively shoots 3 axis-aligned grids of rays.</p>",
        "id": 129491726,
        "sender_full_name": "Sean",
        "timestamp": 1531336019
    },
    {
        "content": "<p>glint is the same as rtcheck for 1/2/3 but has a lot more options for what it will detect during (2) and has had little attention to the quality of (3)</p>",
        "id": 129491864,
        "sender_full_name": "Sean",
        "timestamp": 1531336152
    },
    {
        "content": "<p>rtcheck is slightly better at (3) than gqa, but then gqa is far better at (1) and has a lot more options for (2)</p>",
        "id": 129491901,
        "sender_full_name": "Sean",
        "timestamp": 1531336198
    },
    {
        "content": "<p>thinking of overlaps in particular, there are two additional methods for (1) that we'd like because they'd likely be quite superior -- spherical sampling and surface intersection testing</p>",
        "id": 129492086,
        "sender_full_name": "Sean",
        "timestamp": 1531336349
    },
    {
        "content": "<p>the first is ray tracing, but the latter (surface intersection testing) isn't even ray tracing, which means (2) would have to be completely different to support it</p>",
        "id": 129492122,
        "sender_full_name": "Sean",
        "timestamp": 1531336401
    },
    {
        "content": "<p>have I lost you yet? :)</p>",
        "id": 129492130,
        "sender_full_name": "Sean",
        "timestamp": 1531336412
    },
    {
        "content": "<p>I understood the analogy of the three fundamental operations. Not so much sure about the two new method you are suggesting :D</p>",
        "id": 129492205,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531336454
    },
    {
        "content": "<p>so the next question is really just how much of 1/2/3 is libanalyze's job and it's probably either just 1 or 1 &amp; 2</p>",
        "id": 129493045,
        "sender_full_name": "Sean",
        "timestamp": 1531337554
    },
    {
        "content": "<p>from a callback perspective, it's possibly even just 2 for libanalyze, with 1 being registered by the caller as a callback</p>",
        "id": 129493124,
        "sender_full_name": "Sean",
        "timestamp": 1531337647
    },
    {
        "content": "<p>so an rtcheck-style application might decide to shoot a grid of rays, handing each one back sequentially for the next ray callback()</p>",
        "id": 129493223,
        "sender_full_name": "Sean",
        "timestamp": 1531337808
    },
    {
        "content": "<p>i really liked the \"next ray\" concept that you and daniel worked out -- that iterator concept is spot on</p>",
        "id": 129493248,
        "sender_full_name": "Sean",
        "timestamp": 1531337872
    },
    {
        "content": "<p>that way there can be some predefined patterns (like rectangular grids) or something far more advanced like an adaptive refinement sampling</p>",
        "id": 129493311,
        "sender_full_name": "Sean",
        "timestamp": 1531337937
    },
    {
        "content": "<p>yep and with something like nextray we can get xray* preped for the patterns</p>",
        "id": 129493393,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531338009
    },
    {
        "content": "<p>we can have different iterators for different patterns which are registered by libged</p>",
        "id": 129493485,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531338123
    },
    {
        "content": "<p>these concepts overlap heavily with rendering too, and there you even want to separate the sample ordering since it can have a great effect on performance</p>",
        "id": 129493551,
        "sender_full_name": "Sean",
        "timestamp": 1531338227
    },
    {
        "content": "<p>for example, I might want to shoot a grid of rays one line at a time from top to bottom or bottom to top, or maybe in little 4x4 postage stamp sets, or maybe randomly one ray at a time, or ...</p>",
        "id": 129493644,
        "sender_full_name": "Sean",
        "timestamp": 1531338308
    },
    {
        "content": "<p>okay now I understand the patterns you were talking about. I remember tweaking these rendering options to get the max performance in Blender.</p>",
        "id": 129493760,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531338426
    },
    {
        "content": "<p>in rendering terms, these are typically handled as \"camera properties\" which doesn't fit well in libanalyze's world but certainly relates since we use render-style analysis methods</p>",
        "id": 129494958,
        "sender_full_name": "Sean",
        "timestamp": 1531339594
    },
    {
        "content": "<p>yeah got it..</p>",
        "id": 129495228,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531339877
    },
    {
        "content": "<p>so all that discussion, what's next?</p>",
        "id": 129495244,
        "sender_full_name": "Sean",
        "timestamp": 1531339905
    },
    {
        "content": "<p>well since I am done with overlaps file tool. I'm ready for the next task. Which would be merging these commands. So to start with I was hoping to move gqa's algorithm to libanalyze?</p>",
        "id": 129495617,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531340236
    },
    {
        "content": "<p>I need to figure out what things must be moved to libanalyze</p>",
        "id": 129495711,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531340308
    },
    {
        "content": "<p>that sounds good to me (and tricky)</p>",
        "id": 129495737,
        "sender_full_name": "Sean",
        "timestamp": 1531340327
    },
    {
        "content": "<p>have you tested how check_overlaps compares with rtcheck in terms of parallel performance?</p>",
        "id": 129495764,
        "sender_full_name": "Sean",
        "timestamp": 1531340360
    },
    {
        "content": "<p>from a commit you made the other day, it looked like you ripped out most of the code related to parallel chunking</p>",
        "id": 129495782,
        "sender_full_name": "Sean",
        "timestamp": 1531340382
    },
    {
        "content": "<p>yeah that is true. It has gotten a bit slow now after introducing the grid generating function for sure. But I didn't test it extensively.</p>",
        "id": 129495902,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531340499
    },
    {
        "content": "<p>it would be good to sort that out before moving on to gqa, just to make sure it's not like 2X-10X slower -- something that might stop people from using it outright</p>",
        "id": 129496009,
        "sender_full_name": "Sean",
        "timestamp": 1531340594
    },
    {
        "content": "<p>should also make sure the GUI is well-behaved for real geometries -- like how it behaves if you run on havoc in havoc.g</p>",
        "id": 129496106,
        "sender_full_name": "Sean",
        "timestamp": 1531340687
    },
    {
        "content": "<blockquote>\n<p>it would be good to sort that out before moving on to gqa, just to make sure it's not like 2X-10X slower -- something that might stop people from using it outright</p>\n</blockquote>\n<p>alright I would think something to introduce the parallel chunking.</p>",
        "id": 129496148,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531340742
    },
    {
        "content": "<p>if something is slow, there needs to be some visual indication while it's working, something to indicate it's not stuck</p>",
        "id": 129496151,
        "sender_full_name": "Sean",
        "timestamp": 1531340749
    },
    {
        "content": "<blockquote>\n<p>alright I would think something to introduce the parallel chunking.</p>\n</blockquote>\n<p>No no, that wasn't the point -- that's a complex topic and could consume the remainder of gsoc.  it just requires checking the performance, doing a quick comparison.</p>",
        "id": 129496221,
        "sender_full_name": "Sean",
        "timestamp": 1531340810
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>alright I would think something to introduce the parallel chunking.</p>\n</blockquote>\n<p>No no, that wasn't the point -- that's a complex topic and could consume the remainder of gsoc.  it just requires checking the performance, doing a quick comparison.</p>\n</blockquote>\n<p>haha sure that I can do :)</p>",
        "id": 129496307,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531340852
    },
    {
        "content": "<p>there's no point doing anything if performance isn't a problem</p>",
        "id": 129496346,
        "sender_full_name": "Sean",
        "timestamp": 1531340862
    },
    {
        "content": "<p>you just may need to comment out the gqa bits or compare it with the shell script if you make it do the same work</p>",
        "id": 129496500,
        "sender_full_name": "Sean",
        "timestamp": 1531340942
    },
    {
        "content": "<blockquote>\n<p>if something is slow, there needs to be some visual indication while it's working, something to indicate it's not stuck</p>\n</blockquote>\n<p>which GUI are you taking about here? the command window when running check_overlaps or the one when creating overlaps with overlaps_tool</p>",
        "id": 129496780,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531341008
    },
    {
        "content": "<blockquote>\n<p>you just may need to comment out the gqa bits or compare it with the shell script if you make it do the same work</p>\n</blockquote>\n<p>hmm got it but I can't really run the commands on havoc due to the tk bug. It would crash if I run it with multithread</p>",
        "id": 129496838,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531341063
    },
    {
        "content": "<p>command window is CLI, not GUI</p>",
        "id": 129496930,
        "sender_full_name": "Sean",
        "timestamp": 1531341140
    },
    {
        "content": "<blockquote>\n<p>hmm got it but I can't really run the commands on havoc due to the tk bug. It would crash if I run it with multithread</p>\n</blockquote>\n<p>I didn't fully get what the problem was when you and daniel were talking about that last... which Tk bug is there that affects your tool, but doesn't affect gqa/rtcheck? :)</p>",
        "id": 129497090,
        "sender_full_name": "Sean",
        "timestamp": 1531341277
    },
    {
        "content": "<p>or why if you know that</p>",
        "id": 129497099,
        "sender_full_name": "Sean",
        "timestamp": 1531341293
    },
    {
        "content": "<p>oh it affects gqa and check_overlaps. So it ultimately affects the tool.</p>",
        "id": 129497207,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531341387
    },
    {
        "content": "<p>it does not affect rtcheck because it runs in a different process</p>",
        "id": 129497232,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531341416
    },
    {
        "content": "<p>on a very loosely related point -- commit 71118.  this looks problematic to me in that you are semaphore locking around every ray.  that's bad.</p>",
        "id": 129497339,
        "sender_full_name": "Sean",
        "timestamp": 1531341512
    },
    {
        "content": "<p>I know the old code locked around every chunk -- that was also bad, slightly less bad, but still not good.  if you can find a way to do it lockless, that would be best.</p>",
        "id": 129497368,
        "sender_full_name": "Sean",
        "timestamp": 1531341552
    },
    {
        "content": "<p>if it doesn't work in parallel, there may be other problems</p>",
        "id": 129497390,
        "sender_full_name": "Sean",
        "timestamp": 1531341584
    },
    {
        "content": "<p>well do you have any suggestions for it :) and yes it does not work in parallel.</p>",
        "id": 129497452,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531341623
    },
    {
        "content": "<p>having multiple threads accessing the function can get unexpected results</p>",
        "id": 129497537,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531341706
    },
    {
        "content": "<p>so what's different?</p>",
        "id": 129497775,
        "sender_full_name": "Sean",
        "timestamp": 1531341956
    },
    {
        "content": "<p>gqa run inside mged doesn't exhibit a problem, or are you saying it does?</p>",
        "id": 129497845,
        "sender_full_name": "Sean",
        "timestamp": 1531342003
    },
    {
        "content": "<p>yes running \"gqa -Ao -g10mm,10mm havoc\" inside MGED gives a crash.</p>",
        "id": 129497937,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531342085
    },
    {
        "content": "<p><span class=\"emoji emoji-1f631\" title=\"scream\">:scream:</span> <br>\nthat would be a release blocker<br>\nchecking...</p>",
        "id": 129497998,
        "sender_full_name": "Sean",
        "timestamp": 1531342161
    },
    {
        "content": "<p>yeah it is critical bug. And running \"gqa -Ao -P1 -g10mm,10mm havoc\" works fine.</p>",
        "id": 129498108,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531342246
    },
    {
        "content": "<p>hm, that seems to be working just fine here</p>",
        "id": 129498109,
        "sender_full_name": "Sean",
        "timestamp": 1531342249
    },
    {
        "content": "<p>7.27.0 recent build, on Mac</p>",
        "id": 129498140,
        "sender_full_name": "Sean",
        "timestamp": 1531342286
    },
    {
        "content": "<p>does it print extra messages?</p>",
        "id": 129498147,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531342303
    },
    {
        "content": "<p>I'm not seeing anything extra -- looks like it should</p>",
        "id": 129498200,
        "sender_full_name": "Sean",
        "timestamp": 1531342331
    },
    {
        "content": "<blockquote>\n<p>I was testing the overlap tool with havoc.g.  It was crashing, to inspect it :<br>\nI ran <code>check_overlaps -s1024 -a45 -e0 havoc</code> it gave a seg fault. <a href=\"https://hastebin.com/ezagerajet.cs\" target=\"_blank\" title=\"https://hastebin.com/ezagerajet.cs\">Backtrace</a><br>\nI also ran <code>gqa -q -Ao -g10mm,10mm havoc</code> that too gave seg fault.  <a href=\"https://hastebin.com/upipimicul.cs\" target=\"_blank\" title=\"https://hastebin.com/upipimicul.cs\">Backtrace</a><br>\nRunning same with rtcheck in terminal is fine : <a href=\"https://hastebin.com/yobawabira.sql\" target=\"_blank\" title=\"https://hastebin.com/yobawabira.sql\">log</a> also for gqa : <a href=\"https://hastebin.com/vebelonovi.swift\" target=\"_blank\" title=\"https://hastebin.com/vebelonovi.swift\">log</a>. Those extra messages being printed by bu_log is causing the issue in MGED I think judging by the backtrace.<br>\nBut there are other messages like <em>Trying initial grid spacing: 10 mm</em> in gqa which are printed using bu_log. in <em>libged/gqa.c</em> . Am I missing something here?</p>\n</blockquote>\n<p>this is what I had</p>",
        "id": 129498243,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531342367
    },
    {
        "content": "<p>what does ldd mged show?</p>",
        "id": 129498391,
        "sender_full_name": "Sean",
        "timestamp": 1531342489
    },
    {
        "content": "<p>at a glance, it looks to me like maybe a library mismatch</p>",
        "id": 129498408,
        "sender_full_name": "Sean",
        "timestamp": 1531342523
    },
    {
        "content": "<p>also be good to see how mged was invoked</p>",
        "id": 129498491,
        "sender_full_name": "Sean",
        "timestamp": 1531342572
    },
    {
        "content": "<p><a href=\"https://hastebin.com/xupewumisu.go\" target=\"_blank\" title=\"https://hastebin.com/xupewumisu.go\">https://hastebin.com/xupewumisu.go</a></p>",
        "id": 129498673,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531342755
    },
    {
        "content": "<blockquote>\n<p>also be good to see how mged was invoked</p>\n</blockquote>\n<p>I don't get it. I just ran <code>./mged</code> from build/bin</p>",
        "id": 129498720,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531342800
    },
    {
        "content": "<p>humm the 7.26.4 release build also crashes for me.</p>",
        "id": 129498971,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531342971
    },
    {
        "content": "<p>what's the backtrace?</p>",
        "id": 129499230,
        "sender_full_name": "Sean",
        "timestamp": 1531343196
    },
    {
        "content": "<p>backtrace of the crash?</p>",
        "id": 129499272,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531343258
    },
    {
        "content": "<p>yes</p>",
        "id": 129499326,
        "sender_full_name": "Sean",
        "timestamp": 1531343284
    },
    {
        "content": "<p>the 7.26.4 crash, that'll be telling depending on the stack</p>",
        "id": 129499359,
        "sender_full_name": "Sean",
        "timestamp": 1531343331
    },
    {
        "content": "<p><a href=\"https://hastebin.com/idaxoxazuf.cs\" target=\"_blank\" title=\"https://hastebin.com/idaxoxazuf.cs\">https://hastebin.com/idaxoxazuf.cs</a></p>",
        "id": 129499527,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531343488
    },
    {
        "content": "<p>now that's surprising</p>",
        "id": 129499659,
        "sender_full_name": "Sean",
        "timestamp": 1531343628
    },
    {
        "content": "<p>now this is making more sense with daniel's mailing list post</p>",
        "id": 129501102,
        "sender_full_name": "Sean",
        "timestamp": 1531345284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> svn up, and see if trunk does better -- or show the next backtrace ;)</p>",
        "id": 129501652,
        "sender_full_name": "Sean",
        "timestamp": 1531345940
    },
    {
        "content": "<p>also, what does 'grep THREAD path/to/build/CMakeCache.txt' have for you?</p>",
        "id": 129502505,
        "sender_full_name": "Sean",
        "timestamp": 1531347062
    },
    {
        "content": "<p>okay, I think I see what's going on here... the Tcl interp is being shared across multiple threads simultaneously and it shouldn't be called at all.  the problem is ged_gqa() is kicking off threads that bu_log(), which calls a hook mged registered to display everything in the command window.  ged_gqa() needs to disable that hook before printing.</p>",
        "id": 129506670,
        "sender_full_name": "Sean",
        "timestamp": 1531353441
    },
    {
        "content": "<p>and I'm betting you have TCL_THREAD=1 ...</p>",
        "id": 129507369,
        "sender_full_name": "Sean",
        "timestamp": 1531354663
    },
    {
        "content": "<p>I bet that explains why it's happened to work thus far</p>",
        "id": 129507412,
        "sender_full_name": "Sean",
        "timestamp": 1531354689
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> svn up, and see if trunk does better -- or show the next backtrace ;)</p>\n</blockquote>\n<p><a href=\"https://hastebin.com/ekobopotih.cs\" target=\"_blank\" title=\"https://hastebin.com/ekobopotih.cs\">https://hastebin.com/ekobopotih.cs</a></p>",
        "id": 129521739,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531380677
    },
    {
        "content": "<blockquote>\n<p>also, what does 'grep THREAD path/to/build/CMakeCache.txt' have for you?</p>\n</blockquote>\n<p><a href=\"https://hastebin.com/raw/akiqawiman\" target=\"_blank\" title=\"https://hastebin.com/raw/akiqawiman\">https://hastebin.com/raw/akiqawiman</a></p>",
        "id": 129521855,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531380810
    },
    {
        "content": "<blockquote>\n<p>and I'm betting you have TCL_THREAD=1 ...</p>\n</blockquote>\n<p>yep it is set to TRUE</p>",
        "id": 129521987,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531381004
    },
    {
        "content": "<blockquote>\n<p>a hook mged registered to display everything in the command window.  ged_gqa() needs to disable that hook before printing.</p>\n</blockquote>\n<p>yeah the hook <code>output_callback</code>. I remember disabling the hook via MGED by running <code>output_hook</code> command (with no arguments it disables the hook ).</p>",
        "id": 129522200,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531381407
    },
    {
        "content": "<p>I compared the performance of check_overlaps vs rtcheck. Both gave me the same timings. Around 38s in overlaps_tool and <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a>.</p>",
        "id": 129534494,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531400638
    },
    {
        "content": "<p>So I was going through gqa.c, if I had to move some parts like plane_worker, hit, and overlap to libanalyze I would need to have a huge parameter list. Some of these are from that state structure inside gqa, I planned to pass the needed variables only from the structure.<br>\nThere are variables like plot_gaps, plot_overlaps... which are file pointers and they also have a list variable and a color variable. I thought of creating functions that deals with gaps, overlaps, air etc and pass a table of function pointers that act as callback functions.</p>",
        "id": 129546693,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531413537
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>and I'm betting you have TCL_THREAD=1 ...</p>\n</blockquote>\n<p>yep it is set to TRUE</p>\n</blockquote>\n<p>So <span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> this is definitely a difference that might cause the crash -- can you post the entire output from a clean cmake as well as your CMakeOutput.log file (in the build dir CMakeFiles dir)</p>",
        "id": 129548044,
        "sender_full_name": "Sean",
        "timestamp": 1531415072
    },
    {
        "content": "<blockquote>\n<p>So <span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> this is definitely a difference that might cause the crash -- can you post the entire output from a clean cmake as well as your CMakeOutput.log file (in the build dir CMakeFiles dir)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> clean cmake : <a href=\"https://hastebin.com/raw/pavofuvafu\" target=\"_blank\" title=\"https://hastebin.com/raw/pavofuvafu\">https://hastebin.com/raw/pavofuvafu</a> and  <a href=\"/user_uploads/1549/Q-Xy5qL-z7M0CHbLvOhPH_a7/CMakeOutput.log\" target=\"_blank\" title=\"CMakeOutput.log\">CMakeOutput.log</a></p>",
        "id": 129548897,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531415998
    },
    {
        "content": "<p>Mis-posted, thank you for the log!</p>",
        "id": 129555234,
        "sender_full_name": "Sean",
        "timestamp": 1531421466
    },
    {
        "content": "<p>When moving gqa to libanalyze, it would be like having different libanalyze functions for each analysis option right? <br>\nlike analyze_~ where it could be analyze_gaps, analyze_volume, etc. This way we could have different check_~ files like check_gaps, check_volume etc that would call these libanalyze functions.<br>\nWas something like in your mind? This would mean some code duplication for each individual sub-commands.</p>\n<p>The other way is to have one common driver - check. Which would call the libanalyze functions as per the choice of the user. This reduces the duplication of code.<br>\nBut both approaches would make these operations exclusive like only one operation can be done at one i.e either check for overlaps or check for gaps..</p>",
        "id": 129585794,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531467252
    },
    {
        "content": "<p>Once I get an opinion about the above doubt, I can start the work. <br>\nWhile I was waiting, I thought I'd try this out: check_overlaps with three grid like gqa. <a href=\"/user_uploads/1549/AfFs_djgzbOuQnr-Z1viBnic/Screenshot-from-2018-07-13-21-45-27.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-13-21-45-27.png\">Screenshot-from-2018-07-13-21-45-27.png</a> <br>\nhere is the diff : <a href=\"https://hastebin.com/lezowobevo\" target=\"_blank\" title=\"https://hastebin.com/lezowobevo\">https://hastebin.com/lezowobevo</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/AfFs_djgzbOuQnr-Z1viBnic/Screenshot-from-2018-07-13-21-45-27.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-13-21-45-27.png\"><img src=\"/user_uploads/1549/AfFs_djgzbOuQnr-Z1viBnic/Screenshot-from-2018-07-13-21-45-27.png\"></a></div>",
        "id": 129610520,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531498752
    },
    {
        "content": "<blockquote>\n<p>When moving gqa to libanalyze, it would be like having different libanalyze functions for each analysis option right? <br>\nlike analyze_~ where it could be analyze_gaps, analyze_volume, etc. This way we could have different check_~ files like check_gaps, check_volume etc that would call these libanalyze functions.</p>\n</blockquote>\n<p>That's certainly one way to handle it, not the only way.</p>\n<blockquote>\n<p>Was something like in your mind? This would mean some code duplication for each individual sub-commands.</p>\n</blockquote>\n<p>Sort of, but not with the code duplication!  And ideally not with execution duplication either, which implies a need for separating what sets up or shoots rays from what analyzes the partitions.</p>\n<blockquote>\n<p>The other way is to have one common driver - check. Which would call the libanalyze functions as per the choice of the user. This reduces the duplication of code.</p>\n</blockquote>\n<p>Not sure if you're referring to command or function -- it is the intention that there will be just one command for users to call (with subcommands or options).</p>",
        "id": 129610721,
        "sender_full_name": "Sean",
        "timestamp": 1531498972
    },
    {
        "content": "<blockquote>\n<p>Once I get an opinion about the above doubt, I can start the work. </p>\n</blockquote>\n<p>FYI, that's an Indian-English colloquialism, \"doubt != questions\" for everyone else. :)</p>",
        "id": 129610893,
        "sender_full_name": "Sean",
        "timestamp": 1531499163
    },
    {
        "content": "<blockquote>\n<p>While I was waiting, I thought I'd try this out: check_overlaps with three grid like gqa. <a href=\"/user_uploads/1549/AfFs_djgzbOuQnr-Z1viBnic/Screenshot-from-2018-07-13-21-45-27.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-13-21-45-27.png\">Screenshot-from-2018-07-13-21-45-27.png</a> <br>\nhere is the diff : <a href=\"https://hastebin.com/lezowobevo\" target=\"_blank\" title=\"https://hastebin.com/lezowobevo\">https://hastebin.com/lezowobevo</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/AfFs_djgzbOuQnr-Z1viBnic/Screenshot-from-2018-07-13-21-45-27.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-13-21-45-27.png\"><img src=\"/user_uploads/1549/AfFs_djgzbOuQnr-Z1viBnic/Screenshot-from-2018-07-13-21-45-27.png\"></a></div></blockquote>\n<p>Output looks great, but too much code change to follow what's going on.  Can you summarize?</p>",
        "id": 129611190,
        "sender_full_name": "Sean",
        "timestamp": 1531499529
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>The other way is to have one common driver - check. Which would call the libanalyze functions as per the choice of the user. This reduces the duplication of code.</p>\n</blockquote>\n<p>Not sure if you're referring to command or function -- it is the intention that there will be just one command for users to call (with subcommands or options).</p>\n</blockquote>\n<p>well I meant like having one file that would handle the options and sub-commands and setup everything for each sub-command and call the libanalyze functions for the respective sub-commands.<br>\nand each sub-command will have a callback function which will analyze the partitions.<br>\nThis way setting up code would remain in one place and would be common. (which is easier said than done :D though )</p>",
        "id": 129611211,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531499559
    },
    {
        "content": "<p>we also need to talk about API design at some point since just adding more and more public functions into analyze.h isn't going to make for a good API ... it needs to be designed, needs to be simple, needs to be consistent, etc</p>",
        "id": 129611223,
        "sender_full_name": "Sean",
        "timestamp": 1531499581
    },
    {
        "content": "<blockquote>\n<p>well I meant like having one file that would handle the options and sub-commands and setup everything for each sub-command and call the libanalyze functions for the respective sub-commands.<br>\nand each sub-command will have a callback function which will analyze the partitions.<br>\nThis way setting up code would remain in one place and would be common. (which is easier said than done :D though )</p>\n</blockquote>\n<p>That sounds about like how I would probably go about implementing it, and even putting each subcommand into separate files (probably all files in a subdirectory since they're 'related').</p>",
        "id": 129611472,
        "sender_full_name": "Sean",
        "timestamp": 1531499803
    },
    {
        "content": "<p>did you come up with i,u,v or was that in the old code?</p>",
        "id": 129611483,
        "sender_full_name": "Sean",
        "timestamp": 1531499818
    },
    {
        "content": "<p>are those principle axes?</p>",
        "id": 129611496,
        "sender_full_name": "Sean",
        "timestamp": 1531499833
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>While I was waiting, I thought I'd try this out: check_overlaps with three grid like gqa. <a href=\"/user_uploads/1549/AfFs_djgzbOuQnr-Z1viBnic/Screenshot-from-2018-07-13-21-45-27.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-13-21-45-27.png\">Screenshot-from-2018-07-13-21-45-27.png</a> <br>\nhere is the diff : <a href=\"https://hastebin.com/lezowobevo\" target=\"_blank\" title=\"https://hastebin.com/lezowobevo\">https://hastebin.com/lezowobevo</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/AfFs_djgzbOuQnr-Z1viBnic/Screenshot-from-2018-07-13-21-45-27.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-13-21-45-27.png\"><img src=\"/user_uploads/1549/AfFs_djgzbOuQnr-Z1viBnic/Screenshot-from-2018-07-13-21-45-27.png\"></a></div></blockquote>\n<p>Output looks great, but too much code change to follow what's going on.  Can you summarize?</p>\n</blockquote>\n<p>to summarize it:</p>\n<ul>\n<li>I added one function to setup the rectangular grid,which would then call the normal rectangular grid function within that function which would setup the ray and return. When the end of one view is reached. The function would set the grid up again and continues.</li>\n<li>I also added one flag for grid-refinement to the grid struct. The rectangular grid would increase the current_point variable twice when the flag is set and y_index is odd. (the row which has previously shot)</li>\n<li>now in check_overlaps when if the three grid is desired then we must use the -t option. It would then follow a different execution path and has its own grid_setup.</li>\n</ul>",
        "id": 129611566,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531499893
    },
    {
        "content": "<blockquote>\n<p>did you come up with i,u,v or was that in the old code?</p>\n</blockquote>\n<p>it was used like that in gqa. I just adapted it the struct.</p>",
        "id": 129611597,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531499941
    },
    {
        "content": "<p>ah, I see .. uv and invariant</p>",
        "id": 129611709,
        "sender_full_name": "Sean",
        "timestamp": 1531500021
    },
    {
        "content": "<p>weird</p>",
        "id": 129611712,
        "sender_full_name": "Sean",
        "timestamp": 1531500026
    },
    {
        "content": "<blockquote>\n<p>That sounds about like how I would probably go about implementing it, and even putting each subcommand into separate files (probably all files in a subdirectory since they're 'related').</p>\n</blockquote>\n<p>okay great. The sub-directory sounds good.</p>",
        "id": 129611741,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531500068
    },
    {
        "content": "<p>just a side note -- there is behavior in gqa that we shouldn't propagate.  currently in gqa, if you specify 50mm,2mm, it will stop at the level where overlaps are found.  it should progress through the range specified imho.</p>",
        "id": 129611768,
        "sender_full_name": "Sean",
        "timestamp": 1531500112
    },
    {
        "content": "<p>alright got it.</p>",
        "id": 129611825,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531500152
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> do you have time to talk about the API design?</p>",
        "id": 129611997,
        "sender_full_name": "Sean",
        "timestamp": 1531500329
    },
    {
        "content": "<p>yep</p>",
        "id": 129612057,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531500366
    },
    {
        "content": "<p>great</p>",
        "id": 129612074,
        "sender_full_name": "Sean",
        "timestamp": 1531500391
    },
    {
        "content": "<p>so you mentioned having libanalyze functions for respective sub-commands and callback functions to analyze partitions</p>",
        "id": 129612131,
        "sender_full_name": "Sean",
        "timestamp": 1531500479
    },
    {
        "content": "<p>what were you thinking there, like analyze_overlaps(), analyze_gaps(), analyze_mass(), analyze_volume(), etc?</p>",
        "id": 129612240,
        "sender_full_name": "Sean",
        "timestamp": 1531500565
    },
    {
        "content": "<p>yeah, having individual analyze_~ functions and the callback functions would be called in hit routine like gqa does with analysis flags.</p>",
        "id": 129612346,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531500624
    },
    {
        "content": "<p>but we don't have to pass analysis flags since each sub-command will have its own hit routine</p>",
        "id": 129612371,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531500657
    },
    {
        "content": "<p>you lost me a bit -- trying to figure out what code bits would be with the command (in libged) and what bits would live with the analysis function (in libanalyze) ...</p>",
        "id": 129612410,
        "sender_full_name": "Sean",
        "timestamp": 1531500721
    },
    {
        "content": "<p>basically what library is doing what -- libged should be handling the user side of things.  parsing the command, subcommand, and options -- the definition of what work there is to be performed, yes?</p>",
        "id": 129612507,
        "sender_full_name": "Sean",
        "timestamp": 1531500777
    },
    {
        "content": "<blockquote>\n<p>basically what library is doing what -- libged should be handling the user side of things.  parsing the command, subcommand, and options -- the definition of what work there is to be performed, yes?</p>\n</blockquote>\n<p>yeah and libged would also do the job of analyzing the partitions and store the results</p>",
        "id": 129612576,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531500840
    },
    {
        "content": "<p>so the only question is whether it (libged) should be where knowledge of the evaluation method lives or whether libanalyze needs that</p>",
        "id": 129612614,
        "sender_full_name": "Sean",
        "timestamp": 1531500844
    },
    {
        "content": "<p>libanalyze would get function pointer and some context to this function that will evaluate</p>",
        "id": 129612707,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531500929
    },
    {
        "content": "<p>in an abstract sense, I could imagine there being a high level API like: int analyze_volume(&amp;volume, geometry, sample_method, evaluation_method);</p>",
        "id": 129612712,
        "sender_full_name": "Sean",
        "timestamp": 1531500933
    },
    {
        "content": "<p>sample_method would be how to test the geometry like 1grid or 3grid or spherical</p>",
        "id": 129612796,
        "sender_full_name": "Sean",
        "timestamp": 1531500992
    },
    {
        "content": "<p>there would be some corresponding evaluation_method() that takes results from that sampling method, maybe even calls the sampling method internally</p>",
        "id": 129612853,
        "sender_full_name": "Sean",
        "timestamp": 1531501052
    },
    {
        "content": "<p>OR ... the concepts could be completely abstracted, in line with the \"next ray\" line of thinking you and daniel had talked about</p>",
        "id": 129612997,
        "sender_full_name": "Sean",
        "timestamp": 1531501173
    },
    {
        "content": "<p>yeah that is somewhat I meant too like : analyze_volume (rtip, npsw, &amp;context, evaluation_function, grid/ray_function)</p>",
        "id": 129613085,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531501216
    },
    {
        "content": "<p>rtip would assume we're doing ray tracing</p>",
        "id": 129613167,
        "sender_full_name": "Sean",
        "timestamp": 1531501305
    },
    {
        "content": "<p>oh yeah but we need some other methods that don't do raytracing right</p>",
        "id": 129613259,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531501358
    },
    {
        "content": "<p>there are non-ray tracing methods we might be using, which is why I generalized to sample+evaluation .. not grid/ray</p>",
        "id": 129613263,
        "sender_full_name": "Sean",
        "timestamp": 1531501364
    },
    {
        "content": "<p>what's context?</p>",
        "id": 129613267,
        "sender_full_name": "Sean",
        "timestamp": 1531501367
    },
    {
        "content": "<p>the data similar to volume.. to pass to the evaluation method</p>",
        "id": 129613308,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531501405
    },
    {
        "content": "<p>don't understand -- you're already passing an evaluation_function</p>",
        "id": 129613335,
        "sender_full_name": "Sean",
        "timestamp": 1531501437
    },
    {
        "content": "<p>where's the actual volume results?</p>",
        "id": 129613384,
        "sender_full_name": "Sean",
        "timestamp": 1531501451
    },
    {
        "content": "<p>stored in context is what that looks like</p>",
        "id": 129613398,
        "sender_full_name": "Sean",
        "timestamp": 1531501466
    },
    {
        "content": "<p>typically if a function is going to have a context parameter, that's your inputs</p>",
        "id": 129613412,
        "sender_full_name": "Sean",
        "timestamp": 1531501484
    },
    {
        "content": "<p>sometimes it's inputs+outputs, but less common</p>",
        "id": 129613430,
        "sender_full_name": "Sean",
        "timestamp": 1531501503
    },
    {
        "content": "<p>int analyze_volume(&amp;volumes, context);</p>",
        "id": 129613476,
        "sender_full_name": "Sean",
        "timestamp": 1531501547
    },
    {
        "content": "<p>then there'd be functions that work on context like analyze_context_npsw(&amp;context, npsw); or analyze context_evaluation(&amp;context, callback);</p>",
        "id": 129613569,
        "sender_full_name": "Sean",
        "timestamp": 1531501612
    },
    {
        "content": "<blockquote>\n<p>don't understand -- you're already passing an evaluation_function</p>\n</blockquote>\n<p>like we have for analyze_overlaps.. we are passing the context for the evalution method ( overlap_handler)  which checks for the overlaps and inserts this to the context which contains the overlap list.</p>",
        "id": 129613691,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531501699
    },
    {
        "content": "<blockquote>\n<p>int analyze_volume(&amp;volumes, context);<br>\nthen there'd be functions that work on context like analyze_context_npsw(&amp;context, npsw); or analyze context_evaluation(&amp;context, callback);</p>\n</blockquote>\n<p>didn't get this</p>",
        "id": 129613727,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531501733
    },
    {
        "content": "<p>what exactly is &amp;volumes in your example?</p>",
        "id": 129613978,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531501943
    },
    {
        "content": "<p>that would be the volume(s) that were calculated for some specified set of geometry (which would be in the context)</p>",
        "id": 129614045,
        "sender_full_name": "Sean",
        "timestamp": 1531502028
    },
    {
        "content": "<p>yeah that is what I meant by context in a general sense a structure(which would defined in libged) because there are cases where we need to pass more than one variables like overlaps_list and the plot file. Having global variables for evaluation method to access them would not be good.</p>",
        "id": 129614180,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531502135
    },
    {
        "content": "<p>if it's being passed to libanalyze, it'd need to be a libanalyze struct</p>",
        "id": 129614238,
        "sender_full_name": "Sean",
        "timestamp": 1531502164
    },
    {
        "content": "<p>oh but we won't be dealing with the struct in libanalyze.. The evaluation method defined in libged would deal with the struct.</p>",
        "id": 129614302,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531502233
    },
    {
        "content": "<p>this is why design discussion is important -- there's where the code is, where it's called from, and what the API looks like</p>",
        "id": 129614412,
        "sender_full_name": "Sean",
        "timestamp": 1531502335
    },
    {
        "content": "<p>I was specifically referring to API, not necessarily where the code is</p>",
        "id": 129614426,
        "sender_full_name": "Sean",
        "timestamp": 1531502353
    },
    {
        "content": "<p>it's useful to think about design in two modes -- one from the perspective of an end-user, another from the perspective of an application developer (API)</p>",
        "id": 129614549,
        "sender_full_name": "Sean",
        "timestamp": 1531502471
    },
    {
        "content": "<p>in this context, both of those are libged issues -- end-user is the ged command, its options</p>",
        "id": 129614578,
        "sender_full_name": "Sean",
        "timestamp": 1531502518
    },
    {
        "content": "<p>the implementation of a ged command here is calling functions, for example the current ged_gqa() calls LIBRT API almost exclusively.</p>",
        "id": 129614769,
        "sender_full_name": "Sean",
        "timestamp": 1531502684
    },
    {
        "content": "<p>we're talking about abstracting the essence, the computation of ged_gqa() into generalized API itself -- into LIBANALYZE API (almost exclusively)</p>",
        "id": 129614803,
        "sender_full_name": "Sean",
        "timestamp": 1531502735
    },
    {
        "content": "<p>so the question becomes ... what's that API?</p>",
        "id": 129614819,
        "sender_full_name": "Sean",
        "timestamp": 1531502749
    },
    {
        "content": "<p>code can/will obviously still live on the ged side of things for some parts and not for others, the question is where to draw the line</p>",
        "id": 129614887,
        "sender_full_name": "Sean",
        "timestamp": 1531502787
    },
    {
        "content": "<p>another way to think about it -- you should be able to write a header without any implementation code in libged or in libanalyze, that clearly shows how it could be used</p>",
        "id": 129615069,
        "sender_full_name": "Sean",
        "timestamp": 1531502992
    },
    {
        "content": "<p>like the analyze_volumes() function we were talking about but with all real types, actual usage</p>",
        "id": 129615125,
        "sender_full_name": "Sean",
        "timestamp": 1531503020
    },
    {
        "content": "<p>just without any implementation</p>",
        "id": 129615134,
        "sender_full_name": "Sean",
        "timestamp": 1531503036
    },
    {
        "content": "<p>you think you could try to do that next?  I think it'll at least give me a better understanding of what you're thinking.  could make one header for what lives in libanalyze and a separate header for what lives in libged if there is \"private API\" like structures or callbacks that it will know about (different from libanalyze structs/functions).</p>",
        "id": 129615223,
        "sender_full_name": "Sean",
        "timestamp": 1531503145
    },
    {
        "content": "<p>alright I can try that..</p>",
        "id": 129615284,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531503233
    },
    {
        "content": "<blockquote>\n<p>there are non-ray tracing methods we might be using, which is why I generalized to sample+evaluation .. not grid/ray</p>\n</blockquote>\n<p>I had one question, what did you meant here with sample+evaluation. How would the sample method look like. And what would it deal with?</p>",
        "id": 129615441,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531503378
    },
    {
        "content": "<p>because right now I can only think raytracing. How can it be generalized so that we can accommodate non-rt methods.</p>",
        "id": 129615558,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531503524
    },
    {
        "content": "<p>that's getting a bit advanced, but consider one of the analysis methods like analyze_mass()</p>",
        "id": 129615571,
        "sender_full_name": "Sean",
        "timestamp": 1531503567
    },
    {
        "content": "<p>I can shoot a bunch of rays, get a volume estimate, multiply times density, and get mass</p>",
        "id": 129615586,
        "sender_full_name": "Sean",
        "timestamp": 1531503600
    },
    {
        "content": "<p>okay</p>",
        "id": 129615635,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531503612
    },
    {
        "content": "<p>or maybe I already know exactly what it is because it's a box</p>",
        "id": 129615647,
        "sender_full_name": "Sean",
        "timestamp": 1531503630
    },
    {
        "content": "<p>so sample method might be null, and evaluation might be Length<em>Width</em>Height*Density</p>",
        "id": 129615669,
        "sender_full_name": "Sean",
        "timestamp": 1531503666
    },
    {
        "content": "<p>alright got it</p>",
        "id": 129615684,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531503713
    },
    {
        "content": "<p>oversimplified, but there are discrete methods for some things like volume -- if out geometry is a polygonal mesh, for example, I don't really need to shoot rays.  you can get an exact volume value by accumulating tetrahedral volumes</p>",
        "id": 129615725,
        "sender_full_name": "Sean",
        "timestamp": 1531503731
    },
    {
        "content": "<p>yeah that is right</p>",
        "id": 129615736,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531503777
    },
    {
        "content": "<p>another example, with overlaps, I could calculate the intersection of all surfaces to get the \"overlapping\" regions as geometry, then any areas with non-zero volume would be my overlaps</p>",
        "id": 129615753,
        "sender_full_name": "Sean",
        "timestamp": 1531503795
    },
    {
        "content": "<p>there, the sample method would be to calculate intersecting surfaces, the evaluation method would probably figure out the resulting volumes</p>",
        "id": 129615813,
        "sender_full_name": "Sean",
        "timestamp": 1531503844
    },
    {
        "content": "<p>not a single ray is needed, the result is more precise</p>",
        "id": 129615828,
        "sender_full_name": "Sean",
        "timestamp": 1531503874
    },
    {
        "content": "<p>that all said..... our current methods DO use ray tracing and that's certainly important to consider</p>",
        "id": 129615859,
        "sender_full_name": "Sean",
        "timestamp": 1531503911
    },
    {
        "content": "<p>we do need to shoot 1-grid and 3-grids</p>",
        "id": 129615868,
        "sender_full_name": "Sean",
        "timestamp": 1531503922
    },
    {
        "content": "<p>so on the surface, just moving everything in ged_gqa from libged to libanalyze would be a step in the right direction</p>",
        "id": 129615876,
        "sender_full_name": "Sean",
        "timestamp": 1531503950
    },
    {
        "content": "<p>aah got it now.</p>",
        "id": 129615935,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531503982
    },
    {
        "content": "<p>the problem is eliminating the duplication with the 1-grid method and not exploding libanalyze API in the process</p>",
        "id": 129615936,
        "sender_full_name": "Sean",
        "timestamp": 1531503984
    },
    {
        "content": "<p>right now (and this is no fault of yours) libanalyze is a complete mess, it's just a dumping ground of structures and functions</p>",
        "id": 129615955,
        "sender_full_name": "Sean",
        "timestamp": 1531504020
    },
    {
        "content": "<p>completely useless as an API</p>",
        "id": 129615962,
        "sender_full_name": "Sean",
        "timestamp": 1531504025
    },
    {
        "content": "<p>at least as a PUBLIC api</p>",
        "id": 129615983,
        "sender_full_name": "Sean",
        "timestamp": 1531504055
    },
    {
        "content": "<p>pretty much everything in there should be private API, private to the implementation</p>",
        "id": 129615988,
        "sender_full_name": "Sean",
        "timestamp": 1531504066
    },
    {
        "content": "<p>okay got it.</p>",
        "id": 129616071,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531504154
    },
    {
        "content": "<p>so forgetting about everything you know about the current check_overlaps, rtcheck, gqa, etc ... if you wanted to have a function that calculated volume, the question I have is what that should look like as <em>public</em> API (public to a library), so that another application or user could call that function and get a volume as easy and simple as possible</p>",
        "id": 129616220,
        "sender_full_name": "Sean",
        "timestamp": 1531504289
    },
    {
        "content": "<p>at heart without knowing anything about sample methods or our existing libraries/types, it might look something like:  int volume(double *volume, const struct geometry *object);</p>",
        "id": 129616382,
        "sender_full_name": "Sean",
        "timestamp": 1531504403
    },
    {
        "content": "<p>unambiguous, simple, right?</p>",
        "id": 129616391,
        "sender_full_name": "Sean",
        "timestamp": 1531504420
    },
    {
        "content": "<p>yeah</p>",
        "id": 129616455,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531504450
    },
    {
        "content": "<p>without knowing anything, that looks like it's probably an error/success return code, volume is returned in 'volume' and I probably pass geometry as the 'object' parameter</p>",
        "id": 129616471,
        "sender_full_name": "Sean",
        "timestamp": 1531504467
    },
    {
        "content": "<p>that's close to ideal</p>",
        "id": 129616502,
        "sender_full_name": "Sean",
        "timestamp": 1531504506
    },
    {
        "content": "<p>so then the reason it can't be that simple ... getting volume can be really hard for some geometry types</p>",
        "id": 129616578,
        "sender_full_name": "Sean",
        "timestamp": 1531504578
    },
    {
        "content": "<p>yeah</p>",
        "id": 129616592,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531504613
    },
    {
        "content": "<p>so at a minimum, we might think to introduce a quality, precision, or accuracy control</p>",
        "id": 129616596,
        "sender_full_name": "Sean",
        "timestamp": 1531504619
    },
    {
        "content": "<p>maybe something like:  int volume(double *volume, const struct geometry *object, int quality) where quality=0 is fast as possible and quality=100 is exact as possible</p>",
        "id": 129616672,
        "sender_full_name": "Sean",
        "timestamp": 1531504688
    },
    {
        "content": "<p>yeah that still is very abstract</p>",
        "id": 129616700,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531504712
    },
    {
        "content": "<p>YES!</p>",
        "id": 129616703,
        "sender_full_name": "Sean",
        "timestamp": 1531504717
    },
    {
        "content": "<p>that quality parameter is also very vague and maybe quality=100 is impossible to be exact</p>",
        "id": 129616729,
        "sender_full_name": "Sean",
        "timestamp": 1531504748
    },
    {
        "content": "<p>having it be arbitrary depending on the geometry wouldn't be good, so maybe we change it to within a specified tolerance</p>",
        "id": 129616743,
        "sender_full_name": "Sean",
        "timestamp": 1531504774
    },
    {
        "content": "<p>int volume(double *v, const struct geometry *g, double tolerance);</p>",
        "id": 129616755,
        "sender_full_name": "Sean",
        "timestamp": 1531504794
    },
    {
        "content": "<p>yep this makes more sense</p>",
        "id": 129616820,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531504829
    },
    {
        "content": "<p>yep, EXCEPT, we still cannot really guarantee a particular tolerance</p>",
        "id": 129616849,
        "sender_full_name": "Sean",
        "timestamp": 1531504863
    },
    {
        "content": "<p>consider what rtcheck does with a grid of rays method</p>",
        "id": 129616874,
        "sender_full_name": "Sean",
        "timestamp": 1531504896
    },
    {
        "content": "<p>exactly..</p>",
        "id": 129616875,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531504896
    },
    {
        "content": "<p>rays are infinitely thin</p>",
        "id": 129616879,
        "sender_full_name": "Sean",
        "timestamp": 1531504904
    },
    {
        "content": "<p>yup</p>",
        "id": 129616885,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531504919
    },
    {
        "content": "<p>so I might shoot a grid of rays at a lattice...</p>",
        "id": 129616937,
        "sender_full_name": "Sean",
        "timestamp": 1531504950
    },
    {
        "content": "<p>every ray might hit</p>",
        "id": 129616941,
        "sender_full_name": "Sean",
        "timestamp": 1531504955
    },
    {
        "content": "<p>shift the grid and every ray might miss</p>",
        "id": 129616949,
        "sender_full_name": "Sean",
        "timestamp": 1531504969
    },
    {
        "content": "<p>double the rays and every ray might hit again, double again and they might all hit again</p>",
        "id": 129616967,
        "sender_full_name": "Sean",
        "timestamp": 1531504992
    },
    {
        "content": "<p>double again and they might all miss</p>",
        "id": 129616971,
        "sender_full_name": "Sean",
        "timestamp": 1531505000
    },
    {
        "content": "<p>I can't say much about tolerance because it's not the spacing between the grid cells</p>",
        "id": 129617036,
        "sender_full_name": "Sean",
        "timestamp": 1531505051
    },
    {
        "content": "<p>so we need to rethink the API .. quality is no good, tolerance is not possible, what else might we do?</p>",
        "id": 129617049,
        "sender_full_name": "Sean",
        "timestamp": 1531505090
    },
    {
        "content": "<p>there is a caveat on tolerance -- it <em>may</em> actually be possible using monte carlo methods, but I'm not sure we could prove it</p>",
        "id": 129617080,
        "sender_full_name": "Sean",
        "timestamp": 1531505143
    },
    {
        "content": "<blockquote>\n<p>so we need to rethink the API .. quality is no good, tolerance is not possible, what else might we do?</p>\n</blockquote>\n<p>alright what can we use then? that is still abstract</p>",
        "id": 129617245,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531505330
    },
    {
        "content": "<p>not just abstract, it's high-level -- trying to be as high level as possible since that will result in the easiest use.  I mean, without knowing anything, it'd be easy to use this function in an int main(int ac, char *av[]) { ... get geometry from file ... ; double v; volume(&amp;v, geometry); printf(\"volume is %lf\\n\", v); return 0; }</p>",
        "id": 129617478,
        "sender_full_name": "Sean",
        "timestamp": 1531505570
    },
    {
        "content": "<p>so that tolerance that couldn't work was a distance tolerance ... a different kind of tolerance might work which would be a calculation tolerance of sorts</p>",
        "id": 129617524,
        "sender_full_name": "Sean",
        "timestamp": 1531505626
    },
    {
        "content": "<p>e.g., int volume(double *v, const struct geometry *g, int significant_digits);</p>",
        "id": 129617586,
        "sender_full_name": "Sean",
        "timestamp": 1531505679
    },
    {
        "content": "<p>how would that work? Calculate volume accurately  until we satisfy the significant digits condition?</p>",
        "id": 129617765,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531505870
    },
    {
        "content": "<p>yep, iterate until the numbers seem stable to that level</p>",
        "id": 129617865,
        "sender_full_name": "Sean",
        "timestamp": 1531505954
    },
    {
        "content": "<p>could also be \"significant digits after the decimal point\" if you wanted to make it size-agnostic</p>",
        "id": 129617930,
        "sender_full_name": "Sean",
        "timestamp": 1531506012
    },
    {
        "content": "<p>so in case of rtcheck what could be the iteration condition? making the grid finer?</p>",
        "id": 129617946,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531506046
    },
    {
        "content": "<p>yep</p>",
        "id": 129617963,
        "sender_full_name": "Sean",
        "timestamp": 1531506069
    },
    {
        "content": "<p>lots of possible strategies, but they're all variations on shooting finer grids until the numbers seem to agree</p>",
        "id": 129617977,
        "sender_full_name": "Sean",
        "timestamp": 1531506099
    },
    {
        "content": "<p>hmm all of these are like examples of API in general. Would MGED require such high-levelness ? The end-user won't be writing any code, they would only launch commands like <em>check volume</em>.</p>",
        "id": 129618143,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531506248
    },
    {
        "content": "<p>end user of library is a developer</p>",
        "id": 129618207,
        "sender_full_name": "Sean",
        "timestamp": 1531506323
    },
    {
        "content": "<p>yeah that is right</p>",
        "id": 129618239,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531506356
    },
    {
        "content": "<p>so does a dev require it -- of course not, but that's like saying a user doesn't need \"check volume\" to be simple and easy to use ... of course it can be more complicated, but it <em>shouldn't</em> if it's done right ;)</p>",
        "id": 129618308,
        "sender_full_name": "Sean",
        "timestamp": 1531506400
    },
    {
        "content": "<p>it also doesn't mean there's not a lot of nasty details underneath in private API</p>",
        "id": 129618337,
        "sender_full_name": "Sean",
        "timestamp": 1531506428
    },
    {
        "content": "<p>that said, we're still not done... we just found what might be reasonable termination criteria with significant digits, but now there's a practical problem</p>",
        "id": 129618462,
        "sender_full_name": "Sean",
        "timestamp": 1531506511
    },
    {
        "content": "<p>we know the methods we know we'll have to use to get significant_digits=10 to complete ... is going to be expensive</p>",
        "id": 129618532,
        "sender_full_name": "Sean",
        "timestamp": 1531506566
    },
    {
        "content": "<p>time consuming</p>",
        "id": 129618537,
        "sender_full_name": "Sean",
        "timestamp": 1531506569
    },
    {
        "content": "<p>yeah indeed</p>",
        "id": 129618620,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531506619
    },
    {
        "content": "<p>a call to volume(&amp;v, &amp;g, 10) might take 10 minutes or 10 days</p>",
        "id": 129618630,
        "sender_full_name": "Sean",
        "timestamp": 1531506632
    },
    {
        "content": "<p>haha true</p>",
        "id": 129618639,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531506644
    },
    {
        "content": "<p>or might take 0.003 seconds</p>",
        "id": 129618640,
        "sender_full_name": "Sean",
        "timestamp": 1531506645
    },
    {
        "content": "<p>it depends on &amp;g</p>",
        "id": 129618649,
        "sender_full_name": "Sean",
        "timestamp": 1531506654
    },
    {
        "content": "<p>so what do we do?</p>",
        "id": 129618667,
        "sender_full_name": "Sean",
        "timestamp": 1531506668
    },
    {
        "content": "<p>decide the methods that are less expensive as per the object</p>",
        "id": 129618707,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531506713
    },
    {
        "content": "<p>say the method is fixed, like rtcheck</p>",
        "id": 129618751,
        "sender_full_name": "Sean",
        "timestamp": 1531506734
    },
    {
        "content": "<p>we don't have a method parameter -- so that could be a solution -- let the caller specify a method, but it still could take seconds or days so we need something more</p>",
        "id": 129618809,
        "sender_full_name": "Sean",
        "timestamp": 1531506792
    },
    {
        "content": "<p>humm what could that be</p>",
        "id": 129618929,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531506898
    },
    {
        "content": "<p>not necessarily the best idea, but can always ask the caller</p>",
        "id": 129619111,
        "sender_full_name": "Sean",
        "timestamp": 1531507072
    },
    {
        "content": "<p>if time is a problem, could have a time limit parameter</p>",
        "id": 129619160,
        "sender_full_name": "Sean",
        "timestamp": 1531507087
    },
    {
        "content": "<p>anything else?  are there maybe ways time could be reduced?</p>",
        "id": 129619182,
        "sender_full_name": "Sean",
        "timestamp": 1531507111
    },
    {
        "content": "<p>sampling methods?</p>",
        "id": 129619196,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531507139
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 129619863,
        "sender_full_name": "Sean",
        "timestamp": 1531507631
    },
    {
        "content": "<p>say the method is fixed -- it's rtcheck</p>",
        "id": 129619881,
        "sender_full_name": "Sean",
        "timestamp": 1531507659
    },
    {
        "content": "<p>rtcheck-style rather -- it's a grid</p>",
        "id": 129619895,
        "sender_full_name": "Sean",
        "timestamp": 1531507681
    },
    {
        "content": "<p>well the way rtcheck shoots the grids.. in chunks , up down etc</p>",
        "id": 129619953,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531507700
    },
    {
        "content": "<p>that is a bit complicated for the end-user to specify tho</p>",
        "id": 129619979,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531507731
    },
    {
        "content": "<p>not necessarily, an \"enum type\" integer could do it</p>",
        "id": 129620007,
        "sender_full_name": "Sean",
        "timestamp": 1531507757
    },
    {
        "content": "<p>good thinking, but that's still not going to really change the time</p>",
        "id": 129620025,
        "sender_full_name": "Sean",
        "timestamp": 1531507776
    },
    {
        "content": "<p>going multithreaded could definitely change the time</p>",
        "id": 129620097,
        "sender_full_name": "Sean",
        "timestamp": 1531507819
    },
    {
        "content": "<p>but how many CPUs the user wants us to utilize then becomes an issue since they may not want us using all of them (or it may even cause their machine to crash)</p>",
        "id": 129620135,
        "sender_full_name": "Sean",
        "timestamp": 1531507858
    },
    {
        "content": "<p>hence parameter like ...</p>",
        "id": 129620148,
        "sender_full_name": "Sean",
        "timestamp": 1531507869
    },
    {
        "content": "<p>number of processors to use</p>",
        "id": 129620157,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531507879
    },
    {
        "content": "<p>bingo</p>",
        "id": 129620163,
        "sender_full_name": "Sean",
        "timestamp": 1531507884
    },
    {
        "content": "<p>but now it just got a little weird: int volume(double *v, const geometry *g, int sig_dig, int npsw)</p>",
        "id": 129620208,
        "sender_full_name": "Sean",
        "timestamp": 1531507922
    },
    {
        "content": "<p>npsw has nothing to do with 'volume' and entirely to do with the implementation</p>",
        "id": 129620272,
        "sender_full_name": "Sean",
        "timestamp": 1531507959
    },
    {
        "content": "<p>that's where most APIs introduce the concept of a context or attributes or parameters or ... lots of different names for ways to handle all the inputs together so you don't end up adding additional parameters to your function</p>",
        "id": 129620419,
        "sender_full_name": "Sean",
        "timestamp": 1531508050
    },
    {
        "content": "<p>because npsw might just be #4, then someone else figures out they need one more and then another and before too long you have 20 arguments and an unusable API with too many knobs</p>",
        "id": 129620468,
        "sender_full_name": "Sean",
        "timestamp": 1531508094
    },
    {
        "content": "<p>so we can group those into something a little more general and optionally manageable</p>",
        "id": 129620492,
        "sender_full_name": "Sean",
        "timestamp": 1531508117
    },
    {
        "content": "<p>aah like additional parameters</p>",
        "id": 129620515,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531508139
    },
    {
        "content": "<p>maybe: int volume(double *v, const struct context *c);</p>",
        "id": 129620586,
        "sender_full_name": "Sean",
        "timestamp": 1531508168
    },
    {
        "content": "<p>humm and these additional variables would need meaningful defaults too</p>",
        "id": 129620620,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531508198
    },
    {
        "content": "<p>but then we need functions to set that context up like add_geometry(struct context *c); set_significant_digits(struct context *c); set_npsw(struct context *c);</p>",
        "id": 129620645,
        "sender_full_name": "Sean",
        "timestamp": 1531508218
    },
    {
        "content": "<p>ohh right now I am understanding what you meant</p>",
        "id": 129620691,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531508255
    },
    {
        "content": "<p>and could -- if they had meaningful defaults like npsw=ncpu then maybe we wouldn't even call set_npsw unless the user wanted it lower</p>",
        "id": 129620699,
        "sender_full_name": "Sean",
        "timestamp": 1531508263
    },
    {
        "content": "<p>yeah</p>",
        "id": 129620779,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531508304
    },
    {
        "content": "<p>so we still have a problem though</p>",
        "id": 129620820,
        "sender_full_name": "Sean",
        "timestamp": 1531508345
    },
    {
        "content": "<p>even multithreaded, it could take seconds or days .. so that didn't really solve the original problem</p>",
        "id": 129620853,
        "sender_full_name": "Sean",
        "timestamp": 1531508368
    },
    {
        "content": "<p>yeah..</p>",
        "id": 129620933,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531508412
    },
    {
        "content": "<p>it just greatly decreased the chance performance will be a problem</p>",
        "id": 129620935,
        "sender_full_name": "Sean",
        "timestamp": 1531508413
    },
    {
        "content": "<p>and gave the caller a necessary control</p>",
        "id": 129620959,
        "sender_full_name": "Sean",
        "timestamp": 1531508429
    },
    {
        "content": "<p>so what's left? what are our options?</p>",
        "id": 129621019,
        "sender_full_name": "Sean",
        "timestamp": 1531508479
    },
    {
        "content": "<p>to give control over methods ? <span class=\"emoji emoji-1f62c\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 129621058,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531508522
    },
    {
        "content": "<p>that's definitely an option</p>",
        "id": 129621142,
        "sender_full_name": "Sean",
        "timestamp": 1531508564
    },
    {
        "content": "<p>make the interface less simple by exposing more control over the implementation</p>",
        "id": 129621161,
        "sender_full_name": "Sean",
        "timestamp": 1531508591
    },
    {
        "content": "<p>oh like the options ? grid spacing etc?</p>",
        "id": 129621235,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531508646
    },
    {
        "content": "<p>that's kind of where we started this conversation, what was it .. something like volume(struct volumes*v, func_t sample_method, func_t evaluation_method)</p>",
        "id": 129621256,
        "sender_full_name": "Sean",
        "timestamp": 1531508670
    },
    {
        "content": "<p>which implied a couple more function arguments to specify their inputs</p>",
        "id": 129621281,
        "sender_full_name": "Sean",
        "timestamp": 1531508700
    },
    {
        "content": "<p>or grouping them like our context concept, where you'd set the function pointers on the context</p>",
        "id": 129621319,
        "sender_full_name": "Sean",
        "timestamp": 1531508739
    },
    {
        "content": "<p>volume(struct volumes *v, struct sample_context *c, struct eval_context *e);</p>",
        "id": 129621377,
        "sender_full_name": "Sean",
        "timestamp": 1531508774
    },
    {
        "content": "<p>does that make more sense now?</p>",
        "id": 129621425,
        "sender_full_name": "Sean",
        "timestamp": 1531508836
    },
    {
        "content": "<p>oh okay.. yeah now I understand the concept of context..</p>",
        "id": 129621461,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531508871
    },
    {
        "content": "<p>but I have this question.. different sampling methods/ evaluation methods would have different signatures</p>",
        "id": 129621535,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531508914
    },
    {
        "content": "<p>so that would imply things like set_geometry(struct sample_context *c, struct geometry *g); and set_significant_digits(struct eval_context *e, int digits);</p>",
        "id": 129621569,
        "sender_full_name": "Sean",
        "timestamp": 1531508952
    },
    {
        "content": "<p>yes they probably would .. maybe .. maybe not :)</p>",
        "id": 129621591,
        "sender_full_name": "Sean",
        "timestamp": 1531508975
    },
    {
        "content": "<p>yeah.. having same signatures would be good.. but challenging..</p>",
        "id": 129621659,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531509025
    },
    {
        "content": "<blockquote>\n<p>so that would imply things like set_geometry(struct sample_context *c, struct geometry *g); and set_significant_digits(struct eval_context *e, int digits);</p>\n</blockquote>\n<p>right got it</p>",
        "id": 129621676,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531509059
    },
    {
        "content": "<p>so these structs of context would be defined in libanalyze as you had mentioned before.. now its coming together</p>",
        "id": 129621839,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531509242
    },
    {
        "content": "<p>yay</p>",
        "id": 129621900,
        "sender_full_name": "Sean",
        "timestamp": 1531509269
    },
    {
        "content": "<p>but we are not exposing it to the user.. but abstracting it with some functions to set it up</p>",
        "id": 129621918,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531509296
    },
    {
        "content": "<p>you don't have to call them that if you know of a better word, but that's a common term for grouping inputs together</p>",
        "id": 129621939,
        "sender_full_name": "Sean",
        "timestamp": 1531509315
    },
    {
        "content": "<p>technically, there's no reason for having two, and less is more</p>",
        "id": 129621976,
        "sender_full_name": "Sean",
        "timestamp": 1531509352
    },
    {
        "content": "<p>yeah that is right.. we can totally do it with just one context</p>",
        "id": 129622055,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531509416
    },
    {
        "content": "<p>but more is easier to do :D</p>",
        "id": 129622076,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531509454
    },
    {
        "content": "<p>volume(struct volumes *v, struct context *c); ... set_sample_method(struct context <em>c, int (</em>sample_method)(...), struct inputs *data); set_evaluation_method(struct context <em>c, int (</em>eval_method)(), struct inputs *data); .. etc</p>",
        "id": 129622092,
        "sender_full_name": "Sean",
        "timestamp": 1531509479
    },
    {
        "content": "<p>not sure it's actually easier -- the reason for doing two would be if there's some strong compelling reason to keep them separated, like if there was an incompatibility with other related functions</p>",
        "id": 129622196,
        "sender_full_name": "Sean",
        "timestamp": 1531509567
    },
    {
        "content": "<p>in this instance, I think it actually strongly warrants having just one context because the sample method and eval method are highly related to each other (their implementation will almost certainly be in pairs)</p>",
        "id": 129622263,
        "sender_full_name": "Sean",
        "timestamp": 1531509611
    },
    {
        "content": "<p>yeah that is true</p>",
        "id": 129622279,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531509636
    },
    {
        "content": "<p>so you think this is a header you could try writing, something that just covers the scope of rtcheck and gqa?</p>",
        "id": 129622303,
        "sender_full_name": "Sean",
        "timestamp": 1531509675
    },
    {
        "content": "<p>there's a lot of detail that wasn't written down, probably some mistakes in assumptions</p>",
        "id": 129622314,
        "sender_full_name": "Sean",
        "timestamp": 1531509693
    },
    {
        "content": "<p>spending just a couple hours thinking on this would be beneficial even if you don't end up using it when you get back to the immediate issue at hand, which is moving gqa code to libanalyze</p>",
        "id": 129622380,
        "sender_full_name": "Sean",
        "timestamp": 1531509735
    },
    {
        "content": "<p>yeah I will think about it..</p>",
        "id": 129622396,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531509775
    },
    {
        "content": "<p>about gqa,  there is one challenge I faced with check_overlaps today. I was hoping to have a common grid_setup for single and 3 -grid but gqa doesn't support az/el so I had to make it separate..<br>\nAnd I thought about what would az/el support look like in gqa.. Could not think of anything</p>",
        "id": 129622478,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531509852
    },
    {
        "content": "<p>detail I didn't mention is how you specify all the options for a given sample method like rtcheck's parameters -- that's what something like that \"input\" structure could hold -- a simple dictionary of key=values that the sample/evaluation method could pull from if they're set</p>",
        "id": 129622499,
        "sender_full_name": "Sean",
        "timestamp": 1531509885
    },
    {
        "content": "<p>gqa supporting az el has been a request for years :)</p>",
        "id": 129622522,
        "sender_full_name": "Sean",
        "timestamp": 1531509908
    },
    {
        "content": "<p>if you can do grid setup for 1-grid, then you should be able to do 3-grid...</p>",
        "id": 129622563,
        "sender_full_name": "Sean",
        "timestamp": 1531509959
    },
    {
        "content": "<p>gqa's 3-grid is just az/el 0,0, and 0,90 and 90,0</p>",
        "id": 129622636,
        "sender_full_name": "Sean",
        "timestamp": 1531510008
    },
    {
        "content": "<p>or something close to that, maybe -90</p>",
        "id": 129622654,
        "sender_full_name": "Sean",
        "timestamp": 1531510025
    },
    {
        "content": "<p>but both are different.. one forms grid around the bound_box while, rtcheck forms a gird around the eye</p>",
        "id": 129622671,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510045
    },
    {
        "content": "<p>yes, but the grid around the bound_box is the same as a grid around three different eye positions...</p>",
        "id": 129622757,
        "sender_full_name": "Sean",
        "timestamp": 1531510092
    },
    {
        "content": "<p>what's different is gqa's clever incremental stepping so it doesn't reshoot the same rays</p>",
        "id": 129622781,
        "sender_full_name": "Sean",
        "timestamp": 1531510119
    },
    {
        "content": "<blockquote>\n<p>yes, but the grid around the bound_box is the same as a grid around three different eye positions...</p>\n</blockquote>\n<p>hmm if that is the case then it shouldn't be difficult. I just could not visualize it :D</p>",
        "id": 129622832,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510167
    },
    {
        "content": "<p>well I wouldn't sweat it -- if it's not easy, then keep them separate .. I'll just be sad about it ;(</p>",
        "id": 129622902,
        "sender_full_name": "Sean",
        "timestamp": 1531510222
    },
    {
        "content": "<blockquote>\n<p>what's different is gqa's clever incremental stepping so it doesn't reshoot the same rays</p>\n</blockquote>\n<p>yeah, I did with skipping one ray for every even row</p>",
        "id": 129622903,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510223
    },
    {
        "content": "<p>at some point in the next week or so, you need to prove that it's right, that it shoots the same grid incrementally as gqa</p>",
        "id": 129622951,
        "sender_full_name": "Sean",
        "timestamp": 1531510273
    },
    {
        "content": "<p>not just check the overlap list, but show the rays like 10x10x10, then 20x20x20</p>",
        "id": 129622962,
        "sender_full_name": "Sean",
        "timestamp": 1531510295
    },
    {
        "content": "<p>yeah got it ;)</p>",
        "id": 129623019,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510327
    },
    {
        "content": "<p>and oh one more thing.. rtcheck supports uneven grid shape.. like in rectangles but gqa shoots in square girds..</p>",
        "id": 129623068,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510392
    },
    {
        "content": "<p>like with -g10 -G20 I am shooting 10mm by 20mm grids</p>",
        "id": 129623099,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510436
    },
    {
        "content": "<p>rectangular grids is not important</p>",
        "id": 129623166,
        "sender_full_name": "Sean",
        "timestamp": 1531510475
    },
    {
        "content": "<p>that's an artifact of it being an rt* application</p>",
        "id": 129623170,
        "sender_full_name": "Sean",
        "timestamp": 1531510483
    },
    {
        "content": "<p>humm understood.. it has to do with the image width and height right</p>",
        "id": 129623184,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510506
    },
    {
        "content": "<p>related</p>",
        "id": 129623196,
        "sender_full_name": "Sean",
        "timestamp": 1531510525
    },
    {
        "content": "<p>it has to do with the size and shape of a \"pixel\" possibly being not square, depending on an output device</p>",
        "id": 129623212,
        "sender_full_name": "Sean",
        "timestamp": 1531510555
    },
    {
        "content": "<p>yeah that makes sense!</p>",
        "id": 129623269,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510599
    },
    {
        "content": "<p>if you're displaying on a TV, for example at 4:3 aspect ratio, you might want non-square pixels to get the best image</p>",
        "id": 129623275,
        "sender_full_name": "Sean",
        "timestamp": 1531510603
    },
    {
        "content": "<p>aah right</p>",
        "id": 129623296,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510628
    },
    {
        "content": "<p>that is entirely counterproductive for a sampling algorithm that is just trying to find overlaps</p>",
        "id": 129623298,
        "sender_full_name": "Sean",
        "timestamp": 1531510629
    },
    {
        "content": "<p>ohk so square grids it is then :)</p>",
        "id": 129623316,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510657
    },
    {
        "content": "<p>alright then gonna grab some sleep now.. Thank you for spending the time explaining the API in such detail :)</p>",
        "id": 129623376,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510692
    },
    {
        "content": "<p>ah right, what time is it there?</p>",
        "id": 129623389,
        "sender_full_name": "Sean",
        "timestamp": 1531510707
    },
    {
        "content": "<p>its around 1 AM :D</p>",
        "id": 129623394,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510723
    },
    {
        "content": "<p>you can check local time by clicking on the user ;)</p>",
        "id": 129623403,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531510738
    },
    {
        "content": "<p>ah, cool.  well thanks for staying up late to talk through this -- it helps me sort thoughts to talk through things too :)</p>",
        "id": 129623412,
        "sender_full_name": "Sean",
        "timestamp": 1531510750
    },
    {
        "content": "<p>ah, so I can, neat</p>",
        "id": 129623418,
        "sender_full_name": "Sean",
        "timestamp": 1531510762
    },
    {
        "content": "<p>/me still prefers /ctcp</p>",
        "id": 129623426,
        "sender_full_name": "Sean",
        "timestamp": 1531510775
    },
    {
        "content": "<p>cool, they added /me support</p>",
        "id": 129623434,
        "sender_full_name": "Sean",
        "timestamp": 1531510791
    },
    {
        "content": "<p>/ctcp ping Sean</p>",
        "id": 129623454,
        "sender_full_name": "Sean",
        "timestamp": 1531510802
    },
    {
        "content": "<p>but not that :)</p>",
        "id": 129623483,
        "sender_full_name": "Sean",
        "timestamp": 1531510805
    },
    {
        "content": "<blockquote>\n<p>so you think this is a header you could try writing, something that just covers the scope of rtcheck and gqa?</p>\n</blockquote>\n<p>My attempt at it.. <a href=\"https://hastebin.com/topudekoza.cs\" target=\"_blank\" title=\"https://hastebin.com/topudekoza.cs\">https://hastebin.com/topudekoza.cs</a><br>\nI couldn't think up any evaluation methods. When the user issues any command like analyze_overlaps then default evaluation method would be used</p>",
        "id": 129667690,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531586361
    },
    {
        "content": "<p>hmm  the analyze_volume and analyze_weights need some sort of list for different objects mentioned by the user only double won't work</p>",
        "id": 129667848,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531586628
    },
    {
        "content": "<p>BTW <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> What does the src/libanalyze/api.c do? it looks very similar to gqa</p>",
        "id": 129668657,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531587983
    },
    {
        "content": "<p>This is what had planned and have been working on the last few days. <br>\nin libged/check dir:  </p>\n<ul>\n<li><a href=\"/user_uploads/1549/_Wve3QE0BVMtHZ6x87_TQl9V/check.c\" target=\"_blank\" title=\"check.c\">check.c</a> </li>\n<li><a href=\"/user_uploads/1549/qFZTt1GzgA2uIhAWpeKsCPfd/check_private.h\" target=\"_blank\" title=\"check_private.h\">check_private.h</a> </li>\n<li><a href=\"/user_uploads/1549/I4hMwVZ4KMkzAkg6fMuhGtdU/check_overlaps.c\" target=\"_blank\" title=\"check_overlaps.c\">check_overlaps.c</a></li>\n</ul>\n<p>in libanalyze : <a href=\"/user_uploads/1549/XqTpDquW3CORorh0bQ9t3GeH/check_analyze_geometry.c\" target=\"_blank\" title=\"check_analyze_geometry.c\">check_analyze_geometry.c</a> </p>\n<p>To summarize,<br>\nIn <em>libged/check/check.c</em> -</p>\n<ul>\n<li>the options and sub-commands are parsed.</li>\n<li>the objects are recognized from cmd_line or view.</li>\n<li>if num of views is 1 then it means its single grid mode, they have separate functions for grid_setup.</li>\n<li>if num of views is 3 then a triple grid is setup.</li>\n<li>according to sub-commands the flow goes to respective check_~ files. In case of overlaps it goes to <em>check/check_overlaps.c</em>.</li>\n</ul>\n<p>In <em>check/check_overlaps.c</em> -</p>\n<ul>\n<li>all overlaps related data is put into a callbackdata structure for overlaps. Like the overlaps list, tolerance, color of overlay and plot_file pointer.</li>\n<li>There is also a overlap function.</li>\n<li>in do while loop grid is refined and flow goes to libanalyze, with the callback data and a function pointer to overlap function.</li>\n</ul>\n<p>In <em>libanalyze/check_geometry.c</em></p>\n<ul>\n<li>the function analyze_geometry takes two pointers to a_hit, a_overlap function and callback data.</li>\n<li>In case of check_overlaps the call gives a_hit as NULL, so <em>analyze_geometry</em> initializes a_hit to a analyze_geom_hit ( which is defined inside <em>check_geometry.c</em> ) that does nothing.</li>\n<li>The a_uptr is set to callback data.</li>\n<li>Now when there is overlap in raytracing flow goes back to libged. Where the operation for overlaps is done like adding unique overlaps to the overlaps list in the context. </li>\n</ul>\n<p>Similarly for other functions, like check_volume, there would be a hit function, so a function pointer to the <em>volume specific hit function</em> is passed to libanalyze.  Also a volume specific callback data would also be passed to libanalyze. The flow would go to libged when there is a hit.</p>\n<p>I have only done the check_overlaps. The others are left. Before proceeding I needed an opinion on this idea..</p>",
        "id": 129821116,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531844342
    },
    {
        "content": "<p>PS: the files may not be proper right now,  would review it before committing of course. I would commit only if this idea is fine :)</p>",
        "id": 129821289,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531844634
    },
    {
        "content": "<p>How does it work, how is your experience with it? Does 'check overlaps ...' work? Does it simplify the things? <em>check_overlaps.c</em> is much smaller than before (which is good), do you expect it to be similar for the other commands?</p>",
        "id": 129886087,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1531936088
    },
    {
        "content": "<p>yep the command check overlaps is working fine.<br>\nIs it simpler? Well it is the same as check_overlaps other than you have to use -N 1 for single grid. Be default it behaves as gqa. I liked the option to refine the grid. Something that was missing in check_overlaps/rtcheck. Plus there is now option to output plot file and also display them.<br>\nAbout the other commands, it may be a bit complicated, like the code is right now ready to work with 3 grids, would need to adapt it for single grid too.</p>",
        "id": 129886447,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531936493
    },
    {
        "content": "<p>What concerns me is that it does not actually behave as the API design me and sean discussed. The whole code for gqa does not live in libanalyze. So something like analyze_volume(&amp;volumes, context) is not gonna work</p>",
        "id": 129886532,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531936586
    },
    {
        "content": "<p>oh one thing different from check_overlaps is that when refining the grid, the overlaps are not counted twice. I think it is because we are passing an a_overlap function which disregards the partition once its seen by returning a 1. a_logoverlap would duplicate record the overlaps on refining.</p>",
        "id": 129886827,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531936906
    },
    {
        "content": "<blockquote>\n<p>What concerns me is that it does not actually behave as the API design me and sean discussed. The whole code for gqa does not live in libanalyze. So something like analyze_volume(&amp;volumes, context) is not gonna work</p>\n</blockquote>\n<p>this is done with <em>libanalyze/api.c</em>, I saw the commit history and patch on sourceforge it was originally done to work with ged_analyze. Maybe I can fix it up, remove the globals and add analyze_~ functions for what is missing?</p>",
        "id": 129887173,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1531937207
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>What concerns me is that it does not actually behave as the API design me and sean discussed. The whole code for gqa does not live in libanalyze. So something like analyze_volume(&amp;volumes, context) is not gonna work</p>\n</blockquote>\n<p>this is done with <em>libanalyze/api.c</em>, I saw the commit history and patch on sourceforge it was originally done to work with ged_analyze. Maybe I can fix it up, remove the globals and add analyze_~ functions for what is missing?</p>\n</blockquote>\n<p>Maybe ;)</p>",
        "id": 129892801,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1531944005
    },
    {
        "content": "<blockquote>\n<p>About the other commands, it may be a bit complicated, like the code is right now ready to work with 3 grids, would need to adapt it for single grid too.</p>\n</blockquote>\n<p>What#s wrong with computing the volume with three grids? It could give better results, or? Like: <code>(grid(x) + grid(y) + grid(z)) / 3</code>?</p>",
        "id": 129892922,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1531944148
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>About the other commands, it may be a bit complicated, like the code is right now ready to work with 3 grids, would need to adapt it for single grid too.</p>\n</blockquote>\n<p>What#s wrong with computing the volume with three grids? It could give better results, or? Like: <code>(grid(x) + grid(y) + grid(z)) / 3</code>?</p>\n</blockquote>\n<p>I meant like if I make gqa behave like rtcheck with single grid some calculations need changing and some might not even work.</p>",
        "id": 129932418,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532007366
    },
    {
        "content": "<p>hmm there is one disadvantage of moving from gqa to check. Because check works as subcommands. I lose the feature of doing many analysis like -Avo for getting volume as well as overlaps in gqa.</p>",
        "id": 129940640,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532016757
    },
    {
        "content": "<blockquote>\n<p>I meant like if I make gqa behave like rtcheck with single grid some calculations need changing and some might not even work.</p>\n</blockquote>\n<p>Please correct me if I'm wrong but, I thought that <em>gqa</em> works with 3 grids and <em>rtcheck</em> with one, and you are trying to do <em>rtcheck</em> with 3 grids?</p>",
        "id": 129943309,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532019880
    },
    {
        "content": "<p>Or, 'check overlaps' with 3 grids?</p>",
        "id": 129943340,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532019911
    },
    {
        "content": "<p>hmm the plan was to merge these commands(gqa, rtcheck and glint)  into one command <em>check</em></p>",
        "id": 129943362,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532019960
    },
    {
        "content": "<blockquote>\n<p>hmm there is one disadvantage of moving from gqa to check. Because check works as subcommands. I lose the feature of doing many analysis like -Avo for getting volume as well as overlaps in gqa.</p>\n</blockquote>\n<p>This was my consideration too.</p>",
        "id": 129943416,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532019980
    },
    {
        "content": "<p>so something like <em>check overlaps -g50,10 -a35 -e25 -N1 g4</em> would behave as rtcheck/check_overlaps and something like <em>check overlaps -g50,10 g4</em> would behave as gqa</p>",
        "id": 129943452,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532020045
    },
    {
        "content": "<blockquote>\n<p>hmm the plan was to merge these commands(gqa, rtcheck and glint)  into one command <em>check</em></p>\n</blockquote>\n<p>Yes, something like taking the best of all worlds ;)</p>",
        "id": 129943669,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532020272
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 129943746,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532020370
    },
    {
        "content": "<p>so somethings like volume or weight is best done with triple grid</p>",
        "id": 129943767,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532020400
    },
    {
        "content": "<blockquote>\n<p>so something like <em>check overlaps -g50,10 -a35 -e25 -N1 g4</em> would behave as rtcheck/check_overlaps and something like <em>check overlaps -g50,10 g4</em> would behave as gqa</p>\n</blockquote>\n<p>Maybe, if somebody wants to know only the overlaps the 3 grids are taken, but if the grid is explicitly declared on the command line with azimuth, elevation, etc., then only this single grid will be used.</p>",
        "id": 129943776,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532020421
    },
    {
        "content": "<p>yeah that would be better! right now I made it like if the user mentions az/el and does not pass -N1 then a message appears that az/el not implemented for triple grids.</p>",
        "id": 129943846,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532020498
    },
    {
        "content": "<p>ohh this is how I added triple grids: <a href=\"https://hastebin.com/ruxejuxoco\" target=\"_blank\" title=\"https://hastebin.com/ruxejuxoco\">https://hastebin.com/ruxejuxoco</a></p>",
        "id": 129943968,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532020646
    },
    {
        "content": "<p>not sure if you'd approve of those extra vars.</p>",
        "id": 129944022,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532020687
    },
    {
        "content": "<p>if I were to move gqa completely to libanalyze, then this is my plan.<br>\nfor check command. On libged side:</p>\n<ul>\n<li>create an instance of the raytracing context.</li>\n<li>check if the mentioned objects are in the database. But don't use rt_gettrees them yet.</li>\n<li>read sub-command.</li>\n<li>read all the options user mentions.</li>\n<li>choose the grid desired by passing the parameters with functions like <em>set_grid_ae(&amp;context, double az, double el)</em>, <em>set_gridspacing</em>, <em>set_gridspacing_limit</em>. </li>\n<li>flow goes according to the subcommands in check.c, where sub-commands specific options are set with separate functions like example: <em>set_overlap_tolerance( &amp;context, double value)</em></li>\n<li>the flags variable is set according to the sub-commands.</li>\n<li><em>analyze_raytracing_context_init (...)</em> is called which performs the raytracing.</li>\n<li>in case of volume, then all I have to do is call <em>analyze_volume</em> and get the result.  I would add more functions for other sub-commmands.</li>\n<li>then libged would print the result.</li>\n</ul>\n<p>The advantage of having something like this would be like if in future there is a need of volume in any other command then the programmer can simply prepare the ray-tracing context and call analyze_volume to get the result easily.<br>\nOne can also do multi-analysis just have to pass the flags to <em>analyze_raytracing_context_init (...)</em> and call the respective analyze_~ commands.</p>",
        "id": 129946057,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532022893
    },
    {
        "content": "<blockquote>\n<p>not sure if you'd approve of those extra vars.</p>\n</blockquote>\n<p>Well, if there are necessary to control the 3 grids. BTW, the initialization of max_views is in another file?</p>",
        "id": 129946147,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532022973
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>not sure if you'd approve of those extra vars.</p>\n</blockquote>\n<p>Well, if there are necessary to control the 3 grids. BTW, the initialization of max_views is in another file?</p>\n</blockquote>\n<p>yeah, done in libged for now. But was thinking to move it to libanalyze according to the above message.</p>",
        "id": 129946182,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532023042
    },
    {
        "content": "<p>one thing that would be different would be those commands that deal with lists like overlaps, gaps, adj_air, exp_air...<br>\nBecause these lists are not produced when the user requests like <em>analyze_overlaps(&amp;context,..)</em> instead they are created when ray-tracing.<br>\nOne could pass a pointer to a local list pointer but then these structure should declared in analyze.h so that it can be accessible by both libged and libanalyze.</p>",
        "id": 129946687,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532023570
    },
    {
        "content": "<p>What do you say about the plan? or should I just stick with current plan?</p>",
        "id": 129946747,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532023628
    },
    {
        "content": "<p>The new plan would need lots of public functions defined in <em>include/analyze.h</em></p>",
        "id": 129947056,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532023966
    },
    {
        "content": "<p>I thought there was the wish to move the functionality to general purpose functions in libanalyse, as you described it here. The user visible interfaces and programs (gqa, rtcheck, ...) should stay the same, at least for the moment, but their backend can be moved to libanalyze. This way they can be used in other places too. And to get the full advantage of the new functions there are the new libged <code>check</code> commands.</p>\n<p>To do this you had to implement the new libanalyze functions first and the libged check commands next.</p>\n<p>Sounds like a plan.</p>\n<p>(?)</p>",
        "id": 129949585,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532026732
    },
    {
        "content": "<p>Regarding the lists: Aren't all lists generated on the user's side when it provides the call-back?</p>",
        "id": 129949723,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532026909
    },
    {
        "content": "<blockquote>\n<p>I thought there was the wish to move the functionality to general purpose functions in libanalyse, as you described it here. The user visible interfaces and programs (gqa, rtcheck, ...) should stay the same, at least for the moment, but their backend can be moved to libanalyze.</p>\n</blockquote>\n<p>hmm so you are suggesting that the commands still remain the same but their back-end changes. Like we would be using the new API in the exisiting functions like ged_gqa and ged_rtcheck etc..</p>",
        "id": 129949784,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532026964
    },
    {
        "content": "<blockquote>\n<p>Regarding the lists: Aren't all lists generated on the user's side when it provides the call-back?</p>\n</blockquote>\n<p>yeah that could work also.. but commands like adj_air, gaps, .. are identified in the hit function so I got confused.</p>",
        "id": 129949830,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532027033
    },
    {
        "content": "<p>but just calling the callback function with callback data is good</p>",
        "id": 129950087,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532027325
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I thought there was the wish to move the functionality to general purpose functions in libanalyse, as you described it here. The user visible interfaces and programs (gqa, rtcheck, ...) should stay the same, at least for the moment, but their backend can be moved to libanalyze.</p>\n</blockquote>\n<p>hmm so you are suggesting that the commands still remain the same but their back-end changes. Like we would be using the new API in the exisiting functions like ged_gqa and ged_rtcheck etc..</p>\n</blockquote>\n<p>oh wait. Did I get this wrong? Did you mean keeping the gqa, rtcheck, etc as it is for now and just <em>make a copy</em> of the backend in libanalyze. I thought when u said <em>move</em>, you meant literally how move works, like cut paste xD <br>\nAnd use this backend in the new check commands.</p>",
        "id": 129950699,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532028022
    },
    {
        "content": "<p>As Sean mentioned some time ago: User visible changes in the sense of a command not be working any more as expected need to be announced. See the CHANGES file for our policy. This is for users which have scripts using rtcheck or gqa for example. These shall not break without warning.</p>",
        "id": 129952160,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532029560
    },
    {
        "content": "<blockquote>\n<p>oh wait. Did I get this wrong? Did you mean keeping the gqa, rtcheck, etc as it is for now and just <em>make a copy</em> of the backend in libanalyze. I thought when u said <em>move</em>, you meant literally how move works, like cut paste xD <br>\nAnd use this backend in the new check commands.</p>\n</blockquote>\n<p>Yes, the first step is the copy. Then the implementation of <code>check ...</code>. The last step would be the rewrite of rtcheck (alredy done?), gqa, etc. with the new backend.</p>",
        "id": 129952335,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532029693
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>oh wait. Did I get this wrong? Did you mean keeping the gqa, rtcheck, etc as it is for now and just <em>make a copy</em> of the backend in libanalyze. I thought when u said <em>move</em>, you meant literally how move works, like cut paste xD <br>\nAnd use this backend in the new check commands.</p>\n</blockquote>\n<p>Yes, the first step is the copy. Then the implementation of <code>check ...</code>. The last step would be the rewrite of rtcheck (alredy done?), gqa, etc. with the new backend.</p>\n</blockquote>\n<p>okay got it. and well rtcheck would have to be re-written because this would be different. Since the one I had done uses analyze_overlaps. Which is totally different than the general API</p>",
        "id": 129952476,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532029849
    },
    {
        "content": "<p>or should I keep analyze_overlaps as it is.. because I can just pass a triple_grid_generator and have a gqa equivalent functionality from it</p>",
        "id": 129952655,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532029980
    },
    {
        "content": "<blockquote>\n<p>check_overlaps with three grid like gqa. <a href=\"/user_uploads/1549/AfFs_djgzbOuQnr-Z1viBnic/Screenshot-from-2018-07-13-21-45-27.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-13-21-45-27.png\">Screenshot-from-2018-07-13-21-45-27.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/AfFs_djgzbOuQnr-Z1viBnic/Screenshot-from-2018-07-13-21-45-27.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-13-21-45-27.png\"><img src=\"/user_uploads/1549/AfFs_djgzbOuQnr-Z1viBnic/Screenshot-from-2018-07-13-21-45-27.png\"></a></div></blockquote>\n<p>I tried it here</p>",
        "id": 129952744,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532030048
    },
    {
        "content": "<blockquote>\n<p>or should I keep analyze_overlaps as it is.. because I can just pass a triple_grid_generator and have a gqa equivalent functionality from it</p>\n</blockquote>\n<p>Well, it would provide a redundant functionality, wouldn't it? This isn't optimal.</p>",
        "id": 129952760,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532030075
    },
    {
        "content": "<p>However, going this way you would make sure that you don't break anything. The plan is very ambitious, therefore it is good to have an exit strategy.</p>",
        "id": 129952867,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532030175
    },
    {
        "content": "<blockquote>\n<p>However, going this way you would make sure that you don't break anything. The plan is very ambitious, therefore it is good to have an exit strategy.</p>\n</blockquote>\n<p>yeah. That sounds good.</p>",
        "id": 129952931,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532030267
    },
    {
        "content": "<p>Another idea: Having this new check-API in libanalyse, could you think of having convenience functions in libanalyse on top of them which ease the use of them for simple tasks as retrieving the volume?</p>",
        "id": 129953114,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532030431
    },
    {
        "content": "<p>oh like a function that calls these check-API functions privately and provide an easy public API?</p>",
        "id": 129953220,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532030578
    },
    {
        "content": "<p>I have check overlaps and check volume working now.</p>",
        "id": 130061111,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532190430
    },
    {
        "content": "<p>I followed sean's suggestion and used key=value pair for passing options from libged to libanalyze using bu_hash_tbl.<br>\n<a href=\"/user_uploads/1549/TiMv3gvkyGJ9AC0Sr_Ea1guf/check_options.c\" target=\"_blank\" title=\"check_options.c\">check_options.c</a></p>",
        "id": 130061154,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532190519
    },
    {
        "content": "<p>This I can have meaningful defaults on libanalyze and just set those values which are passed from libged</p>",
        "id": 130061162,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532190555
    },
    {
        "content": "<p>Here are my <em>libged/check/</em> files<br>\n<a href=\"/user_uploads/1549/61-AE_UgM8TjyvNixDOF3imr/check.c\" target=\"_blank\" title=\"check.c\">check.c</a> - main driver<br>\n<a href=\"/user_uploads/1549/2eF9GYYJXq_Y_xbtRUMDt6FU/check_private.h\" target=\"_blank\" title=\"check_private.h\">check_private.h</a> </p>\n<p><a href=\"/user_uploads/1549/w6gDlyMXxXolaFrzTpr4i6ud/check_volume.c\" target=\"_blank\" title=\"check_volume.c\">check_volume.c</a> - check_volume() lives here<br>\n<a href=\"/user_uploads/1549/x1zV0fBPYg7JXYBfa2e5dSeo/check_overlaps.c\" target=\"_blank\" title=\"check_overlaps.c\">check_overlaps.c</a>- check_overlaps() lives here</p>",
        "id": 130061287,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532190761
    },
    {
        "content": "<blockquote>\n<p>This I can have meaningful defaults on libanalyze and just set those values which are passed from libged</p>\n</blockquote>\n<p>This is how I am parsing the options in libanalyze/api.c : <a href=\"https://hastebin.com/rowerukure.cpp\" target=\"_blank\" title=\"https://hastebin.com/rowerukure.cpp\">https://hastebin.com/rowerukure.cpp</a></p>",
        "id": 130061344,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532190870
    },
    {
        "content": "<p>I plan to pass the callback function and callback data combo for the analysis options that deals with lists. So I would have callback function for gaps, adj_air and exposed_air</p>",
        "id": 130061511,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532191268
    },
    {
        "content": "<p>I was also wondering about the options that deal with debug flag, verbose flag, quiet_missed_report_flag and print_per_region_stats flags. <br>\nPass a bu_vls struct for printing purposes so libged would print everything at the end? Because bu_log would mean crashes in multi-threaded places of code.</p>",
        "id": 130061686,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532191592
    },
    {
        "content": "<blockquote>\n<p>I have check overlaps and check volume working now.</p>\n</blockquote>\n<p><a href=\"/user_uploads/1549/Rr60Ki2pKyZlTxWpbFBifgi-/Screenshot-from-2018-07-21-22-20-01.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-21-22-20-01.png\">Screenshot-from-2018-07-21-22-20-01.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/Rr60Ki2pKyZlTxWpbFBifgi-/Screenshot-from-2018-07-21-22-20-01.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-21-22-20-01.png\"><img src=\"/user_uploads/1549/Rr60Ki2pKyZlTxWpbFBifgi-/Screenshot-from-2018-07-21-22-20-01.png\"></a></div>",
        "id": 130061887,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532191913
    },
    {
        "content": "<p>You solution with separate context-table and current_state structures is unusual, but probably reasonable. Another possible solution would have been to use state setting functions as e.g. <code>set_state_azimuth(struct current_state *state, fastf_t azimuth)</code> in libged.</p>",
        "id": 130062552,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532193035
    },
    {
        "content": "<blockquote>\n<p>I was also wondering about the options that deal with debug flag, verbose flag, quiet_missed_report_flag and print_per_region_stats flags. <br>\nPass a bu_vls struct for printing purposes so libged would print everything at the end? Because bu_log would mean crashes in multi-threaded places of code.</p>\n</blockquote>\n<p>Doing the printing at the end in the main thread should surely solve the multi-threaded Tk issue.</p>",
        "id": 130062643,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532193239
    },
    {
        "content": "<blockquote>\n<p>You solution with separate context-table and current_state structures is unusual, but probably reasonable. Another possible solution would have been to use state setting functions as e.g. <code>set_state_azimuth(struct current_state *state, fastf_t azimuth)</code> in libged.</p>\n</blockquote>\n<p>hmm but having the current state struct in analyze.h seemed not so good. Like it contains the internal matters.<br>\nBut storing the parameters or options in ray _tracing_context is feasible.<br>\nThat would require a init function that would set the defaults.</p>",
        "id": 130062694,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532193357
    },
    {
        "content": "<p>I did separately in the sense if we add non-raytracing functions in the future there would be one common options struct to get options from libged to libanalyze.</p>",
        "id": 130062761,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532193461
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I was also wondering about the options that deal with debug flag, verbose flag, quiet_missed_report_flag and print_per_region_stats flags. <br>\nPass a bu_vls struct for printing purposes so libged would print everything at the end? Because bu_log would mean crashes in multi-threaded places of code.</p>\n</blockquote>\n<p>Doing the printing at the end in the main thread should surely solve the multi-threaded Tk issue.</p>\n</blockquote>\n<p>Not sure if I follow. Are you suggesting to stick to bu_log in <em>libanalyze</em> but print these information in main thread?</p>",
        "id": 130062823,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532193587
    },
    {
        "content": "<blockquote>\n<p>hmm but having the current state struct in analyze.h seemed not so good. Like it contains the internal matters.</p>\n</blockquote>\n<p>You don't need to publish the content of current_state. A simple forward declaration (<code>struct current_state;</code>) in the public header is sufficient.</p>\n<blockquote>\n<p>But storing the parameters or options in ray _tracing_context is feasible.<br>\nThat would require a init function that would set the defaults.</p>\n</blockquote>\n<p>That's true, but you need this for the table as well.</p>\n<p>However, don't misinterpret my comments here. Your solution isn't wrong or bad. I want you to learn about alternatives. We learn for live ;)</p>",
        "id": 130063104,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532194033
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p>I was also wondering about the options that deal with debug flag, verbose flag, quiet_missed_report_flag and print_per_region_stats flags. <br>\nPass a bu_vls struct for printing purposes so libged would print everything at the end? Because bu_log would mean crashes in multi-threaded places of code.</p>\n</blockquote>\n<p>Doing the printing at the end in the main thread should surely solve the multi-threaded Tk issue.</p>\n</blockquote>\n<p>Not sure if I follow. Are you suggesting to stick to bu_log in <em>libanalyze</em> but print these information in main thread?</p>\n</blockquote>\n<p>Not sure if <strong>I</strong> follow ;)<br>\nI was simply following your argumentation to \"print\" the log messages to a bu_vls structure and doing the output when the processing is back in the main thread  in libged(?)</p>",
        "id": 130063227,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532194239
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>hmm but having the current state struct in analyze.h seemed not so good. Like it contains the internal matters.</p>\n</blockquote>\n<p>You don't need to publish the content of current_state. A simple forward declaration (<code>struct current_state;</code>) in the public header is sufficient.</p>\n<blockquote>\n<p>But storing the parameters or options in ray _tracing_context is feasible.<br>\nThat would require a init function that would set the defaults.</p>\n</blockquote>\n<p>That's true, but you need this for the table as well.</p>\n</blockquote>\n<p>Alright that sounds good then. Will give it a try!<br>\nThis way seems better and would be less complex IMO ;)</p>\n<blockquote>\n<p>However, don't misinterpret my comments here. Your solution isn't wrong or bad. I want you to learn about alternatives. We learn for live ;)</p>\n</blockquote>\n<p>Definitely. I like exploring the alternatives.</p>",
        "id": 130063229,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532194244
    },
    {
        "content": "<p>okay that is done :)</p>",
        "id": 130067197,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532202029
    },
    {
        "content": "<p>Will review the code and push it by tomo</p>",
        "id": 130067205,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532202069
    },
    {
        "content": "<p>I added check gap and check exp_air today. Everything done so far is committed to the repo.</p>",
        "id": 130108713,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532283534
    },
    {
        "content": "<p>Added adj_air now</p>",
        "id": 130138034,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532337332
    },
    {
        "content": "<p>Added check weight</p>",
        "id": 130148103,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532352172
    },
    {
        "content": "<p>and analyze_weight function</p>",
        "id": 130148113,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532352185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> there is this default density flag in libanalyze/api.c. Which treats all materials as Aluminum, 7079-T6 with density as 2.74. <br>\nIs this a desired feature?</p>",
        "id": 130149356,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532353776
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> there is this default density flag in libanalyze/api.c. Which treats all materials as Aluminum, 7079-T6 with density as 2.74. <br>\nIs this a desired feature?</p>\n</blockquote>\n<p>If you request a weight, you need to provide a density. In this sense any positive value could be used as default. The 7079-T6 aluminium is however already known in BRL-CAD (grep for 7079-T6).</p>",
        "id": 130162584,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532367735
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> there is this default density flag in libanalyze/api.c. Which treats all materials as Aluminum, 7079-T6 with density as 2.74. <br>\nIs this a desired feature?</p>\n</blockquote>\n<p>If you request a weight, you need to provide a density. In this sense any positive value could be used as default. The 7079-T6 aluminium is however already known in BRL-CAD (grep for 7079-T6).</p>\n</blockquote>\n<p>okay, but gqa doesn't set any default densities. If the density for the material ID is not found it aborts the ray-tracing. However api.c runs it. Shows some BAD LOS erro messages and calculates a weight. I am not sure if the weight is right as I can't compare with gqa</p>",
        "id": 130162960,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532368112
    },
    {
        "content": "<p>I did confirm it working by making a region with one cube and assigning it a material ID of 2 (copper tool steel) and compared the results of gqa and <em>check weight</em></p>",
        "id": 130163124,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532368281
    },
    {
        "content": "<p>I passed the density file as the one found in man page of gqa</p>",
        "id": 130163138,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532368310
    },
    {
        "content": "<p>That's a hack (imho) because of rtcheck/gqa usability failings.</p>",
        "id": 130163489,
        "sender_full_name": "Sean",
        "timestamp": 1532368526
    },
    {
        "content": "<p>Someone was trying to make it is to just a tool work without specifying a density table and almost certainly thought that it's more likely density-wise that the object is made of aluminum (as opposed to picking some other value like water==1.0).  The real issue is that it's clunky to specify densities for geometry.  Rtcheck demands a text file with a specific syntax.  GQA demands this as well, and then demands that you suck it into your .g file where it is no longer as easily edited and must be re-imported repeatedly if it changes.</p>",
        "id": 130163589,
        "sender_full_name": "Sean",
        "timestamp": 1532368614
    },
    {
        "content": "<p>There is otherwise no special purpose for 7079-T6 that I'm aware of.  It's just assuming the object is most-likely a vehicle and most vehicles are mostly aluminum.  I don't know of anyone that uses that default for anything, don't believe it's documented which means it can change at will.</p>",
        "id": 130163737,
        "sender_full_name": "Sean",
        "timestamp": 1532368776
    },
    {
        "content": "<blockquote>\n<p>Someone was trying to make it is to just a tool work without specifying a density table and almost certainly thought that it's more likely density-wise that the object is made of aluminum (as opposed to picking some other value like water==1.0).  The real issue is that it's clunky to specify densities for geometry.  Rtcheck demands a text file with a specific syntax.  GQA demands this as well, and then demands that you suck it into your .g file where it is no longer as easily edited and must be re-imported repeatedly if it changes.</p>\n</blockquote>\n<p>yeah that is right. BTW Is there like a common database for these densities for the materials used in BRL-CAD? or something that matches the material ID to materials?</p>",
        "id": 130163856,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532368887
    },
    {
        "content": "<p>misc/GQA_SAMPLE_DENSITIES</p>",
        "id": 130164145,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532369185
    },
    {
        "content": "<p>hmm well that is the same as the one found in man page of gqa :D</p>",
        "id": 130164174,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532369250
    },
    {
        "content": "<p>I was asking because gqa was complaining about material IDs not found. So I was wondering like if users can put any random values in  material ID ?</p>",
        "id": 130164279,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532369372
    },
    {
        "content": "<p>If a material ID is valid or not depends on the material database provided. If the ID can be found there it should be OK.</p>",
        "id": 130164643,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532369752
    },
    {
        "content": "<p>I added the verbose and debug printing option just now</p>",
        "id": 130165054,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532370172
    },
    {
        "content": "<p>so was thinking if we were to replace gqa's back-end</p>",
        "id": 130165081,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532370200
    },
    {
        "content": "<p>the order of the printing of this information would be different</p>",
        "id": 130165095,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532370214
    },
    {
        "content": "<p>the real tables used in practice are considerably longer and more vetted than the sample densities</p>",
        "id": 130165107,
        "sender_full_name": "Sean",
        "timestamp": 1532370232
    },
    {
        "content": "<p>that's something I'd love to get released, but then we'd really want a better way to manage it than a density text file -- proper material objects or a material database that it can pull properties from</p>",
        "id": 130165179,
        "sender_full_name": "Sean",
        "timestamp": 1532370298
    },
    {
        "content": "<blockquote>\n<p>the order of the printing of this information would be different</p>\n</blockquote>\n<p>I had several conversations with modelers when the tcl <a href=\"http://checker.sh\" target=\"_blank\" title=\"http://checker.sh\">checker.sh</a> was written and the default encounter-ordering wasn't important -- they typically want to review and address issues in priority order, which is typically largest to smallest</p>",
        "id": 130165318,
        "sender_full_name": "Sean",
        "timestamp": 1532370438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> one request for the new check command ... s/weight/mass/g !   it's a bit annoying that has remained for so long.</p>",
        "id": 130165475,
        "sender_full_name": "Sean",
        "timestamp": 1532370600
    },
    {
        "content": "<blockquote>\n<p>that's something I'd love to get released, but then we'd really want a better way to manage it than a density text file -- proper material objects or a material database that it can pull properties from</p>\n</blockquote>\n<p>maybe like have a database of well-know materials and their densities from which a user can choose from when creating regions.<br>\nAnd if the user wants to add any new material then they must also provide the density which gets copied to that .g file.<br>\nSo when analysis tools run, they would know where to pull this information from.</p>",
        "id": 130165547,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532370632
    },
    {
        "content": "<p>exactly</p>",
        "id": 130165578,
        "sender_full_name": "Sean",
        "timestamp": 1532370680
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> one request for the new check command ... s/weight/mass/g !   it's a bit annoying that has remained for so long.</p>\n</blockquote>\n<p>sorry I didn't get you. I am not familiar with s/word/word/g format</p>",
        "id": 130165719,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532370838
    },
    {
        "content": "<p>substitute weight for mass everywhere ... we don't actually calculate weight</p>",
        "id": 130165770,
        "sender_full_name": "Sean",
        "timestamp": 1532370860
    },
    {
        "content": "<p>okay :)</p>",
        "id": 130165803,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532370899
    },
    {
        "content": "<p>So I was talking about the debug information. There is also one thing other than ordering</p>",
        "id": 130166048,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532371125
    },
    {
        "content": "<p>the debug flag also prints the ray_dir and ray_pt</p>",
        "id": 130166065,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532371148
    },
    {
        "content": "<p>but I am using the rectangular_grid function.</p>",
        "id": 130166085,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532371189
    },
    {
        "content": "<p>oh wait never mind :D I can print that just before shooting</p>",
        "id": 130166144,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532371230
    },
    {
        "content": "<p>debug is for devs, can be whatever we need it to be</p>",
        "id": 130166145,
        "sender_full_name": "Sean",
        "timestamp": 1532371236
    },
    {
        "content": "<p>okay got it</p>",
        "id": 130166180,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532371280
    },
    {
        "content": "<p>frankly, debugging could disappear so long as we have a way to know with certainty that there's no bugs (which is unlikely)</p>",
        "id": 130166192,
        "sender_full_name": "Sean",
        "timestamp": 1532371298
    },
    {
        "content": "<p>more important is that it works in parallel, that it shoots the same rays, that -- barring bugs in the original -- it gives the same result set (regardless of ordering)</p>",
        "id": 130166265,
        "sender_full_name": "Sean",
        "timestamp": 1532371353
    },
    {
        "content": "<p>hmm okay</p>",
        "id": 130166431,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532371510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> on that note -- I think your build logs indicated the TCL_THREADS was on for you, yes?  Would you do a build test where you force it off -- see if gqa still has a problem?</p>",
        "id": 130166496,
        "sender_full_name": "Sean",
        "timestamp": 1532371582
    },
    {
        "content": "<p>was talking about this with <span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> and he was a bit surprised that it was on -- that may be why we don't see issues elsewhere if something is awry in the build logic.</p>",
        "id": 130166540,
        "sender_full_name": "Sean",
        "timestamp": 1532371639
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> on that note -- I think your build logs indicated the TCL_THREADS was on for you, yes?  Would you do a build test where you force it off -- see if gqa still has a problem?</p>\n</blockquote>\n<p>yup can do.</p>",
        "id": 130166700,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532371799
    },
    {
        "content": "<p>that worked. now it does not crash.</p>",
        "id": 130168833,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532374102
    },
    {
        "content": "<p>anyway I noticed this strange behaviour: <br>\nedit: gif removed<br>\npart of the messages are printed later sometimes</p>",
        "id": 130169227,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532374545
    },
    {
        "content": "<p>meh that gif is not clear</p>",
        "id": 130169330,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532374639
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/VgipYmFFCNKDfubc0xvChkfN/Screenshot-from-2018-07-24-01-07-09.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-24-01-07-09.png\">Screenshot-from-2018-07-24-01-07-09.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/VgipYmFFCNKDfubc0xvChkfN/Screenshot-from-2018-07-24-01-07-09.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-24-01-07-09.png\"><img src=\"/user_uploads/1549/VgipYmFFCNKDfubc0xvChkfN/Screenshot-from-2018-07-24-01-07-09.png\"></a></div>",
        "id": 130169334,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532374649
    },
    {
        "content": "<p>those are diagnostic messages from librt -- it's saying a cylinder was hit 3 times</p>",
        "id": 130169665,
        "sender_full_name": "Sean",
        "timestamp": 1532375002
    },
    {
        "content": "<p>would be interesting to see those specific rays visualized</p>",
        "id": 130169726,
        "sender_full_name": "Sean",
        "timestamp": 1532375053
    },
    {
        "content": "<p>yeah but since these messages are printed using bu_log, they should appear as red and above the bu_vls_printf(gedp-&gt;result_str) messages</p>",
        "id": 130169746,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532375080
    },
    {
        "content": "<blockquote>\n<p>would be interesting to see those specific rays visualized</p>\n</blockquote>\n<p>well the struct hit contains a pointer to struct xray * so we can get information about ray from it</p>",
        "id": 130169962,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532375379
    },
    {
        "content": "<blockquote>\n<p>yeah but since these messages are printed using bu_log, they should appear as red and above the bu_vls_printf(gedp-&gt;result_str) messages</p>\n</blockquote>\n<p>ideally, but it depends on what the state of the channels and hooks are at the time it logs</p>",
        "id": 130170053,
        "sender_full_name": "Sean",
        "timestamp": 1532375491
    },
    {
        "content": "<p>it \"should\" be distinguished separately ...</p>",
        "id": 130170066,
        "sender_full_name": "Sean",
        "timestamp": 1532375506
    },
    {
        "content": "<p>hmm okay then. Now that bu_log seems to be fixed for me, should I revert back to bu_log instead of passing a bu_vls struct for printing purposes in libanalyze?</p>",
        "id": 130170340,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532375789
    },
    {
        "content": "<p>bu_log() is fixed?  nothing has changed that I'm aware of</p>",
        "id": 130170569,
        "sender_full_name": "Sean",
        "timestamp": 1532376033
    },
    {
        "content": "<p>so I wouldn't say \"fixed\" :)</p>",
        "id": 130170573,
        "sender_full_name": "Sean",
        "timestamp": 1532376039
    },
    {
        "content": "<p>I don't think calling bu_log is any more appropriate than passing a bu_vls</p>",
        "id": 130170592,
        "sender_full_name": "Sean",
        "timestamp": 1532376068
    },
    {
        "content": "<p>in fact, that style of having a logging ledger is sort of what the other ged commands need (whether going through a logging api or not)</p>",
        "id": 130170614,
        "sender_full_name": "Sean",
        "timestamp": 1532376119
    },
    {
        "content": "<p>hmm okay but one thing is good about bu_log that it displays information as it happens.. Like those grid refining messages. It's an easy way to know something is happening.</p>",
        "id": 130170789,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532376298
    },
    {
        "content": "<p>I added moments and centroid</p>",
        "id": 130224589,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532453704
    },
    {
        "content": "<p>right now working on surface area</p>",
        "id": 130224603,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532453716
    },
    {
        "content": "<p>I saw you commits, you are making really great progress. You seem to accelerate to the end <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 130225066,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532454189
    },
    {
        "content": "<p>What about your patches on sourceforge? I suppose that I can close #495?</p>",
        "id": 130225357,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532454438
    },
    {
        "content": "<blockquote>\n<p>I saw you commits, you are making really great progress. You seem to accelerate to the end <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>\n</blockquote>\n<p>Haha thank you :). I have accelerated because from Aug 1, I have my regular classes from 9:30 - 16:30. So my time allocated would be affected. Hence trying my best to complete as much as I can :).</p>",
        "id": 130225505,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532454590
    },
    {
        "content": "<blockquote>\n<p>What about your patches on sourceforge? I suppose that I can close #495?</p>\n</blockquote>\n<p>hmm #495 is outdated so it can be closed</p>",
        "id": 130225566,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532454608
    },
    {
        "content": "<p>for #497 I will submit an updated one without the rtcheck related removals</p>",
        "id": 130225693,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532454735
    },
    {
        "content": "<p>#497 is probable outdated too, you redesigned the whole libged stuff, etc.. Therefore ... there you said it :)</p>",
        "id": 130225705,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532454765
    },
    {
        "content": "<p>yeah check overlaps should replace check_overlaps right?</p>",
        "id": 130225738,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532454804
    },
    {
        "content": "<p>but there is one thing I have not added from check_overlaps -- getting view information from view</p>",
        "id": 130225757,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532454837
    },
    {
        "content": "<p>when -a, -e and objs are not mentioned</p>",
        "id": 130225806,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532454859
    },
    {
        "content": "<p>it takes objects from view but not the view information</p>",
        "id": 130225821,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532454875
    },
    {
        "content": "<p>There is probable a reason for it (?)</p>",
        "id": 130225851,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532454895
    },
    {
        "content": "<p>yeah, check defaults to gqa behaviour if nothing is mentioned like <code>check overlaps</code>. We can give <code>check overlaps -a35 -e25 overlaps</code> for single grid.</p>",
        "id": 130225954,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532454973
    },
    {
        "content": "<p>only solution there is to add one extra option</p>",
        "id": 130225980,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532455003
    },
    {
        "content": "<p>and I could add one analyze_get_from_view(state, gedp) function. Which setups state</p>",
        "id": 130226100,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532455101
    },
    {
        "content": "<p>triggered by a special option of <code>check overlaps</code>?</p>",
        "id": 130226278,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532455267
    },
    {
        "content": "<p>yup</p>",
        "id": 130226296,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532455290
    },
    {
        "content": "<p>OK :)</p>",
        "id": 130226316,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532455317
    },
    {
        "content": "<p>for surface area</p>",
        "id": 130226572,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532455561
    },
    {
        "content": "<p>since there are no units table</p>",
        "id": 130226612,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532455566
    },
    {
        "content": "<p>I am doing </p>\n<div class=\"codehilite\"><pre><span></span>    bu_vls_printf(_ged_current_gedp-&gt;ged_result_str, &quot;\\t%s %g %s^2\\n&quot;,\n              tobjtab[i],\n              surf_area / (options-&gt;units[LINE]-&gt;val*options-&gt;units[LINE]-&gt;val),\n              options-&gt;units[LINE]-&gt;name);\n</pre></div>",
        "id": 130226630,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532455590
    },
    {
        "content": "<p>or should I add one more table?</p>",
        "id": 130226678,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532455644
    },
    {
        "content": "<p>I think what you are doing looks OK.</p>",
        "id": 130226748,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532455687
    },
    {
        "content": "<p>alright cool</p>",
        "id": 130226792,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532455739
    },
    {
        "content": "<p>also should I add some kind of warning, when single grid is chosen</p>",
        "id": 130226887,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532455816
    },
    {
        "content": "<p>and user asks for mass/centroid/moments</p>",
        "id": 130226906,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532455845
    },
    {
        "content": "<p>I don't know. Personally, I wouldn't do it if the user explicitly gave the parameters for the single grid.</p>",
        "id": 130227024,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532455994
    },
    {
        "content": "<p>but the values returned are way off</p>",
        "id": 130227149,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532456112
    },
    {
        "content": "<p>Is it so bad?</p>",
        "id": 130227399,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532456367
    },
    {
        "content": "<p><a href=\"https://hastebin.com/jolovakexa.css\" target=\"_blank\" title=\"https://hastebin.com/jolovakexa.css\">https://hastebin.com/jolovakexa.css</a></p>",
        "id": 130227620,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532456531
    },
    {
        "content": "<p>comparison</p>",
        "id": 130227622,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532456535
    },
    {
        "content": "<p>What was it, the havoc?</p>",
        "id": 130227863,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532456807
    },
    {
        "content": "<p>nope</p>",
        "id": 130227975,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532456898
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/cMe8ckcD5skK16AWqIjFQpuv/Screenshot-from-2018-07-24-23-58-09.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-24-23-58-09.png\">Screenshot-from-2018-07-24-23-58-09.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/cMe8ckcD5skK16AWqIjFQpuv/Screenshot-from-2018-07-24-23-58-09.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-24-23-58-09.png\"><img src=\"/user_uploads/1549/cMe8ckcD5skK16AWqIjFQpuv/Screenshot-from-2018-07-24-23-58-09.png\"></a></div>",
        "id": 130227979,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532456903
    },
    {
        "content": "<p>the inner cube subtracted and created a region</p>",
        "id": 130227985,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532456919
    },
    {
        "content": "<p>What's it size?</p>",
        "id": 130228005,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532456938
    },
    {
        "content": "<p>the arb8 is 39.3701 X 39.3701 X 39.3701 and arb7 is all values are abs(157.4803)</p>",
        "id": 130228132,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532457021
    },
    {
        "content": "<p>i just created then randomly</p>",
        "id": 130228140,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532457028
    },
    {
        "content": "<p>and material Id is 2</p>",
        "id": 130228146,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532457034
    },
    {
        "content": "<p>mm?</p>",
        "id": 130228149,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532457044
    },
    {
        "content": "<p>inches</p>",
        "id": 130228162,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532457068
    },
    {
        "content": "<p><a href=\"https://hastebin.com/ulefabapij.css\" target=\"_blank\" title=\"https://hastebin.com/ulefabapij.css\">https://hastebin.com/ulefabapij.css</a> here gqa vs check for triple grid</p>",
        "id": 130228273,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532457203
    },
    {
        "content": "<p>Have you computed the volume by hand? The difference is a little bit to big (1.63 vs. 5.43) for such a simple geometry. A factor of 3?</p>",
        "id": 130228636,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532457570
    },
    {
        "content": "<p>Have you tried it for a simple cube?</p>",
        "id": 130228652,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532457598
    },
    {
        "content": "<p>hmm I will try on something simple like the cube.. there you said it</p>",
        "id": 130228707,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532457608
    },
    {
        "content": "<p><a href=\"https://www.diffchecker.com/cJNUrcoA\" target=\"_blank\" title=\"https://www.diffchecker.com/cJNUrcoA\">https://www.diffchecker.com/cJNUrcoA</a></p>",
        "id": 130228817,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532457728
    },
    {
        "content": "<p>comparison with the simple cube of 40x40in</p>",
        "id": 130228820,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532457743
    },
    {
        "content": "<p>hmm the dimensions doesn't make sense. Let me recheck from .g</p>",
        "id": 130228920,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532457927
    },
    {
        "content": "<p>its 2000x2000x2000mm</p>",
        "id": 130229013,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532458060
    },
    {
        "content": "<p>I said 39.3701in, but it was the coordinates <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 130229067,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532458095
    },
    {
        "content": "<p>The single grid is about 1/3rd of the triple grid?</p>",
        "id": 130229101,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532458144
    },
    {
        "content": "<p>how are we comparing them?</p>",
        "id": 130229178,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532458209
    },
    {
        "content": "<p>8 vs. 2.69 m^3 (?)</p>",
        "id": 130229199,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532458248
    },
    {
        "content": "<p>triple grid shoots 39x39x39 rays and single grid shoots 69x69 rays</p>",
        "id": 130229215,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532458281
    },
    {
        "content": "<blockquote>\n<p>8 vs. 2.69 m^3 (?)</p>\n</blockquote>\n<p>yeah that seems awfully close to 1/3</p>",
        "id": 130229309,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532458351
    },
    {
        "content": "<p>I tried out gqa -Av -N1 to force single view</p>",
        "id": 130229457,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532458510
    },
    {
        "content": "<p>but that result came out to be 8 m^3</p>",
        "id": 130229464,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532458524
    },
    {
        "content": "<p>E.g. for geometries made of sheets the single grid method could be very wrong, but for a solid cube?</p>",
        "id": 130229465,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532458524
    },
    {
        "content": "<p>I didn't get what you meant by made of sheets?</p>",
        "id": 130229591,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532458588
    },
    {
        "content": "<p>I will do one thing.. draw the single grid formed with ray_pt values.</p>",
        "id": 130229712,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532458692
    },
    {
        "content": "<p>If parts of the geometry are invisible from a view point as e.g. thin metal sheets (or plates).</p>",
        "id": 130229713,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532458694
    },
    {
        "content": "<blockquote>\n<p>If parts of the geometry are invisible from a view point as e.g. thin metal sheets (or plates).</p>\n</blockquote>\n<p>hmm then three grids are best</p>",
        "id": 130229752,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532458733
    },
    {
        "content": "<blockquote>\n<p>I will do one thing.. draw the single grid formed with ray_pt values.</p>\n</blockquote>\n<p>and see how much is the coverage</p>",
        "id": 130229761,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532458746
    },
    {
        "content": "<p>in theory it should cover the whole geometry</p>",
        "id": 130229780,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532458776
    },
    {
        "content": "<p>What's state-&gt;num_views? Can it only be set with the <code>-N</code> option?</p>",
        "id": 130230370,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532459339
    },
    {
        "content": "<p>yeah and it's set to 1 with with -ae mentioning</p>",
        "id": 130230392,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532459366
    },
    {
        "content": "<p>At which code line?</p>",
        "id": 130230775,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532459656
    },
    {
        "content": "<p>api.c line 1231</p>",
        "id": 130230803,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532459684
    },
    {
        "content": "<p>line 117 libanalyze/check_options.c</p>",
        "id": 130230846,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532459744
    },
    {
        "content": "<p>oh wait I have some changes in api.c that is yet to commit related to surface area. So line number can vary</p>",
        "id": 130230951,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532459844
    },
    {
        "content": "<p>Yes, a little bit, but I could find it.</p>",
        "id": 130231248,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532460134
    },
    {
        "content": "<p>Well, it looks like there is a factor of 3 somewhere ... or something else.</p>",
        "id": 130231338,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532460248
    },
    {
        "content": "<p>yep! here is the grid formed <a href=\"https://www.geogebra.org/3d/vdq9yhbq\" target=\"_blank\" title=\"https://www.geogebra.org/3d/vdq9yhbq\">https://www.geogebra.org/3d/vdq9yhbq</a>.<br>\nI will try to investigate it</p>",
        "id": 130231448,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532460384
    },
    {
        "content": "<p>one thing I noticed is it shoots one less, like in check_overlaps it shoots 70x70 grid. But check shoots 69x69 grid</p>",
        "id": 130231630,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532460568
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/M_89esu4Og_8YnEFrj5_oKgh/Screenshot-from-2018-07-25-01-03-20.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-25-01-03-20.png\">Screenshot-from-2018-07-25-01-03-20.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/M_89esu4Og_8YnEFrj5_oKgh/Screenshot-from-2018-07-25-01-03-20.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-25-01-03-20.png\"><img src=\"/user_uploads/1549/M_89esu4Og_8YnEFrj5_oKgh/Screenshot-from-2018-07-25-01-03-20.png\"></a></div>",
        "id": 130231936,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532460819
    },
    {
        "content": "<p>oh nvm this. The cube is drawn wrong xD. The centre should be 0,0,0</p>",
        "id": 130232584,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532461633
    },
    {
        "content": "<p>okay I think I figured it out! It's the difference in number of shots. <br>\n8/2.68851 = 2.975 is the factor.<br>\n40x40 is the grid formed per view in case of triple grid = 1600 shots<br>\n69x69 is the grid formed for single grid = 4761 shots<br>\nand 4761/1600 = 2.975</p>",
        "id": 130235467,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532464539
    },
    {
        "content": "<p>Not sure how to fix it easily</p>",
        "id": 130236548,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532465426
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://hastebin.com/jolovakexa.css\" target=\"_blank\" title=\"https://hastebin.com/jolovakexa.css\">https://hastebin.com/jolovakexa.css</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> how much difference is there if you run 1 grid vs 3 grid but to the same grid density  (e.g., in your example, looks like 3 grid went to 639^3 but only checked 1 grid to 277^2)</p>",
        "id": 130252746,
        "sender_full_name": "Sean",
        "timestamp": 1532489773
    },
    {
        "content": "<blockquote>\n<p>the arb8 is 39.3701 X 39.3701 X 39.3701 and arb7 is all values are abs(157.4803)</p>\n</blockquote>\n<p>you can try running the 'analyze' command on the primitives -- I believe both of those should compute volume correctly (exactly), then you can do the subtraction to get the actual volume vs check/gqa's estimate</p>",
        "id": 130252857,
        "sender_full_name": "Sean",
        "timestamp": 1532490022
    },
    {
        "content": "<blockquote>\n<p>okay I think I figured it out! It's the difference in number of shots. <br>\n8/2.68851 = 2.975 is the factor.<br>\n40x40 is the grid formed per view in case of triple grid = 1600 shots<br>\n69x69 is the grid formed for single grid = 4761 shots<br>\nand 4761/1600 = 2.975</p>\n</blockquote>\n<p>This isn't making sense to me.  There should only be that big of a difference if the grid sizes where the same for both, but the 40x40 and 69x69 should be quite different sizes (per cell).  E.g., if we were shooting a 1000x1000mm wide view, 40x40 grid would have 25mm cell width and 69x69 would be about 14.5mm.  If half the shots hit something and reported a thickness of 500mm, for example -- the volume estimate for the 40x40 grid would be exactly 2.5e8mm^3 (because 25^2 * 500 * 40*40/2) and the estimate for 69x69 would be either 2.46e8mm^3 or 2.54e8mm^3, depending on whether we used 34 or 35 cells for \"half\" of 69.  Either way, the answers are pretty darn close ...</p>",
        "id": 130253599,
        "sender_full_name": "Sean",
        "timestamp": 1532491611
    },
    {
        "content": "<p>hmm in the example you gave you kept the viewsize the same. But its not the case with 1 grid vs 3 grid.<br>\nFor example a 2M x 2M x 2M cube, mdl_max : (1000,1000,1000) mm and mdl_min: (-1000, -1000, -1000) mm<br>\nSpan is VSUB2(mdl_max, mdl_min) = (2000, 2000, 2000).<br>\nFor 3 grid the viewsize is 2000mm and area is 2000x2000mm, so for 50mm gridspacing the grid formed is 40x40.<br>\nFor 1 grid the viewsize is taken as MAGNITUDE(span) = 3464.101mm and area is 3464.101mm x 3464.101mm, so for 50mm gridspacing the grid formed is 69.28 x 69.28 ~ 69x69.</p>",
        "id": 130259504,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532503089
    },
    {
        "content": "<p>the formula : o_volume[view] =  o_len[view] * (area[view] / shots[view])<br>\nIn case of 3grid, the area of the bounding box (since its a cube, its is 2000x2000) = area of the grid so this works out.<br>\nIn case of 1grid, the area of the bounding box != area of the grid as we saw.<br>\nSince the area is kept the same = 4e+06 but the number of shots vary.  Because of the difference (40x40 vs 69x69).<br>\nThe formula becomes:<br>\nin case of 3grid, o_volume[view] =  o_len[view] * 2500<br>\nin case of 1grid, o_volume[view] =  o_len[view] * 840.159 only</p>",
        "id": 130259836,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532503748
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><a href=\"https://hastebin.com/jolovakexa.css\" target=\"_blank\" title=\"https://hastebin.com/jolovakexa.css\">https://hastebin.com/jolovakexa.css</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> how much difference is there if you run 1 grid vs 3 grid but to the same grid density  (e.g., in your example, looks like 3 grid went to 639^3 but only checked 1 grid to 277^2)</p>\n</blockquote>\n<p>welp I cannot control the density of the grid, but spacing I can keep the same: <a href=\"https://hastebin.com/uxozakodep.css\" target=\"_blank\" title=\"https://hastebin.com/uxozakodep.css\">https://hastebin.com/uxozakodep.css</a>.</p>",
        "id": 130260028,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532504137
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>the arb8 is 39.3701 X 39.3701 X 39.3701 and arb7 is all values are abs(157.4803)</p>\n</blockquote>\n<p>you can try running the 'analyze' command on the primitives -- I believe both of those should compute volume correctly (exactly), then you can do the subtraction to get the actual volume vs check/gqa's estimate</p>\n</blockquote>\n<p>wow thanks for the tip, the analyze command is great :) <br>\ndid the manual calculation : according to analyze its around 162.667 m^3 and according to check/gqa it is around 162.888 m^3.</p>",
        "id": 130260429,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532504717
    },
    {
        "content": "<p>I added this to single_grid_setup <code>state-&gt;area[0] = state-&gt;viewsize * state-&gt;viewsize</code>. Now looks much better :) <a href=\"https://hastebin.com/raw/dizagoboxu\" target=\"_blank\" title=\"https://hastebin.com/raw/dizagoboxu\">https://hastebin.com/raw/dizagoboxu</a></p>",
        "id": 130260968,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532505498
    },
    {
        "content": "<p>Enabled print per-region stats option for volume and mass</p>",
        "id": 130279853,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532530432
    },
    {
        "content": "<p>added the view information option as -i for check overlaps.</p>",
        "id": 130287281,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532537044
    },
    {
        "content": "<blockquote>\n<p>I added this to single_grid_setup <code>state-&gt;area[0] = state-&gt;viewsize * state-&gt;viewsize</code>. Now looks much better :) <a href=\"https://hastebin.com/raw/dizagoboxu\" target=\"_blank\" title=\"https://hastebin.com/raw/dizagoboxu\">https://hastebin.com/raw/dizagoboxu</a></p>\n</blockquote>\n<p>I've just tested your changes and i looks like you found it :)</p>",
        "id": 130292668,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532542452
    },
    {
        "content": "<p>yeah now its pretty close :)</p>",
        "id": 130292769,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532542565
    },
    {
        "content": "<p>but moments is wrong I have to test it out</p>",
        "id": 130292777,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532542578
    },
    {
        "content": "<p>I was testing surf_area too, it seems broken too</p>",
        "id": 130292789,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532542615
    },
    {
        "content": "<p>works when grid spacing is like -g10,10. But on refining like -g100,10 it becomes very wrong.</p>",
        "id": 130292820,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532542677
    },
    {
        "content": "<p>also the logic only works for boxes</p>",
        "id": 130292864,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532542695
    },
    {
        "content": "<blockquote>\n<p>works when grid spacing is like -g10,10. But on refining like -g100,10 it becomes very wrong.</p>\n</blockquote>\n<p>Wouldn't be -g1,1 the refined grid? 100 &gt; 10</p>",
        "id": 130292908,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532542802
    },
    {
        "content": "<p>i meant like when the grid is refined by half until it reaches the grid_spacing limit</p>",
        "id": 130292966,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532542850
    },
    {
        "content": "<blockquote>\n<p>also the logic only works for boxes</p>\n</blockquote>\n<p>You could take the normal vector into account.</p>",
        "id": 130292978,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532542867
    },
    {
        "content": "<p>can you explain like how normal vector can be used to find surface area?</p>",
        "id": 130293042,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532542928
    },
    {
        "content": "<p>The surface isn't usual orthogonal to the ray direction. I.e. using <code>ray-thickness * ray*thickness</code> as the area below the ray would be wrong. Correct?</p>",
        "id": 130293131,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532543093
    },
    {
        "content": "<p>yep if it doesn't hit the surface at 90 degree then taking the area as ray_thickness * ray_thickness is wrong</p>",
        "id": 130293331,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532543284
    },
    {
        "content": "<p>Therefore, you need to determine how \"skew\" the surface below the ray is.</p>",
        "id": 130293461,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532543452
    },
    {
        "content": "<p>yes</p>",
        "id": 130293475,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532543481
    },
    {
        "content": "<p>This can be done with the help of the normal vector of the surface at the ray's hit point. The vector product of this vector with the ray's direction vector is equal to the cosine of the angle between these vectors.</p>",
        "id": 130293542,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532543549
    },
    {
        "content": "<p>And since Pythagoras, <code>ray_thickness * ray_thickness / cos(alpha)</code> can be used as an approximation for the surface's area around the ray's hit point.</p>",
        "id": 130293665,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532543703
    },
    {
        "content": "<p>alright sounds good.</p>",
        "id": 130293686,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532543734
    },
    {
        "content": "<p>Aren't the rays very thin?</p>",
        "id": 130293751,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532543795
    },
    {
        "content": "<p>if the rays are 1mm thick then we must use -g1,1 to get correct results right?</p>",
        "id": 130293788,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532543844
    },
    {
        "content": "<blockquote>\n<p>Aren't the rays very thin?</p>\n</blockquote>\n<p>Indeed :) I mean the grid size.</p>",
        "id": 130293881,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532543974
    },
    {
        "content": "<p>hmm so -g1,1 is must to get the surface area.</p>",
        "id": 130293979,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532544072
    },
    {
        "content": "<p>But how to get this normal vector along the surface ?</p>",
        "id": 130293990,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532544101
    },
    {
        "content": "<blockquote>\n<p>if the rays are 1mm thick then we must use -g1,1 to get correct results right?</p>\n</blockquote>\n<p>The rays itself have no thickness, I referred to a \"ray thickness\" value we had at the beginning of your project and which was simply the cell size.</p>",
        "id": 130294045,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532544138
    },
    {
        "content": "<blockquote>\n<p>hmm so -g1,1 is must to get the surface area.</p>\n</blockquote>\n<p>No, the \"thickness\" is simply your actual cell size.</p>",
        "id": 130294074,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532544181
    },
    {
        "content": "<p>thickness  = cell-size is a bit confusing to be honest :D</p>",
        "id": 130294160,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532544299
    },
    {
        "content": "<blockquote>\n<p>But how to get this normal vector along the surface ?</p>\n</blockquote>\n<p>Something like m_partition-&gt;pt_inhit-&gt;hit_normal and m_partition-&gt;pt_outhit-&gt;hit_normal (for the other side).</p>",
        "id": 130294193,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532544342
    },
    {
        "content": "<blockquote>\n<p>thickness  = cell-size is a bit confusing to be honest :D</p>\n</blockquote>\n<p>In the terms of api.c it's probable <code>cell_area / cos(alpha)</code>.</p>",
        "id": 130294275,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532544427
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>But how to get this normal vector along the surface ?</p>\n</blockquote>\n<p>Something like m_partition-&gt;pt_inhit-&gt;hit_normal and m_partition-&gt;pt_outhit-&gt;hit_normal (for the other side).</p>\n</blockquote>\n<p>thanks this helps :)</p>",
        "id": 130294305,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532544457
    },
    {
        "content": "<p>I don't know where the <code>* 2</code> comes from there.</p>",
        "id": 130294312,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532544464
    },
    {
        "content": "<blockquote>\n<p>I don't know where the <code>* 2</code> comes from there.</p>\n</blockquote>\n<p>the other side?</p>",
        "id": 130294315,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532544476
    },
    {
        "content": "<p>Sorry, no. In <code>prd-&gt;optr-&gt;o_surf_area[state-&gt;curr_view] += (cell_area * 2);</code> in api.c.</p>",
        "id": 130294380,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532544538
    },
    {
        "content": "<p>Maybe for the front and back side?</p>",
        "id": 130294402,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532544584
    },
    {
        "content": "<p>yeah that is what I mean by the other side i.e the exit</p>",
        "id": 130294470,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532544611
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>But how to get this normal vector along the surface ?</p>\n</blockquote>\n<p>Something like m_partition-&gt;pt_inhit-&gt;hit_normal and m_partition-&gt;pt_outhit-&gt;hit_normal (for the other side).</p>\n</blockquote>\n<p>hmm this is deprecated, replaced by RT_HIT_NORMAL<br>\nI greped and found this:<br>\n<code> RT_HIT_NORMAL( inormal, pp-&gt;pt_inhit, pp-&gt;pt_inseg-&gt;seg_stp, &amp;(ap-&gt;a_ray), pp-&gt;pt_inflip )</code><br>\n<code>RT_HIT_NORMAL( onormal, pp-&gt;pt_outhit, pp-&gt;pt_outseg-&gt;seg_stp, &amp;(ap-&gt;a_ray), pp-&gt;pt_outflip )</code></p>",
        "id": 130294580,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532544775
    },
    {
        "content": "<p>This looks reasonable.</p>",
        "id": 130294691,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532544930
    },
    {
        "content": "<p>okay great, I will try it out :)</p>",
        "id": 130294745,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532544974
    },
    {
        "content": "<p>BTW I added the quiet missed report and required number of hits options.<br>\nI had to add a local overlaps list to identify if the hits are zero then it should check if it actually was recorded as overlaps if the hit is zero. else report it ( here is the snippet extracted from gqa - <a href=\"https://hastebin.com/avihedafuc.php\" target=\"_blank\" title=\"https://hastebin.com/avihedafuc.php\">https://hastebin.com/avihedafuc.php</a>)</p>",
        "id": 130294774,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532545012
    },
    {
        "content": "<blockquote>\n<p>okay great, I will try it out :)</p>\n</blockquote>\n<p>A surface algorithm may need an additional trick. Test your algorithm with a cube and a sphere. The 3-grid version of the algorithm as it is now shouldn't be able to compute the surface of the cube.</p>",
        "id": 130295037,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532545278
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>okay great, I will try it out :)</p>\n</blockquote>\n<p>A surface algorithm may need an additional trick. Test your algorithm with a cube and a sphere. The 3-grid version of the algorithm as it is now shouldn't be able to compute the surface of the cube.</p>\n</blockquote>\n<p>ok. I will test it and see how it goes!</p>",
        "id": 130295149,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532545395
    },
    {
        "content": "<blockquote>\n<p>This can be done with the help of the normal vector of the surface at the ray's hit point. The vector product of this vector with the ray's direction vector is equal to the cosine of the angle between these vectors.</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>        RT_HIT_NORMAL(inormal, pp-&gt;pt_inhit, pp-&gt;pt_inseg-&gt;seg_stp, &amp;(ap-&gt;a_ray), pp-&gt;pt_inflip);\n        RT_HIT_NORMAL(onormal, pp-&gt;pt_outhit, pp-&gt;pt_outseg-&gt;seg_stp, &amp;(ap-&gt;a_ray), pp-&gt;pt_outflip);\n\n        icos = VDOT(inormal, ap-&gt;a_ray.r_dir)/(MAGSQ(inormal)*MAGSQ(ap-&gt;a_ray.r_dir));\n        ocos = VDOT(onormal, ap-&gt;a_ray.r_dir)/(MAGSQ(onormal)*MAGSQ(ap-&gt;a_ray.r_dir));\n</pre></div>",
        "id": 130296667,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532547042
    },
    {
        "content": "<p>here is how I found the cosine angles</p>",
        "id": 130296675,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532547062
    },
    {
        "content": "<blockquote>\n<p>hmm in the example you gave you kept the viewsize the same. But its not the case with 1 grid vs 3 grid.<br>\nFor example a 2M x 2M x 2M cube, mdl_max : (1000,1000,1000) mm and mdl_min: (-1000, -1000, -1000) mm<br>\nSpan is VSUB2(mdl_max, mdl_min) = (2000, 2000, 2000).<br>\nFor 3 grid the viewsize is 2000mm and area is 2000x2000mm, so for 50mm gridspacing the grid formed is 40x40.<br>\nFor 1 grid the viewsize is taken as MAGNITUDE(span) = 3464.101mm and area is 3464.101mm x 3464.101mm, so for 50mm gridspacing the grid formed is 69.28 x 69.28 ~ 69x69.</p>\n</blockquote>\n<p>It doesn't matter if the viewsize is the same or not. With a different viewsize on the 1-view, that just means there is more padding around the outside.  (So in my example of 50% of the shots hitting, it would be some smaller percentage on 1-view.)  The estimates should still work out approximately within tolerance -- error should be something like the area of half the perimeter cells on average or all the perimeter cells worse case.  If they don't, it should be a bug.</p>",
        "id": 130317643,
        "sender_full_name": "Sean",
        "timestamp": 1532573345
    },
    {
        "content": "<p>Yes Sean, I agree with you. It was a bug -- The area of the grid was kept as the same for both single grid and triple grid.<em>(like this state-&gt;area[0] = state-&gt;span[1] * state-&gt;span[2])</em> This was fine for 3grid because the are of the grid is same as the state-&gt;area.<br>\nBut in case of single grid the area of the grid is not equal to the state-&gt;area. Hence the ratio of missed shots was wrong!<br>\nI added the code :</p>\n<blockquote>\n<p>I added this to single_grid_setup <code>state-&gt;area[0] = state-&gt;viewsize * state-&gt;viewsize</code>. Now looks much better :) <a href=\"https://hastebin.com/raw/dizagoboxu\" target=\"_blank\" title=\"https://hastebin.com/raw/dizagoboxu\">https://hastebin.com/raw/dizagoboxu</a></p>\n</blockquote>\n<p>to manually set the correct area for single grid and it worked out.</p>",
        "id": 130342013,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532610388
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>okay great, I will try it out :)</p>\n</blockquote>\n<p>A surface algorithm may need an additional trick. Test your algorithm with a cube and a sphere. The 3-grid version of the algorithm as it is now shouldn't be able to compute the surface of the cube.</p>\n</blockquote>\n<p>you were right! The surf_area of sphere came out thrice the real one for triple grids. But something like<code>check surf_area -g10,10 -N1 sphere</code> gave the surface area correctly.</p>",
        "id": 130346655,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532614951
    },
    {
        "content": "<p>Also the area always comes out a bit lesser than the correct answer. I found out it was because of the steps in the grid.<br>\nWhen something like <code>-g100mm,100mm</code> is selected then it shoots 19x19x19 grids. Which gives the surf_area for one view as <code>19*19*100*100*2 = 7.22m^2</code>. That gives total area of 3 views as 21.66 m^2. But the correct answer is 24m^2. <br>\nNow if the grids were 20x20x20, then the surf_area per view comes out as <code>20*20*100*100*2 = 8m^2</code> which is exactly what we needed!</p>",
        "id": 130347759,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532615907
    },
    {
        "content": "<p>I also investigated the issue with when the grid is refined from something like 100mm to 50mm. The surface area reported was 42m^2 but the correct surf_area is 24m^2. <br>\nAccording to the original code it kept adding the cell_area to the o_surf_area[view] so the when the algorithm is run twice the area is more. <br>\nBut why is it not twice as the correct surf_area ? It is because on refining we are not shooting all the rays (i.e skipping the already shot rays).<br>\nSo I did the following changes : <a href=\"https://hastebin.com/iwifusokap.diff\" target=\"_blank\" title=\"https://hastebin.com/iwifusokap.diff\">https://hastebin.com/iwifusokap.diff</a><br>\nThere two things happening : 1) clears the o_area after shooting grids of one gird-size and stores the result to o_surf_area. So it is not double the area.<br>\n2) We are also multiplying the o_area with a ratio of <em>total_points/total_shots</em> -- this ratio is 1 for the original gird_spacing but more than 1 for any refined grid. <em>1.333 in case of when a 100mm grid is refined to 50mm.</em></p>",
        "id": 130348456,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532616467
    },
    {
        "content": "<p>The algorithm not only fails for something like a sphere, what about when the object is like a smaller cube is subtracted from a larger cube - the area reported would be the outer-surface area only, the internal area would be ignored.</p>",
        "id": 130348784,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532616667
    },
    {
        "content": "<blockquote>\n<p>you were right! The surf_area of sphere came out thrice the real one for triple grids. But something like<code>check surf_area -g10,10 -N1 sphere</code> gave the surface area correctly.</p>\n</blockquote>\n<p>The sphere is a more general example for a surface area then the cube, because every part of its surface is visible from any direction, especially from the x, y, and z axis directions. If you think of a small area on the spheres surface, you can hit it with rays from the x, y, and z direction. I.e. if you simply add the areas in you triple grid algorithm you get three times its area.</p>\n<p>The cube however is abnormal. Any part of its surface can only be hit by one of the three coordinate axis directions. Therefore, your algorithm only seems to be correct there. Create a turned cube and run your algorithm with this ;)</p>",
        "id": 130360087,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532626565
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>you were right! The surf_area of sphere came out thrice the real one for triple grids. But something like<code>check surf_area -g10,10 -N1 sphere</code> gave the surface area correctly.</p>\n</blockquote>\n<p>The sphere is a more general example for a surface area then the cube, because every part of its surface is visible from any direction, especially from the x, y, and z axis directions. If you think of a small area on the spheres surface, you can hit it with rays from the x, y, and z direction. I.e. if you simply add the areas in you triple grid algorithm you get three times its area.</p>\n<p>The cube however is abnormal. Any part of its surface can only be hit by one of the three coordinate axis directions. Therefore, your algorithm only seems to be correct there. Create a turned cube and run your algorithm with this ;)</p>\n</blockquote>\n<p>yeah a turned cube will also give incorrect results for sure! :/ well this algorithm is no good then.</p>",
        "id": 130360249,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532626759
    },
    {
        "content": "<blockquote>\n<p>I also investigated the issue with when the grid is refined from something like 100mm to 50mm. The surface area reported was 42m^2 but the correct surf_area is 24m^2. <br>\nAccording to the original code it kept adding the cell_area to the o_surf_area[view] so the when the algorithm is run twice the area is more. <br>\nBut why is it not twice as the correct surf_area ? It is because on refining we are not shooting all the rays (i.e skipping the already shot rays).<br>\nSo I did the following changes : <a href=\"https://hastebin.com/iwifusokap.diff\" target=\"_blank\" title=\"https://hastebin.com/iwifusokap.diff\">https://hastebin.com/iwifusokap.diff</a><br>\nThere two things happening : 1) clears the o_area after shooting grids of one gird-size and stores the result to o_surf_area. So it is not double the area.<br>\n2) We are also multiplying the o_area with a ratio of <em>total_points/total_shots</em> -- this ratio is 1 for the original gird_spacing but more than 1 for any refined grid. <em>1.333 in case of when a 100mm grid is refined to 50mm.</em></p>\n</blockquote>\n<p>Hmm, I thought the grid cell size is of relevance for the area, not the number of shots.<br>\nAnd, if you refine the grid by dividing the edges in half, you had to divide the o_surf_area by 4 and shoot at the missing grid points, or?</p>",
        "id": 130360393,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532626904
    },
    {
        "content": "<blockquote>\n<p>yeah a turned cube will also give incorrect results for sure! :/ well this algorithm is no good then.</p>\n</blockquote>\n<p>As I said, it needs a trick, like choosing the grid planes randomly in space and looking for the mean of the biggest values.</p>",
        "id": 130360536,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532627010
    },
    {
        "content": "<blockquote>\n<p>Hmm, I thought the grid cell size is of relevance for the area, not the number of shots.<br>\nAnd, if you refine the grid by dividing the edges in half, you had to divide the o_surf_area by 4 and shoot at the missing grid points, or?</p>\n</blockquote>\n<p>Hmm now that I think divide by 4 also works! so at the end I can do o_surf_area[view] = o_area[view] then do o_area[view] /= 4. So that the first answer is there in o_surf_area, if we are refining then the new answer can replace old answer.</p>",
        "id": 130360832,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532627238
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>yeah a turned cube will also give incorrect results for sure! :/ well this algorithm is no good then.</p>\n</blockquote>\n<p>As I said, it needs a trick, like choosing the grid planes randomly in space and looking for the mean of the biggest values.</p>\n</blockquote>\n<p>when you said randomly does it mean not essentially along the 3 axises? and how many grids should we shoot?</p>",
        "id": 130361017,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532627396
    },
    {
        "content": "<blockquote>\n<p>when you said randomly does it mean not essentially along the 3 axises? and how many grids should we shoot?</p>\n</blockquote>\n<p>You choose randomly an azimuth and elevation and shoot a grid from this direction. For a first test I would try it with 3 grids. The number of grids could be a parameter of the check function as well.</p>",
        "id": 130361508,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532627771
    },
    {
        "content": "<p>okay so if I shoot three grids randomly on a sphere, I will get three values for surf_area which could be the same, and I take mean of these three values which gives me the answer but then what did you mean by \"the mean of the biggest values\" ?</p>",
        "id": 130361824,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532628039
    },
    {
        "content": "<p>all grids would report me a surf_area value, how to consider which are biggest ?</p>",
        "id": 130361853,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532628079
    },
    {
        "content": "<p>If a value is much lower than the others then it's likely that this direction wasn't good (missed a part of the surface) and it should be rejected.</p>",
        "id": 130361997,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532628220
    },
    {
        "content": "<p>However, all values could be good as in case of the sphere.</p>",
        "id": 130362069,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532628256
    },
    {
        "content": "<p>yep got it :)</p>",
        "id": 130362108,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532628291
    },
    {
        "content": "<p>now this won't allow us to find internal surf_area right?</p>",
        "id": 130362126,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532628311
    },
    {
        "content": "<p>You could define a limit, e.g. every value which is smaller than 80% (?) of the maximum will be discarded.</p>",
        "id": 130362164,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532628353
    },
    {
        "content": "<blockquote>\n<p>now this won't allow us to find internal surf_area right?</p>\n</blockquote>\n<p>This should work independently of this issue. To get this, you had to follow the ray further on.</p>",
        "id": 130362258,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532628437
    },
    {
        "content": "<p>even when a smaller cube is subtracted from a larger cube in the centre ?</p>",
        "id": 130362623,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532628801
    },
    {
        "content": "<p>in that case if a ray goes though the centre would there be two hits?</p>",
        "id": 130362812,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532628974
    },
    {
        "content": "<p>if that is the case then it should be okay</p>",
        "id": 130362838,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532629020
    },
    {
        "content": "<p>If a region has a hole, or in case of a torus for example, you get more than one hit from the ray trace. Whenever the ray travels through a solid part of the region you get it as a <em>hit</em>.</p>",
        "id": 130363138,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532629245
    },
    {
        "content": "<p>alright that sounds good</p>",
        "id": 130363195,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532629286
    },
    {
        "content": "<p>okk then I will try it out now.</p>",
        "id": 130363331,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532629433
    },
    {
        "content": "<p>Well that worked :)</p>",
        "id": 130368680,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532635895
    },
    {
        "content": "<p><a href=\"https://paste.debian.net/1035316/\" target=\"_blank\" title=\"https://paste.debian.net/1035316/\">https://paste.debian.net/1035316/</a></p>",
        "id": 130369132,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532636487
    },
    {
        "content": "<p>I also tried that cubes example that too came to be correct :)</p>",
        "id": 130369568,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532637063
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>when you said randomly does it mean not essentially along the 3 axises? and how many grids should we shoot?</p>\n</blockquote>\n<p>You choose randomly an azimuth and elevation and shoot a grid from this direction. For a first test I would try it with 3 grids. The number of grids could be a parameter of the check function as well.</p>\n</blockquote>\n<p>I took the number of grids as the number of views so by default it is 3. And can be changed with -N option which is already there to set the number of views</p>",
        "id": 130422664,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532710718
    },
    {
        "content": "<p>going to commit it then start with glint algorithms</p>",
        "id": 130423880,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532711953
    },
    {
        "content": "<p>glint seems to shoot the grid differently and has one option to set ray_pt as some random point in the cell</p>",
        "id": 130423991,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532712041
    },
    {
        "content": "<p>like for particular grid cell, the ray_pt is not necessarily the centre of the grid cell by default</p>",
        "id": 130424037,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532712095
    },
    {
        "content": "<p>and even if I set the ray_pt as the centre with -c option the outputs of check overlaps and glint does not match for the same grid size and az/el values</p>",
        "id": 130424155,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532712222
    },
    {
        "content": "<blockquote>\n<p>and even if I set the ray_pt as the centre with -c option the outputs of check overlaps and glint does not match for the same grid size and az/el values</p>\n</blockquote>\n<p>Hmm, glint -c shoots the rays from the middle of the cells and check from the cells' corners?</p>",
        "id": 130424483,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532712513
    },
    {
        "content": "<p>(only an idea)</p>",
        "id": 130424491,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532712543
    },
    {
        "content": "<p>hmm I checked once again - <code>glint -c -g100 -a0 -e0</code> on cube of sides 8x8x8m centre 0,0,0 the first ray_pt is (4000,-4000,4000) then next is (4000, -3900,4000)</p>",
        "id": 130424740,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532712815
    },
    {
        "content": "<p>if it were at the centre shouldn't it be (3950, -3950, 3950) and (3950, -3850,3950)</p>",
        "id": 130424842,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532712912
    },
    {
        "content": "<p>ohh check in single grid shoots from the eye so the ray_pts are different and hence the overlaps list is different</p>",
        "id": 130425056,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532713097
    },
    {
        "content": "<blockquote>\n<p>ohh check in single grid shoots from the eye so the ray_pts are different and hence the overlaps list is different</p>\n</blockquote>\n<p>You found it - again <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 130431177,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532719742
    },
    {
        "content": "<p>Just did a detailed analysis now. For grid_spacing of 2000 for a cube of 8x8x8m with centre at (0,0,0)<br>\nThis is check -a45 -e45 : <a href=\"/user_uploads/1549/6b-Nc_FQwpbgTPUe-j8bIxt1/check_grid_a45_e45.png\" target=\"_blank\" title=\"check_grid_a45_e45.png\"></a> <br>\n<a href=\"/user_uploads/1549/mV7FkpjQFdwi6dVkTOAfdaOz/Screenshot-from-2018-07-28-01-07-47.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-28-01-07-47.png\"></a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/6b-Nc_FQwpbgTPUe-j8bIxt1/check_grid_a45_e45.png\" target=\"_blank\" title=\"\"><img src=\"/user_uploads/1549/6b-Nc_FQwpbgTPUe-j8bIxt1/check_grid_a45_e45.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/1549/mV7FkpjQFdwi6dVkTOAfdaOz/Screenshot-from-2018-07-28-01-07-47.png\" target=\"_blank\" title=\"\"><img src=\"/user_uploads/1549/mV7FkpjQFdwi6dVkTOAfdaOz/Screenshot-from-2018-07-28-01-07-47.png\"></a></div><p>This is glint -a45 -e45 : <a href=\"/user_uploads/1549/DapK1R1l-tuJIvt-Dr_iaY56/glint_a45_e45.png\" target=\"_blank\" title=\"glint_a45_e45.png\"></a> <br>\n<a href=\"/user_uploads/1549/7bXcclNYfRuENgeno653fQSU/Screenshot-from-2018-07-28-01-09-33.png\" target=\"_blank\" title=\"Screenshot-from-2018-07-28-01-09-33.png\"></a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/DapK1R1l-tuJIvt-Dr_iaY56/glint_a45_e45.png\" target=\"_blank\" title=\"\"><img src=\"/user_uploads/1549/DapK1R1l-tuJIvt-Dr_iaY56/glint_a45_e45.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/1549/7bXcclNYfRuENgeno653fQSU/Screenshot-from-2018-07-28-01-09-33.png\" target=\"_blank\" title=\"\"><img src=\"/user_uploads/1549/7bXcclNYfRuENgeno653fQSU/Screenshot-from-2018-07-28-01-09-33.png\"></a></div>",
        "id": 130433751,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532723100
    },
    {
        "content": "<p>Confused on whether to use the exisiting grid setup for single grids in <em>check</em> and add the extra operations provided by glint? But this way if I need to replace the backend of <em>glint</em> with libanalyze API then outputs won't match. <br>\nThe other way to go is have a totally different grid setup function that would shoot the ray like glint does.</p>",
        "id": 130436742,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532726618
    },
    {
        "content": "<p>I'm gonna go with different grid setup.</p>",
        "id": 130436904,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532726775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> it's not as important to match the outputs of glint -- WAY more important that gqa/rtcheck give the same results</p>",
        "id": 130468195,
        "sender_full_name": "Sean",
        "timestamp": 1532785420
    },
    {
        "content": "<p>it just needs to be able to do all the same checks with similar output reporting as glint</p>",
        "id": 130468196,
        "sender_full_name": "Sean",
        "timestamp": 1532785439
    },
    {
        "content": "<p>Alright that sounds good :)</p>",
        "id": 130468296,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532785597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> some of the glint options are already in check/gqa like -- vacuum == gqa's gaps, air contiguous == gqa'a adj_air and air first+air last == gqa's exposed air ?</p>",
        "id": 130560846,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532933155
    },
    {
        "content": "<p>I had added air first and air last's callback functions to api.c but I think exposed air does it already. So I am not adding the first and last air options to <em>check</em> command. I added the unconf_air command to check</p>",
        "id": 130576853,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1532955516
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> some of the glint options are already in check/gqa like -- vacuum == gqa's gaps, air contiguous == gqa'a adj_air and air first+air last == gqa's exposed air ?</p>\n</blockquote>\n<p>I honestly am not sure -- you'd have to read their respective manual pages and/or read the source code to make sure</p>",
        "id": 130619156,
        "sender_full_name": "Sean",
        "timestamp": 1533008246
    },
    {
        "content": "<p>I am sure about vacuum and air contiguous by the source code and documentation.<br>\nBut not so sure about air_first , air_last and exposed_air<br>\naccording to gqa's documentation for exposed air  -- <em>\"made to see if the ray  encounters air regions before (or after all) solid objects\"</em> <br>\nbut the second line says -- <em>\"It also checks to see if the ray moves from a void to an air region.\"</em><br>\naccording to glint's documentation, air_first checks if <em>\"The first partition has a nonzero air code\"</em> and air_last check if <em>\"The last partition has a nonzero air code\"</em><br>\nSo exposed_air of gqa does air_first + air_last and more.</p>",
        "id": 130662315,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533061576
    },
    {
        "content": "<p>what surprises me is that I have the code as it is in glint for api.c for last_air and first_air but I am not getting the same results. Totally different results! (different regions)</p>",
        "id": 130662453,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533061748
    },
    {
        "content": "<p>I was going through rtcheck's code and discovered a bug with grid-setup when -V option was used. <br>\nLike normally the defaults are 512x512 width and height and for <em>truck.g g4</em> the default gird cell width and height comes out be 21.9221mm x 21.9221mm for 512x512 width and height.<br>\nBut when -V option is used which is used to set the width/height that is the aspect. <br>\nlike if I do -V 1/2 then the grid cell sizes comes out as 21.9221mm X  43.8422mm but the width and height remains the same as 512x512.  Shouldn't it be 256x512 according the cell sizes?</p>",
        "id": 130663512,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533062775
    },
    {
        "content": "<p>[deleted]</p>",
        "id": 130664463,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533063724
    },
    {
        "content": "<blockquote>\n<p>Shouldn't it be 256x512 according the cell sizes?</p>\n</blockquote>\n<p>Sorry, not 256x512 it should be 512x256 to make a square grid</p>",
        "id": 130665114,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533064396
    },
    {
        "content": "<p>Is this expected behaviour? What exactly is -V option used for ?</p>",
        "id": 130665444,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533064712
    },
    {
        "content": "<p>I am confused because if I had to replace the back-end of rtcheck with libanalyze/api.c the -V option should work. <br>\nI thought if it means width/height then it can related to the cell_width/cell_height ratio hence Iadded an extra variable gridRatio (<a href=\"https://sourceforge.net/p/brlcad/code/71320/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/71320/\">r71320</a>)</p>",
        "id": 130665846,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533065106
    },
    {
        "content": "<blockquote>\n<p>So exposed_air of gqa does air_first + air_last and more.</p>\n</blockquote>\n<p>This sounds about right.  I don't think there's a need to track those two separately -- gqa is doing it right combining them.</p>",
        "id": 130691871,
        "sender_full_name": "Sean",
        "timestamp": 1533098110
    },
    {
        "content": "<blockquote>\n<p>what surprises me is that I have the code as it is in glint for api.c for last_air and first_air but I am not getting the same results. Totally different results! (different regions)</p>\n</blockquote>\n<p>That said, this is concerning!  Can you see if you can figure out why?  It casts doubt on the new code doing what we expect.</p>",
        "id": 130691932,
        "sender_full_name": "Sean",
        "timestamp": 1533098167
    },
    {
        "content": "<blockquote>\n<p>Is this expected behaviour? What exactly is -V option used for ?</p>\n</blockquote>\n<p>totally expected and intended behavior.  -V is making the pixel cells rectangular -- this is important for some output formats.</p>",
        "id": 130692118,
        "sender_full_name": "Sean",
        "timestamp": 1533098429
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>what surprises me is that I have the code as it is in glint for api.c for last_air and first_air but I am not getting the same results. Totally different results! (different regions)</p>\n</blockquote>\n<p>That said, this is concerning!  Can you see if you can figure out why?  It casts doubt on the new code doing what we expect.</p>\n</blockquote>\n<p>Ok will try to find it.</p>",
        "id": 130710464,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533126687
    },
    {
        "content": "<p>I had started to work on rtcheck and using the backend as libanalyze. I had the old file which I worked on analyze_overlaps function. Here is my progress: I tested the basics and it worked. <a href=\"/user_uploads/1549/CKqg91Wh18qaq1ap9Pq6cQYo/rtcheck.c\" target=\"_blank\" title=\"rtcheck.c\">rtcheck.c</a> <br>\nAll the libanalyze functions happen in <em>rtcheck_do_frame(..)</em></p>",
        "id": 130734096,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533149735
    },
    {
        "content": "<p>This way the -M matrix commands should work like cm_ae, cm_viewsize, cm_eyept etc</p>",
        "id": 130734194,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533149848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> how's your shell scripting?  It would be great to validate check against rtcheck and gqa a bit more systematically, like looping over all top-level objects in all our sample .g files, run check vs rtcheck and check volume vs gqa -Av etc, and report any differences found</p>",
        "id": 130759710,
        "sender_full_name": "Sean",
        "timestamp": 1533187773
    },
    {
        "content": "<p>But rtcheck and gqa are available like executable programs. Can I call MGED commands as executable programs ? Or would it require a wrapper like one for gqa in src/gtools/gqa.c ?</p>",
        "id": 130759841,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533188022
    },
    {
        "content": "<p>you can run mged commands easily from a script, e.g., mged -c test.g tops</p>",
        "id": 130761536,
        "sender_full_name": "Sean",
        "timestamp": 1533191077
    },
    {
        "content": "<p>so you could run mged -c test.g check ... args ...</p>",
        "id": 130761546,
        "sender_full_name": "Sean",
        "timestamp": 1533191121
    },
    {
        "content": "<p>oh cool <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 130761595,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533191187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I just did the comparison of old rtcheck vs new rtcheck (with api.c as base) with multiview matix command on havoc. It came out pretty close :) just two extra overlaps in case <em>-a0 -e30</em> <a href=\"https://www.diffchecker.com/AkFhnk33\" target=\"_blank\" title=\"https://www.diffchecker.com/AkFhnk33\">https://www.diffchecker.com/AkFhnk33</a></p>",
        "id": 130761738,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533191442
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I just did the comparison of old rtcheck vs new rtcheck (with api.c as base) with multiview matix command on havoc. It came out pretty close :) just two extra overlaps in case <em>-a0 -e30</em> <a href=\"https://www.diffchecker.com/AkFhnk33\" target=\"_blank\" title=\"https://www.diffchecker.com/AkFhnk33\">https://www.diffchecker.com/AkFhnk33</a></p>\n</blockquote>\n<p>I'd call that a match!</p>",
        "id": 130761947,
        "sender_full_name": "Sean",
        "timestamp": 1533191795
    },
    {
        "content": "<p>however, false sense of security beware.  you have it testing a bunch of azimuths, but the sensitivity is going to be proportional to the sampling density, not necessarily the direction.  It'd be good to check a broad range of az/el like you're doing there on havoc, e.g., every 24 or 15 degrees at least through 180 az and el</p>",
        "id": 130762032,
        "sender_full_name": "Sean",
        "timestamp": 1533191997
    },
    {
        "content": "<p>but then also check default grid, then more refine down to, say, 1mm or less</p>",
        "id": 130762084,
        "sender_full_name": "Sean",
        "timestamp": 1533192056
    },
    {
        "content": "<p>yep changing the grid density may yield interesting results!</p>",
        "id": 130762159,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533192208
    },
    {
        "content": "<p>I will get started on the shell script to test these commands.</p>",
        "id": 130762300,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533192480
    },
    {
        "content": "<p>These are the scripts I have ready :<br>\n<a href=\"/user_uploads/1549/VGK7dkWMMmMoKSHq2LiTCEd7/volume_airs.sh\" target=\"_blank\" title=\"volume_airs.sh\">volume_airs.sh</a> compares the check volume, check gap, check adj_air and check exp_air with gqa's options<br>\n<a href=\"/user_uploads/1549/kidWoPhQEK6bmGhH4isUyf8m/rtcheck.sh\" target=\"_blank\" title=\"rtcheck.sh\">rtcheck.sh</a> compares oldrtcheck and new rtcheck for different values of az/el values.<br>\n<a href=\"/user_uploads/1549/hVcl7aP47l60EQr4vPRdokgM/overlaps.sh\" target=\"_blank\" title=\"overlaps.sh\">overlaps.sh</a>  ompares the ouputs of check overlaps and gqa -Ao triple grid.<br>\nGonna give it a test run. I hope my CPU won't fry with 100% usage</p>",
        "id": 130772623,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533209246
    },
    {
        "content": "<p>still a lot of work going though the diff files :(</p>",
        "id": 130774998,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533212450
    },
    {
        "content": "<p>running new rtcheck and old rtcheck twice at 5mm and 50mm spacing for 144 combinations of az/el angles for each object in all the .g files would take very long time..</p>",
        "id": 130775266,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533212789
    },
    {
        "content": "<p>[duplicated post]</p>",
        "id": 130775571,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533213175
    },
    {
        "content": "<blockquote>\n<p>These are the scripts I have ready :<br>\n<a href=\"/user_uploads/1549/VGK7dkWMMmMoKSHq2LiTCEd7/volume_airs.sh\" target=\"_blank\" title=\"volume_airs.sh\">volume_airs.sh</a> compares the check volume, check gap, check adj_air and check exp_air with gqa's options<br>\n<a href=\"/user_uploads/1549/kidWoPhQEK6bmGhH4isUyf8m/rtcheck.sh\" target=\"_blank\" title=\"rtcheck.sh\">rtcheck.sh</a> compares oldrtcheck and new rtcheck for different values of az/el values.<br>\n<a href=\"/user_uploads/1549/hVcl7aP47l60EQr4vPRdokgM/overlaps.sh\" target=\"_blank\" title=\"overlaps.sh\">overlaps.sh</a>  ompares the ouputs of check overlaps and gqa -Ao triple grid.<br>\nGonna give it a test run. I hope my CPU won't fry with 100% usage</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> would you add your scripts to the repo somewhere?  just for references/testing -- perhaps in a misc/check subfolder or regress/check subfolder</p>",
        "id": 130809502,
        "sender_full_name": "Sean",
        "timestamp": 1533256107
    },
    {
        "content": "<p>haven't looked at them yet, but how do you run them typically?  we have assets that will churn through all 144 combinations ... really fast.</p>",
        "id": 130809514,
        "sender_full_name": "Sean",
        "timestamp": 1533256154
    },
    {
        "content": "<p>Umm right now it's just running the commands and redirecting the output to files then I simply use diff command to compare the outputs of say check volume and gqa -Av. And then store the diff to a reports file for later inspection. <br>\nThe problem with that is the diff file produced will always have some content because of the difference the outputs are printed from these commands (spaces and tabs in the output not the value)<br>\nWhat needs to be done is to use regex to just extract the value and compare them. <br>\nI'll try to do that for each command specifically and then compare them right away as they happen.</p>",
        "id": 130819756,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533274947
    },
    {
        "content": "<p>For something like the overlaps list without the -P 1 option the ordering of the overlaps is not same. So in case of overlaps I need to first extract the data and then sort them. Then compare line by line.</p>",
        "id": 130820116,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533275578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> they are up in the repo now. I used sed to extract the data and compare.<br>\nI took some code from the src/tclscripts/checker/check.sh to find the cmd in installed folder.<br>\nRunning them is simply ./volume.sh for example. The output of script will show which command is running and sed output if any, It will produce some files which will get deleted at the end. A ~_report.txt file is left-off which contains any different results.</p>",
        "id": 130832889,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533294848
    },
    {
        "content": "<p>thanks I'll take a look!</p>",
        "id": 130851247,
        "sender_full_name": "Sean",
        "timestamp": 1533316493
    },
    {
        "content": "<p>have you found more differences?</p>",
        "id": 130851268,
        "sender_full_name": "Sean",
        "timestamp": 1533316514
    },
    {
        "content": "<blockquote>\n<p>have you found more differences?</p>\n</blockquote>\n<p>Not really, didn't run it extensively. Ran all the tests on g4 and everything looked good except for :<br>\ncheck overlaps and rtcheck because check overlaps reported in gqa -Ao style.<br>\nAnd gqa -Ao reports pairs if seen in reverse as one like for example - /g4/r95 /g4/r93 4 1234mm<br>\nrtcheck reported it as /g4/r95 /g4/r93 3 1234mm    /g4/r93 /g4/r95 1 12.34mm</p>\n<p>So with  <a href=\"https://sourceforge.net/p/brlcad/code/71359/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/71359/\">r71359</a> check overlaps would report like rtcheck does! but that brings the problem other way around xD check overlaps and gqa -Ao won't match in case of triple grids.<br>\nI found rtcheck overlaps reporting better and went with it. Hope that is fine :)</p>",
        "id": 130852611,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533318271
    },
    {
        "content": "<p>it is fine, that was one of the problems that made us keep rtcheck even after gqa</p>",
        "id": 130858422,
        "sender_full_name": "Sean",
        "timestamp": 1533325417
    },
    {
        "content": "<p>rtcheck has had better reporting</p>",
        "id": 130858427,
        "sender_full_name": "Sean",
        "timestamp": 1533325428
    },
    {
        "content": "<p>so when I talk about differences, I should explain that I mean any differences that are not expected or are not directly explained</p>",
        "id": 130858499,
        "sender_full_name": "Sean",
        "timestamp": 1533325505
    },
    {
        "content": "<p>so if we see A overlaps B and then encounter B overlaps A ... how do the three different tools report it?  rtcheck I thought collapsed them into one report (that was related to the bug you found)</p>",
        "id": 130858524,
        "sender_full_name": "Sean",
        "timestamp": 1533325558
    },
    {
        "content": "<blockquote>\n<p>so if we see A overlaps B and then encounter B overlaps A ... how do the three different tools report it?  rtcheck I thought collapsed them into one report (that was related to the bug you found)</p>\n</blockquote>\n<p>I went through the code for each of the tools:</p>\n<ul>\n<li>rtcheck - Yes, it collapses the overlaps into one title but shows them differently like -- </li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>/g4/r59 and /g4/r63 overlap\n    &lt;/g4/r59, /g4/r63&gt;: 13 overlaps detected, maximum depth is 0.000539005mm\n    &lt;/g4/r63, /g4/r59&gt;: 3 overlaps detected, maximum depth is 0.000539005mm\n/g4/r73 and /g4/r69 overlap\n    &lt;/g4/r73, /g4/r69&gt;: 5 overlaps detected, maximum depth is 0.000539005mm\n    &lt;/g4/r69, /g4/r73&gt;: 9 overlaps detected, maximum depth is 0.000539005mm\n</pre></div>\n\n\n<p>rtcheck prints the statistics at the end on how many overlaps it seen, how many are unique etc.<br>\nIt does not print the ihit or ohit point. Neither does it sort the overlaps in any order.</p>\n<ul>\n<li>glint - glint somehow compares the two regions like -- ( which I don't understand if it can be compared like that )</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">create_overlap</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">region</span> <span class=\"o\">*</span><span class=\"n\">r1</span><span class=\"p\">,</span> <span class=\"k\">struct</span> <span class=\"n\">region</span> <span class=\"o\">*</span><span class=\"n\">r2</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r1</span> <span class=\"o\">&lt;</span> <span class=\"n\">r2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">glo_r1</span> <span class=\"o\">=</span> <span class=\"n\">r1</span><span class=\"p\">;</span>\n       <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">glo_r2</span> <span class=\"o\">=</span> <span class=\"n\">r2</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r1</span> <span class=\"o\">&gt;</span> <span class=\"n\">r2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">glo_r1</span> <span class=\"o\">=</span> <span class=\"n\">r2</span><span class=\"p\">;</span>\n       <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">glo_r2</span> <span class=\"o\">=</span> <span class=\"n\">r1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n       <span class=\"n\">self</span> <span class=\"n\">overlap</span>\n    <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>So there is no case of A overlap B and B overlap A -- it all comes as either A overlap B or B overlap A based on the comparison.<br>\nIt does not seem to group the overlaps together instead reports them one by one, nor does it report the total count, which rtcheck does.<br>\nIt does display the ihit and ohit separately, plus there is an option to show the ray_origin (ray-&gt;r_pt). <br>\nIt can also sort the overlaps in the order of volume with -s option.  <br>\n( sample output with -s and -o option enabled -- <a href=\"https://hastebin.com/voqezehuzu\" target=\"_blank\" title=\"https://hastebin.com/voqezehuzu\">https://hastebin.com/voqezehuzu</a>)</p>\n<ul>\n<li>gqa -Ao - stands in between of glint and rtcheck -- it does not print the reverse pair separately but groups them into one pair. <br>\nIt also prints the ihit position. It does not print the overall statistics like the count. <br>\nIt does seem to insert the overlaps pair in a nice place by comparing the region names already in the overlaps list --</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">BU_LIST_FOR</span> <span class=\"p\">(</span><span class=\"n\">rp</span><span class=\"p\">,</span> <span class=\"n\">region_pair</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">list</span><span class=\"o\">-&gt;</span><span class=\"n\">l</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n       <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">bu_strcmp</span><span class=\"p\">(</span><span class=\"n\">rp</span><span class=\"o\">-&gt;</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">r1</span><span class=\"o\">-&gt;</span><span class=\"n\">reg_name</span><span class=\"p\">,</span> <span class=\"n\">r1</span><span class=\"o\">-&gt;</span><span class=\"n\">reg_name</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n           <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">BU_LIST_INSERT</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rp</span><span class=\"o\">-&gt;</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rpair</span><span class=\"o\">-&gt;</span><span class=\"n\">l</span><span class=\"p\">);</span>\n</pre></div>",
        "id": 130882759,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533372037
    },
    {
        "content": "<p>I did the documentation work related to check command and is now up on the repo :)</p>",
        "id": 130897436,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533402720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> wiki appears to be gone again :/ getting 404</p>",
        "id": 130897535,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533402897
    },
    {
        "content": "<p>not really gone, only get 404 after I add something to my log entry.</p>",
        "id": 130898403,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533404488
    },
    {
        "content": "<p>When I save the edit it opens this link - <a href=\"http://brlcad.org/wiki/User:Sharan.nyn/GSoC18/Log\" target=\"_blank\" title=\"http://brlcad.org/wiki/User:Sharan.nyn/GSoC18/Log\">http://brlcad.org/wiki/User:Sharan.nyn/GSoC18/Log</a> which seems broken<br>\nBut this works - <a href=\"http://brlcad.org/w/index.php?title=User:Sharan.nyn/GSoC18/Log\" target=\"_blank\" title=\"http://brlcad.org/w/index.php?title=User:Sharan.nyn/GSoC18/Log\">http://brlcad.org/w/index.php?title=User:Sharan.nyn/GSoC18/Log</a></p>",
        "id": 130898460,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533404582
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> wiki appears to be gone again :/ getting 404</p>\n</blockquote>\n<p>Thanks for reporting it <span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> .. there's a web service that keeps overwriting the .htaccess which controls the wiki -- trying to find where  it's happening, but please just keep reporting when you notice (server is currently taken offline as a result)</p>",
        "id": 130906640,
        "sender_full_name": "Sean",
        "timestamp": 1533423061
    },
    {
        "content": "<p>I was wondering on what to do with the <code>check_overlaps</code> command that lives in <em>libged/check_overlaps.c</em> because we have a better version of that command as a sub-command for <code>check</code> in <em>libged/check/check_overlaps.c</em>.</p>",
        "id": 130936209,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533485420
    },
    {
        "content": "<p>I could remove it and replace everywhere else as <code>check overlaps</code> but check_overlaps was my first two weeks worth of work for this project. Though it helped me implement the check command very quickly because of the experience with callback functions :)</p>",
        "id": 130936324,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533485651
    },
    {
        "content": "<p>but having two commands that essentially does the same is confusing and redundant.</p>",
        "id": 130936348,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533485740
    },
    {
        "content": "<p>there is one more problem I found -- <code>check</code> command is blocking the calls to the checker tool that is called with <code>check [-F] [filename]</code>.<br>\nRenaming and updating the documentation related to checker tool should do the trick. I was thinking something like <em>geom_checker</em> or <em>checker_tool</em>.</p>",
        "id": 130936746,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533486616
    },
    {
        "content": "<p>updating the documentation reminds me, I have to document the newly added overlaps_tool command as well! should I append this to the existing <em>doc/docbook/articles/en/overlap_tool.xml</em> ?</p>",
        "id": 130936763,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533486711
    },
    {
        "content": "<p>Should I remove all the mentioning of the <a href=\"http://check.sh\" target=\"_blank\" title=\"http://check.sh\">check.sh</a> script in the overlap_tool.xml file since there is UI replacement for it now :)</p>",
        "id": 130936803,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533486759
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 130976913,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533560224
    },
    {
        "content": "<p>sorry for the duplicate messages. Zulip on phone is buggy <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 130977245,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533560662
    },
    {
        "content": "<blockquote>\n<p>sorry for the duplicate messages. Zulip on phone is buggy <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>SO buggy!</p>",
        "id": 130983220,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533566886
    },
    {
        "content": "<blockquote>\n<p>I could remove it and replace everywhere else as <code>check overlaps</code> but check_overlaps was my first two weeks worth of work for this project. Though it helped me implement the check command very quickly because of the experience with callback functions :)</p>\n</blockquote>\n<p>It's a hard thing to learn, but it's good to learn to write code and throw it away.  There's actually a rather respected software development method where you write code, delete it, and write it again.  You invariably end up with considerably better code the second time around.</p>",
        "id": 130987650,
        "sender_full_name": "Sean",
        "timestamp": 1533571324
    },
    {
        "content": "<blockquote>\n<p>but having two commands that essentially does the same is confusing and redundant.</p>\n</blockquote>\n<p>This is the most important consideration.  Only one should be kept.</p>",
        "id": 130987665,
        "sender_full_name": "Sean",
        "timestamp": 1533571343
    },
    {
        "content": "<blockquote>\n<p>there is one more problem I found -- <code>check</code> command is blocking the calls to the checker tool that is called with <code>check [-F] [filename]</code>.<br>\nRenaming and updating the documentation related to checker tool should do the trick. I was thinking something like <em>geom_checker</em> or <em>checker_tool</em>.</p>\n</blockquote>\n<p>We don't need ... more options.  We need consolidation into fewer options.</p>",
        "id": 130987707,
        "sender_full_name": "Sean",
        "timestamp": 1533571411
    },
    {
        "content": "<p>the script can go away if everything it did is now covered by other commands.</p>",
        "id": 130987781,
        "sender_full_name": "Sean",
        "timestamp": 1533571463
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>but having two commands that essentially does the same is confusing and redundant.</p>\n</blockquote>\n<p>This is the most important consideration.  Only one should be kept.</p>\n</blockquote>\n<p>okay cool. I am on it. Will remove the older check_overlaps now</p>",
        "id": 130987958,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533571659
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>there is one more problem I found -- <code>check</code> command is blocking the calls to the checker tool that is called with <code>check [-F] [filename]</code>.<br>\nRenaming and updating the documentation related to checker tool should do the trick. I was thinking something like <em>geom_checker</em> or <em>checker_tool</em>.</p>\n</blockquote>\n<p>We don't need ... more options.  We need consolidation into fewer options.</p>\n</blockquote>\n<p>you misinterpreted me. The checker tool that lives in src/tclscripts/checker/check.tcl has the public proc and entry point named as check. So when I added the libged check command, the checker tool is not working so it needs to be renamed to something else</p>",
        "id": 130988048,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533571760
    },
    {
        "content": "<p>you misinterpret my response.  the checker tool entry point is no longer needed if it's provided for elsewhere ;)</p>",
        "id": 130988142,
        "sender_full_name": "Sean",
        "timestamp": 1533571851
    },
    {
        "content": "<p>ah that works too :)</p>",
        "id": 130988159,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533571876
    },
    {
        "content": "<p>umm one quick question.. the check command does not have a -s option to set the size like check_overlaps did.. So the menu options 50x50, 100x100, 256x256 and 512x512 cannot be used with <em>check</em> overlaps.<br>\nAny suggestions on the menu option? would something like grid-spacing work? maybe 50mm, 25mm,10mm and 1mm?</p>",
        "id": 130988455,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533572242
    },
    {
        "content": "<p>I committed like that for now..</p>",
        "id": 130991401,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533575418
    },
    {
        "content": "<p>er, so you can set the grid cell size but not the grid size??  why not just migrate that code from check_overlaps/rtcheck?</p>",
        "id": 130995068,
        "sender_full_name": "Sean",
        "timestamp": 1533579160
    },
    {
        "content": "<p>infer the grid spacing</p>",
        "id": 130995084,
        "sender_full_name": "Sean",
        "timestamp": 1533579183
    },
    {
        "content": "<p>okay will do that <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 130995225,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533579352
    },
    {
        "content": "<p>right now this is how the grid size is set -- </p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">-&gt;</span><span class=\"n\">viewsize</span><span class=\"o\">/</span><span class=\"n\">cell_width</span> <span class=\"o\">+</span> <span class=\"mf\">0.99</span><span class=\"p\">;</span>\n    <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">-&gt;</span><span class=\"n\">viewsize</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">cell_height</span> <span class=\"o\">*</span> <span class=\"n\">state</span><span class=\"o\">-&gt;</span><span class=\"n\">aspect</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mf\">0.99</span><span class=\"p\">;</span>\n</pre></div>",
        "id": 130995406,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533579517
    },
    {
        "content": "<p>will add a public function to explicitly mention the grid size and calculate the grid cell size from it like rtcheck does</p>",
        "id": 130995420,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533579548
    },
    {
        "content": "<p>okay it is done and is up, now making the respective changes to the documentation and archer</p>",
        "id": 130998722,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533583215
    },
    {
        "content": "<p>humm I am seeing this error whenever I quit from <code>mged -c</code> with <code>q</code> -- <a href=\"https://hastebin.com/raw/ikohuvurey\" target=\"_blank\" title=\"https://hastebin.com/raw/ikohuvurey\">https://hastebin.com/raw/ikohuvurey</a><br>\nhappens only when there is a database loaded</p>",
        "id": 131001770,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533586660
    },
    {
        "content": "<p>my fault, iâ€™ll fix it soon</p>",
        "id": 131004817,
        "sender_full_name": "Cezar",
        "timestamp": 1533590288
    },
    {
        "content": "<p>i think it should be fixed now</p>",
        "id": 131005499,
        "sender_full_name": "Cezar",
        "timestamp": 1533591327
    },
    {
        "content": "<p>yep that is solved :)</p>",
        "id": 131045997,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533650382
    },
    {
        "content": "<blockquote>\n<p>you misinterpret my response.  the checker tool entry point is no longer needed if it's provided for elsewhere ;)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I did it like this : <a href=\"https://hastebin.com/colebuwunu\" target=\"_blank\" title=\"https://hastebin.com/colebuwunu\">https://hastebin.com/colebuwunu</a><br>\nWere you expecting something like this? or is there any other way?</p>",
        "id": 131047570,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533652057
    },
    {
        "content": "<p>removing check from check.tcl will break the <em>src/tclscripts/checker/test_checker.tcl</em>.</p>",
        "id": 131048325,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533652915
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> I have attempted to make gqa's base as libanalyze/api.c -- <a href=\"/user_uploads/1549/FUI7YLK0oq2aOcOEUG5FAepV/gqa.c\" target=\"_blank\" title=\"gqa.c\">gqa.c</a></p>",
        "id": 131118526,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533745731
    },
    {
        "content": "<p>I was looking for ways to collect all the work I have done (commits and patches) into one big patch so that I can submit for final evaluation. Any tips on how to do that?</p>",
        "id": 131118670,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533745894
    },
    {
        "content": "<blockquote>\n<p>I was looking for ways to collect all the work I have done (commits and patches) into one big patch so that I can submit for final evaluation. Any tips on how to do that?</p>\n</blockquote>\n<p>Hmm, Google recommends a blog post (I would recommend to do this somewhere below <a href=\"https://brlcad.org/wiki/User:Sharan.nyn\" target=\"_blank\" title=\"https://brlcad.org/wiki/User:Sharan.nyn\">https://brlcad.org/wiki/User:Sharan.nyn</a>) with links to the commits you made. I.e. you could link there to your development log page which contains all the links to your commits. You could there include my commits of your patches too.</p>\n<p>In addition, you could attach a separate zip or tar file with the most relevant files which you worked on almost exclusively (rtcheck, linged's check command, etc.) to your blog post.</p>",
        "id": 131119464,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1533746848
    },
    {
        "content": "<blockquote>\n<p>Hmm, Google recommends a blog post (I would recommend to do this somewhere below <a href=\"https://brlcad.org/wiki/User:Sharan.nyn\" target=\"_blank\" title=\"https://brlcad.org/wiki/User:Sharan.nyn\">https://brlcad.org/wiki/User:Sharan.nyn</a>) with links to the commits you made. I.e. you could link there to your development log page which contains all the links to your commits. You could there include my commits of your patches too.</p>\n</blockquote>\n<p>yeah that sounds good.  I am already keeping track of my commits on my log page, I will add more details. </p>\n<blockquote>\n<p>In addition, you could attach a separate zip or tar file with the most relevant files which you worked on almost exclusively (rtcheck, linged's check command, etc.) to your blog post.</p>\n</blockquote>\n<p>This also is a good idea.<br>\nThanks for the tips :)</p>",
        "id": 131119662,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533747118
    },
    {
        "content": "<p>I believe now what remains to do is -- documenting the overlaps_tool.</p>",
        "id": 131119865,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533747354
    },
    {
        "content": "<blockquote>\n<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> I have attempted to make gqa's base as libanalyze/api.c -- <a href=\"/user_uploads/1549/FUI7YLK0oq2aOcOEUG5FAepV/gqa.c\" target=\"_blank\" title=\"gqa.c\">gqa.c</a></p>\n</blockquote>\n<p>:) You file is much smaller then the current one. And, it's desirable to use the libanalyze methods wherever possible.<br>\nHow does your implementation behave compered to the old one?</p>",
        "id": 131120301,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1533747853
    },
    {
        "content": "<p>works almost fully like old gqa</p>",
        "id": 131120393,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533747973
    },
    {
        "content": "<p>In the testings I did the order of the outputs does not match like the -- overlap messages</p>",
        "id": 131120409,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533748009
    },
    {
        "content": "<p>in new implementation it gets printed by bu_log</p>",
        "id": 131120421,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533748025
    },
    {
        "content": "<p>but old gqa did it with gedp-&gt;result str</p>",
        "id": 131120427,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533748036
    },
    {
        "content": "<p>one more difference is related to overlaps list</p>",
        "id": 131120438,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533748066
    },
    {
        "content": "<p>Sean had asked me to not keep the stopping of grid refinement like when -g50,2 is mentioned then it should run full till 2mm and then report overlaps</p>",
        "id": 131120499,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533748116
    },
    {
        "content": "<p>to sum up the order of printing information can be different and some features related to stopping of grid refinement may not work</p>",
        "id": 131120833,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533748495
    },
    {
        "content": "<p>but the required information like the values are same as the old gqa :)</p>",
        "id": 131120873,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533748544
    },
    {
        "content": "<blockquote>\n<p>in new implementation it gets printed by bu_log</p>\n</blockquote>\n<p>??? Shouldn't the result text be written to ged_result_str?</p>",
        "id": 131121051,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1533748738
    },
    {
        "content": "<p>oh not that, the result str i.e the list of overlaps <em>when -Ao</em> is chosen is printed fine</p>",
        "id": 131121066,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533748777
    },
    {
        "content": "<blockquote>\n<p>to sum up the order of printing information can be different and some features related to stopping of grid refinement may not work</p>\n<p>but the required information like the values are same as the old gqa :)</p>\n</blockquote>\n<p>This sounds good :)</p>",
        "id": 131121070,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1533748800
    },
    {
        "content": "<p>but when other analysis options like -Av is selected and there are overlaps in the geometry they are printed in one line without much info</p>",
        "id": 131121129,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533748837
    },
    {
        "content": "<p><a href=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/libged/gqa.c#l903\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/libged/gqa.c#l903\">https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/libged/gqa.c#l903</a></p>",
        "id": 131121234,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533749018
    },
    {
        "content": "<p>this line of code</p>",
        "id": 131121237,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533749023
    },
    {
        "content": "<p>since it is done in overlap routine which is handled in api.c I can print it with bu_log</p>",
        "id": 131121288,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533749051
    },
    {
        "content": "<p><a href=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/libanalyze/api.c#l479\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/libanalyze/api.c#l479\">https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/libanalyze/api.c#l479</a> in api.c</p>",
        "id": 131121327,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533749134
    },
    {
        "content": "<p>here is where I print it in main thread -- <a href=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/libanalyze/api.c#l1415\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/libanalyze/api.c#l1415\">https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/libanalyze/api.c#l1415</a></p>",
        "id": 131121377,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533749165
    },
    {
        "content": "<p>Well, for me it's OK to handle them this way. The overlaps are only of additional information here.</p>",
        "id": 131121832,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1533749663
    },
    {
        "content": "<p>yep! according to man page if such messages are print then the values reported in analysis must be discarded as they can be inaccurate.</p>",
        "id": 131121872,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533749754
    },
    {
        "content": "<blockquote>\n<p>I had started to work on rtcheck and using the backend as libanalyze. I had the old file which I worked on analyze_overlaps function. Here is my progress: I tested the basics and it worked. <a href=\"/user_uploads/1549/CKqg91Wh18qaq1ap9Pq6cQYo/rtcheck.c\" target=\"_blank\" title=\"rtcheck.c\">rtcheck.c</a> <br>\nAll the libanalyze functions happen in <em>rtcheck_do_frame(..)</em></p>\n</blockquote>\n<p>here is rtcheck I messaged this on aug 2 -- this works pretty good for havoc.g</p>",
        "id": 131122057,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533749941
    },
    {
        "content": "<p>I had done some more changes to the file locally, but there is a power cut here so I cannot access my PC to get that file :/</p>",
        "id": 131122160,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533750025
    },
    {
        "content": "<blockquote>\n<p>I had done some more changes to the file locally, but there is a power cut here so I cannot access my PC to get that file :/</p>\n</blockquote>\n<p>Maybe, you should call it a day?</p>",
        "id": 131122564,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1533750483
    },
    {
        "content": "<p>to keep the functionality of the -M commands had to keep the rtip. Plus there are commands that set the viewsize, eye model etc. Hence instead of passing of the AE angle and using the setup ae on libanalyze side I kept the setup AE on rt side and passed the information with a function that sets the viewsize, eye model and orientation matrix</p>",
        "id": 131122733,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533750619
    },
    {
        "content": "<p>This sounds reasonable.</p>",
        "id": 131122780,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1533750663
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I had done some more changes to the file locally, but there is a power cut here so I cannot access my PC to get that file :/</p>\n</blockquote>\n<p>Maybe, you should call it a day?</p>\n</blockquote>\n<p>yep :D alright then will get back to you</p>",
        "id": 131122876,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533750729
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>you misinterpret my response.  the checker tool entry point is no longer needed if it's provided for elsewhere ;)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I did it like this : <a href=\"https://hastebin.com/colebuwunu\" target=\"_blank\" title=\"https://hastebin.com/colebuwunu\">https://hastebin.com/colebuwunu</a><br>\nWere you expecting something like this? or is there any other way?</p>\n</blockquote>\n<p>something like that, yes, maybe even a way to kick off the gui still from the command-line but from the new tool and only when tk is available?</p>",
        "id": 131153351,
        "sender_full_name": "Sean",
        "timestamp": 1533795627
    },
    {
        "content": "<blockquote>\n<p>Sean had asked me to not keep the stopping of grid refinement like when -g50,2 is mentioned then it should run full till 2mm and then report overlaps</p>\n</blockquote>\n<p>yes, gqa is stupid in this regard -- it will halt at 50 if it finds overlaps.  it only refines if it finds none which means if you want to guarantee overlaps down to Xmm (which is the common case), you need to run it over and over or specify differently -g2,2;  ideally, it would be better if it displayed overlaps incrementally and interruptibly for a specification like 50,2</p>",
        "id": 131153939,
        "sender_full_name": "Sean",
        "timestamp": 1533796741
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I did it like this : <a href=\"https://hastebin.com/colebuwunu\" target=\"_blank\" title=\"https://hastebin.com/colebuwunu\">https://hastebin.com/colebuwunu</a><br>\nWere you expecting something like this? or is there any other way?</p>\n</blockquote>\n<p>something like that, yes, maybe even a way to kick off the gui still from the command-line but from the new tool and only when tk is available?</p>\n</blockquote>\n<p>okay I committed it, To run the gui directly I had the usage like <code>overlaps_tool [-F] file.overlaps</code>.<br>\nI tried to find out way to execute it only tk is available. I ran into the winset command which returns a pathname of the mged window. If I keep $parent as the output from winset command, then it would throw an error when tk is not available (ran mged -c in nu mode).</p>",
        "id": 131184955,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533834157
    },
    {
        "content": "<p>humm also the global variable mged_players only exists when tk is available (?)</p>",
        "id": 131185780,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533835124
    },
    {
        "content": "<blockquote>\n<p>I had done some more changes to the file locally, but there is a power cut here so I cannot access my PC to get that file :/</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> the only change I did was add the <code>analyze_set_ncpu(state, npsw)</code> because -P option was not working without</p>",
        "id": 131187088,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533836656
    },
    {
        "content": "<p>I donâ€™t recall what the best mechanism is for determining whether thereâ€™s a GUI, but I do know there are a few places in the code that do that ( maybe search on â€˜catchâ€™ ).</p>",
        "id": 131189032,
        "sender_full_name": "Sean",
        "timestamp": 1533838854
    },
    {
        "content": "<p>hmm could not find anything with catch</p>",
        "id": 131222449,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533887177
    },
    {
        "content": "<p>but this seems to be what we are looking for ? <a href=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/tclscripts/mged/overlap.tcl#l492\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/tclscripts/mged/overlap.tcl#l492\">https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/tclscripts/mged/overlap.tcl#l492</a></p>",
        "id": 131222460,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533887203
    },
    {
        "content": "<p>I added the report for the project here - <a href=\"https://brlcad.org/wiki/User:Sharan.nyn/GSoC18/Report\" target=\"_blank\" title=\"https://brlcad.org/wiki/User:Sharan.nyn/GSoC18/Report\">https://brlcad.org/wiki/User:Sharan.nyn/GSoC18/Report</a></p>",
        "id": 131237077,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533907601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  I still have to add the files which I worked on excursively, where should I upload them ?</p>",
        "id": 131237091,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533907649
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  I still have to add the files which I worked on excursively, where should I upload them ?</p>\n</blockquote>\n<p>Can you attach the zip or tar file to your report at <a href=\"https://brlcad.org/wiki/User:Sharan.nyn/GSoC18/Report\" target=\"_blank\" title=\"https://brlcad.org/wiki/User:Sharan.nyn/GSoC18/Report\">https://brlcad.org/wiki/User:Sharan.nyn/GSoC18/Report</a> similar to the Overlaps_tool_final.png image?</p>",
        "id": 131237918,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1533908648
    },
    {
        "content": "<p>okay will do</p>",
        "id": 131834400,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533919653
    },
    {
        "content": "<p>should I submit the rtcheck and gqa as patches ?</p>",
        "id": 131834450,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533919718
    },
    {
        "content": "<blockquote>\n<p>should I submit the rtcheck and gqa as patches ?</p>\n</blockquote>\n<p>In my opinion you could submit them but <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> knows more about the people who are actually using these tools and how they are influenced by the changes.</p>",
        "id": 131834795,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1533920196
    },
    {
        "content": "<p>hmm yeah, that is why I did not commit them. :)<br>\nOr maybe I will just include them as tar in my report?</p>",
        "id": 131834878,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533920300
    },
    {
        "content": "<p>hmm <code>\".gz\" is not a permitted file type. Permitted file types are png, jpg, jpeg, svn, gif, svg, pdf.</code></p>",
        "id": 131835105,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533920616
    },
    {
        "content": "<p>on wiki</p>",
        "id": 131835111,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533920628
    },
    {
        "content": "<p>You can always include them in the tarball. It's a result of you GSoC work. There is only a little question if it can be used in the official distribution.</p>",
        "id": 131835158,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1533920650
    },
    {
        "content": "<blockquote>\n<p>hmm <code>\".gz\" is not a permitted file type. Permitted file types are png, jpg, jpeg, svn, gif, svg, pdf.</code></p>\n</blockquote>\n<p><span class=\"emoji emoji-1f914\" title=\"thinking\">:thinking:</span> Do you have access to another server where you can upload the tarball and include a link to it in your report?</p>",
        "id": 131835384,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1533920963
    },
    {
        "content": "<p>no, I don't have access to any other servers :/. I can upload it google drive.</p>",
        "id": 131835585,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533921194
    },
    {
        "content": "<p>Yes, creating a public folder in Google Drive is among the Good Examples in Google's guidelines.</p>",
        "id": 131835830,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1533921523
    },
    {
        "content": "<p>okay :) that would be perfect.</p>",
        "id": 131835861,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533921584
    },
    {
        "content": "<p>done!</p>",
        "id": 131836233,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1533922032
    },
    {
        "content": "<p>just completed the documentation work related to overlaps tool</p>",
        "id": 131988536,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1534062936
    },
    {
        "content": "<p>added some screenshots</p>",
        "id": 131988580,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1534062963
    },
    {
        "content": "<p>Nice Report :)</p>",
        "id": 132005606,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1534096252
    },
    {
        "content": "<p>thanks</p>",
        "id": 132005616,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1534096293
    },
    {
        "content": "<p>That's strange: Calling <code>check overlaps</code> makes my laptop sound like an old floppy disk. It has an SSD.</p>",
        "id": 132005618,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1534096312
    },
    {
        "content": "<p>I didn't get you</p>",
        "id": 132005723,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1534096460
    },
    {
        "content": "<p>My laptop starts making noise which reminds me on a floppy disk drive. I've no explanation for it. Beside the fan the computer shouldn't have moving parts.<br>\nMaybe a side effect on the audio subsystem caused by an unusual CPU load? (no idea)</p>",
        "id": 132005927,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1534096852
    },
    {
        "content": "<p>That's strange indeed :D</p>",
        "id": 132005987,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1534096957
    },
    {
        "content": "<p>Nothing what should bother you <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 132006066,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1534097049
    },
    {
        "content": "<blockquote>\n<p>added some screenshots</p>\n</blockquote>\n<p>awesome!  i wonder if there's a way we could take advantage of your animated gifs ... thoughts?  maybe a gif that works as a screenshot but then is animated when viewed / embedded in html browser form.</p>",
        "id": 132064405,
        "sender_full_name": "Sean",
        "timestamp": 1534185706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> I think check_overlaps is still registered somewhere?  there was a \"make test\" failure on the 'regress-mged' test that mentions it.</p>",
        "id": 132064603,
        "sender_full_name": "Sean",
        "timestamp": 1534185891
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> I think check_overlaps is still registered somewhere?  there was a \"make test\" failure on the 'regress-mged' test that mentions it.</p>\n</blockquote>\n<p>hmm it seems to be working for me.. Output of <code>make test</code> : <a href=\"https://hastebin.com/fiwemofawe\" target=\"_blank\" title=\"https://hastebin.com/fiwemofawe\">https://hastebin.com/fiwemofawe</a></p>",
        "id": 132109014,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1534251563
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>added some screenshots</p>\n</blockquote>\n<p>awesome!  i wonder if there's a way we could take advantage of your animated gifs ... thoughts?  maybe a gif that works as a screenshot but then is animated when viewed / embedded in html browser form.</p>\n</blockquote>\n<p>That sounds like a good idea ;)<br>\nI replaced the second image with the GIF file and it animates when I open the HTML file in chrome. <br>\nBut I didn't get the idea of it working as a screenshot <span class=\"emoji emoji-1f914\" title=\"thinking\">:thinking:</span>, Are there any other ways these documentation files are viewed ?</p>",
        "id": 132110484,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1534253026
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> I think check_overlaps is still registered somewhere?  there was a \"make test\" failure on the 'regress-mged' test that mentions it.</p>\n</blockquote>\n<p>hmm it seems to be working for me.. Output of <code>make test</code> : <a href=\"https://hastebin.com/fiwemofawe\" target=\"_blank\" title=\"https://hastebin.com/fiwemofawe\">https://hastebin.com/fiwemofawe</a></p>\n</blockquote>\n<p>hum, maybe an out-of-date tclIndex or something on my end.  I'll retry with a fresh build.  thanks for checking <span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span></p>",
        "id": 132188093,
        "sender_full_name": "Sean",
        "timestamp": 1534354799
    },
    {
        "content": "<blockquote>\n<p>I replaced the second image with the GIF file and it animates when I open the HTML file in chrome. </p>\n</blockquote>\n<p>Cool.</p>\n<blockquote>\n<p>But I didn't get the idea of it working as a screenshot <span class=\"emoji emoji-1f914\" title=\"thinking\">:thinking:</span>, Are there any other ways these documentation files are viewed ?</p>\n</blockquote>\n<p>Yes, some of the docs are viewable in the documentation browser (which I think you have to run from archer to get the full interface).  it has an embedded html browser, but it's very simple</p>",
        "id": 132188219,
        "sender_full_name": "Sean",
        "timestamp": 1534354919
    },
    {
        "content": "<p>I added the entry in the toc.html file and viewed it from archer's doc browser. It worked as an image in the documentation browser but works as a GIF in chrome when the html file is opened directly.</p>",
        "id": 132309676,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1534520141
    },
    {
        "content": "<p>I committed the changes</p>",
        "id": 132309677,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1534520147
    },
    {
        "content": "<p>having difficulties with internet connectivity and power due to floods in my state, I will be back after everything is normal here :)</p>",
        "id": 132309848,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1534520291
    },
    {
        "content": "<p>PNG didn't work in chrome?  That doesn't sound right...</p>",
        "id": 132356201,
        "sender_full_name": "starseeker",
        "timestamp": 1534590875
    },
    {
        "content": "<p>The other way round: They say GIF isn't working in BRL-CAD's documentation browsers.</p>",
        "id": 132366450,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1534608641
    },
    {
        "content": "<p>GIF works but it does not animate, looks still like a image</p>",
        "id": 132435514,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1534743979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> GIF won't work in the native Tcl/Tk help browser (or at least, I wouldn't expect it to).</p>",
        "id": 132512631,
        "sender_full_name": "starseeker",
        "timestamp": 1534852056
    }
]