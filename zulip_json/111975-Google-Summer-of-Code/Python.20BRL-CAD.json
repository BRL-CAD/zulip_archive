[
    {
        "content": "<p>Hey,<br>\nI wanted to ask if no one yet is assigned the task python-brlcad task and wanted to add a proposal for the same. I am a former Code in finalist and have some experience with working with brlcad and for other open source organizations as well. Hope I am not too late and the task hasn't been assigned yet.</p>",
        "id": 124161838,
        "sender_full_name": "Aditya Gulati",
        "timestamp": 1521923133
    },
    {
        "content": "<p>Hello, <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  . congrats on being a part of the community !  For the start, can we have your database updated on <a href=\"http://brlcad.org/wiki/Google_Summer_of_Code/2018\" target=\"_blank\" title=\"http://brlcad.org/wiki/Google_Summer_of_Code/2018\">http://brlcad.org/wiki/Google_Summer_of_Code/2018</a> . Plus it is a good practice to maintain regular dev logs, and we've been following this for long. I suggest doing this first and then coming up with a prototype for immediate next task you are planning to do.</p>",
        "id": 125666579,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1524653874
    },
    {
        "content": "<p>Oops, posted in the wrong stream! :(</p>\n<p>Hey @Shubham Rathore Thanks a ton!<br>\nYea sure thing, it'll be up and updated soon.<br>\nWould you recommend hosting the devlogs on BRL-CAD's website or would you recommend using an external page (maybe a blog or a <a href=\"http://github.io\" target=\"_blank\" title=\"http://github.io\">github.io</a> page)<br>\nI'm on the verge of completion of my sessionals at university in a couple of days. I'll start work on formalizing the project, latest by the 1st of May. :)</p>",
        "id": 125666706,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1524654112
    },
    {
        "content": "<p>all we need are dev logs ! Up to you :)</p>",
        "id": 125707449,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1524717803
    },
    {
        "content": "<p>Sure thing! <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span></p>",
        "id": 126211887,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525693420
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , I've pushed introduce a new primitive (ell) and also given an example for the same. <a href=\"https://github.com/Killthebug/python-brlcad-tcl/commit/a0973c5b42615e0ef53ba9c876ee14992e1df937\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad-tcl/commit/a0973c5b42615e0ef53ba9c876ee14992e1df937\">https://github.com/Killthebug/python-brlcad-tcl/commit/a0973c5b42615e0ef53ba9c876ee14992e1df937</a><br>\nIf this looks good, I can start working on integrating the other primitives as well :)</p>",
        "id": 126213639,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525696786
    },
    {
        "content": "<blockquote>\n<p>Hey <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , I've pushed introduce a new primitive (ell) and also given an example for the same. <a href=\"https://github.com/Killthebug/python-brlcad-tcl/commit/a0973c5b42615e0ef53ba9c876ee14992e1df937\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad-tcl/commit/a0973c5b42615e0ef53ba9c876ee14992e1df937\">https://github.com/Killthebug/python-brlcad-tcl/commit/a0973c5b42615e0ef53ba9c876ee14992e1df937</a><br>\nIf this looks good, I can start working on integrating the other primitives as well :)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> you mentioned it earlier but can you explain again the difference with the different approaches being taken?  also, do you have a write-up of your project plan posted up somewhere?</p>",
        "id": 126224966,
        "sender_full_name": "Sean",
        "timestamp": 1525714545
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , you can find a write-up of the project plan at : <a href=\"https://brlcad.org/wiki/User:Schindler97/GSoC18/Project\" target=\"_blank\" title=\"https://brlcad.org/wiki/User:Schindler97/GSoC18/Project\">https://brlcad.org/wiki/User:Schindler97/GSoC18/Project</a></p>",
        "id": 126255868,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525769979
    },
    {
        "content": "<p>So, the original version of python brlcad (as developed by Kanzure in 2014) involved using ctypesgen. What ctypesgen does is that it allows you to load a DLL, dynamic-link library on Windows, shared libraries .so on Linux (or a dylib on macOS) and call functions from these libraries, directly from Python.</p>",
        "id": 126255990,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525770172
    },
    {
        "content": "<p>Now there are a couple of issues with using ctypesgen :<br>\n1. It sometimes has platform specific code<br>\n2. These bindings are brlcad version dependent, we figured this out when we saw errors in working with the original bindings on the latest SVN builds.</p>",
        "id": 126256204,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525770495
    },
    {
        "content": "<p>The other approach as developed by nmz787 (the one I propose we use) is fairly straight forward. You can have individual files that creates a tcl file (of either a simple primitive or a complicated shape involving multiple primitives), then sends the tcl file to mged. This then creates and populates a .g file database, then the .g file is converted with g-stl to produce an STL file.</p>",
        "id": 126256283,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525770660
    },
    {
        "content": "<p>Introducing newer primitives and also creating newer shapes in this approach is less complicated than the original approach. One advantage of this approach is that it does not need to interact with the brlcad binary, hence also making it (in a way) version independent.</p>",
        "id": 126256346,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525770766
    },
    {
        "content": "<p>Also, we use TCL just to write intermediate conversions</p>",
        "id": 126256361,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525770830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , procedural geometry objects sounds like a good idea. Could you please elaborate more on that? I have a feeling that the tcl based approach does solve the problem of creating database objects that are described at run-time.</p>",
        "id": 126256748,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525771531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> thanks for the background, very helpful</p>",
        "id": 126297745,
        "sender_full_name": "Sean",
        "timestamp": 1525838444
    },
    {
        "content": "<p>Sure thing :)</p>",
        "id": 126297754,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525838468
    },
    {
        "content": "<p>so it sounds like there are several considerations to make then, especially with procedural objects being a primary desirable feature</p>",
        "id": 126297802,
        "sender_full_name": "Sean",
        "timestamp": 1525838570
    },
    {
        "content": "<p>Yea, though I'm still a little in the dark about how procedural objects work.</p>",
        "id": 126297810,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525838626
    },
    {
        "content": "<p>a couple observations first though -- you said the ctypesgen bindings are version dependent but that is also true of calling mged -- it's just as likely that a ged command syntax will change</p>",
        "id": 126297850,
        "sender_full_name": "Sean",
        "timestamp": 1525838646
    },
    {
        "content": "<p>Oh! I wasn't aware of that</p>",
        "id": 126297853,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525838686
    },
    {
        "content": "<p>the main difference being that with one you'll get a compile-time error about the change and the other, you just get bad runtime behavior</p>",
        "id": 126297854,
        "sender_full_name": "Sean",
        "timestamp": 1525838687
    },
    {
        "content": "<p>How often would the ged command syntax change (is there a way to predict this?)?</p>",
        "id": 126297871,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525838750
    },
    {
        "content": "<blockquote>\n<p>Yea, though I'm still a little in the dark about how procedural objects work.</p>\n</blockquote>\n<p>so they currently don't -- this is a feature that doesn't yet exist but has been on our todo for years, incredibly powerful</p>",
        "id": 126297872,
        "sender_full_name": "Sean",
        "timestamp": 1525838753
    },
    {
        "content": "<p>there's no way to predict ged command changes -- they change all the time just like API changes all the time</p>",
        "id": 126297914,
        "sender_full_name": "Sean",
        "timestamp": 1525838790
    },
    {
        "content": "<p>Uh okay!</p>",
        "id": 126297915,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525838800
    },
    {
        "content": "<p>so for understanding procedural objects, have you gone through the tutorials?</p>",
        "id": 126297922,
        "sender_full_name": "Sean",
        "timestamp": 1525838826
    },
    {
        "content": "<p>created some geometry</p>",
        "id": 126297924,
        "sender_full_name": "Sean",
        "timestamp": 1525838834
    },
    {
        "content": "<p>Yea, I have</p>",
        "id": 126297929,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525838873
    },
    {
        "content": "<p>Though not for \"understanding procedural objects\", I was just trying to get a feel of how mged works and what all it can do</p>",
        "id": 126297971,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525838905
    },
    {
        "content": "<p>suggest taking a few hours to get through all of the Introduction to MGED tutorials -- they take less than a day but introduce you to basic terminology and concepts used throughout BRL-CAD</p>",
        "id": 126297975,
        "sender_full_name": "Sean",
        "timestamp": 1525838919
    },
    {
        "content": "<p>it's at <a href=\"http://brlcad.org/wiki/Documentation\" target=\"_blank\" title=\"http://brlcad.org/wiki/Documentation\">http://brlcad.org/wiki/Documentation</a></p>",
        "id": 126297977,
        "sender_full_name": "Sean",
        "timestamp": 1525838930
    },
    {
        "content": "<p>Sure thing!<br>\nI've gone through Chapters 1-3 at <a href=\"http://brlcad.org/VolumeII-Introduction_to_MGED.pdf\" target=\"_blank\" title=\"http://brlcad.org/VolumeII-Introduction_to_MGED.pdf\">http://brlcad.org/VolumeII-Introduction_to_MGED.pdf</a></p>",
        "id": 126298031,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525839044
    },
    {
        "content": "<p>excellent, if you can make it through all 16 that will help a fair bit</p>",
        "id": 126298036,
        "sender_full_name": "Sean",
        "timestamp": 1525839065
    },
    {
        "content": "<p>they're not the most exciting, but part of learning the terminology is through use, exposure, and repetition</p>",
        "id": 126298042,
        "sender_full_name": "Sean",
        "timestamp": 1525839095
    },
    {
        "content": "<p>I could definitely do that. Probably make some fun stuff along the way as well :P</p>",
        "id": 126298080,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525839125
    },
    {
        "content": "<p>modeling your own thing after going through the tutorials is something I've found very effective as a next step</p>",
        "id": 126298101,
        "sender_full_name": "Sean",
        "timestamp": 1525839208
    },
    {
        "content": "<p>so back to procedural objects -- check out the section in the TODO file for starters</p>",
        "id": 126298145,
        "sender_full_name": "Sean",
        "timestamp": 1525839273
    },
    {
        "content": "<p>it might not all make sense if you've only gotten through lessons 1-3, but it's a short section</p>",
        "id": 126298152,
        "sender_full_name": "Sean",
        "timestamp": 1525839320
    },
    {
        "content": "<p>I get the part until \"similar to shader, material, and other object constructs\", after that it's difficult to grasp</p>",
        "id": 126298199,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525839401
    },
    {
        "content": "<p>So, I imagine something like an interactive shape creator?</p>",
        "id": 126298201,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525839421
    },
    {
        "content": "<p><em>nods</em></p>",
        "id": 126298202,
        "sender_full_name": "Sean",
        "timestamp": 1525839423
    },
    {
        "content": "<p>sort of</p>\n<p>the general idea is to have an object that is fully defined by a script</p>",
        "id": 126298210,
        "sender_full_name": "Sean",
        "timestamp": 1525839464
    },
    {
        "content": "<p>Where in the user could request a cube and then the system prompts the user asking him for the dimensions of the cube.<br>\nSimilarly, he can then add more and more primitives to create a complicated shape.</p>",
        "id": 126298214,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525839470
    },
    {
        "content": "<p>So this script is also a template of sorts in which you can fill up different values at runtime right?</p>",
        "id": 126298257,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525839523
    },
    {
        "content": "<p>I mean, the script would generate placeholders and get the user to fill them in</p>",
        "id": 126298262,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525839545
    },
    {
        "content": "<p>it could take inputs</p>",
        "id": 126298265,
        "sender_full_name": "Sean",
        "timestamp": 1525839560
    },
    {
        "content": "<p>so yes, sort of</p>",
        "id": 126298266,
        "sender_full_name": "Sean",
        "timestamp": 1525839578
    },
    {
        "content": "<p>it could also take no inputs and just generate something via a script</p>",
        "id": 126298308,
        "sender_full_name": "Sean",
        "timestamp": 1525839603
    },
    {
        "content": "<p>do you know any shell scripting?</p>",
        "id": 126298313,
        "sender_full_name": "Sean",
        "timestamp": 1525839619
    },
    {
        "content": "<p>Oh okay<br>\nAnd the script could be a tcl script?</p>",
        "id": 126298314,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525839626
    },
    {
        "content": "<p>Yea, I can work my way around a linux system fairly decently</p>",
        "id": 126298315,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525839643
    },
    {
        "content": "<p>have you seen this -- <a href=\"http://brlcad.org/wiki/SGI_Cube\" target=\"_blank\" title=\"http://brlcad.org/wiki/SGI_Cube\">http://brlcad.org/wiki/SGI_Cube</a> ?</p>",
        "id": 126298316,
        "sender_full_name": "Sean",
        "timestamp": 1525839646
    },
    {
        "content": "<p>ignore everything after RENDER THE CUBE</p>",
        "id": 126298323,
        "sender_full_name": "Sean",
        "timestamp": 1525839715
    },
    {
        "content": "<p>basically that script is just some simple shell scripting that invokes mged commands (not unlike what nmz was doing in python) to create geometry</p>",
        "id": 126298366,
        "sender_full_name": "Sean",
        "timestamp": 1525839783
    },
    {
        "content": "<p>now you can hopefully easily imagine that script in python form (in fact it might be an interesting exercise to replicate the script in python)</p>",
        "id": 126298424,
        "sender_full_name": "Sean",
        "timestamp": 1525839921
    },
    {
        "content": "<p>as all it is doing is creating a bunch of rcc's and sph's using the ged 'in' command, and then grouping it all together</p>",
        "id": 126298468,
        "sender_full_name": "Sean",
        "timestamp": 1525839985
    },
    {
        "content": "<p>Yea, the script makes sense!</p>",
        "id": 126298469,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525839998
    },
    {
        "content": "<p>what does the -c \"classic console mode\" do?</p>",
        "id": 126298474,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840030
    },
    {
        "content": "<p>that just tells mged to not even worry about starting up a GUI</p>",
        "id": 126298477,
        "sender_full_name": "Sean",
        "timestamp": 1525840044
    },
    {
        "content": "<p>classic mode aka command mode</p>",
        "id": 126298479,
        "sender_full_name": "Sean",
        "timestamp": 1525840070
    },
    {
        "content": "<p>Ah! Alright</p>",
        "id": 126298514,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840083
    },
    {
        "content": "<p>now here's the trick</p>",
        "id": 126298519,
        "sender_full_name": "Sean",
        "timestamp": 1525840108
    },
    {
        "content": "<p>INSTEAD of a file outside of mged run through an interpreter that invokes mged ...</p>",
        "id": 126298520,
        "sender_full_name": "Sean",
        "timestamp": 1525840141
    },
    {
        "content": "<p>imagine the script inside a .g file as an object, and that is run by an interpreter mged (or librt) invokes</p>",
        "id": 126298526,
        "sender_full_name": "Sean",
        "timestamp": 1525840196
    },
    {
        "content": "<p>I'm trying hard to wrap my head around this</p>",
        "id": 126298570,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840214
    },
    {
        "content": "<p>:)</p>",
        "id": 126298571,
        "sender_full_name": "Sean",
        "timestamp": 1525840218
    },
    {
        "content": "<p>maybe let's try a simple example .. I'm going to create a procedure that makes a unit sphere, that's all it does</p>",
        "id": 126298578,
        "sender_full_name": "Sean",
        "timestamp": 1525840270
    },
    {
        "content": "<p>Alright<br>\nThis is a bash script, let's assume that for now?</p>",
        "id": 126298582,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840288
    },
    {
        "content": "<p>doesn't really matter -- it can be a python script</p>",
        "id": 126298584,
        "sender_full_name": "Sean",
        "timestamp": 1525840303
    },
    {
        "content": "<p>Alright</p>",
        "id": 126298585,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840311
    },
    {
        "content": "<p>if it's a #!/bin/bash script, it would be a one-liner that said something like  mged -c temp.g in sph sph 0 0 0 0 0 1 1000</p>",
        "id": 126298631,
        "sender_full_name": "Sean",
        "timestamp": 1525840401
    },
    {
        "content": "<p>not very clever, it just makes a sphere at the origin (0,0,0) of size 1000mm (1m)</p>",
        "id": 126298632,
        "sender_full_name": "Sean",
        "timestamp": 1525840431
    },
    {
        "content": "<p>in python, what would that look like currently?</p>",
        "id": 126298670,
        "sender_full_name": "Sean",
        "timestamp": 1525840445
    },
    {
        "content": "<p>Uhm, we could access mged using subprocess</p>",
        "id": 126298676,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840486
    },
    {
        "content": "<p>that's under the hood -- what would the python look like?</p>",
        "id": 126298683,
        "sender_full_name": "Sean",
        "timestamp": 1525840510
    },
    {
        "content": "<p>the script</p>",
        "id": 126298685,
        "sender_full_name": "Sean",
        "timestamp": 1525840516
    },
    {
        "content": "<p>there's currently no wrapper or encapsulation for shell script, so we call mged directly</p>",
        "id": 126298687,
        "sender_full_name": "Sean",
        "timestamp": 1525840537
    },
    {
        "content": "<p>import subprocess<br>\nbashCommand = \"mged -c temp.g in sph sph 0 0 0 0 0 1 1000\"<br>\nprocess = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)<br>\noutput, error = process.communicate()</p>",
        "id": 126298688,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840546
    },
    {
        "content": "<p>Oh! Oh alright!</p>",
        "id": 126298689,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840553
    },
    {
        "content": "<p>we had to directly invoke mged for shell script -- but I could totally create a wrapper like nmz did for python, so it's something simpler, so my shell script might look like: sphere create 0 0 0 1000</p>",
        "id": 126298737,
        "sender_full_name": "Sean",
        "timestamp": 1525840630
    },
    {
        "content": "<p>Yea! That could be easily done</p>",
        "id": 126298740,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840656
    },
    {
        "content": "<p>Coupled with some primitive specific checks so that we don't run into errors</p>",
        "id": 126298788,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840712
    },
    {
        "content": "<p>sure</p>",
        "id": 126298789,
        "sender_full_name": "Sean",
        "timestamp": 1525840720
    },
    {
        "content": "<p>so now that is run on a unix command line e.g., ./make_my_sphere.sh</p>",
        "id": 126298804,
        "sender_full_name": "Sean",
        "timestamp": 1525840751
    },
    {
        "content": "<p>So I could do something like python3 script.py temp.g</p>\n<blockquote>\n<p>create sphere 0 0 0 1 1 1 1000<br>\ncreate ellipsoid 0 0 0 10 0 0 0 10 0 0 0 10 <br>\nexit</p>\n</blockquote>",
        "id": 126298805,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840778
    },
    {
        "content": "<p>perfect, so we literally could do the same thing in python or shell</p>",
        "id": 126298850,
        "sender_full_name": "Sean",
        "timestamp": 1525840819
    },
    {
        "content": "<p>Uh-huh! yup</p>",
        "id": 126298851,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840832
    },
    {
        "content": "<p>put it into a text file and the shell environment invokes the appropriate interpreter and the script is run</p>",
        "id": 126298852,
        "sender_full_name": "Sean",
        "timestamp": 1525840853
    },
    {
        "content": "<p>now instead of putting it into a file, we want to store that procedure in a .g file</p>",
        "id": 126298859,
        "sender_full_name": "Sean",
        "timestamp": 1525840870
    },
    {
        "content": "<p>Ok. How do we do that?</p>",
        "id": 126298862,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840908
    },
    {
        "content": "<p>not only store it there, we want to be able to run it as needed too</p>",
        "id": 126298863,
        "sender_full_name": "Sean",
        "timestamp": 1525840910
    },
    {
        "content": "<p>a .g file is simple key=value database where the key is an object name and the value is the object's data</p>",
        "id": 126298906,
        "sender_full_name": "Sean",
        "timestamp": 1525840965
    },
    {
        "content": "<p>But the script is working to save the text file into a .g file right</p>",
        "id": 126298907,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525840970
    },
    {
        "content": "<p>Not literally the text file as is, but what the textfile wants to create as a .g file</p>",
        "id": 126298914,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841010
    },
    {
        "content": "<p>This .g can then be loaded whenever it needs to be used?</p>",
        "id": 126298918,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841024
    },
    {
        "content": "<p>consider when you make a sphere, it creates an object with that name and stores it's parameters into the .g file</p>",
        "id": 126298919,
        "sender_full_name": "Sean",
        "timestamp": 1525841024
    },
    {
        "content": "<p>Ah ok! But the .g file is not human readable</p>",
        "id": 126298961,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841053
    },
    {
        "content": "<p>you did that with the \"in\" command to \"input\" the object</p>",
        "id": 126298962,
        "sender_full_name": "Sean",
        "timestamp": 1525841056
    },
    {
        "content": "<p>in my_sphere sph 0 0 0 0 0 1 1000</p>",
        "id": 126298963,
        "sender_full_name": "Sean",
        "timestamp": 1525841077
    },
    {
        "content": "<p>something close to that</p>",
        "id": 126298965,
        "sender_full_name": "Sean",
        "timestamp": 1525841092
    },
    {
        "content": "<p>sph is the object type</p>",
        "id": 126298966,
        "sender_full_name": "Sean",
        "timestamp": 1525841097
    },
    {
        "content": "<p>everything that follows are parameters</p>",
        "id": 126298973,
        "sender_full_name": "Sean",
        "timestamp": 1525841110
    },
    {
        "content": "<p>alright</p>",
        "id": 126298976,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841148
    },
    {
        "content": "<p>imagine being able to do something that puts a script into the .g, like</p>",
        "id": 126298977,
        "sender_full_name": "Sean",
        "timestamp": 1525841155
    },
    {
        "content": "<p>in my_script script my_file.py</p>",
        "id": 126299017,
        "sender_full_name": "Sean",
        "timestamp": 1525841179
    },
    {
        "content": "<p>Our python script could then create tcl file after taking in the user input. Send it to mged which creates a .g file</p>",
        "id": 126299022,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841226
    },
    {
        "content": "<p>and then being able to \"draw my_script\" to see its wireframe, or \"comb something u my_script - foo\"</p>",
        "id": 126299024,
        "sender_full_name": "Sean",
        "timestamp": 1525841279
    },
    {
        "content": "<p>forget about Tcl, there is no Tcl ... in fact, there isn't even necessarily an mged</p>",
        "id": 126299063,
        "sender_full_name": "Sean",
        "timestamp": 1525841335
    },
    {
        "content": "<p>So \"in\" and \"draw\" are bash commands that we define? What does my_file.py do then?</p>",
        "id": 126299069,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841374
    },
    {
        "content": "<p>no, sorry -- in and draw are GED commands<br>\nthat's where getting through the rest of the tutorials would be helpful ;)</p>",
        "id": 126299111,
        "sender_full_name": "Sean",
        "timestamp": 1525841411
    },
    {
        "content": "<p>Ah okay!</p>",
        "id": 126299113,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841426
    },
    {
        "content": "<p>my_file.py didn't do anything in that example, it just contained a script (e.g., our one-liner) that was read into the my_script object</p>",
        "id": 126299114,
        "sender_full_name": "Sean",
        "timestamp": 1525841453
    },
    {
        "content": "<p>so anytime I do something with the my_script object, it runs the script and uses the geometry that results</p>",
        "id": 126299119,
        "sender_full_name": "Sean",
        "timestamp": 1525841486
    },
    {
        "content": "<p>and the \"script\" keyword is defined or it needs to be defined?</p>",
        "id": 126299120,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841487
    },
    {
        "content": "<p>would need to be defined</p>",
        "id": 126299121,
        "sender_full_name": "Sean",
        "timestamp": 1525841498
    },
    {
        "content": "<p>that's the \"procedural object\" bits mentioned in the TODO</p>",
        "id": 126299122,
        "sender_full_name": "Sean",
        "timestamp": 1525841515
    },
    {
        "content": "<p>that keyword to the \"in\" command is the object type</p>",
        "id": 126299161,
        "sender_full_name": "Sean",
        "timestamp": 1525841533
    },
    {
        "content": "<p>Ah! Alright! So the script command would tell the in command what's coming in</p>",
        "id": 126299162,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841559
    },
    {
        "content": "<p>Cool cool</p>",
        "id": 126299163,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841564
    },
    {
        "content": "<p>*script keyword</p>",
        "id": 126299164,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841576
    },
    {
        "content": "<p>*object type ;)</p>",
        "id": 126299169,
        "sender_full_name": "Sean",
        "timestamp": 1525841588
    },
    {
        "content": "<p>Ugh! My bad :P</p>",
        "id": 126299170,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841595
    },
    {
        "content": "<p>it is a keyword obviously, but it directly refers to a registered object type</p>",
        "id": 126299171,
        "sender_full_name": "Sean",
        "timestamp": 1525841625
    },
    {
        "content": "<p>Again, this would not be python right? I'd have to work in C to manipulate the ged commands?</p>",
        "id": 126299210,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841652
    },
    {
        "content": "<p>what is \"this\"?</p>",
        "id": 126299211,
        "sender_full_name": "Sean",
        "timestamp": 1525841692
    },
    {
        "content": "<p>Introducing \"script\"</p>",
        "id": 126299215,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841704
    },
    {
        "content": "<p>we're talking about a lot of things...</p>",
        "id": 126299216,
        "sender_full_name": "Sean",
        "timestamp": 1525841706
    },
    {
        "content": "<p>ah, right so that bit would be core infrastructure code that someone else would probably write -- I could probably implement the basic necessary bits in a couple days</p>",
        "id": 126299259,
        "sender_full_name": "Sean",
        "timestamp": 1525841772
    },
    {
        "content": "<p>if you want to see what it looks like, look in the src/librt/primitives directory in a brlcad source checkout</p>",
        "id": 126299261,
        "sender_full_name": "Sean",
        "timestamp": 1525841802
    },
    {
        "content": "<p>Sure thing, I'll have a look at that</p>",
        "id": 126299275,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841825
    },
    {
        "content": "<p>the table.c file is where all object types are registered and each implementation lives in the corresponding src/librt/primitives/OBJ subdir</p>",
        "id": 126299278,
        "sender_full_name": "Sean",
        "timestamp": 1525841841
    },
    {
        "content": "<p>so the idea is that there would be a new \"script\" object type that would hold the actual script (instead of it being in a text file)</p>",
        "id": 126299279,
        "sender_full_name": "Sean",
        "timestamp": 1525841878
    },
    {
        "content": "<p>and there'd be an embedded interpreter to run the script</p>",
        "id": 126299319,
        "sender_full_name": "Sean",
        "timestamp": 1525841905
    },
    {
        "content": "<p>So this script would parse a text object at run time and use the appropriate interpreter to create valid shapes?</p>",
        "id": 126299326,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525841966
    },
    {
        "content": "<p>almost got it</p>",
        "id": 126299332,
        "sender_full_name": "Sean",
        "timestamp": 1525842000
    },
    {
        "content": "<p>LIBRT would parse a script object at run time and use the appropriate interpreter to create geometry</p>",
        "id": 126299376,
        "sender_full_name": "Sean",
        "timestamp": 1525842030
    },
    {
        "content": "<p>But the script object can only exist if it is fed in valued from an external textfile?</p>",
        "id": 126299388,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842070
    },
    {
        "content": "<p>LIBRT is the main library in BRL-CAD that is used by essentially everything</p>",
        "id": 126299392,
        "sender_full_name": "Sean",
        "timestamp": 1525842097
    },
    {
        "content": "<p>not necessarily</p>",
        "id": 126299393,
        "sender_full_name": "Sean",
        "timestamp": 1525842101
    },
    {
        "content": "<p>imagine creating a script in mged or archer, and when you run \"edit myscript\", it simply pops open a text editor</p>",
        "id": 126299436,
        "sender_full_name": "Sean",
        "timestamp": 1525842137
    },
    {
        "content": "<p>not reading from an external text file, but from the object</p>",
        "id": 126299438,
        "sender_full_name": "Sean",
        "timestamp": 1525842157
    },
    {
        "content": "<p>Ohhhhhhh!</p>",
        "id": 126299439,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842167
    },
    {
        "content": "<p>It's almost like reverse engineering objects and converting them into plain-text descriptions</p>",
        "id": 126299446,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842198
    },
    {
        "content": "<p>_or I got this completely wrong_</p>",
        "id": 126299447,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842215
    },
    {
        "content": "<p>A script in mged would be?</p>",
        "id": 126299490,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842292
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 126299501,
        "sender_full_name": "Sean",
        "timestamp": 1525842331
    },
    {
        "content": "<p>the mged script could be either a bash one or something for the python interpreter</p>",
        "id": 126299542,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842396
    },
    {
        "content": "<p>Also, is edit a ged command?</p>",
        "id": 126299547,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842429
    },
    {
        "content": "<p>yes, edit is a ged command</p>",
        "id": 126299548,
        "sender_full_name": "Sean",
        "timestamp": 1525842438
    },
    {
        "content": "<p>I feel like we're still missing something... :)</p>",
        "id": 126299549,
        "sender_full_name": "Sean",
        "timestamp": 1525842463
    },
    {
        "content": "<p>I think going through the tutorial is going to fairly help</p>",
        "id": 126299550,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842468
    },
    {
        "content": "<p>yes, probably</p>",
        "id": 126299551,
        "sender_full_name": "Sean",
        "timestamp": 1525842475
    },
    {
        "content": "<p>and then maybe going through an example without shell or python mixed in</p>",
        "id": 126299590,
        "sender_full_name": "Sean",
        "timestamp": 1525842492
    },
    {
        "content": "<p>How about this? I'll go through the tutorial and then go through our conversation again and maybe come up with a possible interaction-diagram of the different components and we can modify that to get a clearer picture?</p>",
        "id": 126299594,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842530
    },
    {
        "content": "<p>sure, sounds like a good start</p>",
        "id": 126299611,
        "sender_full_name": "Sean",
        "timestamp": 1525842561
    },
    {
        "content": "<p>I don't intend you to get too caught up on the C/C++ side of things in LIBRT since that's outside of scope for your project</p>",
        "id": 126299614,
        "sender_full_name": "Sean",
        "timestamp": 1525842592
    },
    {
        "content": "<p>As far as I understand, there are multiple parts involved in being able to execute</p>\n<blockquote>\n<p>in my_sphere sph 0 0 0 0 0 1 1000</p>\n</blockquote>",
        "id": 126299615,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842595
    },
    {
        "content": "<p>it just influences what will work best architecturally</p>",
        "id": 126299657,
        "sender_full_name": "Sean",
        "timestamp": 1525842607
    },
    {
        "content": "<p>Sounds fair, but I don't mind playing around there as well (though I might take a while to figure things out)</p>",
        "id": 126299662,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842637
    },
    {
        "content": "<p>Uh-huh</p>",
        "id": 126299663,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842647
    },
    {
        "content": "<p>what it implies is that you have C/C++ code running an embedded python interpreter</p>",
        "id": 126299670,
        "sender_full_name": "Sean",
        "timestamp": 1525842681
    },
    {
        "content": "<p>that logic is running from inside of \"mged\" and/or other command-line tools (e.g., \"rt\", \"archer\", \"gqa\", ...)</p>",
        "id": 126299675,
        "sender_full_name": "Sean",
        "timestamp": 1525842718
    },
    {
        "content": "<p>what we're wanting to end up with with procedural objects is not just the ability to source scripts, but create complex geometry like the SGI cube shell script</p>",
        "id": 126299720,
        "sender_full_name": "Sean",
        "timestamp": 1525842769
    },
    {
        "content": "<p>notice in that shell script how the cube dimensions are hard-coded</p>",
        "id": 126299726,
        "sender_full_name": "Sean",
        "timestamp": 1525842799
    },
    {
        "content": "<p>Yea</p>",
        "id": 126299728,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842804
    },
    {
        "content": "<p>radius=100 for example</p>",
        "id": 126299729,
        "sender_full_name": "Sean",
        "timestamp": 1525842810
    },
    {
        "content": "<p>We'd want that to be interactive?</p>",
        "id": 126299772,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842873
    },
    {
        "content": "<p>say I change the script, remove 100 and specify $1 instead (argv[1] or sys.argv[1] in python terms)</p>",
        "id": 126299773,
        "sender_full_name": "Sean",
        "timestamp": 1525842877
    },
    {
        "content": "<p>Yea</p>",
        "id": 126299775,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842894
    },
    {
        "content": "<p>so instead of ./sgi.sh ... I'd run ./sgi.sh 100 and get a 100 radius shape</p>",
        "id": 126299777,
        "sender_full_name": "Sean",
        "timestamp": 1525842902
    },
    {
        "content": "<p>or ./sgi.sh 10000 and it's bigger</p>",
        "id": 126299782,
        "sender_full_name": "Sean",
        "timestamp": 1525842913
    },
    {
        "content": "<p>True true</p>",
        "id": 126299784,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525842935
    },
    {
        "content": "<p>as a procedural object, we'd want similar flexibility</p>",
        "id": 126299785,
        "sender_full_name": "Sean",
        "timestamp": 1525842936
    },
    {
        "content": "<p>maybe something like:  in mysgi script sgi.py 1000</p>",
        "id": 126299788,
        "sender_full_name": "Sean",
        "timestamp": 1525842961
    },
    {
        "content": "<p>or, in mysgi script sgi.py</p>",
        "id": 126299829,
        "sender_full_name": "Sean",
        "timestamp": 1525842983
    },
    {
        "content": "<p>In the second case sgi.py could have some hardcoded values inside of it (or maybe fall back to some pre-defined value)</p>",
        "id": 126299835,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525843034
    },
    {
        "content": "<p>followed by some command that specifies parameters like \"in mysql1000 exec mysgi 1000\"</p>",
        "id": 126299836,
        "sender_full_name": "Sean",
        "timestamp": 1525843043
    },
    {
        "content": "<p>that way, you could stash the script and evaluate different parameters without making copies of the script each time</p>",
        "id": 126299886,
        "sender_full_name": "Sean",
        "timestamp": 1525843136
    },
    {
        "content": "<p>So, if you don't specify the \"1000\" here, would that raise an error?</p>",
        "id": 126299893,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525843176
    },
    {
        "content": "<p>would probably depend on the script</p>",
        "id": 126299941,
        "sender_full_name": "Sean",
        "timestamp": 1525843212
    },
    {
        "content": "<p>maybe it has a default, maybe it requires 3 parameters</p>",
        "id": 126299942,
        "sender_full_name": "Sean",
        "timestamp": 1525843224
    },
    {
        "content": "<p>Sure</p>",
        "id": 126299943,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525843234
    },
    {
        "content": "<p>So, exec here, that would need to be defined too or is it already defined?</p>",
        "id": 126299944,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525843257
    },
    {
        "content": "<p>Also, my initial tasks would be wrapping the primitives and then getting the python interpreter to work?</p>",
        "id": 126300006,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525843394
    },
    {
        "content": "<p>would need to be defined -- that's why this concept is in the TODO file</p>",
        "id": 126300007,
        "sender_full_name": "Sean",
        "timestamp": 1525843410
    },
    {
        "content": "<p>it's a somewhat advanced CAD feature, very powerful</p>",
        "id": 126300008,
        "sender_full_name": "Sean",
        "timestamp": 1525843423
    },
    {
        "content": "<p>but not terribly hard to implement</p>",
        "id": 126300009,
        "sender_full_name": "Sean",
        "timestamp": 1525843433
    },
    {
        "content": "<p>have you ever played with openscad?</p>",
        "id": 126300047,
        "sender_full_name": "Sean",
        "timestamp": 1525843446
    },
    {
        "content": "<p>Nope, never have :/</p>",
        "id": 126300049,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525843460
    },
    {
        "content": "<p>I'll brb! _AFK_</p>",
        "id": 126300053,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525843504
    },
    {
        "content": "<p>ah, well might still be helpful example -- openscad is a geometry system that essentially uses procedures everywhere</p>",
        "id": 126300058,
        "sender_full_name": "Sean",
        "timestamp": 1525843510
    },
    {
        "content": "<p>if you check out <a href=\"https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/User-Defined_Functions_and_Modules\" target=\"_blank\" title=\"https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/User-Defined_Functions_and_Modules\">https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/User-Defined_Functions_and_Modules</a> and jump down to \"Example 2\", you'll see something very similar to what we were talking about</p>",
        "id": 126300061,
        "sender_full_name": "Sean",
        "timestamp": 1525843530
    },
    {
        "content": "<p>Example two is just like python's range function</p>",
        "id": 126300310,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525844069
    },
    {
        "content": "<p>Wait, sorry example 2 in modules?</p>",
        "id": 126300312,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525844097
    },
    {
        "content": "<p>yes, sorry -- example two under the Object modules section -- little houses</p>",
        "id": 126300366,
        "sender_full_name": "Sean",
        "timestamp": 1525844177
    },
    {
        "content": "<p>module house</p>",
        "id": 126300367,
        "sender_full_name": "Sean",
        "timestamp": 1525844188
    },
    {
        "content": "<p>another consideration to test is performance .. how long it takes with the two python methods to create XXXX objects</p>",
        "id": 126300420,
        "sender_full_name": "Sean",
        "timestamp": 1525844301
    },
    {
        "content": "<p>Ah, I get the picture</p>",
        "id": 126300421,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525844308
    },
    {
        "content": "<p>alright, times up for me -- good talk</p>",
        "id": 126300427,
        "sender_full_name": "Sean",
        "timestamp": 1525844365
    },
    {
        "content": "<p>Thanks a ton for everything! I've definitely got a lot to think about and discover :)<br>\nI'll come back to you with a design for the procedural geometry in a couple of days?</p>",
        "id": 126300469,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525844414
    },
    {
        "content": "<p>give the tutorials a go, revisit the discussion, check out TODO, talk some more with the other mentors too, test performance</p>",
        "id": 126300470,
        "sender_full_name": "Sean",
        "timestamp": 1525844415
    },
    {
        "content": "<p>sounds good</p>",
        "id": 126300473,
        "sender_full_name": "Sean",
        "timestamp": 1525844433
    },
    {
        "content": "<p>Awesome! Thanks</p>",
        "id": 126300474,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525844442
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>, <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span>! I'm travelling home and will be AFK for the next two days (until 12/10/18), I'll resume work on the 13th and will make up for lost time then! :)</p>",
        "id": 126375712,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1525974430
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  with the coding period about to start, I hope you are ready with a plan for the deliverables. I think Sean cleared most of your doubts, still if you are stuck with anything, feel free to ask. Wish you a happy coding period. Cheers !</p>",
        "id": 126492072,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1526203421
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span>! Yea the conversation did clear out a ton of things (also introduced a ton of doubts). I'm working on completing the mged tutorial series, should be done by tonight.</p>\n<p>The first immediate goal is start wrapping up relevant primitives while designing the procedural geometry architecture parallely. I'll be furthering nmz's implementations and will keep you posted with my daily updates on the dev log. Cheers! :D</p>",
        "id": 126492904,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526205523
    },
    {
        "content": "<p>When working with arb4-arb8, are there any restrictions on the how the points are placed in a 3d space? From <a href=\"https://brlcad.org/wiki/BRL-CAD_Primitives\" target=\"_blank\" title=\"https://brlcad.org/wiki/BRL-CAD_Primitives\">https://brlcad.org/wiki/BRL-CAD_Primitives</a>, I gather that it's fine for points to overlap when working with arb8 (not be unique), are there any other such restrictions or constraints?</p>",
        "id": 126527769,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526286252
    },
    {
        "content": "<p>arb4-arb7 should have 4-7 unique vertices respectively</p>",
        "id": 126527772,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526286283
    },
    {
        "content": "<p>Not actually, its just the overlap of the points that make the difference.</p>",
        "id": 126604457,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1526408370
    },
    {
        "content": "<p>Ah. Figured that :)</p>",
        "id": 126604563,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526408504
    },
    {
        "content": "<p>Went through your dev logs. The primitives look good. they run fine on my system. It'll be good if you document the export instructions for the mged as well. Will save users from some compile time errors ;)</p>",
        "id": 126604896,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1526408864
    },
    {
        "content": "<blockquote>\n<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>, <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span>! I'm travelling home and will be AFK for the next two days (until 12/10/18), I'll resume work on the 13th and will make up for lost time then! :)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> thanks for letting people know</p>",
        "id": 126644519,
        "sender_full_name": "Sean",
        "timestamp": 1526476611
    },
    {
        "content": "<blockquote>\n<p>When working with arb4-arb8, are there any restrictions on the how the points are placed in a 3d space? From <a href=\"https://brlcad.org/wiki/BRL-CAD_Primitives\" target=\"_blank\" title=\"https://brlcad.org/wiki/BRL-CAD_Primitives\">https://brlcad.org/wiki/BRL-CAD_Primitives</a>, I gather that it's fine for points to overlap when working with arb8 (not be unique), are there any other such restrictions or constraints?</p>\n</blockquote>\n<p>yes there are restrictions but I don't recall exactly what they are -- probably best to refer to the source code</p>",
        "id": 126644838,
        "sender_full_name": "Sean",
        "timestamp": 1526477090
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span>  :) I'll get the documentation in place</p>",
        "id": 126657956,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526494978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , yea that's what I've been doing and it seems good so far!</p>",
        "id": 126657972,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526494998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> we need to talk some more about how this will all get leveraged, especially to <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span>'s earlier point about what is needed to get script objects to work in librt</p>",
        "id": 126731575,
        "sender_full_name": "Sean",
        "timestamp": 1526617784
    },
    {
        "content": "<p>I'm concerned that continuing down the \"in\" command route will be problematic because it relies on mged</p>",
        "id": 126731627,
        "sender_full_name": "Sean",
        "timestamp": 1526617827
    },
    {
        "content": "<p>mged will not necessarily be available within a librt context (because mged depends on librt, so it would create a cyclic dependency) -- even libged has that problem in a way, so there are considerations to be made...</p>",
        "id": 126731644,
        "sender_full_name": "Sean",
        "timestamp": 1526617913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> sure. Is there some documentation where I can read about librt / libged and how they work with mged? That'll help me get a clearer idea of the problems we might have.</p>",
        "id": 126733015,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526620729
    },
    {
        "content": "<p>Also, I'm posting daily updates to the dev logs here : <a href=\"https://brlcad.org/wiki/User:Schindler97/GSoC18/Log\" target=\"_blank\" title=\"https://brlcad.org/wiki/User:Schindler97/GSoC18/Log\">https://brlcad.org/wiki/User:Schindler97/GSoC18/Log</a> :)</p>",
        "id": 126733132,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526620969
    },
    {
        "content": "<p>not much in the way of architecture docs other than the source code that you have in front of you, the doxygen API docs, and README files scattered throughout (read those....) , that's why I said we should talk more</p>",
        "id": 126745477,
        "sender_full_name": "Sean",
        "timestamp": 1526644567
    },
    {
        "content": "<p>a brl-cad .g file is a \"geometry database\" filled with named objects.  those objects are of a particular registered type.  we want to get to a point where we have a \"script\" type that can be Python.</p>",
        "id": 126745498,
        "sender_full_name": "Sean",
        "timestamp": 1526644672
    },
    {
        "content": "<p>all the logic for reading/writing objects will eventually be in a low-level \"libg\" library, but right now they live in librt (see src/librt/primitives/table.c to see where they are registered and each subdir for their implementation)</p>",
        "id": 126745562,
        "sender_full_name": "Sean",
        "timestamp": 1526644757
    },
    {
        "content": "<p>you can see librt's current dependencies in its build file (src/librt/CMakeLists.txt), but essentially it just depends on libbu/libbn/libbg and the libraries the primitives themselves require (e.g., libnmg, libbrep, opennurbs)</p>",
        "id": 126745682,
        "sender_full_name": "Sean",
        "timestamp": 1526644955
    },
    {
        "content": "<p>mged is an application that sits on top of libged for all its commands, and libged sits on top of all the other libraries (e.g., librt)</p>",
        "id": 126745695,
        "sender_full_name": "Sean",
        "timestamp": 1526645019
    },
    {
        "content": "<p>so the question / problem is how to make a script primitive that will eventually belong in libg/librt that doesn't depend on mged/libged, but has access to everything in libged...</p>",
        "id": 126745744,
        "sender_full_name": "Sean",
        "timestamp": 1526645129
    },
    {
        "content": "<p>at least not a strict linkage dependency -- the solution probably lies in dynamic runtime loading, or a different runtime object implementation that is somehow loaded by a calling context</p>",
        "id": 126745788,
        "sender_full_name": "Sean",
        "timestamp": 1526645221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , can I have time till Sunday to go through all this, think the architecture through and then have a conversation with you about how we would proceed?</p>",
        "id": 126747976,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526648633
    },
    {
        "content": "<blockquote>\n<p>so the question / problem is how to make a script primitive that will eventually belong in libg/librt that doesn't depend on mged/libged, but has access to everything in libged...</p>\n</blockquote>\n<p>But, we want to use the in command and that is a ged command. How would we do away with that? <br>\nAlso, I went through our conversation from earlier this week and it makes more sense (I think I understand the problem better now)</p>",
        "id": 126749737,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526650456
    },
    {
        "content": "<blockquote>\n<p>a brl-cad .g file is a \"geometry database\" filled with named objects.  those objects are of a particular registered type.  we want to get to a point where we have a \"script\" type that can be Python.</p>\n</blockquote>\n<p>This python script would then be parsed by an embedded interpreter? Which would be called from within the C/C++ code?</p>",
        "id": 126749892,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526650650
    },
    {
        "content": "<blockquote>\n<p>all the logic for reading/writing objects will eventually be in a low-level \"libg\" library, but right now they live in librt (see src/librt/primitives/table.c to see where they are registered and each subdir for their implementation)</p>\n</blockquote>\n<p>Yes, I'm going through the individual primitives, I did that before/during the community bonding period as well. I'm not able to figure out though how to see \"where primitives are registered\"</p>",
        "id": 126750584,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526651325
    },
    {
        "content": "<p>i think he's talking about <code>struct rt_functab OBJ</code> in table.c, regarding where primitives are registered</p>",
        "id": 126750686,
        "sender_full_name": "Cezar",
        "timestamp": 1526651456
    },
    {
        "content": "<p>Ah ok!</p>",
        "id": 126750809,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526651629
    },
    {
        "content": "<blockquote>\n<p>at least not a strict linkage dependency -- the solution probably lies in dynamic runtime loading, or a different runtime object implementation that is somehow loaded by a calling context</p>\n</blockquote>\n<p>So the \"script\" would be a primitive defined in librt. <br>\nIt would parse a python script (myscript.py) which would consist on instructions on how to make complicated objects at runtime.<br>\nThe \"script\" code in librt would invoke a python interpreter to understand the input script.<br>\nCurrent Approach : nmz uses his code to create a .tcl -&gt; .g (using mged)<br>\nOur Goal? : use the instructions from myscript.py to create a .g file by working with the primitive definitions internally.</p>",
        "id": 126751575,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526652569
    },
    {
        "content": "<p>libged seems to have the source code for the commands used by mged, but I can't find anything for the 'in' command. I'm looking for an 'in.c', because for commands like 'ls', there exists an 'ls.c' and I was assuming it would be the same for 'in' as well. (sorry if these doubts come across as extremely trivial)</p>",
        "id": 126753485,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526655052
    },
    {
        "content": "<p>it's in libged/typein.c</p>",
        "id": 126753653,
        "sender_full_name": "Cezar",
        "timestamp": 1526655329
    },
    {
        "content": "<p>Thanks a ton <span class=\"user-mention\" data-user-id=\"106398\">@Cezar</span> :D</p>",
        "id": 126753995,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526655795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"106398\">@Cezar</span> , how do you look this up? Did you explore through the file listing or is there somewhere you would look this up?</p>",
        "id": 126754059,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526655872
    },
    {
        "content": "<p>mm... i figured the command strings must be somewhere, so i ran <code>grep -R \"\\\"ls\\\"\" .</code> in the <code>mged</code> folder, and there was an array of objects which contain command strings and their associated functions. so then i ran the search for <code>\"in\"</code>, and it looked like its function was <code>ged_in</code>. so next i went into <code>libged</code> and ran <code>grep -R \"^ged_in(\" .</code>, and it was found in <code>typein.c</code></p>",
        "id": 126754174,
        "sender_full_name": "Cezar",
        "timestamp": 1526656047
    },
    {
        "content": "<p>with the last grep there, if you're wondering, i searched for <code>ged_in(</code> at the beginning of a line because that's the coding style brl-cad uses for function definitions</p>",
        "id": 126754238,
        "sender_full_name": "Cezar",
        "timestamp": 1526656110
    },
    {
        "content": "<p>Aye, great</p>",
        "id": 126754333,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526656209
    },
    {
        "content": "<blockquote>\n<p>This python script would then be parsed by an embedded interpreter? Which would be called from within the C/C++ code?</p>\n</blockquote>\n<p>Yes, you got it!</p>",
        "id": 126781447,
        "sender_full_name": "Sean",
        "timestamp": 1526700995
    },
    {
        "content": "<blockquote>\n<p>libged seems to have the source code for the commands used by mged, but I can't find anything for the 'in' command. I'm looking for an 'in.c', because for commands like 'ls', there exists an 'ls.c' and I was assuming it would be the same for 'in' as well. (sorry if these doubts come across as extremely trivial)</p>\n</blockquote>\n<p>The 'in' command is in the src/libged/typein.c file</p>",
        "id": 126781452,
        "sender_full_name": "Sean",
        "timestamp": 1526701026
    },
    {
        "content": "<blockquote>\n<p>with the last grep there, if you're wondering, i searched for <code>ged_in(</code> at the beginning of a line because that's the coding style brl-cad uses for function definitions</p>\n</blockquote>\n<p>And that is an outstanding explanation for how to find mged command guts in general!</p>",
        "id": 126781495,
        "sender_full_name": "Sean",
        "timestamp": 1526701107
    },
    {
        "content": "<p>src/mged/setup.c contains the dictionary which translates the Tcl command strings to C functions for mged.</p>",
        "id": 126793307,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526729958
    },
    {
        "content": "<p>libged/typein.c is the place ! There holds a structure for a primitive that contains the list of input strings to asked from the user during the runtime. Later you may find functions to load the input to the database.</p>",
        "id": 126826515,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1526809465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> , to create a .g file, is it necessary to have mged to be a part of the pipeline?</p>",
        "id": 126863177,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526892521
    },
    {
        "content": "<p>not sure, but i don't think so. there are librt functions (see <code>include/rt/db_io.h</code>, for example) which read/write .g files</p>",
        "id": 126863698,
        "sender_full_name": "Cezar",
        "timestamp": 1526893628
    },
    {
        "content": "<p>It depends on where you are. If you can link with the BRL-CAD core libraries e.g. <code>db_open(fileName, \"rw\")</code> opens a .g file for writing.</p>",
        "id": 126867305,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526900586
    },
    {
        "content": "<p>And if this doesn't work <code>db_create(fileName, 5)</code> creates a .g database.</p>",
        "id": 126867357,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526900662
    },
    {
        "content": "<p>Ah okay!<br>\nI just want to understand better how to complete this work flow :  <br>\ntcl -&gt; .g . src/mged/setup.c (converts tcl to c commands) -&gt; ??? -&gt; include/rt/db_io.h -&gt; .g</p>",
        "id": 126869180,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526904290
    },
    {
        "content": "<p>I have a feeling that I've abstracted a lot of what might go on in the middle.</p>",
        "id": 126869261,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526904445
    },
    {
        "content": "<p>src/conv seems to have the relevant scripts to carry out conversions from *format-&gt; .g</p>",
        "id": 126870665,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526906870
    },
    {
        "content": "<p>asc2g.c makes a GED database from an ASCII GED data file. <br>\nOn page 34 : <a href=\"https://brlcad.org/w/images/5/5f/Geometry_Conversions.pdf\" target=\"_blank\" title=\"https://brlcad.org/w/images/5/5f/Geometry_Conversions.pdf\">https://brlcad.org/w/images/5/5f/Geometry_Conversions.pdf</a><br>\nFrom what I understand, tt says that asc2g.c can be used to convert a TCL script to a .g file</p>",
        "id": 126870751,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526906985
    },
    {
        "content": "<p>The mged command to create a new database is <code>opendb</code>, which calls the <code>f_opendb()</code> function defined in src/mged/mged.c.</p>",
        "id": 126878418,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526918185
    },
    {
        "content": "<blockquote>\n<p>asc2g.c makes a GED database from an ASCII GED data file. <br>\nOn page 34 : <a href=\"https://brlcad.org/w/images/5/5f/Geometry_Conversions.pdf\" target=\"_blank\" title=\"https://brlcad.org/w/images/5/5f/Geometry_Conversions.pdf\">https://brlcad.org/w/images/5/5f/Geometry_Conversions.pdf</a><br>\nFrom what I understand, tt says that asc2g.c can be used to convert a TCL script to a .g file</p>\n</blockquote>\n<p>Page 34 says something about Pro/Engineer.<br>\nIn addition, the TCL dialect of asc2g isn't the one used in mged. You can however use mged as a TCL script converter as well. See the mged manual page for instructions .</p>",
        "id": 126878837,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1526918788
    },
    {
        "content": "<p>Sure! Thanks</p>",
        "id": 126879769,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526920002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> , we want to convert tcl to .g without getting mged into the pipeline.</p>",
        "id": 126909723,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526970899
    },
    {
        "content": "<blockquote>\n<p>so the question / problem is how to make a script primitive that will eventually belong in libg/librt that doesn't depend on mged/libged, but has access to everything in libged...</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  had recommended this and hence we were thinking of alternate possible ways</p>",
        "id": 126909788,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526971000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> asc2g embeds a tcl interpreter that has just an essential set of commands registered</p>",
        "id": 126918909,
        "sender_full_name": "Sean",
        "timestamp": 1526989518
    },
    {
        "content": "<p>Think I see 3 options...1 call librt/libwdb api , 2 dynamically load libged , 3 create new libg library and call that</p>",
        "id": 126919385,
        "sender_full_name": "Sean",
        "timestamp": 1526990303
    },
    {
        "content": "<p>Dynamically load libged?</p>",
        "id": 126919857,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526991243
    },
    {
        "content": "<p>Working with libged gives us abstraction over librt and libwdb right?</p>",
        "id": 126919883,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526991323
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , I'm done wrapping most of the primitives and have pushed them with some example for you to try out each of them, let me know what you think and where I should head to next.<br>\nI'm going through librt and libged to get a coarse understanding of how things are dealt with by them.</p>",
        "id": 126919946,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1526991423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , I'm starting off on documenting the python brlcad on how parts of the code work and how complicated shapes can be drawn. Do you have any particular suggestions that I should keep in mind? :D</p>",
        "id": 127037421,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1527180572
    },
    {
        "content": "<p>Also, I could only work for a couple of hours yesterday, I have a research paper deadline coming up on the first of June and ended up spending a lot of time with it. I'll make up by working extra hours today and tomorrow :)</p>",
        "id": 127037943,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1527181312
    },
    {
        "content": "<p>Documentation is indeed required but that is something you should do after the primary tasks are over. Currently the main focus is to convert tcl to geometry files bypassing mged. I was traveling in the past days so couldn't be much active. But we need to figure this out soon.</p>",
        "id": 127058126,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1527209528
    },
    {
        "content": "<p>In the Hacking-BRL-CAD.pdf, there's a section on procedural geometry, which states that : \"BRL-CAD provides a comprehensive procedural geometry interface as a means for creating models algorithmically instead of manually\". What exactly is this referring to?</p>",
        "id": 127069742,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1527234689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , I'd agree that's the major priority for the project as of now. I'm a little in the dark here about what could be done to bypass mged and hence thought I could use this time for documenting the project and continue working on the code once I have a clearer picture :)</p>",
        "id": 127070545,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1527236351
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Should I start working on the script primitive? So far, I've not been able to figure out a way to get procedural geometry to work without using libged. Would you have any leads in that direction?</p>",
        "id": 127258513,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1527608961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> the hacking book is referring to the LIBWDB api.</p>",
        "id": 127291178,
        "sender_full_name": "Sean",
        "timestamp": 1527658322
    },
    {
        "content": "<p>That’s one of the binding options I mentioned last week.  We could see what all if anything is missing for what you need.</p>",
        "id": 127291275,
        "sender_full_name": "Sean",
        "timestamp": 1527658476
    },
    {
        "content": "<p>Start there and check out some of the C examples in src/proc-db and src/shapes .. I suspect binding wdb.h is super easy</p>",
        "id": 127291342,
        "sender_full_name": "Sean",
        "timestamp": 1527658674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> On it!</p>",
        "id": 127292447,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1527660802
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  Can I get some leads on the current work. Did you go through the libwdb ?</p>",
        "id": 127580004,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1528169453
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> On it!</p>\n</blockquote>\n<p>how did that go?  be sure to update your log please</p>",
        "id": 127581287,
        "sender_full_name": "Sean",
        "timestamp": 1528172245
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , I was caught up with the conference deadline up until yesterday. :/ <br>\nI've resumed work on the project from today. Will share updates regularly and make up for lost time ASAP.</p>",
        "id": 127583703,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528177435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> what conference?  I don’t see mention of that in your plans.  Totally supportive but you need to tell us things like that in advance if they are going to have any impact on your work..I have to imagine more time if you’re accepted?</p>",
        "id": 127595949,
        "sender_full_name": "Sean",
        "timestamp": 1528199946
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , yea, it was careless on my part to not inform you of this a little earlier. This is the conference : <a href=\"http://www.conll.org/\" target=\"_blank\" title=\"http://www.conll.org/\">http://www.conll.org/</a></p>",
        "id": 127596006,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528200007
    },
    {
        "content": "<p>Nope, nothing until the GSoC period ends as any further work related to the conference will not only happen in late August</p>",
        "id": 127596019,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528200037
    },
    {
        "content": "<p>The submission here was a part of my masters thesis at university and now I'm officially done with all work for the summer so I can focus purely on GSoC</p>",
        "id": 127596044,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528200074
    },
    {
        "content": "<p>Also, I didn't know I was going to submit a paper to this conference while I was applying for GSoC, hence hadn't included it in the schedule.</p>",
        "id": 127596100,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528200152
    },
    {
        "content": "<p>But you can be rest assured that I'll finish up everything in time!</p>",
        "id": 127596108,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528200176
    },
    {
        "content": "<p>Well that’s good you can focus now, because looking at your plan schedule, we’re way off track...things still being figured out.  There needs to be more coding going on by this point.</p>",
        "id": 127596319,
        "sender_full_name": "Sean",
        "timestamp": 1528200511
    },
    {
        "content": "<p>I've been through libwdb and it seems to be the right thing to handle our problem. It has functions for writing all the primitives. Also went through some of the examples in proc-db and src/shapes and getting a hang of how the shapes are being drawn. I plan to go through all of them to have a clearer idea about how libwdb functions</p>",
        "id": 127596399,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528200661
    },
    {
        "content": "<p>Yea, I'm sorry for that <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> :/</p>",
        "id": 127596408,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528200687
    },
    {
        "content": "<p>You didn’t know when applying, but you certainly knew after and should have mentioned it once you knew, could have mentioned it in your plan.</p>",
        "id": 127596464,
        "sender_full_name": "Sean",
        "timestamp": 1528200732
    },
    {
        "content": "<p>Yea, my bad absolutely!</p>",
        "id": 127596491,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528200828
    },
    {
        "content": "<p>So what is the next steps coding?</p>",
        "id": 127596630,
        "sender_full_name": "Sean",
        "timestamp": 1528201041
    },
    {
        "content": "<p>So, first off would be introducing the script primitive in librt to read and parse the scripts</p>",
        "id": 127596694,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528201137
    },
    {
        "content": "<p>Before that I'd have to define the syntax for the scripts</p>",
        "id": 127596709,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528201163
    },
    {
        "content": "<p>But what I'm confused about is with libwdb in place now, what's the need for a python interpreter?</p>",
        "id": 127596783,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528201263
    },
    {
        "content": "<p>Also, how does one interact with the libwdb api?  How/where to run src/shapes/bolt</p>",
        "id": 127596916,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528201451
    },
    {
        "content": "<blockquote>\n<p>How/where to run src/shapes/bolt</p>\n</blockquote>\n<p>Got this.</p>",
        "id": 127597394,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528202103
    },
    {
        "content": "<blockquote>\n<p>But what I'm confused about is with libwdb in place now, what's the need for a python interpreter?</p>\n</blockquote>\n<p>The current python interpreter creates .tcl scripts and then interacts with mged to create .g scripts.</p>",
        "id": 127598854,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528203799
    },
    {
        "content": "<p>But now that we're using the libwdb API, there's no need for an interim .tcl file. <br>\nThough we could have a templating engine written in python to create files similar to some in proc-db</p>",
        "id": 127599440,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528204548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , is there a guide/tutorial of sorts for introducing new primitives?</p>",
        "id": 127600730,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528206061
    },
    {
        "content": "<p>The existing primitives should serve as a reference.</p>",
        "id": 127601109,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1528206412
    },
    {
        "content": "<p>Check out files in librt primarily. An extensive search using the defined primitives would tell you the relevant files to be modified.</p>",
        "id": 127601259,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1528206568
    },
    {
        "content": "<p>Alright <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> <br>\nAlso, I've updated the dev log.</p>",
        "id": 127608983,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528216072
    },
    {
        "content": "<p>I'll go through it. Let me know if you get stuck while defining the primitive.</p>",
        "id": 127609150,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1528216262
    },
    {
        "content": "<p>Sure thing! I'm exploring librt to figure out the right things needed to start.</p>",
        "id": 127609382,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528216559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Do you think introducing a new primitive is going to be a redundant task? We could work with the 'in' command. Personally I think primitives would be great if we were creating something new, but that's not the case here.</p>",
        "id": 127612130,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528220043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> redundant how?  There is currently no way to have geometry define itself — this would provide that capability.</p>",
        "id": 127613177,
        "sender_full_name": "Sean",
        "timestamp": 1528221471
    },
    {
        "content": "<p>You could even use this to have completely user-defined geometry.</p>",
        "id": 127613242,
        "sender_full_name": "Sean",
        "timestamp": 1528221508
    },
    {
        "content": "<p>Instead of the predefined set we support.</p>",
        "id": 127613252,
        "sender_full_name": "Sean",
        "timestamp": 1528221525
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> redundant how?  There is currently no way to have geometry define itself — this would provide that capability.</p>\n</blockquote>\n<p>What do you mean by \"the geometry define itself\"?<br>\nWhy I think it's redundant is because the in command already has the ability to create primitives with parameters given to it real time. Hence a parametric approach to buildings things. We could convert this into a procedural approach by modifying it to understand scripts (procedures) and use the currently present architecture to draw the shapes.</p>",
        "id": 127613737,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528222167
    },
    {
        "content": "<blockquote>\n<p>Instead of the predefined set we support.</p>\n</blockquote>\n<p>What exactly are you referring to here?</p>",
        "id": 127613747,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528222200
    },
    {
        "content": "<p>I too didn't understand what redundancy  here means . Are you trying to direct towards using some inheritance for the functionalities? If so, then it won't be possible and is again a big project to handle. I think there's a bit of confusion erupting here. Will you please clarify a bit?</p>",
        "id": 127654628,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1528289982
    },
    {
        "content": "<p>So, the redundancy I'm talking about is with regarding the to what the 'in command' already offers. <br>\nIf a new script primitive is introduced it's job will be to parse the scripts (SC from now) and draw shapes as defined in them. A script usually would define how to create a certain shape using the primitives defined in librt. To create this shape (combination of primitives) we will use the libwdb api. Hence when creating the script primitive we would have to write code to interact with libwdb for each primitive.</p>\n<p>Now consider the 'in command'. It currently takes single primitives and arguments to draw them. It already has to code to construct all primitives. What I was recommending is we use these functions. A new script primitive could be introduced to work with the 'in command'. It would parse the SC and construct the primitives one by one and create the bigger shape. This was we can reduce our problem to adding a functionality to the 'in command' to create multiple primitives given a SC. We wouldn't have to write interactions with the libwdb API as there already exists in typein.c code to create these primitives.</p>",
        "id": 127655141,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528290652
    },
    {
        "content": "<blockquote>\n<p>Think I see 3 options...1 call librt/libwdb api , 2 dynamically load libged , 3 create new libg library and call that</p>\n</blockquote>\n<p>Last week  <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> had mentioned that we could use the librt or libwdb api for constructing the primitives. Typein.c uses the librt approach to construct primitives already. I'm suggesting we leverage this existing functionality and add to it.</p>",
        "id": 127655279,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528290847
    },
    {
        "content": "<p>Also, I'm completely down for creating a new primitive but just want your insights on what you think about this idea!</p>",
        "id": 127656287,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528292111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> What do you think?</p>",
        "id": 127691806,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528342316
    },
    {
        "content": "<blockquote>\n<p>What do you mean by \"the geometry define itself\"?</p>\n</blockquote>\n<p>A main purpose for script objects is having user-defined parametric geometry (e.g., \"make a person, male, 6' tall\").  They define a shape but are an object, thus they define themselves.  All primitives technically do this, so the distinction is really that they define an arbitrary/unknown shape.</p>",
        "id": 127694314,
        "sender_full_name": "Sean",
        "timestamp": 1528347048
    },
    {
        "content": "<blockquote>\n<p>A script usually would define how to create a certain shape using the primitives defined in librt. To create this shape (combination of primitives) we will use the libwdb api. Hence when creating the script primitive we would have to write code to interact with libwdb for each primitive.</p>\n</blockquote>\n<p>This is all good observations.  Also realize that several of the primitives are quite flexible/arbitrary (e.g., bot and brep) and will even permit hooking into 3rd party applications.  Like imagine a script that reads a Blender file on the fly.</p>\n<blockquote>\n<p>Now consider the 'in command'. It currently takes single primitives and arguments to draw them. It already has to code to construct all primitives. What I was recommending is we use these functions. A new script primitive could be introduced to work with the 'in command'. It would parse the SC and construct the primitives one by one and create the bigger shape. This was we can reduce our problem to adding a functionality to the 'in command' to create multiple primitives given a SC. We wouldn't have to write interactions with the libwdb API as there already exists in typein.c code to create these primitives.</p>\n</blockquote>\n<p>I'm not following.  You recommend we use those functions ... but there aren't functions -- there's just one, ged_typein() and binding to ged is a problem.  If I'm understanding you correctly, the issue I think is that you see object creation code in typein.c that you want to use -- and you are absolutely right that it should be reusable (and currently is not).  I'm not seeing how you could possibly have a script get parsed <em>within</em> libged's 'in' command, so were you thinking to move that logic to librt/libwdb as functions?</p>",
        "id": 127695140,
        "sender_full_name": "Sean",
        "timestamp": 1528348411
    },
    {
        "content": "<p>My bad, I meant \"use this functionality\" and not \"these functions\".</p>",
        "id": 127705712,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528362853
    },
    {
        "content": "<blockquote>\n<p>binding to ged is a problem</p>\n</blockquote>\n<p>What does that mean? Is it a problem in general or will it be a problem for me to write code to bind with ged?</p>\n<blockquote>\n<p>how you could possibly have a script get parsed within libged's 'in' command</p>\n</blockquote>\n<p>Yes, I had two ideas. One of them as you mentioned was to move the logic to librt/libwdb as functions. The second was to embed the logic in typein.c (of course this approach is extremely non-modular but serves as a hack). I think including the logic in libwdb is going to be a good choice.</p>",
        "id": 127757501,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528438852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>, is it fair to assume all work from now on will be in C and not python? The script parse can just be written in C</p>",
        "id": 127757633,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528439133
    },
    {
        "content": "<blockquote>\n<p>What does that mean? Is it a problem in general or will it be a problem for me to write code to bind with ged?</p>\n</blockquote>\n<p>It's an architectural problem.  libged depends on librt, so you can't introduce code into librt that depends on libged or you create a cyclic dependency.  that was the whole discussion a week or so ago when we talked about what the options were (architecturally).  however, you note a solution ...</p>\n<blockquote>\n<p>Yes, I had two ideas. One of them as you mentioned was to move the logic to librt/libwdb as functions. The second was to embed the logic in typein.c (of course this approach is extremely non-modular but serves as a hack). I think including the logic in libwdb is going to be a good choice.</p>\n</blockquote>\n<p>Moving the logic to librt/libwdb would work and avoids the cycle.  The typein hack won't be adequate for a variety of reasons.</p>\n<p>So if you move the typein logic to librt/libwdb, what are your thoughts on having multiple functions for creating objects (essentially different constructors)?</p>",
        "id": 127779964,
        "sender_full_name": "Sean",
        "timestamp": 1528474325
    },
    {
        "content": "<p>Yes, have multiple constructors (functions) and an array of constructors would be called to create the primitives sequentially as mentioned in the script.</p>",
        "id": 127782570,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528477982
    },
    {
        "content": "<p>There's still some doubts that I have. Libwdb has functionality to draw the primitives (the mk_primitive() functions). An example where I've seen these being to draw objects are in files like proc-db/wdb_example.c . </p>\n<p>The doubt is, at run time, our script logic (present in libwdb) would then invoke these mk_primitive() functions. Will these be rendered in mged in real-time? </p>\n<p>Also, where and how does python do you think can help us in this project now? The python-BRLCAD that I had worked on in the first two weeks is completely independent of what we're planning to do now. I personally feel that we can just continue with C.</p>",
        "id": 127782892,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528478453
    },
    {
        "content": "<p>I also want to re-frame my plan for the next two months given the new tasks at hand and include hence asking all these questions before I get started coding.</p>\n<p>I've also been looking for the code responsible for uploading files using mged, but I can't find any. Though the problem could be tackled in two ways, we can maybe not upload the file but read it at run time. That raises the problem of passing the absolute or relative path that we would have to then tackle.</p>",
        "id": 127783416,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528479148
    },
    {
        "content": "<blockquote>\n<p>Yes, have multiple constructors (functions) and an array of constructors would be called to create the primitives sequentially as mentioned in the script.</p>\n</blockquote>\n<p>I'm not understanding this... you'd only need to call one constructor per statement</p>",
        "id": 127783450,
        "sender_full_name": "Sean",
        "timestamp": 1528479218
    },
    {
        "content": "<p>what's sequential?</p>",
        "id": 127783454,
        "sender_full_name": "Sean",
        "timestamp": 1528479223
    },
    {
        "content": "<p>Yea, it would be a constructor per statement. Sequentially, as in, calling the constructors in the same order as mentioned in the script.</p>",
        "id": 127783513,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528479289
    },
    {
        "content": "<p>I'm thinking the immediate task for me right now is to figure out the file upload or file-read part. I'll try and find the code mged uses for uploading files and revert back to you.</p>",
        "id": 127784043,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528479951
    },
    {
        "content": "<p>So I was referring to different constructors for the same entity, like specifying a sphere with a \"point and a radius\" or a \"point and a direction vector\" or \"point and three orthogonal vectors\" ... all three make a sphere but the orientation is technically different for each</p>",
        "id": 127784776,
        "sender_full_name": "Sean",
        "timestamp": 1528480750
    },
    {
        "content": "<p>s/technically/potentially/</p>",
        "id": 127784784,
        "sender_full_name": "Sean",
        "timestamp": 1528480765
    },
    {
        "content": "<blockquote>\n<p>I'm thinking the immediate task for me right now is to figure out the file upload or file-read part. I'll try and find the code mged uses for uploading files and revert back to you.</p>\n</blockquote>\n<p>to be honest, this feels like a distraction as it's not coding and you've gone several weeks without coding now, no?</p>",
        "id": 127784889,
        "sender_full_name": "Sean",
        "timestamp": 1528480838
    },
    {
        "content": "<p>you really need to be submitting code daily by this point, <em>something</em> even if it's not perfect and you're learning as you go</p>",
        "id": 127784919,
        "sender_full_name": "Sean",
        "timestamp": 1528480887
    },
    {
        "content": "<p>you'll learn more and we'll have more to talk about.</p>",
        "id": 127784943,
        "sender_full_name": "Sean",
        "timestamp": 1528480910
    },
    {
        "content": "<p>you mentioned a while back that there were two python wrappers you'd looked at -- one that used mged directly and another.  can you explain what exactly the other one was?</p>",
        "id": 127785100,
        "sender_full_name": "Sean",
        "timestamp": 1528481049
    },
    {
        "content": "<blockquote>\n<p>The doubt is, at run time, our script logic (present in libwdb) would then invoke these mk_primitive() functions. Will these be rendered in mged in real-time? </p>\n</blockquote>\n<p>as an object, absolutely yes -- one of the functions that every primitive defines is how to draw itself.  for a script object like this, it will just tell it to draw the geometry it created.</p>\n<blockquote>\n<p>Also, where and how does python do you think can help us in this project now? The python-BRLCAD that I had worked on in the first two weeks is completely independent of what we're planning to do now. I personally feel that we can just continue with C.</p>\n</blockquote>\n<p>my thinking is that the basic object structure would get stubbed in a day or two (I could probably do it today) and you'd spend most of your time defining the C-to-Python binding and then all your remaining time on the Python side creating a more seamless full API</p>",
        "id": 127785236,
        "sender_full_name": "Sean",
        "timestamp": 1528481251
    },
    {
        "content": "<p>in essence, do whatever you need to do on the python side so that you can do what wdb_example is doing from python -- which may be already done if the non-mged approach (ctypesgen?) was complete enough</p>",
        "id": 127785313,
        "sender_full_name": "Sean",
        "timestamp": 1528481362
    },
    {
        "content": "<blockquote>\n<p>you really need to be submitting code daily by this point, <em>something</em> even if it's not perfect and you're learning as you go</p>\n</blockquote>\n<p>Starting today, I shall do this.</p>",
        "id": 127811009,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528528293
    },
    {
        "content": "<blockquote>\n<p>in essence, do whatever you need to do on the python side so that you can do what wdb_example is doing from python -- which may be already done if the non-mged approach (ctypesgen?) was complete enough</p>\n</blockquote>\n<p>I think the ctypesgen approach followed the mged-approach and was complete enough. It though was designed to work with brlcad-7.24.0 and raises a lot of errors due to some changed header files when working with the latest version. I'll fix these and push changes right away.</p>",
        "id": 127811308,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528528992
    },
    {
        "content": "<p>try the latest version from github first. i had submitted a pull request that fixed those errors and was merged. if it works, you don't have to fix those problems yourself</p>",
        "id": 127811356,
        "sender_full_name": "Cezar",
        "timestamp": 1528529105
    },
    {
        "content": "<p>Yea, just saw the patch you had submitted. It should fix the issues. :)</p>",
        "id": 127811358,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528529131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"106398\">@Cezar</span> , seems to be working, though there's still error logs about stdio.h, plo3.h and nmg.h. I tried a fix similar to yours and tried to include the header files in include/bn but that doesn't seem to fix it.</p>",
        "id": 127821010,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528551338
    },
    {
        "content": "<p>what/where are those error logs? :-?</p>",
        "id": 127821342,
        "sender_full_name": "Cezar",
        "timestamp": 1528552147
    },
    {
        "content": "<p>if it's during building, i think it's fine</p>",
        "id": 127821343,
        "sender_full_name": "Cezar",
        "timestamp": 1528552158
    },
    {
        "content": "<p>i think i do remember some problems there, but i think i wrote them off for some reason</p>",
        "id": 127821400,
        "sender_full_name": "Cezar",
        "timestamp": 1528552217
    },
    {
        "content": "<p>Yea, it's during building. Guess it shouldn't be an issue.<br>\n<a href=\"https://pastebin.com/YPpP2LkJ\" target=\"_blank\" title=\"https://pastebin.com/YPpP2LkJ\">https://pastebin.com/YPpP2LkJ</a></p>",
        "id": 127821402,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528552225
    },
    {
        "content": "<p>i think it's because during preprocessing, some headers are not included in other headers. so for example, nmg.h uses FILE but does not include stdio.h, so when looking at the header, ctypesgen (?) thinks it's an error. but nmg.c might <code>#include &lt;stdio.h&gt; #include \"nmg.h\"</code>, and when nmg.c is compiled, no problem arises</p>",
        "id": 127821453,
        "sender_full_name": "Cezar",
        "timestamp": 1528552363
    },
    {
        "content": "<p>Uh-huh makes sense. I guess this should never be an issue at run-time then.</p>",
        "id": 127821605,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528552725
    },
    {
        "content": "<blockquote>\n<p>my thinking is that the basic object structure would get stubbed in a day or two</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , I didn't get this</p>",
        "id": 127821669,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528552886
    },
    {
        "content": "<blockquote>\n<p>i think it's because during preprocessing, some headers are not included in other headers. so for example, nmg.h uses FILE but does not include stdio.h, so when looking at the header, ctypesgen (?) thinks it's an error. but nmg.c might <code>#include &lt;stdio.h&gt; #include \"nmg.h\"</code>, and when nmg.c is compiled, no problem arises</p>\n</blockquote>\n<p>That might actually be a good testing framework  for making sure headers are appropriate encapsulated... or it's missing some critical defines (quite likely) as I believe stdio.h is included by everything via common.h</p>",
        "id": 127828247,
        "sender_full_name": "Sean",
        "timestamp": 1528567609
    },
    {
        "content": "<blockquote>\n<p>That might actually be a good testing framework  for making sure headers are appropriate encapsulated... or it's missing some critical defines (quite likely) as I believe stdio.h is included by everything via common.h</p>\n</blockquote>\n<p>hmm... i was thinking of rob pike's notes on programming in c (<a href=\"https://www.lysator.liu.se/c/pikestyle.html\" target=\"_blank\" title=\"https://www.lysator.liu.se/c/pikestyle.html\">here</a>), where he says that including header files in header files slows down compilation</p>",
        "id": 127828303,
        "sender_full_name": "Cezar",
        "timestamp": 1528567771
    },
    {
        "content": "<p>looking at a few of them, it's not clear if this is a false positive or not -- some of them clearly don't include stdio.h directly, but at least one does indirectly and it still reported</p>",
        "id": 127828818,
        "sender_full_name": "Sean",
        "timestamp": 1528568975
    },
    {
        "content": "<p>it can slow down compilation, especially for big complicated headers where you only need a type or something simple</p>",
        "id": 127828868,
        "sender_full_name": "Sean",
        "timestamp": 1528569028
    },
    {
        "content": "<p>that said, performance-wise, it's pretty much an insignificant blip on development unless people pathologically include too many headers needlessly</p>",
        "id": 127828878,
        "sender_full_name": "Sean",
        "timestamp": 1528569068
    },
    {
        "content": "<p>headers should be self contained, including and declaring what they need so that header stands on it's own.  otherwise, you're just trading a tiny fraction of development cpu time with human time (which is FAR FAR FAR more expensive), especially when they fail to include a required header and spend an hour or three debugging</p>",
        "id": 127828920,
        "sender_full_name": "Sean",
        "timestamp": 1528569130
    },
    {
        "content": "<blockquote>\n<p>Yea, it's during building. Guess it shouldn't be an issue.<br>\n<a href=\"https://pastebin.com/YPpP2LkJ\" target=\"_blank\" title=\"https://pastebin.com/YPpP2LkJ\">https://pastebin.com/YPpP2LkJ</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> I just committed a bunch of header additions that should take care of them (r71053).  would you try again and report back?</p>",
        "id": 127829569,
        "sender_full_name": "Sean",
        "timestamp": 1528570614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , the build fails due to some missing header files : <a href=\"https://pastebin.com/YyhhdYMG\" target=\"_blank\" title=\"https://pastebin.com/YyhhdYMG\">https://pastebin.com/YyhhdYMG</a></p>",
        "id": 127844828,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528606865
    },
    {
        "content": "<p>The weird part is when I run make -j 3, I get the error that I shared above,<br>\nWhen I just run make on one core, it gives a different error <a href=\"https://pastebin.com/Q9uX0h26\" target=\"_blank\" title=\"https://pastebin.com/Q9uX0h26\">https://pastebin.com/Q9uX0h26</a></p>",
        "id": 127844874,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528606967
    },
    {
        "content": "<p>I'll pull the stable version from the trunk and introduce the changes (r71053) and see if that works</p>",
        "id": 127844966,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528607192
    },
    {
        "content": "<p>huh, that's interesting -- <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> you apparently have a system-installed poly2tri that is different than the one BRL-CAD is using.  since it's installed in /usr/local, that takes precedence over ours in src/other/poly2tri ... and your system one looks misconfigured or has a bug.</p>",
        "id": 127845170,
        "sender_full_name": "Sean",
        "timestamp": 1528607691
    },
    {
        "content": "<p>couple workarounds possible -- easiest being: sudo mv  /usr/local/include/poly2tri /usr/local/include/poly2tri.backup</p>",
        "id": 127845178,
        "sender_full_name": "Sean",
        "timestamp": 1528607728
    },
    {
        "content": "<p>alternatively, commenting out the block in the top-level CMakelLists.txt that adds /usr/local (around \"# We want to check /usr/local by default, so add it if it exists\")</p>",
        "id": 127845230,
        "sender_full_name": "Sean",
        "timestamp": 1528607839
    },
    {
        "content": "<p>the difference with one core is just in how the dependencies are resolved and what order they are compiled.  doesn't mean anything other than possibly another issue that we'll see later with the -j3 build when it gets to that point.</p>",
        "id": 127845280,
        "sender_full_name": "Sean",
        "timestamp": 1528607968
    },
    {
        "content": "<p>pulling the stable from trunk won't likely fix the poly2tri issue because it's an issue on your system</p>",
        "id": 127845324,
        "sender_full_name": "Sean",
        "timestamp": 1528608023
    },
    {
        "content": "<blockquote>\n<p>pulling the stable from trunk won't likely fix the poly2tri issue because it's an issue on your system</p>\n</blockquote>\n<p>Yes, moving it out to poly2tri,backup seems to have solved the issue for now</p>",
        "id": 127845326,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528608055
    },
    {
        "content": "<blockquote>\n<p>my thinking is that the basic object structure would get stubbed in a day or two</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Some clarity on this?</p>",
        "id": 127845333,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528608111
    },
    {
        "content": "<p>the whole script object portion is not dependent upon what you need to sort out with ctypesgen and/or librt and/or libwdb and/or moving code from libged/typein.c</p>",
        "id": 127845372,
        "sender_full_name": "Sean",
        "timestamp": 1528608166
    },
    {
        "content": "<p>but if we want scripting objects, they obviously need to exist</p>",
        "id": 127845375,
        "sender_full_name": "Sean",
        "timestamp": 1528608179
    },
    {
        "content": "<p>well that work is really dead simple .. I can probably do it in a day if/when needed, at least the most important bits.  you could probably do it in just a few days at most (but don't have to, would rather you focus closer to the python-specific needs)</p>",
        "id": 127845424,
        "sender_full_name": "Sean",
        "timestamp": 1528608244
    },
    {
        "content": "<p>Alright!<br>\nSo, the build fails again : <a href=\"https://pastebin.com/8rb6q2iX\" target=\"_blank\" title=\"https://pastebin.com/8rb6q2iX\">https://pastebin.com/8rb6q2iX</a></p>",
        "id": 127845427,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528608293
    },
    {
        "content": "<p>would you switch to <a href=\"https://pastebin.ca\" target=\"_blank\" title=\"https://pastebin.ca\">https://pastebin.ca</a> or the debian pastebin or literally anything other than <a href=\"http://pastebin.com\" target=\"_blank\" title=\"http://pastebin.com\">pastebin.com</a> ... they're a really obnoxious site often with maliciousness going on</p>",
        "id": 127845475,
        "sender_full_name": "Sean",
        "timestamp": 1528608388
    },
    {
        "content": "<p>and inaccessible to some devs (blocked for those same reasons)</p>",
        "id": 127845476,
        "sender_full_name": "Sean",
        "timestamp": 1528608407
    },
    {
        "content": "<p>Sure, didn't know that</p>",
        "id": 127845477,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528608413
    },
    {
        "content": "<p>so that lempar issue is really odd</p>",
        "id": 127845483,
        "sender_full_name": "Sean",
        "timestamp": 1528608445
    },
    {
        "content": "<p>what version of cmake and make are you using?</p>",
        "id": 127845485,
        "sender_full_name": "Sean",
        "timestamp": 1528608458
    },
    {
        "content": "<p>3.10.3</p>",
        "id": 127845487,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528608474
    },
    {
        "content": "<p>3.11.3 is the latest</p>",
        "id": 127845528,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528608520
    },
    {
        "content": "<p>hrm, so then I think full logs are in order on a clean build</p>",
        "id": 127845530,
        "sender_full_name": "Sean",
        "timestamp": 1528608529
    },
    {
        "content": "<p>yes, that version is fine</p>",
        "id": 127845532,
        "sender_full_name": "Sean",
        "timestamp": 1528608539
    },
    {
        "content": "<p>anything 3.3+ should be fine</p>",
        "id": 127845538,
        "sender_full_name": "Sean",
        "timestamp": 1528608555
    },
    {
        "content": "<p>Ok..</p>",
        "id": 127845539,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528608563
    },
    {
        "content": "<p>oh you know what, I bet it's a similar issue</p>",
        "id": 127845586,
        "sender_full_name": "Sean",
        "timestamp": 1528608660
    },
    {
        "content": "<p>you probably have an old system lemon installed somewhere</p>",
        "id": 127845592,
        "sender_full_name": "Sean",
        "timestamp": 1528608673
    },
    {
        "content": "<p>A prior messed up installation?</p>",
        "id": 127845593,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528608680
    },
    {
        "content": "<p>no, not likely</p>",
        "id": 127845637,
        "sender_full_name": "Sean",
        "timestamp": 1528608742
    },
    {
        "content": "<p>what's your cmake line?</p>",
        "id": 127845638,
        "sender_full_name": "Sean",
        "timestamp": 1528608748
    },
    {
        "content": "<p>cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local</p>",
        "id": 127845642,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528608779
    },
    {
        "content": "<p>ok</p>",
        "id": 127845648,
        "sender_full_name": "Sean",
        "timestamp": 1528608786
    },
    {
        "content": "<p>so run: rm -rf CMake*</p>",
        "id": 127845649,
        "sender_full_name": "Sean",
        "timestamp": 1528608794
    },
    {
        "content": "<p>Done and now cmake again?</p>",
        "id": 127845654,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528608823
    },
    {
        "content": "<p>then: cmake .. -DCMAKE_INSTALL_PREFIX=/opt/brlcad  -DBRLCAD_BUNDLED_LIBS=ON</p>",
        "id": 127845693,
        "sender_full_name": "Sean",
        "timestamp": 1528608861
    },
    {
        "content": "<p>recommend against installing into /usr/local or other common system dir until you get more experienced</p>",
        "id": 127845697,
        "sender_full_name": "Sean",
        "timestamp": 1528608886
    },
    {
        "content": "<p>there are a variety of issues that can come up, naming conflicts</p>",
        "id": 127845702,
        "sender_full_name": "Sean",
        "timestamp": 1528608904
    },
    {
        "content": "<p>the important part is bundled libs</p>",
        "id": 127845752,
        "sender_full_name": "Sean",
        "timestamp": 1528609011
    },
    {
        "content": "<p>Yea, what does it do?</p>",
        "id": 127845760,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609029
    },
    {
        "content": "<p>BRL-CAD uses about 2 dozen external libraries and tools like libpng, libz, tcl/tk, etc</p>",
        "id": 127845764,
        "sender_full_name": "Sean",
        "timestamp": 1528609058
    },
    {
        "content": "<p>Also, should I go ahead and make it now?</p>",
        "id": 127845765,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609059
    },
    {
        "content": "<p>we bundle them so everything will build out of the box whether you have them installed or not, whether you have rpm/dpkg/homebrew/apt/whatever package manager</p>",
        "id": 127845805,
        "sender_full_name": "Sean",
        "timestamp": 1528609104
    },
    {
        "content": "<p>and this makes things much simpler on platforms like Windows that have nothing</p>",
        "id": 127845806,
        "sender_full_name": "Sean",
        "timestamp": 1528609118
    },
    {
        "content": "<p>Alright, so they're pre-compiled binaries?</p>",
        "id": 127845807,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609133
    },
    {
        "content": "<p>but it is just for convenience ... you can download all 20+ dependencies yourself, compile/install them, use rpms/apt/whatever</p>",
        "id": 127845814,
        "sender_full_name": "Sean",
        "timestamp": 1528609159
    },
    {
        "content": "<p>not pre-compiled, we still compile them as needed</p>",
        "id": 127845815,
        "sender_full_name": "Sean",
        "timestamp": 1528609174
    },
    {
        "content": "<blockquote>\n<p>but it is just for convenience ... you can download all 20+ dependencies yourself, compile/install them, use rpms/apt/whatever</p>\n</blockquote>\n<p>True, but there's a fair chance for something messing up here.</p>",
        "id": 127845861,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609231
    },
    {
        "content": "<p>so by default, we test and see if you have a given external dep, like 'tcl/tk' and ... 'lemon' and if it finds it, we don't build ours -- we assume the system one we found is good to use</p>",
        "id": 127845862,
        "sender_full_name": "Sean",
        "timestamp": 1528609236
    },
    {
        "content": "<p>Uh-huh</p>",
        "id": 127845864,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609254
    },
    {
        "content": "<p>But then what about version compatibility? How often do you have to update the bundled libs?</p>",
        "id": 127845872,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609296
    },
    {
        "content": "<p>that varies from dependency to dependency, but where it matters we typically test and only use a system one if it's a version we require (or newer)</p>",
        "id": 127845913,
        "sender_full_name": "Sean",
        "timestamp": 1528609350
    },
    {
        "content": "<p>Cool</p>",
        "id": 127845920,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609407
    },
    {
        "content": "<p>the bundled libs are updated as we need / want / care to .. those are the ones that typically always work because we made sure they work</p>",
        "id": 127845921,
        "sender_full_name": "Sean",
        "timestamp": 1528609408
    },
    {
        "content": "<p>so when you compile, the default is \"Auto\" where it'll detect what you have and use it if it seems to be version-compatible</p>",
        "id": 127845922,
        "sender_full_name": "Sean",
        "timestamp": 1528609436
    },
    {
        "content": "<p>the other modes are Bundled == Off and Bundled == On which tell cmake to either ONLY use system dependency libs or NEVER use system dependency libs</p>",
        "id": 127845966,
        "sender_full_name": "Sean",
        "timestamp": 1528609483
    },
    {
        "content": "<p>Does it fall back to using bundled libs if system dependencies are missing?</p>",
        "id": 127845972,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609522
    },
    {
        "content": "<p>for Auto, sure, it has to -- that's the whole point</p>",
        "id": 127845976,
        "sender_full_name": "Sean",
        "timestamp": 1528609551
    },
    {
        "content": "<p>for Bundled, it doesn't care what you have on the system, it's not going to use it</p>",
        "id": 127846016,
        "sender_full_name": "Sean",
        "timestamp": 1528609575
    },
    {
        "content": "<p>Alright</p>",
        "id": 127846018,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609584
    },
    {
        "content": "<p>Sean, could you help me chalk out how I should progress with the project now. The current python BRLCAD uses ctypesgen that allows us to interact with the libwdb api from python.</p>",
        "id": 127846025,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609662
    },
    {
        "content": "<p>to be pedantically accurate, the cmake variable is BRLCAD_BUNDLED_LIBS=AUTO or =SYSTEM or =BUNDLED (which is same as =ON)</p>",
        "id": 127846064,
        "sender_full_name": "Sean",
        "timestamp": 1528609685
    },
    {
        "content": "<p>Ok yea.</p>",
        "id": 127846067,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609701
    },
    {
        "content": "<p>so it does use libwdb?</p>",
        "id": 127846068,
        "sender_full_name": "Sean",
        "timestamp": 1528609703
    },
    {
        "content": "<p>that much wasn't clear/known</p>",
        "id": 127846069,
        "sender_full_name": "Sean",
        "timestamp": 1528609713
    },
    {
        "content": "<p>who were the main authors of the two different versions ... there was nmz, pedro, and .... ?</p>",
        "id": 127846075,
        "sender_full_name": "Sean",
        "timestamp": 1528609755
    },
    {
        "content": "<p>I've been going through the code figured most of it out yesterday (there's still some parts that throw me off)</p>",
        "id": 127846076,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609759
    },
    {
        "content": "<p>kanzure</p>",
        "id": 127846077,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609768
    },
    {
        "content": "<p>and who did which?</p>",
        "id": 127846078,
        "sender_full_name": "Sean",
        "timestamp": 1528609796
    },
    {
        "content": "<p>nmz was in favour of the mged approach, the one I worked on in the first two weeks of the project. That's currently loaded with functionality to create all the primitives.<br>\nkanzure worked on the ctypesgen project. I was in touch with him before the coding period began to get some help in choosing which project to continue with, the ctypesgen one  or the mged one.</p>",
        "id": 127846121,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528609862
    },
    {
        "content": "<p>okay, so where does that code seem to stand?</p>",
        "id": 127846255,
        "sender_full_name": "Sean",
        "timestamp": 1528610175
    },
    {
        "content": "<p>Which one are you referring to?</p>",
        "id": 127846258,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528610191
    },
    {
        "content": "<p>you said the mged-based one was loaded with functionality to create (nearly) all the primitives ... so where's the ctypesgen one at?</p>",
        "id": 127846263,
        "sender_full_name": "Sean",
        "timestamp": 1528610244
    },
    {
        "content": "<p>The ctypesgen one is missing on a few primitives. Once those are in place it should be at part with the mged one</p>",
        "id": 127846264,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528610276
    },
    {
        "content": "<p>how does the python API compare between the two, how many primitives are hooked up?</p>",
        "id": 127846265,
        "sender_full_name": "Sean",
        "timestamp": 1528610279
    },
    {
        "content": "<p>The mged approach technically does not use any API, it makes a system call using to mged and generates the.g file</p>",
        "id": 127846350,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528610404
    },
    {
        "content": "<p>The ctypesgen approach usues ctypes to interact with the libwdb api and create the .g files</p>",
        "id": 127846366,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528610473
    },
    {
        "content": "<p>do you think you could easily show what the equivalent to wdb_example looks like in each (mged and ctypesgen versions)?  how long might that take you?</p>",
        "id": 127846367,
        "sender_full_name": "Sean",
        "timestamp": 1528610479
    },
    {
        "content": "<p>I could give it to you in a couple of hours from now?</p>",
        "id": 127846407,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528610529
    },
    {
        "content": "<p>I think for the ctypesgen version, there's already an wdb_example equivalent, 1 second</p>",
        "id": 127846409,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528610556
    },
    {
        "content": "<p>that would be great to see</p>",
        "id": 127846410,
        "sender_full_name": "Sean",
        "timestamp": 1528610565
    },
    {
        "content": "<p><a href=\"https://github.com/kanzure/python-brlcad/blob/master/examples/wdb_example.py\" target=\"_blank\" title=\"https://github.com/kanzure/python-brlcad/blob/master/examples/wdb_example.py\">https://github.com/kanzure/python-brlcad/blob/master/examples/wdb_example.py</a></p>",
        "id": 127846411,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528610576
    },
    {
        "content": "<p>so  yeah, then see what that looks like with the other one would be great for comparison</p>",
        "id": 127846467,
        "sender_full_name": "Sean",
        "timestamp": 1528610738
    },
    {
        "content": "<p>lots of little choices being made there -- method on a class, sets of global classes, using intrinsic types or not, etc</p>",
        "id": 127846508,
        "sender_full_name": "Sean",
        "timestamp": 1528610771
    },
    {
        "content": "<p>I still have to figure out how to execute operations like \"union\" or \"intersection\" via the mged approach. I'll get those sorted and revert back to you with an equivalent script for the mged version?</p>",
        "id": 127846514,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528610840
    },
    {
        "content": "<p>Yea!</p>",
        "id": 127846517,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528610846
    },
    {
        "content": "<p>sure .. it's succinct enough that I can't imagine it'll take too long</p>",
        "id": 127846518,
        "sender_full_name": "Sean",
        "timestamp": 1528610872
    },
    {
        "content": "<p>Yes! I have to quickly run some errands outside (sunday chores) and I'll be back and update you with the script? Won't be very long for sure!</p>",
        "id": 127846564,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528610964
    },
    {
        "content": "<p>then to answer your question, I think the next step will be to simply add a primitive to the wdb one that seems missing, just to get familiar with the process and code, then create a spreadsheet to itemize what's there and what's missing, and then work on a second slightly more complex primitive (again for experience) while I get the script object set up, and then you test running an embedded python in C to run one of the scripts successfully, and then we pull it all together!</p>",
        "id": 127846608,
        "sender_full_name": "Sean",
        "timestamp": 1528611059
    },
    {
        "content": "<p>sounds good</p>",
        "id": 127846613,
        "sender_full_name": "Sean",
        "timestamp": 1528611068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  are you done with the installation errors?  I suggest you to go through the \"INSTALL\" file. lines from 190 onwards, will clear the picture for the installation flags.  As far as the ctypesgen approach is considered, that code is totally broke, with some dependency issues, import issues, version issues, platform issues etc. Basically the stuff is incomplete, and the progress sounds hazy , that was the reason to shift to the tcl approach. We should keep these things in mind before we think forward. Looking forward to a code snippet from you. Cheers !</p>",
        "id": 127848041,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1528614533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , the errors still show up when setting python brlcad (ctypesgen) due to the header files even after including your patch</p>",
        "id": 127854961,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528631150
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Killthebug/99d5aa4d6254e1dce083c784fedd7c25\" target=\"_blank\" title=\"https://gist.github.com/Killthebug/99d5aa4d6254e1dce083c784fedd7c25\">https://gist.github.com/Killthebug/99d5aa4d6254e1dce083c784fedd7c25</a></p>",
        "id": 127855103,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528631406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , here's the script for wdb_example using the tcl approach. <br>\n<a href=\"https://github.com/Killthebug/python-brlcad-tcl/blob/master/examples/wdb_example.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad-tcl/blob/master/examples/wdb_example.py\">https://github.com/Killthebug/python-brlcad-tcl/blob/master/examples/wdb_example.py</a></p>",
        "id": 127861583,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528646547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , here's the list of primitives already incorporated into the ctypesgen code. <a href=\"https://docs.google.com/spreadsheets/d/1XeeI1mpLlPFZtc7i5GeOmjLFE-s8JMsYpwVszIPsrmQ/edit?usp=sharing\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/1XeeI1mpLlPFZtc7i5GeOmjLFE-s8JMsYpwVszIPsrmQ/edit?usp=sharing\">https://docs.google.com/spreadsheets/d/1XeeI1mpLlPFZtc7i5GeOmjLFE-s8JMsYpwVszIPsrmQ/edit?usp=sharing</a><br>\nThere's individual files for most of the primitives and the others are inherited from their parent class.</p>\n<p>I've gone through all the primitives and am fairly familiar with the code. As for the complicated primitive, which one would you recommend? </p>\n<p>Also, what would be a good time to get started on setting up the script object? I'd like to give it a shot myself but am a little in the dark about how I should go about doing it.</p>",
        "id": 128064582,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1528982888
    },
    {
        "content": "<p>Hey, anything on this front?</p>",
        "id": 128286999,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529384978
    },
    {
        "content": "<p>I think you can include hrt primitive as well. Might be useful in procedural geometry.</p>",
        "id": 128328292,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1529442300
    },
    {
        "content": "<p>And start working on the script primitive structure. That is something you can do in very less time. Just read the code containers for the other primitives, and move along the template. The basic primitive definition lies in librt. I suggest, start from here and ping for further clarifications. You need to start doing stuff, that will make things more clear. You need to work smartly here, as many fields may remain empty for this primitive. Please ensure the updation of your daily logs.</p>",
        "id": 128328504,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1529442565
    },
    {
        "content": "<p>Later our task remains to incorporate the primitive container and the ctypes bindings, but before that the primitive needs to be well defined. librt is the place where you should focus initially. Pick up a primitive as a reference and follow accordingly. Cheers !</p>",
        "id": 128328590,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1529442677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> any updates? Are you stuck on anything?</p>",
        "id": 128422681,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1529593935
    },
    {
        "content": "<p>Hey! I've been working on the script parser! I'll finish that up by tomorrow, I have to add some more primitive functions. Will move onto the script primitive then.</p>",
        "id": 128430610,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529604047
    },
    {
        "content": "<p>You can have a look at the script parser here : <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/script.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/script.py\">https://github.com/Killthebug/python-brlcad/blob/master/examples/script.py</a></p>",
        "id": 128456760,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529645855
    },
    {
        "content": "<p>Some questions for you. Weren't we going the ctypes way? All I can figure out is tcl-&gt; .g in this script. and how is mged being bypassed here?</p>",
        "id": 128459442,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1529651375
    },
    {
        "content": "<p>Hey Shubham! This is is the ctypesgen approach. <br>\nFirst off, I've chosen tcl as the scripting language here because tcl is already used in the brlcad ecosystem and hence I don't have to introduce a new script BNF.</p>",
        "id": 128465154,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529661602
    },
    {
        "content": "<p>Secondly, this is the ctypegen approach. mged is being bypassed here.<br>\nWe use ctyepgen to generate bindings for libwdb. We then use the libwdb API in python to create primitives.</p>",
        "id": 128465215,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529661651
    },
    {
        "content": "<p>Until now, you would have to write separate code if you wanted to make a shape comprising of multiple primitives, something like : <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/wdb_example.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/wdb_example.py\">https://github.com/Killthebug/python-brlcad/blob/master/examples/wdb_example.py</a></p>",
        "id": 128465235,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529661718
    },
    {
        "content": "<p>With the scripting option that I've not introduced, you can give it tcl scripts like : <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/temp.tcl\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/temp.tcl\">https://github.com/Killthebug/python-brlcad/blob/master/examples/temp.tcl</a> to create the same objects.</p>",
        "id": 128465340,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529661843
    },
    {
        "content": "<p>The scripting option is not completely ready. It can make all the primitives for now but still lacks functionality to deal with variables, primitive rotation, etc. I'm working on these additions right now.</p>",
        "id": 128465363,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529661899
    },
    {
        "content": "<p>As a part of procedural geometry, we can also have loops in the script to create multiple instances of the same objects with different variations. Let me know what you think about that and I'll get started on it once this part is completed.</p>",
        "id": 128465381,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529661958
    },
    {
        "content": "<p>Great !</p>",
        "id": 128467924,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1529666415
    },
    {
        "content": "<p>Looks good ! I'll be waiting for it to run this way.</p>",
        "id": 128468089,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1529666717
    },
    {
        "content": "<p>And what about the script primitive? Have you started working on that ?</p>",
        "id": 128468190,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1529666845
    },
    {
        "content": "<p>So, the script primitive will essentially be responsible for invoking the python script parser that I've shared above. It will be python embedded in C. Once I am done perfecting the parser, I'll start work on the script primitive. Sound good?</p>",
        "id": 128473555,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529675243
    },
    {
        "content": "<p>okay, make sure you update your logs ! I find a lag there. Cheers !</p>",
        "id": 128560163,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1529853841
    },
    {
        "content": "<p>Yes, I'll keep them updated <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> :)</p>",
        "id": 128640173,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529990742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , here's a sample script which the script parser will work with to create the procedural geometry. <a href=\"https://paste.debian.net/1030745/\" target=\"_blank\" title=\"https://paste.debian.net/1030745/\">https://paste.debian.net/1030745/</a></p>",
        "id": 128640218,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529990777
    },
    {
        "content": "<p>This is inspired from the <a href=\"http://sgicube.sh\" target=\"_blank\" title=\"http://sgicube.sh\">sgicube.sh</a> (<a href=\"https://brlcad.org/wiki/SGI_Cube\" target=\"_blank\" title=\"https://brlcad.org/wiki/SGI_Cube\">https://brlcad.org/wiki/SGI_Cube</a>)</p>",
        "id": 128640230,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529990827
    },
    {
        "content": "<p>As of now the script parser can work with variables and creating primitives. Right now, I'm working on introducing procedure parsing (function parsing) in to the script. Do you think the procedure structure in the sample script I've shared looks fine?</p>",
        "id": 128640272,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529990910
    },
    {
        "content": "<p>Also, could you have a look at the workflow of the script parser and certain assumptions regarding the scripts that would be parsed? <br>\n<a href=\"https://github.com/Killthebug/python-brlcad/commit/b2bb4eb9ba4c830e17c80743310af31fa544205a\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/commit/b2bb4eb9ba4c830e17c80743310af31fa544205a\">https://github.com/Killthebug/python-brlcad/commit/b2bb4eb9ba4c830e17c80743310af31fa544205a</a></p>",
        "id": 128644435,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1529999624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> Any inputs on this? ^</p>",
        "id": 128809954,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530245704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  Looks ok on the first view. have you tested it ?</p>",
        "id": 128882848,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1530369549
    },
    {
        "content": "<p>Yup! I test each part before I commit it! :)</p>",
        "id": 128882965,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530369767
    },
    {
        "content": "<p>How do you exactly plan to introduce function parsing into the script ?</p>",
        "id": 128883110,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1530370041
    },
    {
        "content": "<p>Though the procedure structure looks fine in the script</p>",
        "id": 128883111,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1530370063
    },
    {
        "content": "<p>Regarding the workflow, we'll have to see its feasibility at the run time . Fine for now ! Please try to complete this before your second evals. The only part left after the second eval should be the script primitive. I have a basic frame ready for it, so that shouldn't take much time. Plus linking different parts of the pipeline will comprise of many errors, we need time for that too. I hope you'll follow</p>",
        "id": 128883214,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1530370208
    },
    {
        "content": "<p>I am creating a parser that will work with the tcl scripts based on the procedure structure that i've shared with you. It's somewhat like designing a compiler (not as complicated) where I'll be calculating values of local variables based on arguments passed and global variables available, every time a procedure is called.</p>",
        "id": 128946123,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530508230
    },
    {
        "content": "<blockquote>\n<p>I've gone through all the primitives and am fairly familiar with the code. As for the complicated primitive, which one would you recommend? </p>\n</blockquote>\n<p>bot would probably be best to start with since it's somewhat more complicated than the other primitives, but a concern -- can we make changes on the C/C++ side so that there doesn't need to be primitive-specific bindings on the Python side?</p>\n<blockquote>\n<p>Also, what would be a good time to get started on setting up the script object? I'd like to give it a shot myself but am a little in the dark about how I should go about doing it.</p>\n</blockquote>\n<p>If you'd like to give it a shot, start with src/librt/primitives/table.cpp -- notice how it's a bunch of ID's and functions.  look at one of the newest IDs at the bottom, like ID_DATUM, and then find all references to it throughout the source tree (grep -r ID_DATUM include src).  I can certainly help you with this and/or implement it for you, but glad to give you a shot if you want to try.</p>",
        "id": 129063037,
        "sender_full_name": "Sean",
        "timestamp": 1530678325
    },
    {
        "content": "<blockquote>\n<p>bot would probably be best to start with since it's somewhat more complicated than the other primitives, but a concern -- can we make changes on the C/C++ side so that there doesn't need to be primitive-specific bindings on the Python side?</p>\n</blockquote>\n<p>Yea, we can make changes on the C/C++ side without impacting the bindings on the python side.</p>",
        "id": 129063922,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530680151
    },
    {
        "content": "<blockquote>\n<p>If you'd like to give it a shot, start with src/librt/primitives/table.cpp -- notice how it's a bunch of ID's and functions.  look at one of the newest IDs at the bottom, like ID_DATUM, and then find all references to it throughout the source tree (grep -r ID_DATUM include src).  I can certainly help you with this and/or implement it for you, but glad to give you a shot if you want to try.</p>\n</blockquote>\n<p>I'll be moving on to do this once I've completed the script parser that I'm writing. It'll be done by the second eval. Just yesterday I completed an syntax parser which can parse mathematical expressions in procedural scripts :D (Got to be one of the most exciting things I've learnt and built so far)</p>",
        "id": 129064534,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530681449
    },
    {
        "content": "<p>Procedural scripts have expressions like : [exp{2+4{$i+$j/$old}*22}]. I created a syntax parser to parse such expressions.</p>",
        "id": 129064577,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530681514
    },
    {
        "content": "<blockquote>\n<p>As of now the script parser can work with variables and creating primitives. Right now, I'm working on introducing procedure parsing (function parsing) in to the script. Do you think the procedure structure in the sample script I've shared looks fine?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> I may have missed a major detail here ... it should just read Python code -- what's the custom parsing??</p>",
        "id": 129065225,
        "sender_full_name": "Sean",
        "timestamp": 1530682646
    },
    {
        "content": "<blockquote>\n<p>I am creating a parser that will work with the tcl scripts based on the procedure structure that i've shared with you. It's somewhat like designing a compiler (not as complicated) where I'll be calculating values of local variables based on arguments passed and global variables available, every time a procedure is called.</p>\n</blockquote>\n<p>I really don't think we want that -- if we did, we should just use Tcl... there's super complicated syntax and constructs possible even with Tcl that would not be productive to implement.  keeping the scope limited to Python is perfectly fine for now.  we don't need multiple points of failure and a special purpose language pretending to be a standard lanaguage. :)</p>",
        "id": 129065408,
        "sender_full_name": "Sean",
        "timestamp": 1530682914
    },
    {
        "content": "<blockquote>\n<p>Yea, we can make changes on the C/C++ side without impacting the bindings on the python side.</p>\n</blockquote>\n<p>That's not exactly answering what was asked... :)  Can I make changes on the C/C++ side, like add a new parameter to an ELL primitive that is made available on the Python side without changing a ell.py file or something similar?  Basically, some sort of automatically reflective binding or discovered bindings or some other mechanism.</p>",
        "id": 129065533,
        "sender_full_name": "Sean",
        "timestamp": 1530683073
    },
    {
        "content": "<blockquote>\n<p>I'll be moving on to do this once I've completed the script parser that I'm writing. It'll be done by the second eval. Just yesterday I completed an syntax parser which can parse mathematical expressions in procedural scripts :D (Got to be one of the most exciting things I've learnt and built so far)</p>\n</blockquote>\n<p>It's awesome that you've been having fun.  Implementing parsers can be SUPER exciting when they start working.  One area where that may come in handy down the road is in ascertaining the security of a given script before it's passed to a parser.  For now, though, I do think we need to keep it focused on Python and how object creation is exposed as an API -- what changes are needed to make that better.</p>",
        "id": 129065792,
        "sender_full_name": "Sean",
        "timestamp": 1530683405
    },
    {
        "content": "<blockquote>\n<p>I really don't think we want that -- if we did, we should just use Tcl... there's super complicated syntax and constructs possible even with Tcl that would not be productive to implement.  keeping the scope limited to Python is perfectly fine for now.  we don't need multiple points of failure and a special purpose language pretending to be a standard lanaguage.</p>\n</blockquote>\n<p>I've followed the tcl syntax for writing expressions as [exp....], similar to what is defined here : <a href=\"http://wiki.tcl.tk/583\" target=\"_blank\" title=\"http://wiki.tcl.tk/583\">http://wiki.tcl.tk/583</a>.</p>",
        "id": 129065956,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530683650
    },
    {
        "content": "<blockquote>\n<p>That's not exactly answering what was asked... :)  Can I make changes on the C/C++ side, like add a new parameter to an ELL primitive that is made available on the Python side without changing a ell.py file or something similar?  Basically, some sort of automatically reflective binding or discovered bindings or some other mechanism.</p>\n</blockquote>\n<p>No that'll be an issue, but only at the argument level. So, the ellipsoid primitive is called using this file : <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/brlcad/primitives/ellipsoid.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/brlcad/primitives/ellipsoid.py\">https://github.com/Killthebug/python-brlcad/blob/master/brlcad/primitives/ellipsoid.py</a>.</p>",
        "id": 129065998,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530683755
    },
    {
        "content": "<p>If you change something within the working of the primitive in the C code, it shouldn't be an issue, but if you change the number of parameters being passed to it, then that has to be manually updated here.</p>",
        "id": 129066044,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530683793
    },
    {
        "content": "<p>^ Does this make sense?</p>",
        "id": 129066083,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530683876
    },
    {
        "content": "<p>Let's say you change how an ell is drawn in the c code. In that case the code on the python side can still continue to work as the internal working of the primitive are abstracted</p>",
        "id": 129066157,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530683976
    },
    {
        "content": "<p>Bindings are automatically generated according to the version of brlcad you're using when you setup python brlcad. Though the functions that work with these bindings are already coded like the ellipsoid.py file that I had shared with you above. As long as how you interact with the primitives (arguments passed) doesn't change, there isn't going to be an issue.</p>",
        "id": 129066325,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530684195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  , here's a sample script which the script parser will work with to create the procedural geometry. <a href=\"https://paste.debian.net/1030745/\" target=\"_blank\" title=\"https://paste.debian.net/1030745/\">https://paste.debian.net/1030745/</a></p>\n<p>This is inspired from the <a href=\"http://sgicube.sh\" target=\"_blank\" title=\"http://sgicube.sh\">sgicube.sh</a> (<a href=\"https://brlcad.org/wiki/SGI_Cube\" target=\"_blank\" title=\"https://brlcad.org/wiki/SGI_Cube\">https://brlcad.org/wiki/SGI_Cube</a>).</p>\n<p>This (<a href=\"https://imgur.com/a/Kzi8CkF\" target=\"_blank\" title=\"https://imgur.com/a/Kzi8CkF\">https://imgur.com/a/Kzi8CkF</a>) is what the \"script parser\" does. It's made to handle procedural scripts like the one I shared above.</p>",
        "id": 129067125,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1530685378
    },
    {
        "content": "<p>Let's have something for the reflectance here. Manual updation sounds like a pain. Once you finish your primary work, I think we can have a script that continuously updates the changes made on one side to the other.</p>",
        "id": 129336274,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531126570
    },
    {
        "content": "<p>and one more thing-- DEVLOGS ;)</p>",
        "id": 129336419,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531126811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> YES! I think we can brew something up! Primary work is almost done. Just doing some finishing touches and making sure that the parser is robust enough. I'll also document the code soon, so far I've not done any major documentation other than code comments.</p>\n<p>Yes, Devlogs, DONE! :D</p>",
        "id": 129388949,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531194815
    },
    {
        "content": "<blockquote>\n<p>No that'll be an issue, but only at the argument level. </p>\n</blockquote>\n<p>Can you think of any ways to eliminate that issue?  even at the argument level?  For example, most of the primitive bindings including the ellipsoid.py you linked are straight pass-through parameters (a = data.a, b = data.b, etc).  What would be some strategies/options for doing that automatically?</p>",
        "id": 129389089,
        "sender_full_name": "Sean",
        "timestamp": 1531195089
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  , here's a sample script which the script parser will work with to create the procedural geometry. <a href=\"https://paste.debian.net/1030745/\" target=\"_blank\" title=\"https://paste.debian.net/1030745/\">https://paste.debian.net/1030745/</a><br>\nThis (<a href=\"https://imgur.com/a/Kzi8CkF\" target=\"_blank\" title=\"https://imgur.com/a/Kzi8CkF\">https://imgur.com/a/Kzi8CkF</a>) is what the \"script parser\" does. It's made to handle procedural scripts like the one I shared above.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> I read this all earlier as that is what prompted the \"what is the custom parsing\" question...</p>",
        "id": 129389151,
        "sender_full_name": "Sean",
        "timestamp": 1531195263
    },
    {
        "content": "<p>my comments stand that we really should be focusing exclusively on python, not tcl</p>",
        "id": 129389203,
        "sender_full_name": "Sean",
        "timestamp": 1531195344
    },
    {
        "content": "<p>The reason being is that while what you wrote looks a lot like Tcl, it's technically not Tcl.  It's fun to implement, but there are severe usability implications...  I'm sure I could very easily add a few lines of valid Tcl that would break it ... but <em>more</em> importantly, I would wonder why wouldn't we just use a Tcl interpreter.</p>\n<p>Anyone can implement the SGI cube script in a #/opt/brlcad/bin/btclsh script today, call any ged command, and use any Tcl construct.  What's the value of having a different script interpreter?  More importantly ... what aren't we getting done on the python side because of the detour? :)</p>",
        "id": 129389336,
        "sender_full_name": "Sean",
        "timestamp": 1531195678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , I'll get back to you regarding the arguments soon.</p>\n<p>So how would a script on the python side look like?</p>",
        "id": 129389390,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531195783
    },
    {
        "content": "<blockquote>\n<p>So how would a script on the python side look like?</p>\n</blockquote>\n<p>that is what this project is principally concerned with figuring out, no? :)</p>",
        "id": 129389498,
        "sender_full_name": "Sean",
        "timestamp": 1531195927
    },
    {
        "content": "<p>you have one example at <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/wdb_example.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/wdb_example.py\">https://github.com/Killthebug/python-brlcad/blob/master/examples/wdb_example.py</a> and that's a start but I think quite inadequate</p>",
        "id": 129389505,
        "sender_full_name": "Sean",
        "timestamp": 1531195949
    },
    {
        "content": "<p>Yea :P <br>\nSo, this is what the wdb_example.py looks like : <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/wdb_example.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/wdb_example.py\">https://github.com/Killthebug/python-brlcad/blob/master/examples/wdb_example.py</a><br>\nBut there's no procedural elements in this</p>",
        "id": 129389533,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531195994
    },
    {
        "content": "<p>do you think you could take a stab at implementing SGI cube in \"ideal python\"</p>",
        "id": 129389537,
        "sender_full_name": "Sean",
        "timestamp": 1531196024
    },
    {
        "content": "<p>Yup. I think I can do that!</p>",
        "id": 129389581,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531196045
    },
    {
        "content": "<p>if you figure out what that looks like, then the next step would be to figure out how to make that happen</p>",
        "id": 129389584,
        "sender_full_name": "Sean",
        "timestamp": 1531196053
    },
    {
        "content": "<p>and there are several decision points along the way</p>",
        "id": 129389588,
        "sender_full_name": "Sean",
        "timestamp": 1531196061
    },
    {
        "content": "<p>Uh-huh</p>",
        "id": 129389591,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531196071
    },
    {
        "content": "<p>it could be straight up procedural like Tcl</p>",
        "id": 129389592,
        "sender_full_name": "Sean",
        "timestamp": 1531196072
    },
    {
        "content": "<p>or object-oriented</p>",
        "id": 129389593,
        "sender_full_name": "Sean",
        "timestamp": 1531196080
    },
    {
        "content": "<p>what's currently bound through ctypesgen looks like a hybrid</p>",
        "id": 129389606,
        "sender_full_name": "Sean",
        "timestamp": 1531196109
    },
    {
        "content": "<p>could maybe build a OO version on the ctypesgen hybrid or change the interface it's being generated off of on the C header side</p>",
        "id": 129389615,
        "sender_full_name": "Sean",
        "timestamp": 1531196143
    },
    {
        "content": "<p>i.e., have some low-level version that is essentially a straight up binding to libwdb/librt, but then a nicer OO python layer on top</p>",
        "id": 129389668,
        "sender_full_name": "Sean",
        "timestamp": 1531196203
    },
    {
        "content": "<blockquote>\n<p>change the interface it's being generated off of on the C header side</p>\n</blockquote>\n<p>That would almost be like scraping off ctypesgen and starting from scratch, because ctypesgen creates the bindings for libwdb (I'm still thinking of a way of how we can go lower than this)</p>",
        "id": 129389726,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531196307
    },
    {
        "content": "<p>But, um, can you give me some time to research and experiment a little bit? I don't want to drop ideas without testing out a few things :P</p>",
        "id": 129389729,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531196337
    },
    {
        "content": "<p>so yeah, looks like kanzure's exisiting code was an attempt at exactly what I'm suggesting, so the next step is probably to write a \"pure\" version without focusing on the backend</p>",
        "id": 129389734,
        "sender_full_name": "Sean",
        "timestamp": 1531196348
    },
    {
        "content": "<blockquote>\n<p>That would almost be like scraping off ctypesgen and starting from scratch, because ctypesgen creates the bindings for libwdb (I'm still thinking of a way of how we can go lower than this)</p>\n</blockquote>\n<p>we don't need to go lower -- what's there is probably perfectly adequate binding-wise.  we can even change or add to the C side if it helped clean something up, but that gives the lowest level access without creating a cyclic dependency.</p>",
        "id": 129389782,
        "sender_full_name": "Sean",
        "timestamp": 1531196421
    },
    {
        "content": "<blockquote>\n<p>But, um, can you give me some time to research and experiment a little bit? I don't want to drop ideas without testing out a few things :P</p>\n</blockquote>\n<p>can you try implementing the \"clean python\" version of that script first?</p>",
        "id": 129389796,
        "sender_full_name": "Sean",
        "timestamp": 1531196482
    },
    {
        "content": "<p>But the advantage of using ctypesgen is that it generates bindings automatically, you don't have to manually write a lot of code (unlike something like \"swig\")</p>",
        "id": 129389797,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531196502
    },
    {
        "content": "<p>I really don't think there's any time left to research and experiment.  there's a month remaining and we're not really any closer than when you started to a feature a user could put into use yet...</p>",
        "id": 129389840,
        "sender_full_name": "Sean",
        "timestamp": 1531196533
    },
    {
        "content": "<p>Yea sure, just for clarity, what would a \"clean python\" version be?</p>",
        "id": 129389843,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531196552
    },
    {
        "content": "<p>I would think it's the least complicated, most straightforward easy-to-understand python that lets you create geometry</p>",
        "id": 129389854,
        "sender_full_name": "Sean",
        "timestamp": 1531196608
    },
    {
        "content": "<p>no \"wdb\" (wtf is wdb)</p>",
        "id": 129389858,
        "sender_full_name": "Sean",
        "timestamp": 1531196632
    },
    {
        "content": "<p>I've spent a major time of last month working on the script parser, so you can now use tcl procedural scripts to draw complicated objects. (genuinely hope it comes into use sometime) :P</p>",
        "id": 129389906,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531196684
    },
    {
        "content": "<p>probably no files, but tbd... they really just want to create geometry</p>",
        "id": 129389910,
        "sender_full_name": "Sean",
        "timestamp": 1531196692
    },
    {
        "content": "<p>Wait, no wdb, then create geometry? How?</p>",
        "id": 129389921,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531196723
    },
    {
        "content": "<p>I know you've spent at least a solid two weeks...</p>",
        "id": 129389923,
        "sender_full_name": "Sean",
        "timestamp": 1531196729
    },
    {
        "content": "<p>that's why I interjected last week to try and get you to take a step back</p>",
        "id": 129389927,
        "sender_full_name": "Sean",
        "timestamp": 1531196750
    },
    {
        "content": "<p>Yea, also sorry I deviated from it! :/</p>",
        "id": 129389978,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531196778
    },
    {
        "content": "<p>I was moving ahead with the goal of having some way to properly implement procedural geometry</p>",
        "id": 129389986,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531196811
    },
    {
        "content": "<p>I can already use tcl scripts to draw complicated objects .... I'm really having a hard time understanding the motivation</p>",
        "id": 129389988,
        "sender_full_name": "Sean",
        "timestamp": 1531196815
    },
    {
        "content": "<p>most of mged and archer are implemented in tcl... <br>\nan \"mged script\" is a Tcl script</p>",
        "id": 129390047,
        "sender_full_name": "Sean",
        "timestamp": 1531196889
    },
    {
        "content": "<p>that's not to say what you've done isn't potentially useful -- it could be</p>",
        "id": 129390063,
        "sender_full_name": "Sean",
        "timestamp": 1531196930
    },
    {
        "content": "<p>for example, if we implement script objects, I can't just drop in an mged script for the same reason you couldn't just call mged -- it'd create a cyclic dependency</p>",
        "id": 129390086,
        "sender_full_name": "Sean",
        "timestamp": 1531196968
    },
    {
        "content": "<p>so it's conceivable that something like your parser could be used to parse script objects in a variety of languages</p>",
        "id": 129390137,
        "sender_full_name": "Sean",
        "timestamp": 1531197004
    },
    {
        "content": "<p>tcl, python, etc</p>",
        "id": 129390144,
        "sender_full_name": "Sean",
        "timestamp": 1531197009
    },
    {
        "content": "<p><em>but</em> that's why I said we really need to just focus on python -- we do not need added complexity or broad options.  we need <em>1</em> that works, is exposed to users cleanly, lets us store procedural geometry scripts in .g files, works with all the expected functions like plotting and ray tracing, etc.</p>",
        "id": 129390273,
        "sender_full_name": "Sean",
        "timestamp": 1531197176
    },
    {
        "content": "<p>I suppose from your devlog that you didn't make any progress trying to stub in a new 'script' primitive like we talked about?</p>",
        "id": 129390295,
        "sender_full_name": "Sean",
        "timestamp": 1531197215
    },
    {
        "content": "<blockquote>\n<p><em>but</em> that's why I said we really need to just focus on python -- we do not need added complexity or broad options.  we need <em>1</em> that works, is exposed to users cleanly, lets us store procedural geometry scripts in .g files, works with all the expected functions like plotting and ray tracing, etc.</p>\n</blockquote>\n<p>Alright!</p>\n<blockquote>\n<p>I suppose from your devlog that you didn't make any progress trying to stub in a new 'script' primitive like we talked about?</p>\n</blockquote>\n<p>Yea, I've not worked on that yet.</p>",
        "id": 129395320,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531205451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> : <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/sgi.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/sgi.py\">https://github.com/Killthebug/python-brlcad/blob/master/examples/sgi.py</a></p>",
        "id": 129401809,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531216229
    },
    {
        "content": "<p>I'm facing a little issue with the shader, everything else seems to be fine. Figuring it out now.</p>",
        "id": 129401834,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531216288
    },
    {
        "content": "<blockquote>\n<p>Yea, I've not worked on that yet.</p>\n</blockquote>\n<p>Okay, then it may make more sense to <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> to try or I can if it takes him more than a day. ;)</p>",
        "id": 129417993,
        "sender_full_name": "Sean",
        "timestamp": 1531237380
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> : <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/sgi.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/sgi.py\">https://github.com/Killthebug/python-brlcad/blob/master/examples/sgi.py</a></p>\n</blockquote>\n<p>well done <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> !</p>",
        "id": 129418740,
        "sender_full_name": "Sean",
        "timestamp": 1531238220
    },
    {
        "content": "<p>so that's obviously a nearly direct translation of the shell script code .. but is pretty ugly python, don't you think?</p>",
        "id": 129418812,
        "sender_full_name": "Sean",
        "timestamp": 1531238300
    },
    {
        "content": "<p>so ignoring how it was done in shell, fundamentally what is going on is we're making 18 spheres and 18 cylinders, grouping them all together, and creating a region ... what's the best way to do that?</p>",
        "id": 129418930,
        "sender_full_name": "Sean",
        "timestamp": 1531238446
    },
    {
        "content": "<p>I'll get back from the office and put a night into the primitive.  It'll be done.</p>",
        "id": 129449668,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531282420
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> !  if you just grep on one of the more recent primitives, it's usually pretty easy to find all the bits needed to add a new one (e.g., grep -i -r superell .) and let me know if you get stuck.</p>",
        "id": 129450922,
        "sender_full_name": "Sean",
        "timestamp": 1531284490
    },
    {
        "content": "<p>feel free to commit incrementally, might be able to help things along</p>",
        "id": 129450927,
        "sender_full_name": "Sean",
        "timestamp": 1531284532
    },
    {
        "content": "<blockquote>\n<p>so ignoring how it was done in shell, fundamentally what is going on is we're making 18 spheres and 18 cylinders, grouping them all together, and creating a region ... what's the best way to do that?</p>\n</blockquote>\n<p>Yea, not the cleanest of python scripts. What's a better way to do it ... hmmm..</p>",
        "id": 129451080,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531284766
    },
    {
        "content": "<p>you could maybe map out the commands actually needed, and then see how you'd reduce it and eliminate the duplication</p>",
        "id": 129451515,
        "sender_full_name": "Sean",
        "timestamp": 1531285415
    },
    {
        "content": "<p>I'll try and make a condensed version. I think this script looks very \"long\" because there are multiple procedures involved in it (6 to be precise). Each procedure is almost the same (but that's only in this scenario, procedures will usually be fairly different I think). Also, the name of the primitives (rcc.100) created are \"calculate/composed\" when the procedure is called. This takes up a few lines in each procedure too. <br>\nI'm going to try and see how much I can reduce it to soon! :)</p>",
        "id": 129452672,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531287709
    },
    {
        "content": "<p>Would it be fine if I created a script with the goal of creating the same object as <a href=\"http://sgi.sh\" target=\"_blank\" title=\"http://sgi.sh\">sgi.sh</a> but didn't map it exactly to python (this script is a literally a translation into python)?</p>",
        "id": 129452727,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531287836
    },
    {
        "content": "<p>don't feel limited to how the original one was implemented, what names were used, the order and manner it was constructed</p>",
        "id": 129453061,
        "sender_full_name": "Sean",
        "timestamp": 1531288357
    },
    {
        "content": "<p>Alright! Yea, the previous one was completely constraint by how the original was implemented.</p>",
        "id": 129453074,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531288389
    },
    {
        "content": "<p>all that matters is making the same resulting shape (probably still with 18 spheres and cylinders)</p>",
        "id": 129453416,
        "sender_full_name": "Sean",
        "timestamp": 1531288929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>   Yess... did something similar last summer. Thanks for the help !</p>",
        "id": 129456221,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531293745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , tried to get it under 100 lines and also not look very complicated. <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/sgi.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/sgi.py\">https://github.com/Killthebug/python-brlcad/blob/master/examples/sgi.py</a></p>",
        "id": 129462812,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531305256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> good reduction but not sure it helped.  lets step it back more.  I think we need something a lot simpler to start with.  How would you make a simple cylinder with rounded edges?</p>",
        "id": 129476719,
        "sender_full_name": "Sean",
        "timestamp": 1531321597
    },
    {
        "content": "<p>Maybe draw a cylinder and two semi-spheres at it's ends. Or maybe define an object that is a cylinder with rounded edges and draw that multiple times?</p>",
        "id": 129476944,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531321760
    },
    {
        "content": "<p>Not the whole end, just the edges.</p>",
        "id": 129477342,
        "sender_full_name": "Sean",
        "timestamp": 1531322038
    },
    {
        "content": "<p>A sphere would round the entire end cap.</p>",
        "id": 129477559,
        "sender_full_name": "Sean",
        "timestamp": 1531322181
    },
    {
        "content": "<p>Say I have a cylinder from 0,0,0 to 100,0,0 ... radius is, say, 25</p>",
        "id": 129477671,
        "sender_full_name": "Sean",
        "timestamp": 1531322288
    },
    {
        "content": "<p>I want the top and bottom edges to be rounded to a radius of, say, 10</p>",
        "id": 129477815,
        "sender_full_name": "Sean",
        "timestamp": 1531322430
    },
    {
        "content": "<p>How?</p>",
        "id": 129477874,
        "sender_full_name": "Sean",
        "timestamp": 1531322514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> here’s an example: <a href=\"http://www.f-lohmueller.de/pov_tut/all_shapes/shapes340f.htm\" target=\"_blank\" title=\"http://www.f-lohmueller.de/pov_tut/all_shapes/shapes340f.htm\">http://www.f-lohmueller.de/pov_tut/all_shapes/shapes340f.htm</a></p>",
        "id": 129482574,
        "sender_full_name": "Sean",
        "timestamp": 1531326784
    },
    {
        "content": "<p>Sorry was AFK.</p>",
        "id": 129484937,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531329154
    },
    {
        "content": "<p>So a cylinder with two Tori on the ends?</p>",
        "id": 129484941,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531329164
    },
    {
        "content": "<p>try it</p>",
        "id": 129484957,
        "sender_full_name": "Sean",
        "timestamp": 1531329180
    },
    {
        "content": "<p>I'm trying to figure out the examples you've shared.</p>",
        "id": 129484994,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531329233
    },
    {
        "content": "<p>in the examples, that's using a Round_Cylinder macro someone wrote for povray, which looks like it takes a point, a direction, a radius of the cylinder, a radius on the edge, and one more parameter we can ignore</p>",
        "id": 129485270,
        "sender_full_name": "Sean",
        "timestamp": 1531329472
    },
    {
        "content": "<p>In the rounded cylinder example, the cylinder in the middle is a merge(cylinder + 2 spheres) but the first one seems to be a merge (cylinder + 2 Tori)</p>",
        "id": 129485345,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531329537
    },
    {
        "content": "<p>One second, I'll check it out</p>",
        "id": 129485350,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531329545
    },
    {
        "content": "<p>ignore the middle one and the merge parameter<br>\nit's a total distraction</p>",
        "id": 129485379,
        "sender_full_name": "Sean",
        "timestamp": 1531329581
    },
    {
        "content": "<p>I suggest trying to create one by hand using brl-cad primitives and boolean operations (in mged/archer)</p>",
        "id": 129485481,
        "sender_full_name": "Sean",
        "timestamp": 1531329651
    },
    {
        "content": "<p>once you figure it out, then write a python function that makes one for you (taking just a point, a direction, a cylinder radius, and an edge radius)</p>",
        "id": 129485534,
        "sender_full_name": "Sean",
        "timestamp": 1531329703
    },
    {
        "content": "<blockquote>\n<p>I suggest trying to create one by hand using brl-cad primitives and boolean operations (in mged/archer)</p>\n</blockquote>\n<p>The first cylinder in the example you'd shared?</p>",
        "id": 129485614,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531329743
    },
    {
        "content": "<p>sure</p>",
        "id": 129485620,
        "sender_full_name": "Sean",
        "timestamp": 1531329752
    },
    {
        "content": "<p>you can use the values I mentioned, or duplicate the povray example, or whatever -- the point is figuring out how to construct it correctly (there are choices)</p>",
        "id": 129485662,
        "sender_full_name": "Sean",
        "timestamp": 1531329812
    },
    {
        "content": "<p>How did you deduce that it's a point and a direction? They're both 3 dimensional vectors</p>",
        "id": 129485676,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531329836
    },
    {
        "content": "<p>because that's all that makes sense in this context ;)</p>",
        "id": 129485775,
        "sender_full_name": "Sean",
        "timestamp": 1531329921
    },
    {
        "content": "<p><a href=\"http://www.f-lohmueller.de/pov_tut/all_shapes/shapes3_80e.htm\" target=\"_blank\" title=\"http://www.f-lohmueller.de/pov_tut/all_shapes/shapes3_80e.htm\">http://www.f-lohmueller.de/pov_tut/all_shapes/shapes3_80e.htm</a>  : Here it says A and B are two points :P</p>",
        "id": 129485795,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531329945
    },
    {
        "content": "<p>it's modeled at the origin, so the second parameter is equivalent</p>",
        "id": 129485852,
        "sender_full_name": "Sean",
        "timestamp": 1531329982
    },
    {
        "content": "<p>Makes sense! <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 129485862,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531330003
    },
    {
        "content": "<p>the first can only be a point because 0,0,0 is degenerate</p>",
        "id": 129485863,
        "sender_full_name": "Sean",
        "timestamp": 1531330004
    },
    {
        "content": "<p>either way, make it a point+vector or point+point, that part doesn't matter -- pick either but <em>after</em> you figure out a construction method by hand :)</p>",
        "id": 129485950,
        "sender_full_name": "Sean",
        "timestamp": 1531330111
    },
    {
        "content": "<p>Yup! On it.</p>",
        "id": 129485963,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531330135
    },
    {
        "content": "<p>I think this will lay better ground work for what we're trying to get at</p>",
        "id": 129485992,
        "sender_full_name": "Sean",
        "timestamp": 1531330185
    },
    {
        "content": "<p>Aye! I think I'm starting to understand the importance of procedural geometry now. (Hopefully the right thing)</p>",
        "id": 129486095,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531330265
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>   Yess... did something similar last summer. Thanks for the help !</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span>  any progress yet?</p>",
        "id": 129486192,
        "sender_full_name": "Sean",
        "timestamp": 1531330363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  just back from the office . About to start working.</p>",
        "id": 129486778,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531330986
    },
    {
        "content": "<p>Just wanted to know, is it possible to round the edges of an arb8? (This old email is the only clue I had <a href=\"https://sourceforge.net/p/brlcad/discussion/362510/thread/2cdbd563/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/discussion/362510/thread/2cdbd563/\">https://sourceforge.net/p/brlcad/discussion/362510/thread/2cdbd563/</a>)</p>",
        "id": 129487011,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531331235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  I'm unaware of any such thing. Never ever tried rounding those edges. <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  might give you a better insight. <br>\nP.S. - if not a feature, try implementing it through procedural geometry ;)</p>",
        "id": 129514551,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531367876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> of course it’s possible.  There are very few shapes that are not possible without resorting to explicit surfaces.  Rounded edges on a box is a basic intro shape, only slightly more complicated than rounded rcc.  Speaking of which, did you figure it out?</p>",
        "id": 129516045,
        "sender_full_name": "Sean",
        "timestamp": 1531370408
    },
    {
        "content": "<p>If you need a hint, rounded rcc requires at least 4 shapes.</p>",
        "id": 129516128,
        "sender_full_name": "Sean",
        "timestamp": 1531370524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  What should the \" rt_script_internal \"look  like. What params should it comprise other that the uint32_t magic ?</p>",
        "id": 129516290,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531370833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> we don’t know that yet so can just stub it empty.</p>",
        "id": 129516821,
        "sender_full_name": "Sean",
        "timestamp": 1531371825
    },
    {
        "content": "<p>I’d expect it’ll probably need a text buffer, something describing what kind of script it is, and maybe instantiation info</p>",
        "id": 129516929,
        "sender_full_name": "Sean",
        "timestamp": 1531372036
    },
    {
        "content": "<p>Was thinking the same... Probably a bu_vls and a magic should be a part currently</p>",
        "id": 129516974,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531372134
    },
    {
        "content": "<p>Sounds like a start</p>",
        "id": 129517026,
        "sender_full_name": "Sean",
        "timestamp": 1531372216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  What are you working on currently ?</p>",
        "id": 129519665,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531377067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , I just started work on modeling a round edged cylinder. Will then implement it in python once I know how to construct it.</p>",
        "id": 129519777,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531377249
    },
    {
        "content": "<p>The primitive will be ready soon, the part to link your code to the primitive stands next. You should start thinking of ways to encounter all the issues that we might have in the coming days.</p>",
        "id": 129520893,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531379261
    },
    {
        "content": "<p>Sure</p>",
        "id": 129521013,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531379423
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/cb2AKwzFd2niQQCiKC4F2V62/Screen-Shot-2018-07-12-at-5.02.07-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-12-at-5.02.07-PM.png\">Screen-Shot-2018-07-12-at-5.02.07-PM.png</a> <br>\nGetting there.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/cb2AKwzFd2niQQCiKC4F2V62/Screen-Shot-2018-07-12-at-5.02.07-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-12-at-5.02.07-PM.png\"><img src=\"/user_uploads/1549/cb2AKwzFd2niQQCiKC4F2V62/Screen-Shot-2018-07-12-at-5.02.07-PM.png\"></a></div>",
        "id": 129530852,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531395256
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , I just started work on modeling a round edged cylinder. Will then implement it in python once I know how to construct it.</p>\n</blockquote>\n<p>Figure it out yet?</p>",
        "id": 129547872,
        "sender_full_name": "Sean",
        "timestamp": 1531414910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> ?  this can't be an all-day activity.  it was supposed to be something quick that just takes an hour at most.  there needs to be more communication, more coding, please.</p>",
        "id": 129555410,
        "sender_full_name": "Sean",
        "timestamp": 1531421643
    },
    {
        "content": "<p>if you can't figure out the caps, that's okay, say something!  it's not a test.</p>",
        "id": 129555429,
        "sender_full_name": "Sean",
        "timestamp": 1531421668
    },
    {
        "content": "<p>Spent a ton of time, just not able to figure it out!</p>",
        "id": 129556102,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531422291
    },
    {
        "content": "<p>I drew an rcc (rcc1) with two tori(t1, t2) on the ends, then tried to subtract another rcc(rcc2) of the same height but lesser radius from the tori. After this fill the space with rcc2 and render. On paper it makes sense, but I just can't visualize it</p>",
        "id": 129556263,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531422445
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> you have the right idea with torii on the ends.  you just need to fill the divets they create (with another cylinder).</p>",
        "id": 129556453,
        "sender_full_name": "Sean",
        "timestamp": 1531422630
    },
    {
        "content": "<p>a rounding is about tangency, so you need something tangent with the side and top of the torus</p>",
        "id": 129556474,
        "sender_full_name": "Sean",
        "timestamp": 1531422657
    },
    {
        "content": "<p>which method do you think would be easier to implement in code?</p>",
        "id": 129557588,
        "sender_full_name": "Sean",
        "timestamp": 1531423696
    },
    {
        "content": "<p>Method 1 seems the simplest</p>",
        "id": 129557605,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531423732
    },
    {
        "content": "<p>The only motivation I see behind method3 is that it could allow the user to have two different types of rounded edges (different on top and bottom)?</p>",
        "id": 129557638,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531423779
    },
    {
        "content": "<p>that's a great point regarding the differences!</p>",
        "id": 129557699,
        "sender_full_name": "Sean",
        "timestamp": 1531423832
    },
    {
        "content": "<p>however, that would also imply not using canonical torus</p>",
        "id": 129557715,
        "sender_full_name": "Sean",
        "timestamp": 1531423860
    },
    {
        "content": "<p>canonical as in isometric?</p>",
        "id": 129557755,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531423914
    },
    {
        "content": "<p>but that's a great point, one could use an elliptical torus to taper sides differently or arb8's to create hexagonal pattern or ...</p>",
        "id": 129557806,
        "sender_full_name": "Sean",
        "timestamp": 1531423936
    },
    {
        "content": "<p>The only issue with the arb8 is that it might overflow right. then we'll have edges that are beyond the tori</p>",
        "id": 129557931,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531424117
    },
    {
        "content": "<p>canonical == ring torus with a circular cross-section</p>",
        "id": 129557939,
        "sender_full_name": "Sean",
        "timestamp": 1531424125
    },
    {
        "content": "<p>if you unioned them, sure, but that wouldn't be the way to go -- you'd want to subtract them</p>",
        "id": 129558002,
        "sender_full_name": "Sean",
        "timestamp": 1531424193
    },
    {
        "content": "<p>chamfers instead of rounds</p>",
        "id": 129558014,
        "sender_full_name": "Sean",
        "timestamp": 1531424219
    },
    {
        "content": "<p>We'd have to have restrictions on the relationship between the tube radius and the width of the arb8 as well...</p>",
        "id": 129558098,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531424310
    },
    {
        "content": "<p>so for the script, just keep it as simple as possible -- the parameters we talked about yesterday were perfect: cylinder start/end points, cylinder radius, and rounding radius</p>",
        "id": 129558143,
        "sender_full_name": "Sean",
        "timestamp": 1531424389
    },
    {
        "content": "<p>see if you can implement a function that takes those four and produces a method1 result</p>",
        "id": 129558202,
        "sender_full_name": "Sean",
        "timestamp": 1531424426
    },
    {
        "content": "<p>Ok sure</p>",
        "id": 129558217,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531424437
    },
    {
        "content": "<p>note my comment about needing to reduce the principal cylinder's length by the rounding radius on both ends</p>",
        "id": 129558235,
        "sender_full_name": "Sean",
        "timestamp": 1531424467
    },
    {
        "content": "<p>so if you specify a cylinder 100 long (e.g., from 0,0,0 to 0,0,100) with rounding 10, you'll create a cylinder 80 long (because you have to +10 rounding on each end), and then create your interior cylinder 100 long, but with a radius reduced by the rounding too.</p>",
        "id": 129558377,
        "sender_full_name": "Sean",
        "timestamp": 1531424653
    },
    {
        "content": "<p>make sense?</p>",
        "id": 129558379,
        "sender_full_name": "Sean",
        "timestamp": 1531424658
    },
    {
        "content": "<p>Yea does!</p>",
        "id": 129558407,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531424742
    },
    {
        "content": "<p>So, only the z co-ordinates would be impacted right</p>",
        "id": 129558491,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531424806
    },
    {
        "content": "<p>No no!</p>",
        "id": 129558574,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531424884
    },
    {
        "content": "<p>heh, not at all if the user is allowed to specify two random points</p>",
        "id": 129558633,
        "sender_full_name": "Sean",
        "timestamp": 1531424986
    },
    {
        "content": "<p>Yes, I'm just thinking my way around it (i'm poor at 3d visualization)</p>",
        "id": 129558719,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531425058
    },
    {
        "content": "<p>since the point of this isn't figuring out math, you can keep it simple and now support two points -- you could support a cylinder length instead and just model it at the origin, up the Z axis</p>",
        "id": 129558720,
        "sender_full_name": "Sean",
        "timestamp": 1531425061
    },
    {
        "content": "<p>if you want to figure it out, I can talk you through what's needed</p>",
        "id": 129558732,
        "sender_full_name": "Sean",
        "timestamp": 1531425084
    },
    {
        "content": "<p>I suggest keeping it simple</p>",
        "id": 129558750,
        "sender_full_name": "Sean",
        "timestamp": 1531425109
    },
    {
        "content": "<p>can always come back and make it better :)</p>",
        "id": 129558795,
        "sender_full_name": "Sean",
        "timestamp": 1531425124
    },
    {
        "content": "<blockquote>\n<p>since the point of this isn't figuring out math, you can keep it simple and now support two points -- you could support a cylinder length instead and just model it at the origin, up the Z axis</p>\n</blockquote>\n<p>I'll do this for now, but I'd really appreciate if you could talk me through the math too :P (I want it to be able to handle everything)</p>",
        "id": 129558808,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531425137
    },
    {
        "content": "<p>Yea!</p>",
        "id": 129558811,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531425142
    },
    {
        "content": "<p>I'll give the math a thought while I'm creating the simple version, will maybe hit you up later if I don't get it</p>",
        "id": 129558825,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531425170
    },
    {
        "content": "<p>so a python function then will take a cylinder length, cylinder radius, and rounding radius</p>",
        "id": 129558829,
        "sender_full_name": "Sean",
        "timestamp": 1531425181
    },
    {
        "content": "<p>Can we keep it to be two vertices, cylinder radius and rounding radius? We'll just pass it arguments such that only the z-coordinate changes</p>",
        "id": 129558913,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531425243
    },
    {
        "content": "<p>That way if we change the math later, we won't have to change a lot of the code</p>",
        "id": 129558928,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531425257
    },
    {
        "content": "<p>that way you can follow exactly what's in method1 in the sample geometry, which essentially is the result of \"function(1100, 250, 50)\" iirc</p>",
        "id": 129558940,
        "sender_full_name": "Sean",
        "timestamp": 1531425273
    },
    {
        "content": "<p>I'd keep it simple arguments that are valid, not plan for future but be wrong in the meantime.. there's not going to be a lot of code to change</p>",
        "id": 129558990,
        "sender_full_name": "Sean",
        "timestamp": 1531425345
    },
    {
        "content": "<p>Ok sure</p>",
        "id": 129559025,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531425363
    },
    {
        "content": "<p>this whole thing is probably going to be &lt; 40 lines with validation and bounds checking</p>",
        "id": 129559036,
        "sender_full_name": "Sean",
        "timestamp": 1531425364
    },
    {
        "content": "<p>Yea. Sean, why do you use \"no tree\"?</p>",
        "id": 129559058,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531425412
    },
    {
        "content": "<p>the geometry is made in six lines</p>",
        "id": 129559059,
        "sender_full_name": "Sean",
        "timestamp": 1531425413
    },
    {
        "content": "<p>what do you mean \"no tree\"?</p>",
        "id": 129559068,
        "sender_full_name": "Sean",
        "timestamp": 1531425435
    },
    {
        "content": "<p>... comb region no tree {u {u ... . Is it because you don't want it to print the tree structure?</p>",
        "id": 129559158,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531425564
    },
    {
        "content": "<p>heh<br>\nyou're reading the .asc file ... just because it's text doesn't mean you should be reading it like it's text ;)</p>",
        "id": 129559248,
        "sender_full_name": "Sean",
        "timestamp": 1531425649
    },
    {
        "content": "<p>that's the serialization format of a comb in .asc format</p>",
        "id": 129559266,
        "sender_full_name": "Sean",
        "timestamp": 1531425670
    },
    {
        "content": "<p>those are key value pairings in Tcl list form</p>",
        "id": 129559276,
        "sender_full_name": "Sean",
        "timestamp": 1531425690
    },
    {
        "content": "<p>Oooooh!</p>",
        "id": 129559284,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531425699
    },
    {
        "content": "<p>region=no</p>",
        "id": 129559298,
        "sender_full_name": "Sean",
        "timestamp": 1531425722
    },
    {
        "content": "<p>tree=\"{u {u ...\"</p>",
        "id": 129559337,
        "sender_full_name": "Sean",
        "timestamp": 1531425725
    },
    {
        "content": "<p>Makes a lot more sense :|</p>",
        "id": 129559360,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531425758
    },
    {
        "content": "<p>if you compile, you'll have a rounds.g in your share/db folder, or directly run asc2g rounds.asc rounds.g</p>",
        "id": 129559361,
        "sender_full_name": "Sean",
        "timestamp": 1531425760
    },
    {
        "content": "<p>then open that .g in archer or mged</p>",
        "id": 129559376,
        "sender_full_name": "Sean",
        "timestamp": 1531425779
    },
    {
        "content": "<p>Alright</p>",
        "id": 129559395,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531425803
    },
    {
        "content": "<p>that's a v5 asc file .. if I had uploaded it as a v4 asc, you probably wouldn't have tried to read it ;)</p>",
        "id": 129559471,
        "sender_full_name": "Sean",
        "timestamp": 1531425872
    },
    {
        "content": "<p>if you look at the other .asc files, you'll notice how they're different</p>",
        "id": 129559478,
        "sender_full_name": "Sean",
        "timestamp": 1531425888
    },
    {
        "content": "<p>Haha! Just saw some of those, I don't think I can really spend time deducing them. <span class=\"emoji emoji-1f613\" title=\"sweat\">:sweat:</span></p>",
        "id": 129559591,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531426036
    },
    {
        "content": "<p>basically, you're not supposed to read them ;)</p>",
        "id": 129562348,
        "sender_full_name": "Sean",
        "timestamp": 1531429114
    },
    {
        "content": "<p>I'm a little stuck with respect to the geometry. For the end of the cylinder away from the vertex, I'm able to  achieve a perfect rounded edge.</p>",
        "id": 129563941,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531430911
    },
    {
        "content": "<p>On the end of the cylinder near the origin, I make the outer cylinder with : in outer rcc 0 0 10 0 0 90 40 and the filler cylinder with : in filler rcc 0 0 0 0 0 100 30</p>",
        "id": 129563978,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531430985
    },
    {
        "content": "<p>r/sphere/cylinder</p>",
        "id": 129564028,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531431016
    },
    {
        "content": "<p>Despite having different inital vertices both the cylinders seem to have the same start point. But if I change to : in outer rcc 0 0 0 10 0 0 80 40, I can see the outer cylinder moving away from the origin</p>",
        "id": 129564078,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531431105
    },
    {
        "content": "<p>your filler cylinder shouldn't have a radius larger than your outer...</p>",
        "id": 129564138,
        "sender_full_name": "Sean",
        "timestamp": 1531431160
    },
    {
        "content": "<p>Filler had a radius of 30 and the outer of 40, that's not an issue right</p>",
        "id": 129564164,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531431215
    },
    {
        "content": "<p>if you create them in mged, you can highlight them with \"sed outer\", followed by \"reject\"</p>",
        "id": 129564167,
        "sender_full_name": "Sean",
        "timestamp": 1531431218
    },
    {
        "content": "<p>I think you may be misinterpreting the wireframe</p>",
        "id": 129564226,
        "sender_full_name": "Sean",
        "timestamp": 1531431267
    },
    {
        "content": "<p>Could be, I'll figure it out.</p>",
        "id": 129564237,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531431286
    },
    {
        "content": "<p>it can be confusing to read them right if you never have before.  turning on \"depth queuing\" in the Misc menu may help a little</p>",
        "id": 129564256,
        "sender_full_name": "Sean",
        "timestamp": 1531431316
    },
    {
        "content": "<p>Done! <br>\n<span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  : <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/rounded_rcc.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/rounded_rcc.py\">https://github.com/Killthebug/python-brlcad/blob/master/examples/rounded_rcc.py</a></p>",
        "id": 129565014,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531432260
    },
    {
        "content": "<p>excellent!  let's see some examples...</p>",
        "id": 129609920,
        "sender_full_name": "Sean",
        "timestamp": 1531498004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> excellent too, can you commit what you have?  I can probably finish is up today.</p>",
        "id": 129609950,
        "sender_full_name": "Sean",
        "timestamp": 1531498045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , what's the plan for the next month then?</p>",
        "id": 129622558,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531509956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> you tell me first :)</p>",
        "id": 129623318,
        "sender_full_name": "Sean",
        "timestamp": 1531510659
    },
    {
        "content": "<p>and where are those examples? :)</p>",
        "id": 129623329,
        "sender_full_name": "Sean",
        "timestamp": 1531510675
    },
    {
        "content": "<p>Just saw the chat, will make em soon and share. :)</p>",
        "id": 129623425,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531510774
    },
    {
        "content": "<p>Also, should I include some sort of validation/check in the script to prevent possibly incorrect values being passed</p>",
        "id": 129623492,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531510812
    },
    {
        "content": "<p>sure, sanity checks for what actually works is always a good idea</p>",
        "id": 129623507,
        "sender_full_name": "Sean",
        "timestamp": 1531510845
    },
    {
        "content": "<p>I think the final part of the project would be to pair python-brlcad with the script primitive</p>",
        "id": 129623532,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531510885
    },
    {
        "content": "<p>can't have a bend radius greater than the cylinder radius, can't be more than half the cylinder length, ...</p>",
        "id": 129623552,
        "sender_full_name": "Sean",
        "timestamp": 1531510921
    },
    {
        "content": "<p>Sure! I'll think of anything else if that might be an issue</p>",
        "id": 129623621,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531510971
    },
    {
        "content": "<blockquote>\n<p>I think the final part of the project would be to pair python-brlcad with the script primitive</p>\n</blockquote>\n<p>I'm hoping we can get further than this, but I fully agree with this as a goal as it puts python into user hands</p>",
        "id": 129623623,
        "sender_full_name": "Sean",
        "timestamp": 1531510974
    },
    {
        "content": "<p>one thing we need to figure out quickly is how this all gets used</p>",
        "id": 129623643,
        "sender_full_name": "Sean",
        "timestamp": 1531510998
    },
    {
        "content": "<p>True, that's what I wanted to know. Once we couple with with the script primitive what happens?? What's the workflow like? When is it used?</p>",
        "id": 129623682,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511037
    },
    {
        "content": "<p>what the actual mechanism looks like and how it's hooked up via script objects, whether we need separate objects to instantiate them or not</p>",
        "id": 129623683,
        "sender_full_name": "Sean",
        "timestamp": 1531511038
    },
    {
        "content": "<blockquote>\n<p>I'm hoping we can get further than this, but I fully agree with this as a goal as it puts python into user hands</p>\n</blockquote>\n<p>I think the project will have a lot more thing to be worked on, I was just setting the month's target as perfecting the pairing between them</p>",
        "id": 129623739,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511095
    },
    {
        "content": "<p>so I think we need to think about end-user design</p>",
        "id": 129623778,
        "sender_full_name": "Sean",
        "timestamp": 1531511143
    },
    {
        "content": "<p>what we want that to look like since that will drive some of the implementation decisions</p>",
        "id": 129623830,
        "sender_full_name": "Sean",
        "timestamp": 1531511169
    },
    {
        "content": "<p>Uh-huh.. So let's say I want to construct a lot of rounded cylinders</p>",
        "id": 129623843,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511180
    },
    {
        "content": "<p>And let's also assume, there isn't a script for rounded cylinders.</p>",
        "id": 129623852,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511196
    },
    {
        "content": "<p>k</p>",
        "id": 129623859,
        "sender_full_name": "Sean",
        "timestamp": 1531511205
    },
    {
        "content": "<p>So I write a script in python (like the one I had shared above)</p>",
        "id": 129623862,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511212
    },
    {
        "content": "<p>first question is whether that script can go into the .g or if it MUST live in an outside file</p>",
        "id": 129623882,
        "sender_full_name": "Sean",
        "timestamp": 1531511243
    },
    {
        "content": "<p>I think it should be able to go into the .g since we do want a .g to fully function if someone wants it to be portable by itself, but not limited to being in the .g</p>",
        "id": 129623985,
        "sender_full_name": "Sean",
        "timestamp": 1531511328
    },
    {
        "content": "<p>which would be similar to how we handle image data like textures, they can be embedded or in external files</p>",
        "id": 129624007,
        "sender_full_name": "Sean",
        "timestamp": 1531511350
    },
    {
        "content": "<p>Yea, first off I don't know how it can be inside a .g file and secondly I don't think it should be because it locks up a lot of flexibility</p>",
        "id": 129624100,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511422
    },
    {
        "content": "<p>you can put anything into a .g, it's just a collection of objects -- you can stash a microsoft word document in there, for example</p>",
        "id": 129624140,
        "sender_full_name": "Sean",
        "timestamp": 1531511468
    },
    {
        "content": "<p>Uh-huh</p>",
        "id": 129624170,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511504
    },
    {
        "content": "<p>Woah, didn't know that (too)!</p>",
        "id": 129624171,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511505
    },
    {
        "content": "<p>Once I make the script, I can pass it to the script primitive and some params with it to construct my objects in mged or archer..</p>",
        "id": 129624230,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511535
    },
    {
        "content": "<p>and you can pull them out, use external tools on them, etc</p>",
        "id": 129624233,
        "sender_full_name": "Sean",
        "timestamp": 1531511536
    },
    {
        "content": "<p>right, so script exists (somewhere)</p>",
        "id": 129624249,
        "sender_full_name": "Sean",
        "timestamp": 1531511560
    },
    {
        "content": "<p>Woah, is .g a universal format or something that was made by brlcad?</p>",
        "id": 129624278,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511587
    },
    {
        "content": "<p>Yea, somewhere (we've got to figure out how paths are decided then)</p>",
        "id": 129624288,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511600
    },
    {
        "content": "<blockquote>\n<p>Woah, is .g a universal format or something that was made by brlcad?</p>\n</blockquote>\n<p>yes ;)</p>",
        "id": 129624352,
        "sender_full_name": "Sean",
        "timestamp": 1531511645
    },
    {
        "content": "<p>Or we could have a predecided directory, but that would be a pain.</p>",
        "id": 129624365,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511656
    },
    {
        "content": "<p>Damn, sweet!</p>",
        "id": 129624369,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511661
    },
    {
        "content": "<p>it was designed, has a formal specification, we've talked about maybe submitting it to ISO, but it's pretty flexible as-is</p>",
        "id": 129624400,
        "sender_full_name": "Sean",
        "timestamp": 1531511692
    },
    {
        "content": "<p>we <em>could</em> even require that the script be embedded and if a user wants it to be external, they'd #import or whatever in the embedded source</p>",
        "id": 129624425,
        "sender_full_name": "Sean",
        "timestamp": 1531511733
    },
    {
        "content": "<p>so options there, I don't see any problems</p>",
        "id": 129624497,
        "sender_full_name": "Sean",
        "timestamp": 1531511787
    },
    {
        "content": "<p>Amazing. (Just out of curiosity regarding the .g files, is there some documentation about how it was made?)</p>",
        "id": 129624508,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511803
    },
    {
        "content": "<p>so the script exists, and we need some way to instantiate what it creates</p>",
        "id": 129624511,
        "sender_full_name": "Sean",
        "timestamp": 1531511808
    },
    {
        "content": "<p>Be embeded?</p>",
        "id": 129624519,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531511823
    },
    {
        "content": "<p>there's an old out-of-date spec file here <a href=\"https://brlcad.org/w/images/2/2d/BRL_CAD_g_format_V5.pdf\" target=\"_blank\" title=\"https://brlcad.org/w/images/2/2d/BRL_CAD_g_format_V5.pdf\">https://brlcad.org/w/images/2/2d/BRL_CAD_g_format_V5.pdf</a></p>",
        "id": 129624558,
        "sender_full_name": "Sean",
        "timestamp": 1531511867
    },
    {
        "content": "<p>that's a conversion from the real source with lots of sections removed, that was some 15 years ago</p>",
        "id": 129624636,
        "sender_full_name": "Sean",
        "timestamp": 1531511919
    },
    {
        "content": "<p>Oh embeded as in, in the script primitive? So we can have some important procedures be embeded?</p>",
        "id": 129624775,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512037
    },
    {
        "content": "<p>the documentation on how it was made is in old mailing list archives, not easy to get to (might be some details in the source repo doc dir)</p>",
        "id": 129624777,
        "sender_full_name": "Sean",
        "timestamp": 1531512039
    },
    {
        "content": "<p>embedded as in inside the .g file, we could <em>require</em> that there be at least a snippet of code to import and call a function \\</p>",
        "id": 129624890,
        "sender_full_name": "Sean",
        "timestamp": 1531512134
    },
    {
        "content": "<p>Great, I'll try and gather all that I can! (It's very sad so much documentation get's lost over the years, but again, can't do anything about that)</p>",
        "id": 129624896,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512142
    },
    {
        "content": "<p>the only reason for doing that would be to simplify the usage -- wouldn't have to have options for specifying whether the script is in an object or in a file</p>",
        "id": 129624908,
        "sender_full_name": "Sean",
        "timestamp": 1531512161
    },
    {
        "content": "<p>Alright alright</p>",
        "id": 129624921,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512179
    },
    {
        "content": "<p>that wasn't in response to gathering docs :)</p>",
        "id": 129624945,
        "sender_full_name": "Sean",
        "timestamp": 1531512197
    },
    {
        "content": "<p>Haha yea! :P</p>",
        "id": 129624961,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512219
    },
    {
        "content": "<p>the only reason for requiring a script be in the .g would be to simply usage</p>",
        "id": 129624962,
        "sender_full_name": "Sean",
        "timestamp": 1531512220
    },
    {
        "content": "<p>you're welcome to gather docs or not -- I'm not sure what you'd do with them, and you definitely don't have access to all of them :)</p>",
        "id": 129625025,
        "sender_full_name": "Sean",
        "timestamp": 1531512248
    },
    {
        "content": "<p>definitely not helpful for your project, but spelunking is fun :)</p>",
        "id": 129625042,
        "sender_full_name": "Sean",
        "timestamp": 1531512283
    },
    {
        "content": "<blockquote>\n<p>the only reason for requiring a script be in the .g would be to simply usage</p>\n</blockquote>\n<p>True. I hadn't thought of it like this. I always assumed that we'd have a directory where we'd have a bunch of scripts that could be used.</p>",
        "id": 129625057,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512305
    },
    {
        "content": "<p>so ...</p>",
        "id": 129625058,
        "sender_full_name": "Sean",
        "timestamp": 1531512305
    },
    {
        "content": "<p>well that's a good point</p>",
        "id": 129625066,
        "sender_full_name": "Sean",
        "timestamp": 1531512323
    },
    {
        "content": "<p>we'll likely end up shipping a set of standard scripts that are available to users, and those definitely won't be embedded in the .g</p>",
        "id": 129625080,
        "sender_full_name": "Sean",
        "timestamp": 1531512359
    },
    {
        "content": "<p>And that way people could modify any of the scripts depending on how they might want it to</p>",
        "id": 129625135,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512384
    },
    {
        "content": "<p>do you know how python's import mechanism works?</p>",
        "id": 129625138,
        "sender_full_name": "Sean",
        "timestamp": 1531512388
    },
    {
        "content": "<p>I mean how it searches, how that's controlled?</p>",
        "id": 129625146,
        "sender_full_name": "Sean",
        "timestamp": 1531512402
    },
    {
        "content": "<p>Not very specifically, but I have vague ideas. I could learn by tomorrow</p>",
        "id": 129625164,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512424
    },
    {
        "content": "<p>don't worry about it then, just wondering</p>",
        "id": 129625176,
        "sender_full_name": "Sean",
        "timestamp": 1531512442
    },
    {
        "content": "<p>back to instantiation...</p>",
        "id": 129625195,
        "sender_full_name": "Sean",
        "timestamp": 1531512472
    },
    {
        "content": "<p>I know it can import modules and objects and usually looks up in a standard directory (where all packages are present) or the same directory if you a __init__.py in it.</p>",
        "id": 129625198,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512476
    },
    {
        "content": "<p>Yea..</p>",
        "id": 129625201,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512481
    },
    {
        "content": "<p>*you have a</p>",
        "id": 129625249,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512492
    },
    {
        "content": "<p>so the 'in' command is the canonical entry point for creating objects by hand</p>",
        "id": 129625272,
        "sender_full_name": "Sean",
        "timestamp": 1531512552
    },
    {
        "content": "<p>in mysphere sph ...</p>",
        "id": 129625277,
        "sender_full_name": "Sean",
        "timestamp": 1531512565
    },
    {
        "content": "<p>Uh-huh</p>",
        "id": 129625279,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512568
    },
    {
        "content": "<p>Yea</p>",
        "id": 129625282,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512571
    },
    {
        "content": "<p>so first thought that comes to my mind is whether we want to propagate scripts up to being first-class primitives or not</p>",
        "id": 129625342,
        "sender_full_name": "Sean",
        "timestamp": 1531512607
    },
    {
        "content": "<p>in myroundedrcc rounded_rcc ...</p>",
        "id": 129625356,
        "sender_full_name": "Sean",
        "timestamp": 1531512626
    },
    {
        "content": "<p>probably not that low, but it's an interesting thought</p>",
        "id": 129625375,
        "sender_full_name": "Sean",
        "timestamp": 1531512643
    },
    {
        "content": "<p>Ohh! I don't think we should do something like that</p>",
        "id": 129625376,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512645
    },
    {
        "content": "<p>But then that way if I introduce a new script, I'll have to recompile the code so that it reflects in the in command</p>",
        "id": 129625402,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512683
    },
    {
        "content": "<p>next would be whether instantiations are separate from the scripts themselves if they're embedded</p>",
        "id": 129625413,
        "sender_full_name": "Sean",
        "timestamp": 1531512702
    },
    {
        "content": "<p>How about something life : in myroundedrcc script rounded_rcc</p>",
        "id": 129625418,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512708
    },
    {
        "content": "<p>yes, that's more likely if we don't propagate to first-class</p>",
        "id": 129625486,
        "sender_full_name": "Sean",
        "timestamp": 1531512783
    },
    {
        "content": "<p>good</p>",
        "id": 129625496,
        "sender_full_name": "Sean",
        "timestamp": 1531512788
    },
    {
        "content": "<p>so there's specification of the script source and specification of the instantiation</p>",
        "id": 129625510,
        "sender_full_name": "Sean",
        "timestamp": 1531512813
    },
    {
        "content": "<p>Yea..</p>",
        "id": 129625527,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512839
    },
    {
        "content": "<p>they could be one in the same, but I'm not sure they should</p>",
        "id": 129625528,
        "sender_full_name": "Sean",
        "timestamp": 1531512840
    },
    {
        "content": "<p>Now that I think of it, it might be different..</p>",
        "id": 129625586,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512864
    },
    {
        "content": "<p>for example, both together might be something like: in myrcc script FILE FUNCTION ARGS</p>",
        "id": 129625605,
        "sender_full_name": "Sean",
        "timestamp": 1531512897
    },
    {
        "content": "<p>Alright..</p>",
        "id": 129625619,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512911
    },
    {
        "content": "<p>in myrcc script /path/to/rounded_rcc.py rounded_rcc 100 50 10</p>",
        "id": 129625632,
        "sender_full_name": "Sean",
        "timestamp": 1531512930
    },
    {
        "content": "<p>Perfect</p>",
        "id": 129625636,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531512939
    },
    {
        "content": "<p>with that, the script lives in a file, we specify the entry point, and arguments to pass -- does that work for all argument types a script might want to pass?</p>",
        "id": 129625696,
        "sender_full_name": "Sean",
        "timestamp": 1531512985
    },
    {
        "content": "<p>I think so ...</p>",
        "id": 129625712,
        "sender_full_name": "Sean",
        "timestamp": 1531513015
    },
    {
        "content": "<p>Uhm, so I don't know about things sketch.. but for the primitives that we're dealing with for now, I think it should all go through</p>",
        "id": 129625724,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531513038
    },
    {
        "content": "<p>well basically it's asking if there's anything we might <em>need</em> to pass to a python function</p>",
        "id": 129625797,
        "sender_full_name": "Sean",
        "timestamp": 1531513104
    },
    {
        "content": "<p>that isn't easiliy described as an int/float/string</p>",
        "id": 129625803,
        "sender_full_name": "Sean",
        "timestamp": 1531513113
    },
    {
        "content": "<p>Nothing other than those would be required</p>",
        "id": 129625812,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531513131
    },
    {
        "content": "<p>so let's call that \"option 1\" .. script objects that specify source and instantiation</p>",
        "id": 129625919,
        "sender_full_name": "Sean",
        "timestamp": 1531513210
    },
    {
        "content": "<p>other options?</p>",
        "id": 129625927,
        "sender_full_name": "Sean",
        "timestamp": 1531513221
    },
    {
        "content": "<p>_thinking_</p>",
        "id": 129626165,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531513457
    },
    {
        "content": "<p>I've always had only the option1 in my mind when I've thought of including the scripts..</p>",
        "id": 129626224,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531513524
    },
    {
        "content": "<p>How about re-using instantiations?</p>",
        "id": 129626243,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531513553
    },
    {
        "content": "<p>No, that's just complicating some simple things..</p>",
        "id": 129626312,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531513594
    },
    {
        "content": "<p>think about what you originally said -- say you have a bunch of instantiations</p>",
        "id": 129626367,
        "sender_full_name": "Sean",
        "timestamp": 1531513666
    },
    {
        "content": "<p>say 100</p>",
        "id": 129626378,
        "sender_full_name": "Sean",
        "timestamp": 1531513677
    },
    {
        "content": "<p>easy enough to create them all.  now we decide to change the name of our function from rounded_rcc to rounded_cylinder ...</p>",
        "id": 129626495,
        "sender_full_name": "Sean",
        "timestamp": 1531513748
    },
    {
        "content": "<p>Uh-huh..</p>",
        "id": 129626520,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531513775
    },
    {
        "content": "<p>wham, 100 broken objects .. what can we do about that</p>",
        "id": 129626522,
        "sender_full_name": "Sean",
        "timestamp": 1531513777
    },
    {
        "content": "<p>Taking a step back, what are instantiations here?</p>",
        "id": 129626541,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531513801
    },
    {
        "content": "<p>Even if you change the function name, you need to re-compile all the code</p>",
        "id": 129626800,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514006
    },
    {
        "content": "<p>Now, talking about the instances we had created earlier, they're independent of the function_name right cause what matters to us is the object name (myrcc) which contains commands on how to build the object we want</p>",
        "id": 129626876,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514056
    },
    {
        "content": "<p>instantiations are separate instances of that script being run</p>",
        "id": 129626877,
        "sender_full_name": "Sean",
        "timestamp": 1531514058
    },
    {
        "content": "<p>so in that first example, it's a rounded cylinder length 100, radius 50, rounding 10</p>",
        "id": 129626892,
        "sender_full_name": "Sean",
        "timestamp": 1531514091
    },
    {
        "content": "<p>OK</p>",
        "id": 129626901,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514099
    },
    {
        "content": "<p>that's 1 instantiation, an object in the database with name 'myrcc'</p>",
        "id": 129626922,
        "sender_full_name": "Sean",
        "timestamp": 1531514118
    },
    {
        "content": "<p>I can copy that, rename it, delete it, scale it, translate it, etc</p>",
        "id": 129626926,
        "sender_full_name": "Sean",
        "timestamp": 1531514132
    },
    {
        "content": "<p>Yea..</p>",
        "id": 129626933,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514143
    },
    {
        "content": "<p>so instantiation == geometry</p>",
        "id": 129626939,
        "sender_full_name": "Sean",
        "timestamp": 1531514156
    },
    {
        "content": "<p>geometry resulting from running the script</p>",
        "id": 129626979,
        "sender_full_name": "Sean",
        "timestamp": 1531514163
    },
    {
        "content": "<p>Alright, yea. So the instantiation is independent of the function name in the script right?</p>",
        "id": 129627001,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514186
    },
    {
        "content": "<p>in \"option 1\" yes ...</p>",
        "id": 129627008,
        "sender_full_name": "Sean",
        "timestamp": 1531514208
    },
    {
        "content": "<p>I suppose we could run the script right then and there, and be done with it, so renaming the function wouldn't break the objects</p>",
        "id": 129627029,
        "sender_full_name": "Sean",
        "timestamp": 1531514231
    },
    {
        "content": "<p>Yea.. So this way even changing the function name doesn't become an issue</p>",
        "id": 129627038,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514235
    },
    {
        "content": "<p>let's call that \"option 2\"</p>",
        "id": 129627041,
        "sender_full_name": "Sean",
        "timestamp": 1531514237
    },
    {
        "content": "<p>downside being say instead of changing the function name, I change the implementation ... now I have to re-run all my instantiations</p>",
        "id": 129627080,
        "sender_full_name": "Sean",
        "timestamp": 1531514283
    },
    {
        "content": "<p>Yea, that's almost like creating a new script in it's own.</p>",
        "id": 129627138,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514311
    },
    {
        "content": "<p>basically, it's not much different than just running the script, importing the result .. no association</p>",
        "id": 129627176,
        "sender_full_name": "Sean",
        "timestamp": 1531514380
    },
    {
        "content": "<p>I was thinking something more dynamic that stays in sync and gets evaluated on-demand</p>",
        "id": 129627188,
        "sender_full_name": "Sean",
        "timestamp": 1531514400
    },
    {
        "content": "<p>Hmm.. So we track changes in the script and then modify all the instances of a script before it was changed?</p>",
        "id": 129627258,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514439
    },
    {
        "content": "<p>I don't need script objects if all i'm going to do is run \"exec ./rounded_rcc 100 50 10 ; dbconcat file.g\"</p>",
        "id": 129627290,
        "sender_full_name": "Sean",
        "timestamp": 1531514490
    },
    {
        "content": "<p>I don't think we could reliably track changes in the script</p>",
        "id": 129627317,
        "sender_full_name": "Sean",
        "timestamp": 1531514521
    },
    {
        "content": "<p>but we shouldn't need to</p>",
        "id": 129627357,
        "sender_full_name": "Sean",
        "timestamp": 1531514524
    },
    {
        "content": "<p>if it's on-demand, the script can be evaluated as needed</p>",
        "id": 129627388,
        "sender_full_name": "Sean",
        "timestamp": 1531514562
    },
    {
        "content": "<blockquote>\n<p>I suppose we could run the script right then and there, and be done with it, so renaming the function wouldn't break the objects</p>\n</blockquote>\n<p>Like you said</p>",
        "id": 129627397,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514567
    },
    {
        "content": "<p>hey, so I see the time for you -- is this something to pick up later?</p>",
        "id": 129627402,
        "sender_full_name": "Sean",
        "timestamp": 1531514573
    },
    {
        "content": "<p>or keep going, i'm fine either way :)</p>",
        "id": 129627431,
        "sender_full_name": "Sean",
        "timestamp": 1531514600
    },
    {
        "content": "<p>I've got 10 minutes before it's bedtime so I'd like to continue a little more :P</p>",
        "id": 129627458,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514637
    },
    {
        "content": "<p>okay</p>",
        "id": 129627496,
        "sender_full_name": "Sean",
        "timestamp": 1531514643
    },
    {
        "content": "<p>I mean, if that's okay with you?</p>",
        "id": 129627512,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514654
    },
    {
        "content": "<p>like I said, I'm fine either way :)</p>",
        "id": 129627519,
        "sender_full_name": "Sean",
        "timestamp": 1531514663
    },
    {
        "content": "<p>I like the option of running the script then and there and finishing it off</p>",
        "id": 129627543,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514686
    },
    {
        "content": "<p>my point earlier is that if we just run the script and are done with it -- that's not a very helpful feature</p>",
        "id": 129627566,
        "sender_full_name": "Sean",
        "timestamp": 1531514703
    },
    {
        "content": "<p>users could do that now just by running the script outside of mged for example</p>",
        "id": 129627582,
        "sender_full_name": "Sean",
        "timestamp": 1531514714
    },
    {
        "content": "<p>there's not really much added value</p>",
        "id": 129627599,
        "sender_full_name": "Sean",
        "timestamp": 1531514732
    },
    {
        "content": "<p>we save them 1 step, importing what they created (dbconcat)</p>",
        "id": 129627615,
        "sender_full_name": "Sean",
        "timestamp": 1531514752
    },
    {
        "content": "<p>Alright..</p>",
        "id": 129627619,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514760
    },
    {
        "content": "<p>that's where my original thinking is with scripts that live in the database, I want to edit code on the fly and see geometry change :)</p>",
        "id": 129627693,
        "sender_full_name": "Sean",
        "timestamp": 1531514804
    },
    {
        "content": "<p>like what if while you were writing your rounded_rcc.py script, you could see the geometry pop up in the window, add one more line to create a torus and you see it</p>",
        "id": 129627731,
        "sender_full_name": "Sean",
        "timestamp": 1531514847
    },
    {
        "content": "<p>instead of re-running, opening the geometry file, running ls, drawing the geometry object, etc</p>",
        "id": 129627753,
        "sender_full_name": "Sean",
        "timestamp": 1531514876
    },
    {
        "content": "<p>edit, see it</p>",
        "id": 129627795,
        "sender_full_name": "Sean",
        "timestamp": 1531514883
    },
    {
        "content": "<p>I think that's what we want</p>",
        "id": 129627813,
        "sender_full_name": "Sean",
        "timestamp": 1531514890
    },
    {
        "content": "<p>Ahhh!</p>",
        "id": 129627815,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514893
    },
    {
        "content": "<p>I get it</p>",
        "id": 129627819,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514897
    },
    {
        "content": "<p>So, are .g files that are being rendered refreshed constantly?</p>",
        "id": 129627830,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514915
    },
    {
        "content": "<p>Yes!</p>",
        "id": 129627843,
        "sender_full_name": "Sean",
        "timestamp": 1531514934
    },
    {
        "content": "<p>or at least we could make them do that</p>",
        "id": 129627857,
        "sender_full_name": "Sean",
        "timestamp": 1531514944
    },
    {
        "content": "<p>Again, something I just learnt!</p>",
        "id": 129627865,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531514949
    },
    {
        "content": "<p>everything goes through the primitive callbacks, so in the case of a script object we can choose to re-evaluate the script every time or only once</p>",
        "id": 129627903,
        "sender_full_name": "Sean",
        "timestamp": 1531514998
    },
    {
        "content": "<p>I think it should re-evaluate every time for starters</p>",
        "id": 129627972,
        "sender_full_name": "Sean",
        "timestamp": 1531515030
    },
    {
        "content": "<p>Alright, alright.. So that'd be something we account for when we're creating the script primitive?</p>",
        "id": 129627974,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515031
    },
    {
        "content": "<p>right, so some basic background there -- every primitive defines a set of functions</p>",
        "id": 129627990,
        "sender_full_name": "Sean",
        "timestamp": 1531515058
    },
    {
        "content": "<p>Ok..</p>",
        "id": 129628001,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515069
    },
    {
        "content": "<p>one of those functions for example, plot(), creates the wireframe you see when you run \"draw someobject\"</p>",
        "id": 129628041,
        "sender_full_name": "Sean",
        "timestamp": 1531515106
    },
    {
        "content": "<p>when you run \"rt someobject\", it happens to call prep() once and shot() lots of times to render an image</p>",
        "id": 129628115,
        "sender_full_name": "Sean",
        "timestamp": 1531515155
    },
    {
        "content": "<p>when you run \"l someobject\", it calls describe()</p>",
        "id": 129628131,
        "sender_full_name": "Sean",
        "timestamp": 1531515176
    },
    {
        "content": "<p>Alright</p>",
        "id": 129628133,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515179
    },
    {
        "content": "<p>so we define all of those functions, and would for a script object</p>",
        "id": 129628147,
        "sender_full_name": "Sean",
        "timestamp": 1531515188
    },
    {
        "content": "<p>Are these defined in each primitive or are they defined somewhere else and then called for a specific primitive?</p>",
        "id": 129628162,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515206
    },
    {
        "content": "<p>so the basic idea is that we'd call the python interp before most if not all of those functions to get the geometry</p>",
        "id": 129628163,
        "sender_full_name": "Sean",
        "timestamp": 1531515209
    },
    {
        "content": "<p>Yea</p>",
        "id": 129628187,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515238
    },
    {
        "content": "<blockquote>\n<p>Are these defined in each primitive or are they defined somewhere else and then called for a specific primitive?</p>\n</blockquote>\n<p>no comprendo .. don't understand the question</p>",
        "id": 129628188,
        "sender_full_name": "Sean",
        "timestamp": 1531515238
    },
    {
        "content": "<p>So let's say you have : describe(). It serves the same purpose for each primitive. Now, do you define a describe() for each primitive (in each file for a primitive) or is it a single function places somewhere that is called and the primitive is passed to it.</p>",
        "id": 129628276,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515307
    },
    {
        "content": "<p>serves the same purpose, but is different for every one of them, so yeah each primitive defines itself</p>",
        "id": 129628365,
        "sender_full_name": "Sean",
        "timestamp": 1531515366
    },
    {
        "content": "<p>every primitive defines this set of callbacks (you can browse them in src/librt/primitives ... 1 subdir per primitive) -- this is what <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> is stubbing for us empty</p>",
        "id": 129628374,
        "sender_full_name": "Sean",
        "timestamp": 1531515369
    },
    {
        "content": "<p>Yea, I've gone through some of those to get a basic idea about them</p>",
        "id": 129628392,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515405
    },
    {
        "content": "<p>it's not describe(), it's actually rt_ell_describe() and rt_arb8_describe() and ... we'll have an rt_script_describe()</p>",
        "id": 129628398,
        "sender_full_name": "Sean",
        "timestamp": 1531515411
    },
    {
        "content": "<p>Ahh! Ok.</p>",
        "id": 129628408,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515423
    },
    {
        "content": "<p>there is a general rt_obj_describe where you pass the object, but it automatically calls the rt_*_describe() for that object</p>",
        "id": 129628415,
        "sender_full_name": "Sean",
        "timestamp": 1531515436
    },
    {
        "content": "<p>it's all implemented in a form of object-oriented C</p>",
        "id": 129628433,
        "sender_full_name": "Sean",
        "timestamp": 1531515457
    },
    {
        "content": "<p>Sweet</p>",
        "id": 129628497,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515496
    },
    {
        "content": "<p>so we have options 1 and 2 which are \"in obj script file func params...\" and then only difference being whether we evaluate file every time or once and forget the file</p>",
        "id": 129628518,
        "sender_full_name": "Sean",
        "timestamp": 1531515532
    },
    {
        "content": "<p>Hmm yea. Now again, I think it's best if you decide this, cause you'd know what the users would prefer</p>",
        "id": 129628549,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515573
    },
    {
        "content": "<p>Can we continue this tomorrow? :) It's 2:30AM and I'm going to spoil my weekend if I sleep into tomorrow afternoon!</p>",
        "id": 129628651,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515660
    },
    {
        "content": "<p>there's an option 3 where we separate the script specification from instantiation, so that might be something like:  in rrcc script /path/to/rounded_rcc.py rounded_rcc    .... and another command like \"script create myrcc rrcc 100 50 10\"</p>",
        "id": 129628669,
        "sender_full_name": "Sean",
        "timestamp": 1531515679
    },
    {
        "content": "<p>Oooh! So if you change the script, you recompile and it then changes the instantiation?</p>",
        "id": 129628751,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515730
    },
    {
        "content": "<p>option 4: or even two separate primitives, one for script, another for instance: in myrcc instance rounded_rcc 100 50 10</p>",
        "id": 129628762,
        "sender_full_name": "Sean",
        "timestamp": 1531515741
    },
    {
        "content": "<p>But this won't do the real-time rendering thing (option3)</p>",
        "id": 129628772,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515749
    },
    {
        "content": "<p>I think option 4 could be reached once we implement option 2 followed by option 3</p>",
        "id": 129628800,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515792
    },
    {
        "content": "<blockquote>\n<p>Oooh! So if you change the script, you recompile and it then changes the instantiation?</p>\n</blockquote>\n<p>right, there'd be some way to propagate updates or re-evaluate, maybe \"script update myrcc\"</p>",
        "id": 129628821,
        "sender_full_name": "Sean",
        "timestamp": 1531515818
    },
    {
        "content": "<p>Yea</p>",
        "id": 129628877,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515844
    },
    {
        "content": "<p>we can do the on-demand evaluation with all but option 2 since that's specifically what it's about</p>",
        "id": 129628883,
        "sender_full_name": "Sean",
        "timestamp": 1531515853
    },
    {
        "content": "<p>so I think 2's out</p>",
        "id": 129628886,
        "sender_full_name": "Sean",
        "timestamp": 1531515860
    },
    {
        "content": "<p>Alright</p>",
        "id": 129628888,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515867
    },
    {
        "content": "<p>okay</p>",
        "id": 129628898,
        "sender_full_name": "Sean",
        "timestamp": 1531515892
    },
    {
        "content": "<p>so let's think on it some more</p>",
        "id": 129628899,
        "sender_full_name": "Sean",
        "timestamp": 1531515896
    },
    {
        "content": "<p>you working this weekend or not?</p>",
        "id": 129628906,
        "sender_full_name": "Sean",
        "timestamp": 1531515903
    },
    {
        "content": "<p>Second half of tomorrow and first half of Sunday, yes!</p>",
        "id": 129628931,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515935
    },
    {
        "content": "<p>World Cup Finals on Sunday night :D</p>",
        "id": 129628937,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515951
    },
    {
        "content": "<p>okay, so maybe we can continue the discussion tomorrow</p>",
        "id": 129628938,
        "sender_full_name": "Sean",
        "timestamp": 1531515952
    },
    {
        "content": "<p>right!</p>",
        "id": 129628942,
        "sender_full_name": "Sean",
        "timestamp": 1531515955
    },
    {
        "content": "<p>Sure!</p>",
        "id": 129628944,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515957
    },
    {
        "content": "<p>fun</p>",
        "id": 129628945,
        "sender_full_name": "Sean",
        "timestamp": 1531515960
    },
    {
        "content": "<p>alright, well good talking -- sleep on it some ;)</p>",
        "id": 129628989,
        "sender_full_name": "Sean",
        "timestamp": 1531515970
    },
    {
        "content": "<p>Was that sarcastic? :P</p>",
        "id": 129628990,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515975
    },
    {
        "content": "<p>nope :)</p>",
        "id": 129628994,
        "sender_full_name": "Sean",
        "timestamp": 1531515980
    },
    {
        "content": "<p>Indeed! :D</p>",
        "id": 129628995,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531515981
    },
    {
        "content": "<p>Sorry! Night!</p>",
        "id": 129629010,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531516006
    },
    {
        "content": "<p>I do that often .. think about something late into the night, then sleep on it so I can realize how awful those ideas were ;)</p>",
        "id": 129629011,
        "sender_full_name": "Sean",
        "timestamp": 1531516008
    },
    {
        "content": "<p>night!</p>",
        "id": 129629021,
        "sender_full_name": "Sean",
        "timestamp": 1531516027
    },
    {
        "content": "<blockquote>\n<p>I do that often .. think about something late into the night, then sleep on it so I can realize how awful those ideas were ;)</p>\n</blockquote>\n<p>hahaha! :P</p>",
        "id": 129629130,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531516133
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I do that often .. think about something late into the night, then sleep on it so I can realize how awful those ideas were ;)</p>\n</blockquote>\n<p>hahaha! :P</p>\n</blockquote>\n<p>Actually helps! Specially when you need to devise an algorithm, sleep with the problems and you have a  solution or maybe a rough idea the next morning.  :)</p>",
        "id": 129647710,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531545934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  the patch for the primitive  is uploaded,  Do let me know if you find an error  :  <a href=\"https://sourceforge.net/p/brlcad/patches/500/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/patches/500/\">https://sourceforge.net/p/brlcad/patches/500/</a> . <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  Have a look !</p>",
        "id": 129665607,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531582394
    },
    {
        "content": "<p>Sure!</p>",
        "id": 129665781,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531582743
    },
    {
        "content": "<p>Thanks! :)</p>",
        "id": 129665788,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531582750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> that's outstanding work!</p>",
        "id": 129666165,
        "sender_full_name": "Sean",
        "timestamp": 1531583519
    },
    {
        "content": "<p>looks pretty good to me, only thing I notice is that you have a couple unrelated files in there modified</p>",
        "id": 129666207,
        "sender_full_name": "Sean",
        "timestamp": 1531583543
    },
    {
        "content": "<p>annot/annot.c and src/libdm/dm-X.c have changes that don't look related</p>",
        "id": 129666213,
        "sender_full_name": "Sean",
        "timestamp": 1531583586
    },
    {
        "content": "<p>other than that, looks good to commit!</p>",
        "id": 129666215,
        "sender_full_name": "Sean",
        "timestamp": 1531583594
    },
    {
        "content": "<p>for what it's worth (it's a minor point, not a problem) -- you don't need to add v4 support for new primitives (db4.h)</p>",
        "id": 129666222,
        "sender_full_name": "Sean",
        "timestamp": 1531583640
    },
    {
        "content": "<p>Yesss.... i know db4 is of no use now, just added them :).</p>",
        "id": 129666603,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531584181
    },
    {
        "content": "<p>Yes, there were some indentation issues with annot.c that I rectified</p>",
        "id": 129666613,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531584206
    },
    {
        "content": "<blockquote>\n<p>Yes, there were some indentation issues with annot.c that I rectified</p>\n</blockquote>\n<p>that's fine, they should just be in a separate commit, and the src/libdm/dm-X.c change looked like commented/uncommented code</p>",
        "id": 129667638,
        "sender_full_name": "Sean",
        "timestamp": 1531586280
    },
    {
        "content": "<p>Ah ! sorry for that</p>",
        "id": 129667733,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531586405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I've uploaded a revised patch (<a href=\"https://sourceforge.net/p/brlcad/patches/500/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/patches/500/\">https://sourceforge.net/p/brlcad/patches/500/</a>) in the comments. Have a look !</p>",
        "id": 129690578,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531636032
    },
    {
        "content": "<p>Some examples of rounded_rccs <a href=\"/user_uploads/1549/tzgF-PPj73p-gTjxuYXN4QF-/Screen-Shot-2018-07-16-at-2.50.02-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-16-at-2.50.02-PM.png\">Screen-Shot-2018-07-16-at-2.50.02-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/tzgF-PPj73p-gTjxuYXN4QF-/Screen-Shot-2018-07-16-at-2.50.02-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-16-at-2.50.02-PM.png\"><img src=\"/user_uploads/1549/tzgF-PPj73p-gTjxuYXN4QF-/Screen-Shot-2018-07-16-at-2.50.02-PM.png\"></a></div>",
        "id": 129739099,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531732889
    },
    {
        "content": "<p>Added basic sanity checks as well.</p>",
        "id": 129740258,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531734727
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I've uploaded a revised patch (<a href=\"https://sourceforge.net/p/brlcad/patches/500/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/patches/500/\">https://sourceforge.net/p/brlcad/patches/500/</a>) in the comments. Have a look !</p>\n</blockquote>\n<p>this looks great, please commit it</p>",
        "id": 129751910,
        "sender_full_name": "Sean",
        "timestamp": 1531750324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> so what's next?</p>",
        "id": 129753423,
        "sender_full_name": "Sean",
        "timestamp": 1531751863
    },
    {
        "content": "<p>we talked about 4 options for the user side, eliminated one of the options, and we still have to sort out how to bridge from object to script</p>",
        "id": 129754068,
        "sender_full_name": "Sean",
        "timestamp": 1531752466
    },
    {
        "content": "<blockquote>\n<p>there's an option 3 where we separate the script specification from instantiation, so that might be something like:  in rrcc script /path/to/rounded_rcc.py rounded_rcc    .... and another command like \"script create myrcc rrcc 100 50 10\"</p>\n</blockquote>\n<p>With regards to option 3, I didn't get how the rrcc object came into picture. Could you maybe elaborate on that a little bit?</p>",
        "id": 129759370,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531756907
    },
    {
        "content": "<p>Should I start exploring libged/typec.in to understand how we'll be linking the script parser to the script primitive?</p>",
        "id": 129760491,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531758150
    },
    {
        "content": "<p>I had a look at the patch that <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> had submitted and gather that it's similar to the other primitives. Thanks for this!<br>\nNext would be to have functions that can read the file, invoke the python script parser and create the .g file.</p>",
        "id": 129762333,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531760035
    },
    {
        "content": "<p>Another issue I see with using the 'in' command is that for most primitives, there's a defined list of parameters that it expects from the user. In case of our procedures, we won't be able to know before hand what arguments are required, hence that becomes a problem.</p>",
        "id": 129762554,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531760258
    },
    {
        "content": "<p>We could move forward with the assumption that the user knows what parameters are required by the procedure and that he would enter only those (but that's a weak assumption)</p>",
        "id": 129762641,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531760325
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>there's an option 3 where we separate the script specification from instantiation, so that might be something like:  in rrcc script /path/to/rounded_rcc.py rounded_rcc    .... and another command like \"script create myrcc rrcc 100 50 10\"</p>\n</blockquote>\n<p>With regards to option 3, I didn't get how the rrcc object came into picture. Could you maybe elaborate on that a little bit?</p>\n</blockquote>\n<p>the first command (in rrcc script /path/to/script ...) just creates a handle to the code, then we'd need some other step to instantiate the code</p>",
        "id": 129762663,
        "sender_full_name": "Sean",
        "timestamp": 1531760349
    },
    {
        "content": "<p>it's a named handle like any other object, so in that example, I named it rrcc, but it could be anything -- in foo script /path/to/myscript.py func</p>",
        "id": 129762693,
        "sender_full_name": "Sean",
        "timestamp": 1531760393
    },
    {
        "content": "<p>script create myinst foo 1 2 3</p>",
        "id": 129762773,
        "sender_full_name": "Sean",
        "timestamp": 1531760415
    },
    {
        "content": "<p>Oh ok ok</p>",
        "id": 129762778,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531760426
    },
    {
        "content": "<blockquote>\n<p>I had a look at the patch that <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> had submitted and gather that it's similar to the other primitives. Thanks for this!<br>\nNext would be to have functions that can read the file, invoke the python script parser and create the .g file.</p>\n</blockquote>\n<p>not quite -- one of the details that need to be figured out is not creating .g file (at least not on disk)</p>",
        "id": 129762807,
        "sender_full_name": "Sean",
        "timestamp": 1531760469
    },
    {
        "content": "<p>since it's an object, it's not dynamic if we write it out</p>",
        "id": 129762918,
        "sender_full_name": "Sean",
        "timestamp": 1531760577
    },
    {
        "content": "<blockquote>\n<p>not quite -- one of the details that need to be figured out is not creating .g file (at least not on disk.</p>\n</blockquote>\n<p>Python BRLCAD uses the libwdb API and that takes a file_pointer whenever it has to construct a primitive. How do we prevent it from writing to a file then?</p>",
        "id": 129763429,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531761116
    },
    {
        "content": "<p>Also, it has to be saved into some .g file so that the GUI (mged or archer) can read and display it?</p>",
        "id": 129763507,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531761182
    },
    {
        "content": "<p>no it doesn't</p>",
        "id": 129763543,
        "sender_full_name": "Sean",
        "timestamp": 1531761214
    },
    {
        "content": "<p>there's an in-memory-only form of databases that we can use</p>",
        "id": 129763607,
        "sender_full_name": "Sean",
        "timestamp": 1531761254
    },
    {
        "content": "<p>it happens when you open a database, the API has a parameter that tells it to only write to memory, not to disk</p>",
        "id": 129763635,
        "sender_full_name": "Sean",
        "timestamp": 1531761294
    },
    {
        "content": "<p>all the other geometry routines remain unaffected</p>",
        "id": 129763649,
        "sender_full_name": "Sean",
        "timestamp": 1531761313
    },
    {
        "content": "<p>what I think needs to happen is that the database instance gets passed or made available automatically to the script</p>",
        "id": 129763665,
        "sender_full_name": "Sean",
        "timestamp": 1531761354
    },
    {
        "content": "<p>OR .. maybe a default state in 'wdb' that gets set before the script is run so when it runs import wdb, it's going to be an inmem database when it makes a call like wdb.WDB(database_name, \"SGI.g\")</p>",
        "id": 129763814,
        "sender_full_name": "Sean",
        "timestamp": 1531761487
    },
    {
        "content": "<blockquote>\n<p>what I think needs to happen is that the database instance gets passed or made available automatically to the script</p>\n</blockquote>\n<p>Yea, this makes some sense</p>",
        "id": 129763841,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531761561
    },
    {
        "content": "<p>looking at <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/rounded_rcc.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/rounded_rcc.py\">https://github.com/Killthebug/python-brlcad/blob/master/examples/rounded_rcc.py</a> ... there's a few ways I could see this working</p>",
        "id": 129763848,
        "sender_full_name": "Sean",
        "timestamp": 1531761576
    },
    {
        "content": "<p>when is __name__ not \"__main__\" in python?</p>",
        "id": 129763896,
        "sender_full_name": "Sean",
        "timestamp": 1531761605
    },
    {
        "content": "<p>If you import this module into another file and then call a specific function, then __name__ is not __main__</p>",
        "id": 129763923,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531761658
    },
    {
        "content": "<p>hmm</p>",
        "id": 129763945,
        "sender_full_name": "Sean",
        "timestamp": 1531761696
    },
    {
        "content": "<p>so doable in a couple ways</p>",
        "id": 129763960,
        "sender_full_name": "Sean",
        "timestamp": 1531761722
    },
    {
        "content": "<p>one way (A) could be to run the script and use some global variable (like __name__) for the database instance.  this would require scripts to be aware of that instance and would probably be incompatible with external execution.</p>",
        "id": 129764102,
        "sender_full_name": "Sean",
        "timestamp": 1531761847
    },
    {
        "content": "<p>another way (B) could be to leave the script as-is, but preload/configure all wdb.WDB() calls to be inmem when run from inside and be a regular file when run externally.  this should require no changes to the script, but will require figuring out how the script knows about the database/geometry</p>",
        "id": 129764216,
        "sender_full_name": "Sean",
        "timestamp": 1531761990
    },
    {
        "content": "<p>(C) How about moving forward with creating classes for procedures? That way the database instance can be passed as an argument to a given object otherwise it can fall back to using some default database.</p>",
        "id": 129764230,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531762020
    },
    {
        "content": "<p>another could be to only support \"import script\" form where __name__ is not main, and calling a specified function that takes a WDB as the first argument (or maybe it's stored in a variable akin to option A)</p>",
        "id": 129764244,
        "sender_full_name": "Sean",
        "timestamp": 1531762053
    },
    {
        "content": "<p>(C)</p>",
        "id": 129764246,
        "sender_full_name": "Sean",
        "timestamp": 1531762055
    },
    {
        "content": "<p>can you elaborate?  classes for procedures?</p>",
        "id": 129764309,
        "sender_full_name": "Sean",
        "timestamp": 1531762096
    },
    {
        "content": "<p>I'm in the dark about how to go about solving (B)</p>",
        "id": 129764310,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531762096
    },
    {
        "content": "<p>(B) could be as simple as putting a line like if __name__ != \"__main__\" in brlcad.wdb that sets a global configuration for in-mem</p>",
        "id": 129764425,
        "sender_full_name": "Sean",
        "timestamp": 1531762204
    },
    {
        "content": "<p>Yea.. (I'm still thinking about why I said classes as procedures).</p>",
        "id": 129764456,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531762249
    },
    {
        "content": "<p>Oh yea!</p>",
        "id": 129764459,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531762251
    },
    {
        "content": "<p>So, if you look at rounded_rcc.py (A), if you import this into another file (B) and try to call it from there, then the variable __name__ takes the value of the name of the module it is being called from (B).</p>",
        "id": 129764542,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531762333
    },
    {
        "content": "<p>But it doesn't stop there, the interpreter then goes on to execute all the other functions in rounded_rcc.py from the top to bottom.</p>",
        "id": 129764564,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531762379
    },
    {
        "content": "<p>One second, let me share an example with you..</p>",
        "id": 129764575,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531762394
    },
    {
        "content": "<p>k</p>",
        "id": 129764582,
        "sender_full_name": "Sean",
        "timestamp": 1531762402
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/a/419986\" target=\"_blank\" title=\"https://stackoverflow.com/a/419986\">https://stackoverflow.com/a/419986</a></p>",
        "id": 129764645,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531762449
    },
    {
        "content": "<p>What I was hinting is that the functions which are responsible for creating the procedural shapes be re-written as classes <br>\nSo in rounded_rcc.py : def rounder_rcc -&gt; class rounder_rcc.</p>",
        "id": 129764844,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531762707
    },
    {
        "content": "<p>It's not a very massive change IMO, just makes things simpler. Also makes using one procedure in another procedure an easier task.</p>",
        "id": 129764895,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531762793
    },
    {
        "content": "<p>Something like : <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/class_rounded_rcc.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/examples/class_rounded_rcc.py\">https://github.com/Killthebug/python-brlcad/blob/master/examples/class_rounded_rcc.py</a></p>",
        "id": 129765354,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531763317
    },
    {
        "content": "<p>mmhmm.. I'm not sure that's any better or worse -- the script would still be entirely inmem aware and run in one mode or another.  ideally we need a solution that doesn't require script modification or minimal modification?  flexibility would be good for usability</p>",
        "id": 129765678,
        "sender_full_name": "Sean",
        "timestamp": 1531763682
    },
    {
        "content": "<p>like not even worrying about making a def or class</p>",
        "id": 129765685,
        "sender_full_name": "Sean",
        "timestamp": 1531763693
    },
    {
        "content": "<p>Ok</p>",
        "id": 129765809,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531763838
    },
    {
        "content": "<p>writing up an example, hold on</p>",
        "id": 129765895,
        "sender_full_name": "Sean",
        "timestamp": 1531763925
    },
    {
        "content": "<p>Sure</p>",
        "id": 129765907,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531763944
    },
    {
        "content": "<p><em>AKF for 15</em></p>",
        "id": 129766011,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531764061
    },
    {
        "content": "<p><em>AFK for 15</em></p>",
        "id": 129766024,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531764072
    },
    {
        "content": "<p>something like <a href=\"https://gist.github.com/brlcad/7de8f35386c9e40075c07a708fc9aed5\" target=\"_blank\" title=\"https://gist.github.com/brlcad/7de8f35386c9e40075c07a708fc9aed5\">https://gist.github.com/brlcad/7de8f35386c9e40075c07a708fc9aed5</a></p>",
        "id": 129766136,
        "sender_full_name": "Sean",
        "timestamp": 1531764190
    },
    {
        "content": "<p>I think I see a way</p>",
        "id": 129766147,
        "sender_full_name": "Sean",
        "timestamp": 1531764214
    },
    {
        "content": "<p>we already decided the function must take arguments, so why not make it strictly be anything that could be run as a program, just that the first argument must be the name of the database!  then we can override it with a path to a temporary database file and read the contents into an in-mem automatically.</p>",
        "id": 129766464,
        "sender_full_name": "Sean",
        "timestamp": 1531764547
    },
    {
        "content": "<p>/me is liking this ...</p>",
        "id": 129766470,
        "sender_full_name": "Sean",
        "timestamp": 1531764555
    },
    {
        "content": "<p>that means we can make it work with literally anything that creates geometry and the python driver becomes incredibly simple and extendible to other command-line generators (like our proc-db and shapes examples)</p>",
        "id": 129767307,
        "sender_full_name": "Sean",
        "timestamp": 1531765486
    },
    {
        "content": "<blockquote>\n<p>we already decided the function must take arguments, so why not make it strictly be anything that could be run as a program, just that the first argument must be the name of the database!  then we can override it with a path to a temporary database file and read the contents into an in-mem automatically.</p>\n</blockquote>\n<p>Perfect!</p>",
        "id": 129768107,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531766379
    },
    {
        "content": "<blockquote>\n<p>read the contents into an in-mem automatically.</p>\n</blockquote>\n<p>How does this happen though?</p>",
        "id": 129768163,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531766431
    },
    {
        "content": "<p>there can be a wrapper on the \"import\" callback to run the script and read the contents on the C side</p>",
        "id": 129768186,
        "sender_full_name": "Sean",
        "timestamp": 1531766502
    },
    {
        "content": "<p>Alright!</p>",
        "id": 129768241,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531766539
    },
    {
        "content": "<p>So what should be the next steps for me?</p>",
        "id": 129768248,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531766549
    },
    {
        "content": "<p>so then the only question is whether to actually embed a python interpreter, or just run python externally as a command</p>",
        "id": 129768253,
        "sender_full_name": "Sean",
        "timestamp": 1531766566
    },
    {
        "content": "<p>I think simplifying the WDB interface on the python side is needed</p>",
        "id": 129768261,
        "sender_full_name": "Sean",
        "timestamp": 1531766584
    },
    {
        "content": "<p>I recommend running python externally as a command.</p>",
        "id": 129768295,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531766632
    },
    {
        "content": "<p>what's in the brlcad module currently?</p>",
        "id": 129768378,
        "sender_full_name": "Sean",
        "timestamp": 1531766710
    },
    {
        "content": "<p>obviously at least brlcad.wdb and brlcad.primitives classes</p>",
        "id": 129768394,
        "sender_full_name": "Sean",
        "timestamp": 1531766734
    },
    {
        "content": "<p>what else?</p>",
        "id": 129768398,
        "sender_full_name": "Sean",
        "timestamp": 1531766741
    },
    {
        "content": "<p>vmath repo to handle basic maths</p>",
        "id": 129768477,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531766805
    },
    {
        "content": "<p>code to generate wrappers for libwdb, libged, libbu, librt, libbrep and libbn</p>",
        "id": 129768532,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531766872
    },
    {
        "content": "<p>ged?</p>",
        "id": 129768959,
        "sender_full_name": "Sean",
        "timestamp": 1531767307
    },
    {
        "content": "<p>Yea</p>",
        "id": 129768976,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531767332
    },
    {
        "content": "<p>can you elaborate, what does it wrap ... ??</p>",
        "id": 129768990,
        "sender_full_name": "Sean",
        "timestamp": 1531767354
    },
    {
        "content": "<p>It's a wrapper for ged.h. Depending on the platform (OSX, Windows, Linux) it loads the libged library.</p>",
        "id": 129769203,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531767596
    },
    {
        "content": "<p>but I mean what's it look like -- does it expose all of libged's commands?</p>",
        "id": 129769283,
        "sender_full_name": "Sean",
        "timestamp": 1531767655
    },
    {
        "content": "<p>No, only a few functions are implemented. <br>\nAll before line 177 in : <br>\n<a href=\"https://github.com/Killthebug/python-brlcad/blob/master/brlcad/ged.py#L177\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/brlcad/ged.py#L177\">https://github.com/Killthebug/python-brlcad/blob/master/brlcad/ged.py#L177</a></p>",
        "id": 129769515,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531767942
    },
    {
        "content": "<p>ls, close, ged_3ptarb and ged_in.</p>",
        "id": 129769585,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531768012
    },
    {
        "content": "<p>There are barebones structures for the other method but they're still to be fixed.</p>",
        "id": 129769629,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531768079
    },
    {
        "content": "<p>looks like the GED class is inmem aware</p>",
        "id": 129771397,
        "sender_full_name": "Sean",
        "timestamp": 1531770069
    },
    {
        "content": "<p>I think I got it!<br>\n<a href=\"https://github.com/Killthebug/python-brlcad/blob/master/brlcad/wdb.py#L72\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/brlcad/wdb.py#L72\">https://github.com/Killthebug/python-brlcad/blob/master/brlcad/wdb.py#L72</a></p>",
        "id": 129772194,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531770609
    },
    {
        "content": "<p>We can change : RT_WDB_TYPE_DB_DISK to _RT_WDB_TYPE_DB_INMEM</p>",
        "id": 129772209,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531770626
    },
    {
        "content": "<p>Even after changing, it still creates a .g file... there's something I'm missing.</p>",
        "id": 129772432,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531770909
    },
    {
        "content": "<p>But if we change the mode it shouldn't right?</p>",
        "id": 129772458,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531770926
    },
    {
        "content": "<p>I'll figure this out..</p>",
        "id": 129773119,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531771709
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I've uploaded a revised patch (<a href=\"https://sourceforge.net/p/brlcad/patches/500/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/patches/500/\">https://sourceforge.net/p/brlcad/patches/500/</a>) in the comments. Have a look !</p>\n</blockquote>\n<p>this looks great, please commit it</p>\n</blockquote>\n<p>Done !</p>",
        "id": 129773255,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531771932
    },
    {
        "content": "<blockquote>\n<p>Even after changing, it still creates a .g file... there's something I'm missing.</p>\n</blockquote>\n<p>yes, it's because of the first call to libwdb.db_open()</p>",
        "id": 129783338,
        "sender_full_name": "Sean",
        "timestamp": 1531785575
    },
    {
        "content": "<p>there's a separate call for inmem's, db_open_inmem()</p>",
        "id": 129783492,
        "sender_full_name": "Sean",
        "timestamp": 1531785815
    },
    {
        "content": "<p>note, the only reason for getting inmem to work on the python side would be to avoid hitting the disk entirely (i.e., for performance) by running in an embedded interpreter</p>",
        "id": 129785849,
        "sender_full_name": "Sean",
        "timestamp": 1531789004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> what can we do about brlcad.wdb.WDB() ... that seems entirely not user friendly.  I don't think the python public API should expose \"wdb\" anywhere, especially as part of a class that fully wraps wdb</p>",
        "id": 129790364,
        "sender_full_name": "Sean",
        "timestamp": 1531796609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , right now I'm not aware of any way to bypass brlcad.wdb.WDB(). We can maybe encapsulate in some parent class and hide it from plain sight..</p>",
        "id": 129790857,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531797568
    },
    {
        "content": "<p>eh?  maybe you misunderstand.</p>",
        "id": 129790903,
        "sender_full_name": "Sean",
        "timestamp": 1531797606
    },
    {
        "content": "<p>I think so..</p>",
        "id": 129790906,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531797622
    },
    {
        "content": "<p>of course we can do something about it... we can rename the WDB class to something that isn't alphabet soup</p>",
        "id": 129790907,
        "sender_full_name": "Sean",
        "timestamp": 1531797625
    },
    {
        "content": "<p>we can rename the file it's coming from to something more meaningful</p>",
        "id": 129790909,
        "sender_full_name": "Sean",
        "timestamp": 1531797647
    },
    {
        "content": "<p>e.g., brlcad.make.Geometry</p>",
        "id": 129790925,
        "sender_full_name": "Sean",
        "timestamp": 1531797701
    },
    {
        "content": "<p>or putting something into brlcad.py like db = brlcad.Database(...)</p>",
        "id": 129790987,
        "sender_full_name": "Sean",
        "timestamp": 1531797808
    },
    {
        "content": "<p>or many other possible variations</p>",
        "id": 129790991,
        "sender_full_name": "Sean",
        "timestamp": 1531797819
    },
    {
        "content": "<p>something more usable and readable than wdb.WDB</p>",
        "id": 129790993,
        "sender_full_name": "Sean",
        "timestamp": 1531797833
    },
    {
        "content": "<p>Oh alright! Yea we can do that!</p>",
        "id": 129791049,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531797947
    },
    {
        "content": "<p>also, for later today -- can you investigate which wdb functions are on the python side and which are currently not (perhaps make a spreadsheet table showing which are in python and which are not)?  grep WDB_EXPORT include/wdb.h   ... compare with the WDB class implementation, what isn't used/referenced?  we don't want to expose everything as some functions in wdb.h need to go away, but it'd be helpful to see a summary of where we're at and whether any functions are missing.</p>",
        "id": 129791050,
        "sender_full_name": "Sean",
        "timestamp": 1531797948
    },
    {
        "content": "<blockquote>\n<p>Oh alright! Yea we can do that!</p>\n</blockquote>\n<p>already kind of liking brlcad.make.Geometry</p>",
        "id": 129791097,
        "sender_full_name": "Sean",
        "timestamp": 1531797976
    },
    {
        "content": "<p>but of course open to ideas if you think up something better :)</p>",
        "id": 129791099,
        "sender_full_name": "Sean",
        "timestamp": 1531798000
    },
    {
        "content": "<p>I'll make the spreadsheet today! And also work on renaming the functions. <br>\nSure thing will keep you posted :)</p>",
        "id": 129791109,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531798053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> when we say that, the python Public API shouldn't expose wdb anywhere, changing function names still exposes the API right? (Just makes it less obvious)</p>",
        "id": 129791409,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531798464
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 129791424,
        "sender_full_name": "Sean",
        "timestamp": 1531798490
    },
    {
        "content": "<p>there's the C api, which shouldn't matter to python scripters -- it only matters as an implementation detail</p>",
        "id": 129791443,
        "sender_full_name": "Sean",
        "timestamp": 1531798558
    },
    {
        "content": "<p>e.g., the geometry creation functions happen to be in a \"wdb\" C library, but they don't need to know that (nor should they care)</p>",
        "id": 129791489,
        "sender_full_name": "Sean",
        "timestamp": 1531798599
    },
    {
        "content": "<p>Alright. So abstract as much information as we can?</p>",
        "id": 129791494,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531798618
    },
    {
        "content": "<p>they want to know how to create/modify geometry</p>",
        "id": 129791497,
        "sender_full_name": "Sean",
        "timestamp": 1531798619
    },
    {
        "content": "<p>Ok ok, makes sense.</p>",
        "id": 129791504,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531798627
    },
    {
        "content": "<p>at some point in the near future, we're going to move functions in wdb closer to the primitives in librt ... and we're going to move the primitives out of librt into their own \"libg\" library along with the other .g related functions</p>",
        "id": 129791572,
        "sender_full_name": "Sean",
        "timestamp": 1531798727
    },
    {
        "content": "<p>oh, when you make a spreadsheet, would you add a column for the primitives listed in src/librt/primitives/tables.cpp and itemize which one's don't have an mk_* function ...?</p>",
        "id": 129791590,
        "sender_full_name": "Sean",
        "timestamp": 1531798793
    },
    {
        "content": "<p>Sure thing, could do that! :)</p>",
        "id": 129791637,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531798823
    },
    {
        "content": "<p>at risk of lining up too much, when you get all that done -- try to implement rt_script_describe() in src/librt/primitives/script.c -- you'll need to modify the rt_script_internal in include/rt/geom.h to hold a filename, src/libged/typein.c needs to ask for and safe the filename, and src/librt/primitives/script.c needs to load the filename during import5 and write it during export5, then print the file's contents during describe... then if you get it all working right, it should show a files contents when you run 'l script' after 'in script script yourscript'!</p>",
        "id": 129791840,
        "sender_full_name": "Sean",
        "timestamp": 1531799269
    },
    {
        "content": "<p>should hopefully keep you busy all week -- I\"m going to be a bit preoccupied</p>",
        "id": 129791885,
        "sender_full_name": "Sean",
        "timestamp": 1531799289
    },
    {
        "content": "<p>Sure!</p>",
        "id": 129792028,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531799548
    },
    {
        "content": "<blockquote>\n<p>Another issue I see with using the 'in' command is that for most primitives, there's a defined list of parameters that it expects from the user. In case of our procedures, we won't be able to know before hand what arguments are required, hence that becomes a problem.</p>\n</blockquote>\n<p>usually we prompt the user in such cases !</p>",
        "id": 129889227,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531939468
    },
    {
        "content": "<blockquote>\n<p>at risk of lining up too much, when you get all that done -- try to implement rt_script_describe() in src/librt/primitives/script.c -- you'll need to modify the rt_script_internal in include/rt/geom.h to hold a filename, src/libged/typein.c needs to ask for and safe the filename, and src/librt/primitives/script.c needs to load the filename during import5 and write it during export5, then print the file's contents during describe... then if you get it all working right, it should show a files contents when you run 'l script' after 'in script script yourscript'!</p>\n</blockquote>\n<p>How's it going? Hope you are not stuck</p>",
        "id": 129890374,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531940776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  What is the current status? What is the plan, to  execute the script using the script primitive that you are sticking to ?</p>",
        "id": 129916613,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531985157
    },
    {
        "content": "<blockquote>\n<p>usually we prompt the user in such cases quote</p>\n</blockquote>\n<p>The prompt that is generated (for each primitive) is hardcoded as your can see in libged/typein.c. The issue we face is that we don't have prior knowledge about what primitives are there in a procedure.</p>",
        "id": 129922163,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531992691
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>at risk of lining up too much, when you get all that done -- try to implement rt_script_describe() in src/librt/primitives/script.c -- you'll need to modify the rt_script_internal in include/rt/geom.h to hold a filename, src/libged/typein.c needs to ask for and safe the filename, and src/librt/primitives/script.c needs to load the filename during import5 and write it during export5, then print the file's contents during describe... then if you get it all working right, it should show a files contents when you run 'l script' after 'in script script yourscript'!</p>\n</blockquote>\n<p>How's it going? Hope you are not stuck</p>\n</blockquote>\n<p>I haven't started on this yet, I'll get started tonight. I was just completing a couple of other tasks :) Will keep you updated!</p>",
        "id": 129922226,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1531992746
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>usually we prompt the user in such cases quote</p>\n</blockquote>\n<p>The prompt that is generated (for each primitive) is hardcoded as your can see in libged/typein.c. The issue we face is that we don't have prior knowledge about what primitives are there in a procedure.</p>\n</blockquote>\n<p>That is absolutely correct. What I meant to say is to ask the user the numerical occurences of all the relevant primitives. This can be a hack till things start working. Once we have a running model we could parse the details of the primitives present through the script and dynamically modify the typein.c ! This wont be a major task to handle \"once we have a running model \"</p>",
        "id": 129925597,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531997392
    },
    {
        "content": "<p>So the work that you've done till now, converts a script to a .g file. The script primitive (just for understanding) runs the python script and makes an object. Now this object should be a part of the .g mentioned previously.( The object is a concatenation of various primitives as mentioned by the user). We need to modify things such that we don't get a .g immediately, rather we include the script object and then go for a .g . This is what I thought ! <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> any insights.</p>",
        "id": 129925947,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531997780
    },
    {
        "content": "<blockquote>\n<p>I haven't started on this yet, I'll get started tonight. I was just completing a couple of other tasks :) Will keep you updated!</p>\n</blockquote>\n<p>yes... and how are those going too?? there's been no update since our talk.</p>",
        "id": 130083780,
        "sender_full_name": "Sean",
        "timestamp": 1532237621
    },
    {
        "content": "<p>talked about a symbol mapping spreadsheet, a column for primitives without a mk_ function, and implementing the 'l' command (it's ft_describe() callback)</p>",
        "id": 130083871,
        "sender_full_name": "Sean",
        "timestamp": 1532237765
    },
    {
        "content": "<blockquote>\n<p>something more usable and readable than wdb.WDB</p>\n</blockquote>\n<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I've completed renaming the libraries and I've updated all other dependent files, examples and tests.</p>",
        "id": 130086780,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532243502
    },
    {
        "content": "<blockquote>\n<p>also, for later today -- can you investigate which wdb functions are on the python side and which are currently not (perhaps make a spreadsheet table showing which are in python and which are not)?  grep WDB_EXPORT include/wdb.h   ... compare with the WDB class implementation, what isn't used/referenced?  we don't want to expose everything as some functions in wdb.h need to go away, but it'd be helpful to see a summary of where we're at and whether any functions are missing.</p>\n</blockquote>\n<p>I've completed this too.</p>",
        "id": 130086820,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532243528
    },
    {
        "content": "<blockquote>\n<p>at risk of lining up too much, when you get all that done -- try to implement rt_script_describe() in src/librt/primitives/script.c -- you'll need to modify the rt_script_internal in include/rt/geom.h to hold a filename, src/libged/typein.c needs to ask for and safe the filename, and src/librt/primitives/script.c needs to load the filename during import5 and write it during export5, then print the file's contents during describe... then if you get it all working right, it should show a files contents when you run 'l script' after 'in script script yourscript'!</p>\n</blockquote>\n<p>I've almost completed this, will finish it and submit a patch in a couple of hours.</p>",
        "id": 130086825,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532243560
    },
    {
        "content": "<p>I've been travelling this weekend, and will also be travelling in the week after this one. My communication lapsed because of the same.<br>\nI will update the daily logs too right now.</p>",
        "id": 130086833,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532243639
    },
    {
        "content": "<p>You can check the commits here. <a href=\"https://github.com/Killthebug/python-brlcad/commits/master\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/commits/master\">https://github.com/Killthebug/python-brlcad/commits/master</a></p>",
        "id": 130087539,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532245187
    },
    {
        "content": "<p>Regarding implementing l describe, I've modified rt_script_describe() in script.c to print out the the contents of the files. But there seems to be an issue with typein.c where in mged stops accepting any response after all the parameters for the in command are passed.</p>",
        "id": 130128094,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532319598
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/kDY0frAnWUDOob0oShhhGvBu/Screen-Shot-2018-07-23-at-9.45.48-AM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-23-at-9.45.48-AM.png\">Screen-Shot-2018-07-23-at-9.45.48-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/kDY0frAnWUDOob0oShhhGvBu/Screen-Shot-2018-07-23-at-9.45.48-AM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-23-at-9.45.48-AM.png\"><img src=\"/user_uploads/1549/kDY0frAnWUDOob0oShhhGvBu/Screen-Shot-2018-07-23-at-9.45.48-AM.png\"></a></div>",
        "id": 130128305,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532319996
    },
    {
        "content": "<p>What do you think could be a possible fix for this?</p>",
        "id": 130128307,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532320011
    },
    {
        "content": "<p>Probably some issue with the args(). Not a major issue. I don't have access to the code right now, it'll be rectified by the evening. Meanwhile you could focus on opening the script.py file and listing out its contents when prompted by the 'l' command (basically the describe function).</p>",
        "id": 130133356,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532329668
    },
    {
        "content": "<p>Ah yes, I was thinking along the same lines. The args() in typein.c.</p>",
        "id": 130134234,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532331284
    },
    {
        "content": "<p>So when you do : in scriptobj script myscript.py, what gets stored in the scriptobj \"right now\"? Does it create a null objects (scriptobj = null)? </p>\n<p>Of course later it would hold the procedurally generated object but we've not coupled the python compiler with the C code yet.</p>",
        "id": 130134312,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532331423
    },
    {
        "content": "<p>So when you do : in scriptobj script myscript.py, what gets stored in the scriptobj \"right now\"? Does it create a null objects (scriptobj = null)? </p>\n<p>Of course later it would hold the procedurally generated object but we've not coupled the python compiler with the C code yet.</p>",
        "id": 130134799,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532332144
    },
    {
        "content": "<p>It does not make a .s currently. Null object comes into the picture when the .s is created but stubbed empty for some reason.</p>",
        "id": 130139460,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532339651
    },
    {
        "content": "<p>Alright</p>",
        "id": 130152914,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532357520
    },
    {
        "content": "<blockquote>\n<p>I'll make the spreadsheet today! And also work on renaming the functions. <br>\nSure thing will keep you posted :)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> if you have the spreadsheet, please post it somewhere as that will help us figure out our path forward</p>",
        "id": 130159915,
        "sender_full_name": "Sean",
        "timestamp": 1532364991
    },
    {
        "content": "<p><a href=\"https://github.com/Killthebug/python-brlcad/blob/master/wdb_functions_python_brlcad.xlsx\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/wdb_functions_python_brlcad.xlsx\">https://github.com/Killthebug/python-brlcad/blob/master/wdb_functions_python_brlcad.xlsx</a></p>",
        "id": 130160025,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532365098
    },
    {
        "content": "<blockquote>\n<p>So when you do : in scriptobj script myscript.py, what gets stored in the scriptobj \"right now\"? Does it create a null objects (scriptobj = null)? </p>\n</blockquote>\n<p>You can see this in src/libged/typein.c in the script_in() function -- it allocates an rt_script_internal object but only sets the script type (see p_script) .. which you specified as \"myscript.py\" in response.  If you run the 'in' command without arguments, it will prompt interactively based on the p_script prompts.</p>",
        "id": 130161361,
        "sender_full_name": "Sean",
        "timestamp": 1532366548
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/Killthebug/python-brlcad/blob/master/wdb_functions_python_brlcad.xlsx\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/wdb_functions_python_brlcad.xlsx\">https://github.com/Killthebug/python-brlcad/blob/master/wdb_functions_python_brlcad.xlsx</a></p>\n</blockquote>\n<p>That looks good, thanks.  Are you still working on adding a column for the primitives with/without a mk_ function?</p>",
        "id": 130161504,
        "sender_full_name": "Sean",
        "timestamp": 1532366658
    },
    {
        "content": "<p>They're all listed in src/librt/primitives/tables.cpp or you can look at the subdirectories in src/librt/primitives/* -- two live elsewhere (comb and binunif).  Note that some of the mk_ functions map to the same primitive like arb8 and arb5 are both src/librt/primitives/arb8 (not to be confused with src/librt/primitives/arbn which is a completely different 'arbn' object).</p>",
        "id": 130161800,
        "sender_full_name": "Sean",
        "timestamp": 1532366906
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>So when you do : in scriptobj script myscript.py, what gets stored in the scriptobj \"right now\"? Does it create a null objects (scriptobj = null)? </p>\n</blockquote>\n<p>You can see this in src/libged/typein.c in the script_in() function -- it allocates an rt_script_internal object but only sets the script type (see p_script) .. which you specified as \"myscript.py\" in response.  If you run the 'in' command without arguments, it will prompt interactively based on the p_script prompts.</p>\n</blockquote>\n<p>I get this, but why does mged not do anything after accepting the in command (in scriptobj script myscript.py) . For other primitives it draws them, but here it just prints (null) as you can see in the screenshot.</p>",
        "id": 130162591,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532367744
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><a href=\"https://github.com/Killthebug/python-brlcad/blob/master/wdb_functions_python_brlcad.xlsx\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/wdb_functions_python_brlcad.xlsx\">https://github.com/Killthebug/python-brlcad/blob/master/wdb_functions_python_brlcad.xlsx</a></p>\n</blockquote>\n<p>That looks good, thanks.  Are you still working on adding a column for the primitives with/without a mk_ function?</p>\n</blockquote>\n<p>Yea, sharing soon!</p>",
        "id": 130162651,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532367832
    },
    {
        "content": "<p>The (null) printing is likely coming from code put into the ft_describe() callback.  It could also be coming from the ft_draw() callback which is also in src/librt/primitives/script/script.c -- after the 'in' command, that callback is called since most get displayed</p>",
        "id": 130166086,
        "sender_full_name": "Sean",
        "timestamp": 1532371191
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><a href=\"https://github.com/Killthebug/python-brlcad/blob/master/wdb_functions_python_brlcad.xlsx\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/wdb_functions_python_brlcad.xlsx\">https://github.com/Killthebug/python-brlcad/blob/master/wdb_functions_python_brlcad.xlsx</a></p>\n</blockquote>\n<p>That looks good, thanks.  Are you still working on adding a column for the primitives with/without a mk_ function?</p>\n</blockquote>\n<p>I've update the shared file with another sheet containing list of primitives without a mk_primitive() function.</p>",
        "id": 130167275,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532372373
    },
    {
        "content": "<p>comb though has two mk_primitive function, mk_comb() &amp; mk_comb1()</p>",
        "id": 130167413,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532372498
    },
    {
        "content": "<p>excellent, thank you -- that latter sheet is particularly informative.  looks like we're missing wdb hooks for 5 entities</p>",
        "id": 130167907,
        "sender_full_name": "Sean",
        "timestamp": 1532373036
    },
    {
        "content": "<p>Would these be the last 5 rows in sheet 2?</p>",
        "id": 130168036,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532373195
    },
    {
        "content": "<blockquote>\n<p>Would these be the last 5 rows in sheet 2?</p>\n</blockquote>\n<p>no, they are: rec, superell, revolve, pnts, and datum</p>",
        "id": 130169627,
        "sender_full_name": "Sean",
        "timestamp": 1532374926
    },
    {
        "content": "<p>Uh-huh</p>",
        "id": 130169680,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532375036
    },
    {
        "content": "<p>by the way, great job finding not only the libwdb functions but also the wdb functions in librt</p>",
        "id": 130169936,
        "sender_full_name": "Sean",
        "timestamp": 1532375308
    },
    {
        "content": "<p>:)<br>\nNow, I'm trying to get l describe() to work, still haven't figured my way around the (null) printing.</p>",
        "id": 130170031,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532375452
    },
    {
        "content": "<p>a classic method, you can add some print statements into the code so you can tell where things are coming from</p>",
        "id": 130170143,
        "sender_full_name": "Sean",
        "timestamp": 1532375581
    },
    {
        "content": "<p>have you added any code to the describe() function?</p>",
        "id": 130170162,
        "sender_full_name": "Sean",
        "timestamp": 1532375606
    },
    {
        "content": "<p>Yes, I have <a href=\"https://hastebin.com/awugozused.cpp\" target=\"_blank\" title=\"https://hastebin.com/awugozused.cpp\">https://hastebin.com/awugozused.cpp</a></p>",
        "id": 130170175,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532375641
    },
    {
        "content": "<p>Also, there is no draw function in src/librt/primitives/script.c</p>",
        "id": 130170234,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532375690
    },
    {
        "content": "<p>it's the plot() function</p>",
        "id": 130170276,
        "sender_full_name": "Sean",
        "timestamp": 1532375750
    },
    {
        "content": "<p>so you're close, but you have a bug</p>",
        "id": 130170331,
        "sender_full_name": "Sean",
        "timestamp": 1532375774
    },
    {
        "content": "<p>Ok<br>\nYea..</p>",
        "id": 130170388,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532375861
    },
    {
        "content": "<p>what you are fopen()'ing is wrong</p>",
        "id": 130170436,
        "sender_full_name": "Sean",
        "timestamp": 1532375886
    },
    {
        "content": "<p><em>testing</em></p>",
        "id": 130170547,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532376004
    },
    {
        "content": "<p>I tried two things, the first hardcoding the absolute path for a script with in src/librt/primitives/script.c and second removing all the code that I had introduced in src/librt/primitives/script.c and just compiling with almost the original stubb. The same error persists.</p>",
        "id": 130171168,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532376703
    },
    {
        "content": "<p>you're pretty new to C I take it?</p>",
        "id": 130171384,
        "sender_full_name": "Sean",
        "timestamp": 1532376875
    },
    {
        "content": "<p>Not vey familiar :/</p>",
        "id": 130171418,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532376910
    },
    {
        "content": "<p>the error in the snippet you showed me is that you printed \"Script type: ...\" into buf</p>",
        "id": 130171445,
        "sender_full_name": "Sean",
        "timestamp": 1532376937
    },
    {
        "content": "<p>then you try to fopen(buf)</p>",
        "id": 130171455,
        "sender_full_name": "Sean",
        "timestamp": 1532376953
    },
    {
        "content": "<p>so you're trying to open a file named \"Script type: something...\"</p>",
        "id": 130171505,
        "sender_full_name": "Sean",
        "timestamp": 1532376971
    },
    {
        "content": "<p>another issue is you should be using bu_fgets() instead of fgetc(), to get the file one line at a time</p>",
        "id": 130172110,
        "sender_full_name": "Sean",
        "timestamp": 1532377700
    },
    {
        "content": "<p>the loop you have isn't quite right because you used a char when fgetc() returns an int, so your condition (character != EOF) should never be true.  a little surprised it's not an infinite loop</p>",
        "id": 130172151,
        "sender_full_name": "Sean",
        "timestamp": 1532377796
    },
    {
        "content": "<p>note, vls stands for variable length string -- it's just a string like you might have in python except you access it via functions</p>",
        "id": 130172220,
        "sender_full_name": "Sean",
        "timestamp": 1532377838
    },
    {
        "content": "<p>Doesn't fgetc() return a character? <a href=\"http://www.cplusplus.com/reference/cstdio/fgetc/\" target=\"_blank\" title=\"http://www.cplusplus.com/reference/cstdio/fgetc/\">http://www.cplusplus.com/reference/cstdio/fgetc/</a></p>",
        "id": 130172276,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532377910
    },
    {
        "content": "<p>look at the green line at the top</p>",
        "id": 130172339,
        "sender_full_name": "Sean",
        "timestamp": 1532377949
    },
    {
        "content": "<p>it returns an \"int\"</p>",
        "id": 130172341,
        "sender_full_name": "Sean",
        "timestamp": 1532377956
    },
    {
        "content": "<p>in the example code, it uses \"int c;\" for the character</p>",
        "id": 130172370,
        "sender_full_name": "Sean",
        "timestamp": 1532377993
    },
    {
        "content": "<p>:|</p>",
        "id": 130172377,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532378001
    },
    {
        "content": "<p>in C a character you find in a string like \"abc\" is not necessarily the \"char\" data type, it could be a wide variety of types (especially for foreign languages)</p>",
        "id": 130172430,
        "sender_full_name": "Sean",
        "timestamp": 1532378056
    },
    {
        "content": "<p>if you see \"char a;\"  ... don't think of it as saying 'a' is a character in a string</p>",
        "id": 130172454,
        "sender_full_name": "Sean",
        "timestamp": 1532378093
    },
    {
        "content": "<p>Uh-huh.. So does c typecast when it prints what's returned by fgetc()?</p>",
        "id": 130172493,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532378140
    },
    {
        "content": "<p>it's saying 'a' is a character of memory, which C simply defines as being 1 \"byte\" on the host hardware</p>",
        "id": 130172499,
        "sender_full_name": "Sean",
        "timestamp": 1532378147
    },
    {
        "content": "<p>you specified an implicit cast from int to char data types when you assigned the result of fgetc (an int) to c (a char)</p>",
        "id": 130172569,
        "sender_full_name": "Sean",
        "timestamp": 1532378198
    },
    {
        "content": "<p>I will rewrite the file opening and reading snippet. <br>\nThough the current error ((null) printing) seems to occur before any code changes I might have made..</p>",
        "id": 130172585,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532378224
    },
    {
        "content": "<p>you then test for c != EOF in the loop ... well EOF could be anything but it's typically \"(int)-1\"</p>",
        "id": 130172593,
        "sender_full_name": "Sean",
        "timestamp": 1532378235
    },
    {
        "content": "<p>there very well may be nulls getting printed elsewhere in the code, the two are not exclusive</p>",
        "id": 130172616,
        "sender_full_name": "Sean",
        "timestamp": 1532378274
    },
    {
        "content": "<p>I doubt that because a (null) gets printed everytime I press 'enter' after completing the in command</p>",
        "id": 130172697,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532378330
    },
    {
        "content": "<p>i mean those aren't the only issues in the function -- the \"Script is: \" printing at the end is also not right :)</p>",
        "id": 130172709,
        "sender_full_name": "Sean",
        "timestamp": 1532378346
    },
    {
        "content": "<p>why would you doubt that?  that would only matter if you're assuming your describe function is all that's being called when you run the 'in' command and it most certainly is not</p>",
        "id": 130172778,
        "sender_full_name": "Sean",
        "timestamp": 1532378404
    },
    {
        "content": "<p>you'd have to read the 'in' command's implementation, trace through the logic to see where describe is called, confirm that is where it's really being called from (e.g., by adding a bu_log() line), then see what other logic or functions get called.</p>",
        "id": 130172818,
        "sender_full_name": "Sean",
        "timestamp": 1532378475
    },
    {
        "content": "<blockquote>\n<p>i mean those aren't the only issues in the function -- the \"Script is: \" printing at the end is also not right :)</p>\n</blockquote>\n<p>Yea, I've scratched away all that. I'll go through typein.c to figure out where it's going wrong.</p>",
        "id": 130172832,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532378505
    },
    {
        "content": "<blockquote>\n<p>you'd have to read the 'in' command's implementation, trace through the logic to see where describe is called, confirm that is where it's really being called from (e.g., by adding a bu_log() line), then see what other logic or functions get called.</p>\n</blockquote>\n<p>On it</p>",
        "id": 130172874,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532378523
    },
    {
        "content": "<p>you were super close with what you had ...</p>",
        "id": 130172901,
        "sender_full_name": "Sean",
        "timestamp": 1532378564
    },
    {
        "content": "<p>another approach would be to start with a function that does nothing -- maybe just prints hello</p>",
        "id": 130172916,
        "sender_full_name": "Sean",
        "timestamp": 1532378590
    },
    {
        "content": "<blockquote>\n<p>I doubt that because a (null) gets printed everytime I press 'enter' after completing the in command</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  This error is because  nvals in ged_in() is set as 2, whereas it should be 1 only.</p>",
        "id": 130188236,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532403835
    },
    {
        "content": "<p>Try setting it 1, at least this error should go away. There will be many more errors in the way. It'll take time to encounter those, so let's work a bit fast.</p>",
        "id": 130188308,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532403908
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , yes changed nvals to 1 but I bump into a : Segmentation fault: 11 after I execute the in command.</p>",
        "id": 130199445,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532422430
    },
    {
        "content": "<p>ah, as expected, new error pops out. I don't have access to the code right now. You familiar with gdb ?</p>",
        "id": 130199488,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532422484
    },
    {
        "content": "<p>Not very, but I can figure it out! What do I need to do?</p>",
        "id": 130199504,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532422521
    },
    {
        "content": "<p>Okay, so gdb is a tool that helps to detect seg faults. We need to set -g flag while compiling using gcc.</p>",
        "id": 130199647,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532422769
    },
    {
        "content": "<p>In this case since we use make, All you need to do is make CFLAGS= -g</p>",
        "id": 130199652,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532422801
    },
    {
        "content": "<p>Then run gdb mged</p>",
        "id": 130199702,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532422813
    },
    {
        "content": "<p>Then type \"run\" , and try making a script object. The moment code breaks, it'll show the line, that is breaking the code</p>",
        "id": 130199716,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532422861
    },
    {
        "content": "<p>Do you use a mac ?</p>",
        "id": 130199729,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532422893
    },
    {
        "content": "<p>Yes, I do use a mac</p>",
        "id": 130199731,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532422903
    },
    {
        "content": "<p>Okay, so you need to use sudo before gdb mged</p>",
        "id": 130199770,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532422925
    },
    {
        "content": "<p>OK sure!</p>",
        "id": 130199776,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532422936
    },
    {
        "content": "<p>Otherwise you wont land where you want to</p>",
        "id": 130199778,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532422940
    },
    {
        "content": "<p>So keeping aside the runtime issues as of now. Do you have the code for decribe() ?</p>",
        "id": 130199803,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532422990
    },
    {
        "content": "<p>Yea, I had shared it with Sean yesterday, <a href=\"https://hastebin.com/awugozused.cpp\" target=\"_blank\" title=\"https://hastebin.com/awugozused.cpp\">https://hastebin.com/awugozused.cpp</a>, He pointed out a lot of changed but also hinted that I was fairly close to completion. I'll change this and share the updated code soon.</p>",
        "id": 130200171,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532423610
    },
    {
        "content": "<p>Ah fine, I'll have a look after my office hours. I have restricted access to hastebin :P</p>",
        "id": 130200227,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532423691
    },
    {
        "content": "<p>It raises the error :<code> During startup program terminated with signal SIGTRAP</code><br>\nThis appears to be an OSX issue. I'm fixing it right now..</p>",
        "id": 130200505,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532424098
    },
    {
        "content": "<p>Seems to be a security issue in Sierra. <a href=\"https://stackoverflow.com/a/40044913\" target=\"_blank\" title=\"https://stackoverflow.com/a/40044913\">https://stackoverflow.com/a/40044913</a></p>",
        "id": 130200583,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532424199
    },
    {
        "content": "<p>Managed to avoid SIGTRAP by creating a .gdbinit file in my user folder. <br>\nThough this has given rise to a new error : <code>During startup program terminated with signal ?, Unknown signal.</code></p>",
        "id": 130200997,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532424823
    },
    {
        "content": "<p>Did you use sudo ?</p>",
        "id": 130201049,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532424857
    },
    {
        "content": "<p>I have sierra, and it works well for me usually</p>",
        "id": 130201064,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532424897
    },
    {
        "content": "<p>Yes I did use sudo. <br>\nEven on the forums online it works for some and for the rest, raises the error that I'm encountering.</p>",
        "id": 130201140,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532425010
    },
    {
        "content": "<p>Let's not just waste time. Give it another try, if it works... good! otherwise work on the describe(), I'll try to figure it out by this evening.</p>",
        "id": 130201216,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532425110
    },
    {
        "content": "<p>in /build folder i did : make 'CFLAGS=-g' <br>\nthen in /build/bin I did : sudo gdb ./mged followed by 'run'</p>",
        "id": 130201303,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532425292
    },
    {
        "content": "<p>yess.... it should work</p>",
        "id": 130201351,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532425325
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>(gdb) run\nStarting program: /Users/Troller/Documents/GSoC/18/brlcad/build/bin/mged\n[New Thread 0x1603 of process 74940]\n[New Thread 0x1903 of process 74940]\nDuring startup program terminated with signal ?, Unknown signal.\n</pre></div>",
        "id": 130201372,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532425352
    },
    {
        "content": "<p>ah.. maybe try LLDB</p>",
        "id": 130201447,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532425445
    },
    {
        "content": "<p>runs on the same line as GDB</p>",
        "id": 130201457,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532425482
    },
    {
        "content": "<p>You'll have to handle the clang and gcc stuff ! :(</p>",
        "id": 130201542,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532425645
    },
    {
        "content": "<p>Sure, will try lldb. Working on the code for l describe now..</p>",
        "id": 130201937,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532426250
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/ng95iVX4nJMt_RciP4dE0gJN/Screen-Shot-2018-07-24-at-5.51.12-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-24-at-5.51.12-PM.png\">Screen-Shot-2018-07-24-at-5.51.12-PM.png</a> It's not complete but I've hacked my way around printing the contents of a file using l describe. Currently I modified /librt/primitives/ell/ell.c to experiment.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/ng95iVX4nJMt_RciP4dE0gJN/Screen-Shot-2018-07-24-at-5.51.12-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-24-at-5.51.12-PM.png\"><img src=\"/user_uploads/1549/ng95iVX4nJMt_RciP4dE0gJN/Screen-Shot-2018-07-24-at-5.51.12-PM.png\"></a></div>",
        "id": 130207672,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532434951
    },
    {
        "content": "<p>I'm modifying typein.c to read the input file too, but that's not working very well for me. Should fix it in a while.</p>",
        "id": 130207717,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532435012
    },
    {
        "content": "<p>If I have </p>\n<div class=\"codehilite\"><pre><span></span>struct bu_vls x\nchar a[256]\n</pre></div>\n\n\n<p>bu_vls_strcpy(*x, a) copies the contents of x to a?<br>\nIf I want to copy the contents of a to x, how do I do it?</p>",
        "id": 130208738,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532436271
    },
    {
        "content": "<blockquote>\n<p>Okay, so you need to use sudo before gdb mged</p>\n</blockquote>\n<p>er, no you don't :)</p>",
        "id": 130210202,
        "sender_full_name": "Sean",
        "timestamp": 1532438258
    },
    {
        "content": "<p>or... maybe you do -- is this a new security feature?  I've not run into it yet with lldb</p>",
        "id": 130210274,
        "sender_full_name": "Sean",
        "timestamp": 1532438344
    },
    {
        "content": "<p>looking good <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> .. how about a link to the code changes (svn diff &gt; mychanges.diff)</p>",
        "id": 130210370,
        "sender_full_name": "Sean",
        "timestamp": 1532438422
    },
    {
        "content": "<blockquote>\n<p>If I have </p>\n</blockquote>\n<p>struct bu_vls x<br>\nchar a[256]</p>\n<div class=\"codehilite\"><pre><span></span>bu_vls_strcpy(*x, a) copies the contents of x to a?\nIf I want to copy the contents of a to x, how do I do it?\n</pre></div>\n\n\n<p>no, it doesn't.  several issues -- first, you should initialize both on declaration (e.g., struct bu_vls x = BU_VLS_INIT_ZERO; char a[256] = {0};)</p>",
        "id": 130210481,
        "sender_full_name": "Sean",
        "timestamp": 1532438524
    },
    {
        "content": "<p>to copy from x to a, it would be bu_strlcpy(a, bu_vls_addr(&amp;x), 256);</p>",
        "id": 130210535,
        "sender_full_name": "Sean",
        "timestamp": 1532438610
    },
    {
        "content": "<p>to copy from a to x, it would be bu_vls_strcpy(&amp;x, a);</p>",
        "id": 130210599,
        "sender_full_name": "Sean",
        "timestamp": 1532438645
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/Y3ceH_EtEq3iKekqDOx0vxaf/mychanges.diff\" target=\"_blank\" title=\"mychanges.diff\">mychanges.diff</a></p>",
        "id": 130212021,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532439975
    },
    {
        "content": "<blockquote>\n<p>to copy from a to x, it would be bu_vls_strcpy(&amp;x, a);</p>\n</blockquote>\n<p>I'll work with this soon and keep you posted!</p>",
        "id": 130212036,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532440003
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Okay, so you need to use sudo before gdb mged</p>\n</blockquote>\n<p>er, no you don't :)</p>\n</blockquote>\n<p><a href=\"https://stackoverflow.com/questions/11504377/gdb-fails-with-unable-to-find-mach-task-port-for-process-id-error\" target=\"_blank\" title=\"https://stackoverflow.com/questions/11504377/gdb-fails-with-unable-to-find-mach-task-port-for-process-id-error\">https://stackoverflow.com/questions/11504377/gdb-fails-with-unable-to-find-mach-task-port-for-process-id-error</a><br>\n<span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Have  a look. Not a new feature. All Os'es after snow leopard have this issue.</p>",
        "id": 130216151,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532443944
    },
    {
        "content": "<blockquote>\n<p><a href=\"/user_uploads/1549/ng95iVX4nJMt_RciP4dE0gJN/Screen-Shot-2018-07-24-at-5.51.12-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-24-at-5.51.12-PM.png\">Screen-Shot-2018-07-24-at-5.51.12-PM.png</a> It's not complete but I've hacked my way around printing the contents of a file using l describe. Currently I modified /librt/primitives/ell/ell.c to experiment.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/ng95iVX4nJMt_RciP4dE0gJN/Screen-Shot-2018-07-24-at-5.51.12-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-24-at-5.51.12-PM.png\"><img src=\"/user_uploads/1549/ng95iVX4nJMt_RciP4dE0gJN/Screen-Shot-2018-07-24-at-5.51.12-PM.png\"></a></div></blockquote>\n<p>well, seems to be a good attempt !</p>",
        "id": 130252513,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532489324
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/11504377/gdb-fails-with-unable-to-find-mach-task-port-for-process-id-error\" target=\"_blank\" title=\"https://stackoverflow.com/questions/11504377/gdb-fails-with-unable-to-find-mach-task-port-for-process-id-error\">https://stackoverflow.com/questions/11504377/gdb-fails-with-unable-to-find-mach-task-port-for-process-id-error</a><br>\n<span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Have  a look. Not a new feature. All Os'es after snow leopard have this issue.</p>\n</blockquote>\n<p>I read up on it a bit later.  I guess I hadn't noticed because GDB was removed from XCode quite some time ago, after they switched to LLVM.  I don't think lldb has that issue.  Or, at least, I have been using it regularly without going sudo... unless my pending update from last week changes that! :)</p>",
        "id": 130252577,
        "sender_full_name": "Sean",
        "timestamp": 1532489455
    },
    {
        "content": "<blockquote>\n<p>well, seems to be a good attempt !</p>\n</blockquote>\n<p>I agree, that looks good!  Not far off of what I would expect \"l\" to show for a script object.  You say you did that on the ell primitive?  Or that you used ell as a guide for script?</p>",
        "id": 130253756,
        "sender_full_name": "Sean",
        "timestamp": 1532491923
    },
    {
        "content": "<p>Yea, I modified the ell primitive's l describe function. I'm using as a sandbox before I move the code to the script primitive. (Could've chosen any primitive to test, picked ell randomly)</p>",
        "id": 130255565,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532495754
    },
    {
        "content": "<p>I'm having a tough time copying a char array into a bu_vls. This the code I'm using to do the same : <a href=\"https://hastebin.com/anapelazez.php\" target=\"_blank\" title=\"https://hastebin.com/anapelazez.php\">https://hastebin.com/anapelazez.php</a>.</p>",
        "id": 130257273,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532499011
    },
    {
        "content": "<blockquote>\n<p>no, it doesn't.  several issues -- first, you should initialize both on declaration (e.g., struct bu_vls x = BU_VLS_INIT_ZERO; char a[256] = {0};)</p>\n</blockquote>\n<p>Doing this, raises the error : </p>\n<div class=\"codehilite\"><pre><span></span>brlcad/src/libged/typein.c:1513:27: expected expression\neip-&gt;reference_path = BU_VLS_INIT_ZERO;\n</pre></div>",
        "id": 130257345,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532499153
    },
    {
        "content": "<p>Okay so here is something I was thinking upon.  What describe() does now is.... just print the file. <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  If you have explored the describe() function of other primitives then you would have found out that we get the primitive params on calling describe(). What we should exactly get here is ... the details of every primitive present in the script and there corresponding params.  For ex. if you've made a tank through procedural scripts, then describe should mention all the primitives used here, be it an rcc or an sph etc. This is something to think over !</p>",
        "id": 130266421,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532513177
    },
    {
        "content": "<p>Nice recommendation <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span>! I think something like this could and should be done.. If I were to do it from scratch, it would involve write a parser for our script and then based on calls to create individual objects in the script, we could indicate/print what primitives were used. This though I feel is a bigger project on it's own. There are numerous ways to go about doing it and given the multiple ways in which the scripts can be written, it becomes a very time intensive task. <em>IMO</em></p>",
        "id": 130273987,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532523793
    },
    {
        "content": "<blockquote>\n<p>You'll have to handle the clang and gcc stuff ! :(</p>\n</blockquote>\n<p>I still haven't managed to get the bedugger to work. Spent a couple of hours breaking my head on it and tried a few solutions (<a href=\"https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra\" target=\"_blank\" title=\"https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra\">https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra</a>) but kept failing :(</p>",
        "id": 130274150,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532523988
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>You'll have to handle the clang and gcc stuff ! :(</p>\n</blockquote>\n<p>I still haven't managed to get the bedugger to work. Spent a couple of hours breaking my head on it and tried a few solutions (<a href=\"https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra\" target=\"_blank\" title=\"https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra\">https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra</a>) but kept failing :(</p>\n</blockquote>\n<p>gdb and macos are a pain !</p>",
        "id": 130277329,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532527859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Why do you think typein.c saves the string but it doesn't reflect in src/librt/primitives/ell.c</p>",
        "id": 130280322,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532530863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> could you also help me figure out why the script primitive that was stubbed keeps crashing? I have wasted enough time on trying to figure it out. <br>\nAlso, our immediate goal (by the end of this week) should be to be able to invoke the python compiler from C and save the procedurally created geometry in our working database.</p>",
        "id": 130304695,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532555724
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>no, it doesn't.  several issues -- first, you should initialize both on declaration (e.g., struct bu_vls x = BU_VLS_INIT_ZERO; char a[256] = {0};)</p>\n</blockquote>\n<p>Doing this, raises the error : </p>\n</blockquote>\n<p>brlcad/src/libged/typein.c:1513:27: expected expression<br>\neip-&gt;reference_path = BU_VLS_INIT_ZERO;</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>\n\n\n<p>What you have there is not initialization on declaration - it's after.  BU_VLS_INIT_ZERO is where it's first declared.  You'd need to use something like bu_vls_init() to initialize it later.  In C/C++, there's different mechanisms for initializing memory.</p>",
        "id": 130316113,
        "sender_full_name": "Sean",
        "timestamp": 1532570845
    },
    {
        "content": "<blockquote>\n<p>I'm having a tough time copying a char array into a bu_vls. This the code I'm using to do the same : <a href=\"https://hastebin.com/anapelazez.php\" target=\"_blank\" title=\"https://hastebin.com/anapelazez.php\">https://hastebin.com/anapelazez.php</a>.</p>\n</blockquote>\n<p>this actually looks about right if your cmd_argvs indices are correct other than the buffer copy seeming unnecessary</p>",
        "id": 130316337,
        "sender_full_name": "Sean",
        "timestamp": 1532571198
    },
    {
        "content": "<blockquote>\n<p>What we should exactly get here is ... the details of every primitive present in the script and there corresponding params.  For ex. if you've made a tank through procedural scripts, then describe should mention all the primitives used here, be it an rcc or an sph etc. This is something to think over !</p>\n</blockquote>\n<p>Actually, I think we can get away with not knowing what the script made or how objects were named or how they were structured.  All that we need is to get a list of top objects and load them.</p>",
        "id": 130318680,
        "sender_full_name": "Sean",
        "timestamp": 1532575051
    },
    {
        "content": "<blockquote>\n<p>I still haven't managed to get the bedugger to work. Spent a couple of hours breaking my head on it and tried a few solutions (<a href=\"https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra\" target=\"_blank\" title=\"https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra\">https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra</a>) but kept failing :(</p>\n</blockquote>\n<p>Is there a reason you're not using lldb?</p>",
        "id": 130318744,
        "sender_full_name": "Sean",
        "timestamp": 1532575127
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Why do you think typein.c saves the string but it doesn't reflect in src/librt/primitives/ell.c</p>\n</blockquote>\n<p>This is likely because the string needs to be saved and restored in two of the other callbacks.  The import5 and export5 callbacks read and write geometry objects respectively.</p>",
        "id": 130318806,
        "sender_full_name": "Sean",
        "timestamp": 1532575217
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> could you also help me figure out why the script primitive that was stubbed keeps crashing? I have wasted enough time on trying to figure it out. </p>\n</blockquote>\n<p>Sure, post a diff of what you're trying and I'll take a look.</p>\n<blockquote>\n<p>Also, our immediate goal (by the end of this week) should be to be able to invoke the python compiler from C and save the procedurally created geometry in our working database.</p>\n</blockquote>\n<p>That sounds good.  You'll want to use bu_temp_file() to create a file for you (see header declaration in include/bu dir for documentation on that function or search the code for some examples using it, which will get specified as an arg to the script.  You can probably start with something as simple as popen() to invoke python on the script.</p>",
        "id": 130318922,
        "sender_full_name": "Sean",
        "timestamp": 1532575532
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I still haven't managed to get the bedugger to work. Spent a couple of hours breaking my head on it and tried a few solutions (<a href=\"https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra\" target=\"_blank\" title=\"https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra\">https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra</a>) but kept failing :(</p>\n</blockquote>\n<p>Is there a reason you're not using lldb?</p>\n</blockquote>\n<p>lldb gives - &gt; <br>\ndb_lookup(EZERO) failed: EZERO does not exist<br>\ndb_string_to_path() of 'EZERO' failed on 'EZERO'<br>\ndb_lookup(EZERO) failed: EZERO does not exist</p>",
        "id": 130320717,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532578851
    },
    {
        "content": "<p>that looks like straight up memory corruption.  EZERO is probably from a PAGEZERO literal somewhere in random memory.</p>",
        "id": 130321002,
        "sender_full_name": "Sean",
        "timestamp": 1532579318
    },
    {
        "content": "<p>found the bug</p>",
        "id": 130321813,
        "sender_full_name": "Sean",
        "timestamp": 1532580884
    },
    {
        "content": "<p>bugs</p>",
        "id": 130322518,
        "sender_full_name": "Sean",
        "timestamp": 1532582063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> on latest trunk (r71268), I fixed a couple bugs.  the nvals value was off by one and the function signature wasn't right on script_in().  also the vls serialization in export5/import5 doesn't look right so I commented it out.  left some !!! debugging code in there so you can see what's going on now, a simple substitute for debugging without a debugger.</p>",
        "id": 130322625,
        "sender_full_name": "Sean",
        "timestamp": 1532582258
    },
    {
        "content": "<p>yes, we  figured out nvals a day before. Ah fine..</p>",
        "id": 130322692,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532582369
    },
    {
        "content": "<p>script_in was the big one ... stack corruption</p>",
        "id": 130322698,
        "sender_full_name": "Sean",
        "timestamp": 1532582397
    },
    {
        "content": "<p>cmd_argvs[0] ? shouldn't it be 3 ?</p>",
        "id": 130322763,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532582467
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/1YhMLZ6FJRhgfm0TxlcG4fRp/Screen-Shot-2018-07-26-at-4.32.46-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-26-at-4.32.46-PM.png\">Screen-Shot-2018-07-26-at-4.32.46-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/1YhMLZ6FJRhgfm0TxlcG4fRp/Screen-Shot-2018-07-26-at-4.32.46-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-26-at-4.32.46-PM.png\"><img src=\"/user_uploads/1549/1YhMLZ6FJRhgfm0TxlcG4fRp/Screen-Shot-2018-07-26-at-4.32.46-PM.png\"></a></div>",
        "id": 130336463,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532603614
    },
    {
        "content": "<p>Need to give this thing some time</p>",
        "id": 130336724,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532603933
    },
    {
        "content": "<p>The import_5 function body looks standard like it is for almost all the other primitives. I don't see why db_i is becoming a Zero_Magic_Number.</p>",
        "id": 130336823,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532604056
    },
    {
        "content": "<p>The structure pointer fails to get validated.</p>",
        "id": 130336999,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532604265
    },
    {
        "content": "<p>Don't have access to the code, will look into it later today</p>",
        "id": 130337666,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532605047
    },
    {
        "content": "<p>But yes, it is identical, I did this previously for the annot primitive. I didn't find much of a difference. Will have to figure this out.</p>",
        "id": 130337722,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532605126
    },
    {
        "content": "<blockquote>\n<p>cmd_argvs[0] ? shouldn't it be 3 ?</p>\n</blockquote>\n<p>Yes!</p>",
        "id": 130337967,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532605458
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I still haven't managed to get the bedugger to work. Spent a couple of hours breaking my head on it and tried a few solutions (<a href=\"https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra\" target=\"_blank\" title=\"https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra\">https://stackoverflow.com/questions/39702871/gdb-kind-of-doesnt-work-on-macos-sierra</a>) but kept failing :(</p>\n</blockquote>\n<p>Is there a reason you're not using lldb?</p>\n</blockquote>\n<p>Started using it now!</p>",
        "id": 130342804,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532611004
    },
    {
        "content": "<blockquote>\n<p>cmd_argvs[0] ? shouldn't it be 3 ?</p>\n</blockquote>\n<p>I didn't try to fix all of the problems, just got it working with some debugging so it's clear what's going on ;)</p>",
        "id": 130343246,
        "sender_full_name": "Sean",
        "timestamp": 1532611417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> you should add more logging or step through the debugger and look at the value of variables for the next step.  the script_in function creates the initial object, that should be going to export5 next, followed by import5... you'll want to make sure each one is doing the right thing</p>",
        "id": 130343421,
        "sender_full_name": "Sean",
        "timestamp": 1532611568
    },
    {
        "content": "<p>saving out the vls string and then recreating it</p>",
        "id": 130343431,
        "sender_full_name": "Sean",
        "timestamp": 1532611591
    },
    {
        "content": "<p>Sure.</p>",
        "id": 130344232,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532612323
    },
    {
        "content": "<p>the reports are perfect, by the way</p>",
        "id": 130344592,
        "sender_full_name": "Sean",
        "timestamp": 1532612698
    },
    {
        "content": "<p>let me know if you can't figure out the vls serialization by tomorrow, let me know -- there's a good example in the dsp.c code</p>",
        "id": 130344619,
        "sender_full_name": "Sean",
        "timestamp": 1532612735
    },
    {
        "content": "<p>Thanks for the clues! I am genuinely distraught about not being able to copy and reference a string! Positively will finish by tomorrow!</p>",
        "id": 130346674,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532614982
    },
    {
        "content": "<p>In any rt_primitive_import5, when you set : BU_ASSERT(ep-&gt;ext_nbytes = X). How do you decide what is X? Is it the sum the sizes of all the variables present in that primitives  struct rt_primitive_internal?</p>",
        "id": 130384891,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532660369
    },
    {
        "content": "<p>BTW the export function is fixed and is working fine. The import function is giving in some errors, that will be fixed soon.</p>",
        "id": 130384952,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532660461
    },
    {
        "content": "<p>Awesome! Thanks! What was the issue?</p>",
        "id": 130384961,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532660498
    },
    {
        "content": "<p>Ah.. some bu_vls related stuff ;)</p>",
        "id": 130385003,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532660536
    },
    {
        "content": "<p>I'll commit it soon, once import is fixed</p>",
        "id": 130385006,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532660548
    },
    {
        "content": "<p>Great. :D</p>",
        "id": 130385007,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532660581
    },
    {
        "content": "<blockquote>\n<p>In any rt_primitive_import5, when you set : BU_ASSERT(ep-&gt;ext_nbytes = X). How do you decide what is X? Is it the sum the sizes of all the variables present in that primitives  struct rt_primitive_internal?</p>\n</blockquote>\n<p>Look for the same assert line in ell.c and look for the params of ell in rt/geom.h . I think you'll find your answer. ;)</p>",
        "id": 130385151,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532660811
    },
    {
        "content": "<p>That's exactly what the hypothesis was based on :P</p>",
        "id": 130385346,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532661140
    },
    {
        "content": "<blockquote>\n<p>Thanks for the clues! I am genuinely distraught about not being able to copy and reference a string! Positively will finish by tomorrow!</p>\n</blockquote>\n<p>Not a big deal if you can't figure it out -- I have in mind some other things we might want to pivot onto for the time remaining.  This is definitely code that will need to be written, but there's also still more work on the Python side too.</p>",
        "id": 130385484,
        "sender_full_name": "Sean",
        "timestamp": 1532661405
    },
    {
        "content": "<p>I'll revert back if I can't get it to work in an hour from now. <br>\nYes, eager for more work on the python side!</p>",
        "id": 130385558,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532661546
    },
    {
        "content": "<blockquote>\n<p>In any rt_primitive_import5, when you set : BU_ASSERT(ep-&gt;ext_nbytes = X). How do you decide what is X? Is it the sum the sizes of all the variables present in that primitives  struct rt_primitive_internal?</p>\n</blockquote>\n<p>also would note that \"ep-&gt;ext_nbytes = X\" would be an error... you probably mean ==</p>",
        "id": 130386762,
        "sender_full_name": "Sean",
        "timestamp": 1532663574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , in (src/librt/primitives/dsp/dsp.c) dsp_export5(), line 4510, we're copying dsp_ip-&gt;dsp_name to cp. Why do we do this? cp is a local var...</p>",
        "id": 130386819,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532663690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> of all the primitives in your spreadsheet, which ones aren't yet bound on the python side?  wasn't that was supposed to be a column too? :)</p>",
        "id": 130386833,
        "sender_full_name": "Sean",
        "timestamp": 1532663760
    },
    {
        "content": "<p>/me looks</p>",
        "id": 130386874,
        "sender_full_name": "Sean",
        "timestamp": 1532663770
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , in (src/librt/primitives/dsp/dsp.c) dsp_export5(), line 4510, we're copying dsp_ip-&gt;dsp_name to cp. Why do we do this? cp is a local var...</p>\n</blockquote>\n<p>see line 4451 -- cp is a pointer to a byte buffer .. so printing into cp is printing into that buffer.  we're writing the name of the dsp file/object into the buffer which is then written out to disk.  note that it's written to cp after a bunch of other things are written into cp and the pointer is advanced forward by the number of bytes written.  this is a low-level pointer.</p>",
        "id": 130387239,
        "sender_full_name": "Sean",
        "timestamp": 1532664380
    },
    {
        "content": "<p>Correct, I get how cp works. But then cp is lost after the function call is completed right?</p>",
        "id": 130387346,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532664588
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> of all the primitives in your spreadsheet, which ones aren't yet bound on the python side?  wasn't that was supposed to be a column too? :)</p>\n</blockquote>\n<p>I made another sheet for the same IIRC. Let me find it, else will update the sheet on github in 5 min!</p>",
        "id": 130387390,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532664619
    },
    {
        "content": "<p>Yes! I had made a sheet (<a href=\"https://docs.google.com/spreadsheets/d/1XeeI1mpLlPFZtc7i5GeOmjLFE-s8JMsYpwVszIPsrmQ/edit?usp=sharing\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/1XeeI1mpLlPFZtc7i5GeOmjLFE-s8JMsYpwVszIPsrmQ/edit?usp=sharing\">https://docs.google.com/spreadsheets/d/1XeeI1mpLlPFZtc7i5GeOmjLFE-s8JMsYpwVszIPsrmQ/edit?usp=sharing</a>) but this was for when we were working with the TCL approach. I'll add a new column and update asap.</p>",
        "id": 130387621,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532665057
    },
    {
        "content": "<blockquote>\n<p>Correct, I get how cp works. But then cp is lost after the function call is completed right?</p>\n</blockquote>\n<p>The cp pointer does go out of scope after the function call is completed, but nothing is \"lost\".  The buffer memory it was pointing to is still wherever it was at and is accessible via the ext_buf in the bu_external object.  I could just as well declare another pointer and set it to that address.</p>",
        "id": 130407398,
        "sender_full_name": "Sean",
        "timestamp": 1532694876
    },
    {
        "content": "<p>Uh-huh!</p>",
        "id": 130449752,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532750819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , what's the work on the python end you were talking about?</p>",
        "id": 130449799,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532750897
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , what's the work on the python end you were talking about?</p>\n</blockquote>\n<p>alright, so with the time left, I think we should focus on tidying up the python side more</p>",
        "id": 130468418,
        "sender_full_name": "Sean",
        "timestamp": 1532785833
    },
    {
        "content": "<p>we've gotten things started on the C side and can finish that up later, you got us a great to-do list (the spreadsheets) for  things that need to be completed there</p>",
        "id": 130468481,
        "sender_full_name": "Sean",
        "timestamp": 1532785919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  on the python side, there are a handful of things needed but I think one of the most useful will be a python script that creates one of everything currently supported by the interface</p>",
        "id": 130468688,
        "sender_full_name": "Sean",
        "timestamp": 1532786177
    },
    {
        "content": "<p>maybe create a 'half' for ground, then organize a scene with all the primitives on top/above it</p>",
        "id": 130468716,
        "sender_full_name": "Sean",
        "timestamp": 1532786251
    },
    {
        "content": "<p>use can your creativity on how they're organized, maybe group them by general type or shape</p>",
        "id": 130468785,
        "sender_full_name": "Sean",
        "timestamp": 1532786342
    },
    {
        "content": "<p>alternatively, you could create one \"scene\" per primitive type, showing the variety of shapes that primitive can make -- like how an rcc cylinder can be short and fat like a disc, tall and skinny like a pencil, or deep like a bucket, etc</p>",
        "id": 130468880,
        "sender_full_name": "Sean",
        "timestamp": 1532786447
    },
    {
        "content": "<p>then all primitives could be tiled into a bigger scene for all of them</p>",
        "id": 130468891,
        "sender_full_name": "Sean",
        "timestamp": 1532786472
    },
    {
        "content": "<p>That should take you a couple days, from there I think we need to focus on documentation -- so maybe keep that in mind when creating the primitives code -- so that the code can serve as documentation of the primitives</p>",
        "id": 130468961,
        "sender_full_name": "Sean",
        "timestamp": 1532786588
    },
    {
        "content": "<p>last but not least, how about writing up a brief 1-page installation+run tutorial</p>",
        "id": 130468988,
        "sender_full_name": "Sean",
        "timestamp": 1532786640
    },
    {
        "content": "<p>The export function was fixed. I committed the code. AFA the import function is considered, it absolutely looks fine but gives ABORT trap 6 on running.</p>",
        "id": 130509438,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532841275
    },
    {
        "content": "<p>Tried a bu_log just at the beginning of the import func() and nothing is displayed on running. The control somehow is not entering the function.</p>",
        "id": 130509453,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532841355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Affirmative! I've got something to do for the entire week now. Will start off with the script to create all the primitives now and then move onto implementing half! :)</p>",
        "id": 130554861,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532923189
    },
    {
        "content": "<p>Make sure, you leave time for the documentation. That is something devs tend to ignore, but is actually something of great importance. We still struggle for documentation. Cheers !</p>",
        "id": 130555036,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532923401
    },
    {
        "content": "<p>Indeed :)</p>",
        "id": 130557257,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1532927493
    },
    {
        "content": "<blockquote>\n<p>Tried a bu_log just at the beginning of the import func() and nothing is displayed on running. The control somehow is not entering the function.</p>\n</blockquote>\n<p>thank you <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> !  excellent work.  I'll take a look to see if I can spot what's wrong.  likely a mismatch between import and export (they must match byte for byte)</p>",
        "id": 130615072,
        "sender_full_name": "Sean",
        "timestamp": 1533001409
    },
    {
        "content": "<p>and in the right byte ordering</p>",
        "id": 130615080,
        "sender_full_name": "Sean",
        "timestamp": 1533001417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  FIXED !!</p>",
        "id": 130620880,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533011273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> I'm almost done with the tutorial for making all the primitives. I've shared the link in the lastest report. Will fix a couple of broken things today. I made changes in some files and I haven't updated on of the tutorials (read report for more) .<br>\nAfter that I'll start work on the half primitive and the big scene! :)</p>",
        "id": 130621971,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533013207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> Awesome!</p>",
        "id": 130621983,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533013214
    },
    {
        "content": "<p>So, check for the lastest revision. Script object is created  without any issue. <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  Once you are done with the python work that Sean told you to do, do try to incorporate the describe function that you tried by tweaking ell's func on the script.  With only a few days to go, try to make things work faster. Cheers !</p>",
        "id": 130622203,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533013639
    },
    {
        "content": "<p>Yea sure! The major body of the describe function is ready, I'll just need to modify it to sit in the script primitive. Let me know if the examples look alright btw?</p>",
        "id": 130622559,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533014367
    },
    {
        "content": "<p>Had a glimpse of the examples, couldn't look at them in detail (stuck somewhere) . There seem to be some formatting issues on the first look. I'll look at them in detail soon and let you know !</p>",
        "id": 130634723,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533032965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> what work is there to do on the half primitive?</p>",
        "id": 130643296,
        "sender_full_name": "Sean",
        "timestamp": 1533043881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> excellent work, what was wrong?</p>",
        "id": 130643515,
        "sender_full_name": "Sean",
        "timestamp": 1533044067
    },
    {
        "content": "<p>The allocation for ep-&gt;ext_nbytes  was a bit messy. :P</p>",
        "id": 130643643,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533044229
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> what work is there to do on the half primitive?</p>\n</blockquote>\n<p>Nothing major, will share the commit soon.</p>",
        "id": 130646389,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533046911
    },
    {
        "content": "<blockquote>\n<p>maybe create a 'half' for ground, then organize a scene with all the primitives on top/above it</p>\n</blockquote>\n<p>Just not able to create the half for ground :P <a href=\"/user_uploads/1549/cA8m9je4mPTjC-oNsOOW7xs6/Screen-Shot-2018-07-31-at-7.53.20-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-31-at-7.53.20-PM.png\">Screen-Shot-2018-07-31-at-7.53.20-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/cA8m9je4mPTjC-oNsOOW7xs6/Screen-Shot-2018-07-31-at-7.53.20-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-31-at-7.53.20-PM.png\"><img src=\"/user_uploads/1549/cA8m9je4mPTjC-oNsOOW7xs6/Screen-Shot-2018-07-31-at-7.53.20-PM.png\"></a></div>",
        "id": 130646496,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533047043
    },
    {
        "content": "<p>Does this scene look good?<br>\nAdditionally I'll create scenes for individual primitives too.</p>",
        "id": 130646556,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533047072
    },
    {
        "content": "<blockquote>\n<p>alternatively, you could create one \"scene\" per primitive type, showing the variety of shapes that primitive can make -- like how an rcc cylinder can be short and fat like a disc, tall and skinny like a pencil, or deep like a bucket, etc</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , I'm going to work on this now! Should be done in a day or two. The will move onto documentation.</p>",
        "id": 130648949,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533049329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> I just came to know about the mentor summit! Are you headed for it?</p>",
        "id": 130661018,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533060246
    },
    {
        "content": "<p>Also, do you get to take along a student with you? :P</p>",
        "id": 130661022,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533060260
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>maybe create a 'half' for ground, then organize a scene with all the primitives on top/above it</p>\n</blockquote>\n<p>Just not able to create the half for ground :P <a href=\"/user_uploads/1549/cA8m9je4mPTjC-oNsOOW7xs6/Screen-Shot-2018-07-31-at-7.53.20-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-31-at-7.53.20-PM.png\">Screen-Shot-2018-07-31-at-7.53.20-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/cA8m9je4mPTjC-oNsOOW7xs6/Screen-Shot-2018-07-31-at-7.53.20-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-07-31-at-7.53.20-PM.png\"><img src=\"/user_uploads/1549/cA8m9je4mPTjC-oNsOOW7xs6/Screen-Shot-2018-07-31-at-7.53.20-PM.png\"></a></div></blockquote>\n<p>So you managed to get the most of them... wish this was aesthetically more pleasing to see.</p>",
        "id": 130662550,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533061841
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>alternatively, you could create one \"scene\" per primitive type, showing the variety of shapes that primitive can make -- like how an rcc cylinder can be short and fat like a disc, tall and skinny like a pencil, or deep like a bucket, etc</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , I'm going to work on this now! Should be done in a day or two. The will move onto documentation.</p>\n</blockquote>\n<p>This shouldn't take time. Make this faster .</p>",
        "id": 130662604,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533061918
    },
    {
        "content": "<p>Ah! sorry it wasn't. I'll work on making it look better.</p>",
        "id": 130662649,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533061931
    },
    {
        "content": "<p>Hmm, ok.</p>",
        "id": 130662654,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533061938
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> I just came to know about the mentor summit! Are you headed for it?</p>\n</blockquote>\n<p>Limited slots! Lets see</p>",
        "id": 130662667,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533061963
    },
    {
        "content": "<blockquote>\n<p>Also, do you get to take along a student with you? :P</p>\n</blockquote>\n<p>Sean would answer this better :P</p>",
        "id": 130662682,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533061995
    },
    {
        "content": "<p>Ah ok! [Fingers crossed]</p>",
        "id": 130662765,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533062063
    },
    {
        "content": "<blockquote>\n<p>Does this scene look good?<br>\nAdditionally I'll create scenes for individual primitives too.</p>\n</blockquote>\n<p>It looks like a good start ..  they need to be organized in some meaningful manner ... they're not balanced in size, not on a horizontal plane (looks like they go vertically?), could use some color or lights to make it a showcase scene.  Also, aren't there some missing?  There are nearly 10 more on the spreadsheet listed as done, no?</p>",
        "id": 130691630,
        "sender_full_name": "Sean",
        "timestamp": 1533097778
    },
    {
        "content": "<p>Does this sort of grouping look alright? <a href=\"/user_uploads/1549/nfwFuoGV7TFvQX_AvKGroT-c/Screen-Shot-2018-08-01-at-12.18.21-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-08-01-at-12.18.21-PM.png\">Screen-Shot-2018-08-01-at-12.18.21-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/nfwFuoGV7TFvQX_AvKGroT-c/Screen-Shot-2018-08-01-at-12.18.21-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-08-01-at-12.18.21-PM.png\"><img src=\"/user_uploads/1549/nfwFuoGV7TFvQX_AvKGroT-c/Screen-Shot-2018-08-01-at-12.18.21-PM.png\"></a></div>",
        "id": 130696616,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533106138
    },
    {
        "content": "<p>Yea, they're on a vertical place.</p>",
        "id": 130696626,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533106159
    },
    {
        "content": "<p>Have you included all of them ??</p>",
        "id": 130696760,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533106352
    },
    {
        "content": "<p>Looks like we are missing some objects</p>",
        "id": 130696763,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533106372
    },
    {
        "content": "<p>No, no, this is still in progress.</p>",
        "id": 130696786,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533106442
    },
    {
        "content": "<p>I'm asking about if this type of clustering is alright.</p>",
        "id": 130696828,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533106453
    },
    {
        "content": "<blockquote>\n<p>alternatively, you could create one \"scene\" per primitive type, showing the variety of shapes that primitive can make -- like how an rcc cylinder can be short and fat like a disc, tall and skinny like a pencil, or deep like a bucket, etc</p>\n</blockquote>\n<p>Something like this.</p>",
        "id": 130696841,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533106472
    },
    {
        "content": "<p>Better than the last one !</p>",
        "id": 130696858,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533106530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  will have more to say !</p>",
        "id": 130696905,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533106565
    },
    {
        "content": "<p>Cool.</p>",
        "id": 130696909,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533106572
    },
    {
        "content": "<p>I'm drawing a grip with the following attributes :             <br>\n             \"grip.s\",<br>\n            center = (0, 5, 1),<br>\n            normal = (1, 0, 0),<br>\n            magnitude = 3,</p>",
        "id": 130700172,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533111738
    },
    {
        "content": "<p>It gets drawn alright, but when I try to render it, nothing renders. It doesn't say rt failed, it just shows a blank screen, any idea why this might be happening?</p>",
        "id": 130700188,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533111769
    },
    {
        "content": "<p>So, there's a few primitives like extrude, sketch, and a few more (will share the list) which I don't have an understanding of. Those are the ones missing from the scene that I had shared. It was also missing a few basic primitive like grip, superell and metaball which I've introduced now.</p>",
        "id": 130722297,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533138000
    },
    {
        "content": "<p>I will spend a little time to understand and implement the primitives that are new to me.</p>",
        "id": 130722400,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533138088
    },
    {
        "content": "<p>If you have any leads or good examples, please share. :)</p>",
        "id": 130722411,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533138113
    },
    {
        "content": "<p>Specifically examples of 'vol'.</p>",
        "id": 130733104,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533148475
    },
    {
        "content": "<p>Grip doesn't show in rt :P</p>",
        "id": 130754916,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533178313
    },
    {
        "content": "<p>Its absolutely normal !</p>",
        "id": 130754956,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533178322
    },
    {
        "content": "<blockquote>\n<p>So, there's a few primitives like extrude, sketch, and a few more (will share the list) which I don't have an understanding of. Those are the ones missing from the scene that I had shared. It was also missing a few basic primitive like grip, superell and metaball which I've introduced now.</p>\n</blockquote>\n<p>Sketch, extrude aren't big things. Sketch doesn't raytrace again. Extrude is built on top of sketch. Have  a read.</p>",
        "id": 130755029,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533178461
    },
    {
        "content": "<p>Yea, I've read through them. I'm just experimenting with including them in a scene..</p>",
        "id": 130756518,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533181116
    },
    {
        "content": "<p><a href=\"https://docs.google.com/spreadsheets/d/1XeeI1mpLlPFZtc7i5GeOmjLFE-s8JMsYpwVszIPsrmQ/edit?usp=sharing\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/1XeeI1mpLlPFZtc7i5GeOmjLFE-s8JMsYpwVszIPsrmQ/edit?usp=sharing\">https://docs.google.com/spreadsheets/d/1XeeI1mpLlPFZtc7i5GeOmjLFE-s8JMsYpwVszIPsrmQ/edit?usp=sharing</a></p>",
        "id": 130759100,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533186520
    },
    {
        "content": "<p>^Here's the primitives that can be created. I've introduced a column for those that I have not yet included in the scene with comments.</p>",
        "id": 130759115,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533186573
    },
    {
        "content": "<blockquote>\n<p>I'm asking about if this type of clustering is alright.</p>\n</blockquote>\n<p>better!  please keep them on a horizontal plane, though, so that the base of every primitive ends up at Z=0  (not centered at Z=0, the _base_ or lowest point at Z=0 ... )</p>",
        "id": 130759307,
        "sender_full_name": "Sean",
        "timestamp": 1533186908
    },
    {
        "content": "<p>Ok, sure, could do that</p>",
        "id": 130759311,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533186941
    },
    {
        "content": "<p>fyi, there are 3 or 4 other attempts at this you can check out with a search, e.g., <a href=\"https://www.google.com/search?q=brl-cad+primitives&amp;safe=off&amp;client=safari&amp;rls=en&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=2ahUKEwjona2rzs3cAhWLwFkKHXKrDSIQ_AUoAnoECAsQBA&amp;biw=1494&amp;bih=912\" target=\"_blank\" title=\"https://www.google.com/search?q=brl-cad+primitives&amp;safe=off&amp;client=safari&amp;rls=en&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=2ahUKEwjona2rzs3cAhWLwFkKHXKrDSIQ_AUoAnoECAsQBA&amp;biw=1494&amp;bih=912\">https://www.google.com/search?q=brl-cad+primitives&amp;safe=off&amp;client=safari&amp;rls=en&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=2ahUKEwjona2rzs3cAhWLwFkKHXKrDSIQ_AUoAnoECAsQBA&amp;biw=1494&amp;bih=912</a></p>",
        "id": 130759360,
        "sender_full_name": "Sean",
        "timestamp": 1533187046
    },
    {
        "content": "<blockquote>\n<p>It gets drawn alright, but when I try to render it, nothing renders. It doesn't say rt failed, it just shows a blank screen, any idea why this might be happening?</p>\n</blockquote>\n<p>grips don't have a visual representation -- they are controls for animating other geometry</p>",
        "id": 130759407,
        "sender_full_name": "Sean",
        "timestamp": 1533187089
    },
    {
        "content": "<p>Ah! The very image, was my sort of inspiration. I'll give the arrangement a little more attention now :)</p>",
        "id": 130759410,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533187114
    },
    {
        "content": "<p>Uh-huh</p>",
        "id": 130759413,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533187134
    },
    {
        "content": "<p>these may help with a few you're missing: <a href=\"http://brlcad.org/wiki/Sketch\" target=\"_blank\" title=\"http://brlcad.org/wiki/Sketch\">http://brlcad.org/wiki/Sketch</a></p>",
        "id": 130759419,
        "sender_full_name": "Sean",
        "timestamp": 1533187153
    },
    {
        "content": "<p><a href=\"http://brlcad.org/wiki/BRL-CAD_Primitives#ars\" target=\"_blank\" title=\"http://brlcad.org/wiki/BRL-CAD_Primitives#ars\">http://brlcad.org/wiki/BRL-CAD_Primitives#ars</a></p>",
        "id": 130759420,
        "sender_full_name": "Sean",
        "timestamp": 1533187155
    },
    {
        "content": "<p>Yea, I've been using these only. Will finish off all the 2d derived primitives soon</p>",
        "id": 130759423,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533187199
    },
    {
        "content": "<p><a href=\"http://brlcad.org/wiki/Extrude\" target=\"_blank\" title=\"http://brlcad.org/wiki/Extrude\">http://brlcad.org/wiki/Extrude</a></p>",
        "id": 130759465,
        "sender_full_name": "Sean",
        "timestamp": 1533187210
    },
    {
        "content": "<p>Just wanted to know, how do you copy, paste in mged?</p>",
        "id": 130759469,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533187236
    },
    {
        "content": "<p>revolve is a lot like extrude, but simpler in a lot of ways as you don't need or want to define a closed loop, you just draw a 2D line or curve</p>",
        "id": 130759471,
        "sender_full_name": "Sean",
        "timestamp": 1533187263
    },
    {
        "content": "<p>Uh-huh</p>",
        "id": 130759476,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533187294
    },
    {
        "content": "<p>it depends on your platform, it's typically a system or X11 key binding</p>",
        "id": 130759478,
        "sender_full_name": "Sean",
        "timestamp": 1533187307
    },
    {
        "content": "<p>Got it! (ctrl+v and not cmd+v) :P</p>",
        "id": 130759525,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533187383
    },
    {
        "content": "<p>there's a basic 2D sketch editor in mged that you can use to create sketch objects for testing with extrude and revolve ... when you get them working, you can then figure out how to describe something similar in the python api</p>",
        "id": 130759532,
        "sender_full_name": "Sean",
        "timestamp": 1533187404
    },
    {
        "content": "<p>yeah, on mac, that's technically an X11 window -- so X11 bindings are ctrl by default</p>",
        "id": 130759542,
        "sender_full_name": "Sean",
        "timestamp": 1533187442
    },
    {
        "content": "<p>there is an native aqua version that uses cmd, but that's not readily available to you</p>",
        "id": 130759577,
        "sender_full_name": "Sean",
        "timestamp": 1533187492
    },
    {
        "content": "<p>Alright</p>",
        "id": 130759584,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533187512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , just curious, why not organize everything along the z-axis? Is it because it's not aesthetically pleasing?</p>",
        "id": 130760129,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533188584
    },
    {
        "content": "<p>(Something like this)[https://brlcad.org/gallery/var/resizes/diagrams/primitives.png]</p>",
        "id": 130760197,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533188742
    },
    {
        "content": "<p>you're welcome to, but it's a LOT harder to make it look aesthetically pleasing or have any organization in my experience -- that diagram you show wasn't modeled up the Z -- it would be quite hard to compose it that way</p>",
        "id": 130760690,
        "sender_full_name": "Sean",
        "timestamp": 1533189660
    },
    {
        "content": "<p>if it doesn't look good, it won't be looked at, and if it's not looked at, it won't be useful</p>",
        "id": 130760700,
        "sender_full_name": "Sean",
        "timestamp": 1533189715
    },
    {
        "content": "<p>on a horizontal plane, it becomes a landscape that is easily related with and will have optical effects that can be added to the scene like shadows, perspective, and environment mapping to make it look good</p>",
        "id": 130760748,
        "sender_full_name": "Sean",
        "timestamp": 1533189766
    },
    {
        "content": "<p>Aright! GG! :D</p>",
        "id": 130760817,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533189855
    },
    {
        "content": "<p>not the best example, but <a href=\"http://write.flossmanuals.net/contributors-guide-to-brl-cad/feature-overview/static/sflake2_cc.png\" target=\"_blank\" title=\"http://write.flossmanuals.net/contributors-guide-to-brl-cad/feature-overview/static/sflake2_cc.png\">http://write.flossmanuals.net/contributors-guide-to-brl-cad/feature-overview/static/sflake2_cc.png</a></p>\n<div class=\"message_inline_image\"><a href=\"http://write.flossmanuals.net/contributors-guide-to-brl-cad/feature-overview/static/sflake2_cc.png\" target=\"_blank\" title=\"http://write.flossmanuals.net/contributors-guide-to-brl-cad/feature-overview/static/sflake2_cc.png\"><img src=\"https://uploads.zulipusercontent.net/c278454db1a5cac6520453239e8c649dcd4a7da9/687474703a2f2f77726974652e666c6f73736d616e75616c732e6e65742f636f6e7472696275746f72732d67756964652d746f2d62726c2d6361642f666561747572652d6f766572766965772f7374617469632f73666c616b65325f63632e706e67\"></a></div>",
        "id": 130760819,
        "sender_full_name": "Sean",
        "timestamp": 1533189859
    },
    {
        "content": "<p>imagine all the primitives organized out in that checkerfield, casting nice shadows with ambient occlusion, maybe other effects</p>",
        "id": 130760902,
        "sender_full_name": "Sean",
        "timestamp": 1533190019
    },
    {
        "content": "<p>boring af: <a href=\"https://img1.cgtrader.com/items/31910/2e26f3ba8d/deluxe-primitives-3d-model-low-poly-obj.png\" target=\"_blank\" title=\"https://img1.cgtrader.com/items/31910/2e26f3ba8d/deluxe-primitives-3d-model-low-poly-obj.png\">https://img1.cgtrader.com/items/31910/2e26f3ba8d/deluxe-primitives-3d-model-low-poly-obj.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://img1.cgtrader.com/items/31910/2e26f3ba8d/deluxe-primitives-3d-model-low-poly-obj.png\" target=\"_blank\" title=\"https://img1.cgtrader.com/items/31910/2e26f3ba8d/deluxe-primitives-3d-model-low-poly-obj.png\"><img src=\"https://img1.cgtrader.com/items/31910/2e26f3ba8d/deluxe-primitives-3d-model-low-poly-obj.png\"></a></div>",
        "id": 130760916,
        "sender_full_name": "Sean",
        "timestamp": 1533190044
    },
    {
        "content": "<p>less boring: <a href=\"https://cdn.instructables.com/FZV/PQHS/IRXTUV78/FZVPQHSIRXTUV78.LARGE.jpg\" target=\"_blank\" title=\"https://cdn.instructables.com/FZV/PQHS/IRXTUV78/FZVPQHSIRXTUV78.LARGE.jpg\">https://cdn.instructables.com/FZV/PQHS/IRXTUV78/FZVPQHSIRXTUV78.LARGE.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://cdn.instructables.com/FZV/PQHS/IRXTUV78/FZVPQHSIRXTUV78.LARGE.jpg\" target=\"_blank\" title=\"https://cdn.instructables.com/FZV/PQHS/IRXTUV78/FZVPQHSIRXTUV78.LARGE.jpg\"><img src=\"https://cdn.instructables.com/FZV/PQHS/IRXTUV78/FZVPQHSIRXTUV78.LARGE.jpg\"></a></div>",
        "id": 130760970,
        "sender_full_name": "Sean",
        "timestamp": 1533190122
    },
    {
        "content": "<p>pretty cool: <a href=\"http://www.renderography.com/wp-content/uploads/unit_primitives_examples.jpg\" target=\"_blank\" title=\"http://www.renderography.com/wp-content/uploads/unit_primitives_examples.jpg\">http://www.renderography.com/wp-content/uploads/unit_primitives_examples.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"http://www.renderography.com/wp-content/uploads/unit_primitives_examples.jpg\" target=\"_blank\" title=\"http://www.renderography.com/wp-content/uploads/unit_primitives_examples.jpg\"><img src=\"https://uploads.zulipusercontent.net/31f59c5890eb51caed47e4c046069cf0a0add817/687474703a2f2f7777772e72656e6465726f6772617068792e636f6d2f77702d636f6e74656e742f75706c6f6164732f756e69745f7072696d6974697665735f6578616d706c65732e6a7067\"></a></div>",
        "id": 130760980,
        "sender_full_name": "Sean",
        "timestamp": 1533190144
    },
    {
        "content": "<p>half-assed: <a href=\"http://gtu.ge/Arch/Faculty/Multimedia/Acad_11/11create_basic_3dobjects0/images/create_basic_3Dobjects_img_0.jpg\" target=\"_blank\" title=\"http://gtu.ge/Arch/Faculty/Multimedia/Acad_11/11create_basic_3dobjects0/images/create_basic_3Dobjects_img_0.jpg\">http://gtu.ge/Arch/Faculty/Multimedia/Acad_11/11create_basic_3dobjects0/images/create_basic_3Dobjects_img_0.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"http://gtu.ge/Arch/Faculty/Multimedia/Acad_11/11create_basic_3dobjects0/images/create_basic_3Dobjects_img_0.jpg\" target=\"_blank\" title=\"http://gtu.ge/Arch/Faculty/Multimedia/Acad_11/11create_basic_3dobjects0/images/create_basic_3Dobjects_img_0.jpg\"><img src=\"https://uploads.zulipusercontent.net/8249f24504259df8968886bc30a27a85098505a5/687474703a2f2f6774752e67652f417263682f466163756c74792f4d756c74696d656469612f416361645f31312f31316372656174655f62617369635f33646f626a65637473302f696d616765732f6372656174655f62617369635f33446f626a656374735f696d675f302e6a7067\"></a></div>",
        "id": 130760988,
        "sender_full_name": "Sean",
        "timestamp": 1533190172
    },
    {
        "content": "<p>no good: <a href=\"http://brlcad.org/OLD/reports/arl-mr-103/images/figure_2.gif\" target=\"_blank\" title=\"http://brlcad.org/OLD/reports/arl-mr-103/images/figure_2.gif\">http://brlcad.org/OLD/reports/arl-mr-103/images/figure_2.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"http://brlcad.org/OLD/reports/arl-mr-103/images/figure_2.gif\" target=\"_blank\" title=\"http://brlcad.org/OLD/reports/arl-mr-103/images/figure_2.gif\"><img src=\"https://uploads.zulipusercontent.net/3a66a84a56f2ed0f806d8816261c1dc7a1ada2d7/687474703a2f2f62726c6361642e6f72672f4f4c442f7265706f7274732f61726c2d6d722d3130332f696d616765732f6669677572655f322e676966\"></a></div>",
        "id": 130761049,
        "sender_full_name": "Sean",
        "timestamp": 1533190235
    },
    {
        "content": "<p>can work tiled if all shapes (or sets of shapes) roughly fill the same area, e.g., <a href=\"https://cmkt-image-prd.global.ssl.fastly.net/0.1.0/ps/13124/580/386/m1/fpnw/wm0/3d_geometric_shapes_1-.png?1365485103&amp;s=83e651804c9eae187fd3246775155dec\" target=\"_blank\" title=\"https://cmkt-image-prd.global.ssl.fastly.net/0.1.0/ps/13124/580/386/m1/fpnw/wm0/3d_geometric_shapes_1-.png?1365485103&amp;s=83e651804c9eae187fd3246775155dec\">https://cmkt-image-prd.global.ssl.fastly.net/0.1.0/ps/13124/580/386/m1/fpnw/wm0/3d_geometric_shapes_1-.png?1365485103&amp;s=83e651804c9eae187fd3246775155dec</a></p>\n<div class=\"message_inline_image\"><a href=\"https://cmkt-image-prd.global.ssl.fastly.net/0.1.0/ps/13124/580/386/m1/fpnw/wm0/3d_geometric_shapes_1-.png?1365485103&amp;s=83e651804c9eae187fd3246775155dec\" target=\"_blank\" title=\"https://cmkt-image-prd.global.ssl.fastly.net/0.1.0/ps/13124/580/386/m1/fpnw/wm0/3d_geometric_shapes_1-.png?1365485103&amp;s=83e651804c9eae187fd3246775155dec\"><img src=\"https://cmkt-image-prd.global.ssl.fastly.net/0.1.0/ps/13124/580/386/m1/fpnw/wm0/3d_geometric_shapes_1-.png?1365485103&amp;s=83e651804c9eae187fd3246775155dec\"></a></div>",
        "id": 130761155,
        "sender_full_name": "Sean",
        "timestamp": 1533190413
    },
    {
        "content": "<p>getting interesting: <a href=\"http://2.bp.blogspot.com/-rM0Yueq5t44/VXleslyHN4I/AAAAAAAABzc/56_gHGo2KT0/s1600/standard_primitives.jpg\" target=\"_blank\" title=\"http://2.bp.blogspot.com/-rM0Yueq5t44/VXleslyHN4I/AAAAAAAABzc/56_gHGo2KT0/s1600/standard_primitives.jpg\">http://2.bp.blogspot.com/-rM0Yueq5t44/VXleslyHN4I/AAAAAAAABzc/56_gHGo2KT0/s1600/standard_primitives.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"http://2.bp.blogspot.com/-rM0Yueq5t44/VXleslyHN4I/AAAAAAAABzc/56_gHGo2KT0/s1600/standard_primitives.jpg\" target=\"_blank\" title=\"http://2.bp.blogspot.com/-rM0Yueq5t44/VXleslyHN4I/AAAAAAAABzc/56_gHGo2KT0/s1600/standard_primitives.jpg\"><img src=\"https://uploads.zulipusercontent.net/f978f872c246b60e05fd427979ab99c12031eb1a/687474703a2f2f322e62702e626c6f6773706f742e636f6d2f2d724d3059756571357434342f56586c65736c79484e34492f4141414141414141427a632f35365f6748476f324b54302f73313630302f7374616e646172645f7072696d6974697665732e6a7067\"></a></div>",
        "id": 130761424,
        "sender_full_name": "Sean",
        "timestamp": 1533190849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  I hope all these examples would help you.... but don't forget to work on describe once you are done with the arrangements . Cheers !</p>",
        "id": 130761805,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533191527
    },
    {
        "content": "<blockquote>\n<p>Specifically examples of 'vol'.</p>\n</blockquote>\n<p>You mean like <a href=\"http://brlcad.org/wiki/VOL\" target=\"_blank\" title=\"http://brlcad.org/wiki/VOL\">http://brlcad.org/wiki/VOL</a> ?</p>",
        "id": 130809321,
        "sender_full_name": "Sean",
        "timestamp": 1533255807
    },
    {
        "content": "<p>So, the sketch primitive doesn't work and is sort of hardcoded in the current python API. I'm working on fixing it, shouldn't take long. I guess this could be a priority before we create the bigger scene.</p>",
        "id": 130816524,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533268691
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Specifically examples of 'vol'.</p>\n</blockquote>\n<p>You mean like <a href=\"http://brlcad.org/wiki/VOL\" target=\"_blank\" title=\"http://brlcad.org/wiki/VOL\">http://brlcad.org/wiki/VOL</a> ?</p>\n</blockquote>\n<p>Returns a 404</p>",
        "id": 130816540,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533268746
    },
    {
        "content": "<p>what's \"doesn't work\" mean?</p>",
        "id": 130816541,
        "sender_full_name": "Sean",
        "timestamp": 1533268749
    },
    {
        "content": "<blockquote>\n<p>Returns a 404</p>\n</blockquote>\n<p>woah, wiki disappeared</p>",
        "id": 130816605,
        "sender_full_name": "Sean",
        "timestamp": 1533268827
    },
    {
        "content": "<p>Alright, from what I've gathered whoever wrote this code earlier, didn't complete the implementation of the script primitive. <br>\nIf you look at <a href=\"https://github.com/Killthebug/python-brlcad/blob/efe542615971cd7fd88b41e83fc4d8b646364925/brlcad/geometry.py#L297\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/efe542615971cd7fd88b41e83fc4d8b646364925/brlcad/geometry.py#L297\">https://github.com/Killthebug/python-brlcad/blob/efe542615971cd7fd88b41e83fc4d8b646364925/brlcad/geometry.py#L297</a>. This is what is invoked when the user wants to create a sketch, but this doesn't take any input from the use, rather just accepts a sketch object. If you look at other functions in the file, they all take the params required to create their respective primitives.</p>",
        "id": 130816677,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533268980
    },
    {
        "content": "<p>Instead, to create a primitive, this function uses the default values that have been hard coded in the Sketch class. <a href=\"https://github.com/Killthebug/python-brlcad/blob/efe542615971cd7fd88b41e83fc4d8b646364925/brlcad/primitives/sketch.py#L366\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/efe542615971cd7fd88b41e83fc4d8b646364925/brlcad/primitives/sketch.py#L366\">https://github.com/Killthebug/python-brlcad/blob/efe542615971cd7fd88b41e83fc4d8b646364925/brlcad/primitives/sketch.py#L366</a></p>",
        "id": 130816685,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533269025
    },
    {
        "content": "<p>I'm now modifying geometry.py to be able to accept user input and create the sketch.</p>",
        "id": 130816726,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533269053
    },
    {
        "content": "<p>wiki fixed</p>",
        "id": 130816842,
        "sender_full_name": "Sean",
        "timestamp": 1533269330
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 130816850,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533269359
    },
    {
        "content": "<blockquote>\n<p>Alright, from what I've gathered whoever wrote this code earlier, didn't complete the implementation of the script primitive. <br>\nIf you look at <a href=\"https://github.com/Killthebug/python-brlcad/blob/efe542615971cd7fd88b41e83fc4d8b646364925/brlcad/geometry.py#L297\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/efe542615971cd7fd88b41e83fc4d8b646364925/brlcad/geometry.py#L297\">https://github.com/Killthebug/python-brlcad/blob/efe542615971cd7fd88b41e83fc4d8b646364925/brlcad/geometry.py#L297</a>. This is what is invoked when the user wants to create a sketch, but this doesn't take any input from the use, rather just accepts a sketch object. If you look at other functions in the file, they all take the params required to create their respective primitives.</p>\n</blockquote>\n<p>Either I'm not understand how to pass input to create a sketch object or this is genuinely wrongly implemented..</p>",
        "id": 130816913,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533269486
    },
    {
        "content": "<blockquote>\n<p>Alright, from what I've gathered whoever wrote this code earlier, didn't complete the implementation of the script primitive. <br>\nIf you look at <a href=\"https://github.com/Killthebug/python-brlcad/blob/efe542615971cd7fd88b41e83fc4d8b646364925/brlcad/geometry.py#L297\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/efe542615971cd7fd88b41e83fc4d8b646364925/brlcad/geometry.py#L297\">https://github.com/Killthebug/python-brlcad/blob/efe542615971cd7fd88b41e83fc4d8b646364925/brlcad/geometry.py#L297</a>. This is what is invoked when the user wants to create a sketch, but this doesn't take any input from the use, rather just accepts a sketch object. If you look at other functions in the file, they all take the params required to create their respective primitives.</p>\n</blockquote>\n<p>that's not how I read it -- sketch is nothing like the other primitives, so it's perfectly normal that it's construction would be different</p>",
        "id": 130816962,
        "sender_full_name": "Sean",
        "timestamp": 1533269536
    },
    {
        "content": "<p>it takes an arbitrary amount of data</p>",
        "id": 130816970,
        "sender_full_name": "Sean",
        "timestamp": 1533269576
    },
    {
        "content": "<p>would need to see how primitives.Sketch is implemented, but it otherwise looks like it could be complete at a glance</p>",
        "id": 130816986,
        "sender_full_name": "Sean",
        "timestamp": 1533269608
    },
    {
        "content": "<blockquote>\n<p>Instead, to create a primitive, this function uses the default values that have been hard coded in the Sketch class.</p>\n</blockquote>\n<p>it only does that when the user didn't pass one</p>",
        "id": 130816990,
        "sender_full_name": "Sean",
        "timestamp": 1533269635
    },
    {
        "content": "<p>take a look at an example sketch: <a href=\"http://brlcad.org/wiki/Sketch\" target=\"_blank\" title=\"http://brlcad.org/wiki/Sketch\">http://brlcad.org/wiki/Sketch</a></p>",
        "id": 130817103,
        "sender_full_name": "Sean",
        "timestamp": 1533269838
    },
    {
        "content": "<p>vertex list and a bunch of variadic sketch line types</p>",
        "id": 130817108,
        "sender_full_name": "Sean",
        "timestamp": 1533269876
    },
    {
        "content": "<p>In mged is it possible to save a certain POV? In the view option you have toggles for left, right, front, rear, etc. but is it possible to save a custom angle?</p>",
        "id": 130879283,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533364328
    },
    {
        "content": "<p>yes, depending on what you mean by saving a view</p>",
        "id": 130881025,
        "sender_full_name": "Sean",
        "timestamp": 1533368328
    },
    {
        "content": "<p>the 'ae' command will set an arbitrary azimuth/elevation (e.g., ae 35 25 or ae 45 65)</p>",
        "id": 130881031,
        "sender_full_name": "Sean",
        "timestamp": 1533368369
    },
    {
        "content": "<p>the saveview command will save the current view information out to a file, which can be read back with the loadview command later</p>",
        "id": 130881074,
        "sender_full_name": "Sean",
        "timestamp": 1533368427
    },
    {
        "content": "<p>there are several others too like setting based on a view direction or quaternion</p>",
        "id": 130881083,
        "sender_full_name": "Sean",
        "timestamp": 1533368487
    },
    {
        "content": "<blockquote>\n<p>the 'ae' command will set an arbitrary azimuth/elevation (e.g., ae 35 25 or ae 45 65)</p>\n</blockquote>\n<p>Exactly what I was looking for!</p>",
        "id": 130892552,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533391644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  Hey what are you up to ?  any leads with the sketch primitive ?</p>",
        "id": 130935154,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533483288
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , I've been working on creating the scene with all the primitives. I've made multiple attempts in terms of arrangements, orientation, viewing angles and sizes. Finally I've been able to finalize on a particular design. I'm working on perfecting it and it should be completed in a few hours from now. Work on the sketch primitive has also progressed but it's not completed yet. I will shift focus onto it, once I'm done perfecting the scene.</p>",
        "id": 130953537,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533522504
    },
    {
        "content": "<p>I'm just stuck on getting the pipe made correctly, I have troubles figuring out the bend_radii.</p>",
        "id": 130956658,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533528470
    },
    {
        "content": "<p>Got it! xD</p>",
        "id": 130957927,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533530961
    },
    {
        "content": "<p>Just went through your report. The  arrangement of the primitives is better than the previous ones.  Regarding the sketch. Usually we use the gui but we can also create a sketch using put. This is what runs in the backend of the gui editor. All this shouldn't take much time ! Please try to wrap it up, we need to work on the  describe as well plus the errors that we may encounter and the documentation part as well .</p>",
        "id": 130970056,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533551554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  are you aware of the final report submission with all the code links and the details of your work ? You need to submit this along with your final evaluation</p>",
        "id": 131024213,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533620414
    },
    {
        "content": "<p>and you'll need to separate your code from the code that was already there -- e.g., you can identify all your commits and extract them as a big patch file or pull them into a branch and tag them</p>",
        "id": 131024318,
        "sender_full_name": "Sean",
        "timestamp": 1533620621
    },
    {
        "content": "<p>you're basically required to submit all the code that you wrote, modified, removed, etc.</p>",
        "id": 131024366,
        "sender_full_name": "Sean",
        "timestamp": 1533620676
    },
    {
        "content": "<p>Sure! I could do that!</p>",
        "id": 131024607,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533621109
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  are you aware of the final report submission with all the code links and the details of your work ? You need to submit this along with your final evaluation</p>\n</blockquote>\n<p>Yea, I was notified via email yesterday.</p>",
        "id": 131024646,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533621133
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/Crpx3bQh8WsCDxpY-46NQwqj/Screen-Shot-2018-08-07-at-12.34.17-AM.png\" target=\"_blank\" title=\"Screen-Shot-2018-08-07-at-12.34.17-AM.png\">Screen-Shot-2018-08-07-at-12.34.17-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/Crpx3bQh8WsCDxpY-46NQwqj/Screen-Shot-2018-08-07-at-12.34.17-AM.png\" target=\"_blank\" title=\"Screen-Shot-2018-08-07-at-12.34.17-AM.png\"><img src=\"/user_uploads/1549/Crpx3bQh8WsCDxpY-46NQwqj/Screen-Shot-2018-08-07-at-12.34.17-AM.png\"></a></div>",
        "id": 131024707,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533621325
    },
    {
        "content": "<p>This entire scene was created using : <br>\n<a href=\"https://github.com/Killthebug/python-brlcad/blob/master/Tutorial/scene.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/Tutorial/scene.py\">https://github.com/Killthebug/python-brlcad/blob/master/Tutorial/scene.py</a></p>",
        "id": 131024709,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533621342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> What do you think?</p>",
        "id": 131024714,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533621351
    },
    {
        "content": "<p>That's looking much better!</p>",
        "id": 131025213,
        "sender_full_name": "Sean",
        "timestamp": 1533622088
    },
    {
        "content": "<p>looks like a few issues, some primitives missing, some with undistinguished parameters, but looks like that'll set the stage (literally!)</p>",
        "id": 131025223,
        "sender_full_name": "Sean",
        "timestamp": 1533622174
    },
    {
        "content": "<p>mind if I share that image?</p>",
        "id": 131025265,
        "sender_full_name": "Sean",
        "timestamp": 1533622209
    },
    {
        "content": "<blockquote>\n<p>mind if I share that image?</p>\n</blockquote>\n<p>Not at all! :D</p>",
        "id": 131025603,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533622944
    },
    {
        "content": "<blockquote>\n<p>looks like a few issues, some primitives missing, some with undistinguished parameters, but looks like that'll set the stage (literally!)</p>\n</blockquote>\n<p>Yes, I'm missing sketch and other 2-d derived primitives. Also, not included in this scene are superell, ebm, submodel and grip. Though examples on how to implement them have been written in <a href=\"https://github.com/Killthebug/python-brlcad/blob/master/Tutorial/core_tutorial.py\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/master/Tutorial/core_tutorial.py\">https://github.com/Killthebug/python-brlcad/blob/master/Tutorial/core_tutorial.py</a></p>",
        "id": 131025656,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533623098
    },
    {
        "content": "<p>core_tutorial.py is meant to act as a reference file for creating primitives using python brlcad.</p>",
        "id": 131025668,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533623136
    },
    {
        "content": "<p>What about the undistinguished parameters, are you referring to the arb7? (orange in top row)</p>",
        "id": 131025716,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533623177
    },
    {
        "content": "<p>Even the bot (bottom row pink) could use a better orientation, IMO</p>",
        "id": 131025722,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533623219
    },
    {
        "content": "<p>Oh yea, an rpp is also missing from the scene! :(</p>",
        "id": 131025829,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533623411
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> What do you think?</p>\n</blockquote>\n<p>Looks great indeed !</p>",
        "id": 131026203,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533624205
    },
    {
        "content": "<p>Yeah, need to account for the missing primitives :P</p>",
        "id": 131026249,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533624268
    },
    {
        "content": "<p>On it!</p>",
        "id": 131026252,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533624294
    },
    {
        "content": "<blockquote>\n<p>What about the undistinguished parameters, are you referring to the arb7? (orange in top row)</p>\n</blockquote>\n<p>arb7 is one of them, looks like an arb6.  all of the arbs could use some rotation, like 20-50 degrees about Z so that we can see at least 2 sides of the arb4.  green ehy(?) on second-from-top row looks like an arb6.  green and red pointy cylinders  -- (what are those?) look like rcc, too pointy.  bot should be something more detailed (maybe teapot from the 'tea' command). and is the last red one in the corner an ars?  something like the wiki example is needed, something more interesting than a wedge-looking shape.</p>",
        "id": 131027444,
        "sender_full_name": "Sean",
        "timestamp": 1533626453
    },
    {
        "content": "<p>missing I think are dsp, superell, sketch, extrude, revolve, ebm, vol?  any others?</p>",
        "id": 131027507,
        "sender_full_name": "Sean",
        "timestamp": 1533626536
    },
    {
        "content": "<p>can just include the sample terrain from the 'terrain' tool for dsp, and wiki examples for sketch, extrude, ebm, and vol (maybe, it's nearly identical to ebm), just leaving superell and revolve and whatever else I missed from memory</p>",
        "id": 131027611,
        "sender_full_name": "Sean",
        "timestamp": 1533626752
    },
    {
        "content": "<blockquote>\n<p>missing I think are dsp, superell, sketch, extrude, revolve, ebm, vol?  any others?</p>\n</blockquote>\n<p>hrt !</p>",
        "id": 131041104,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533644981
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , <a href=\"https://docs.google.com/spreadsheets/d/1XeeI1mpLlPFZtc7i5GeOmjLFE-s8JMsYpwVszIPsrmQ/edit?usp=sharing\" target=\"_blank\" title=\"https://docs.google.com/spreadsheets/d/1XeeI1mpLlPFZtc7i5GeOmjLFE-s8JMsYpwVszIPsrmQ/edit?usp=sharing\">https://docs.google.com/spreadsheets/d/1XeeI1mpLlPFZtc7i5GeOmjLFE-s8JMsYpwVszIPsrmQ/edit?usp=sharing</a> here's a list of primitives that are and are not a part of python brl-cad. IIRC, I had also shared this sheet ~10 days ago.</p>",
        "id": 131041183,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533645034
    },
    {
        "content": "<p><em>Please ignore the comments column in this sheet, it has not been updated</em></p>",
        "id": 131041275,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533645140
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>missing I think are dsp, superell, sketch, extrude, revolve, ebm, vol?  any others?</p>\n</blockquote>\n<p>hrt !</p>\n</blockquote>\n<p>hrt is one of the primitives that I've not included. Few more are present in the sheet! :)</p>",
        "id": 131041330,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533645228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  Please update your daily logs</p>",
        "id": 131090048,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533708090
    },
    {
        "content": "<p>Yes!</p>",
        "id": 131090784,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533709518
    },
    {
        "content": "<p>And submit a patch with the describe function that you wrote... I'll try appending it to script</p>",
        "id": 131097646,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533721288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> <a href=\"https://hastebin.com/xiwohagonu.cpp\" target=\"_blank\" title=\"https://hastebin.com/xiwohagonu.cpp\">https://hastebin.com/xiwohagonu.cpp</a> . The file reading and writing out part works well, I was earlier having troubles saving and loading the filename in the import and export functions. Though all my attempts were before you had fixed it.</p>",
        "id": 131099514,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533723859
    },
    {
        "content": "<p>Also, for the last 2 days, I've been stuck on getting the sketch primitive to work, I'm able to create a script object with the points and vertices but am unable to get the curves created..</p>",
        "id": 131099619,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533724003
    },
    {
        "content": "<p>There's multiple ways in which the curves can be created as defined by the script primitive <a href=\"https://github.com/Killthebug/python-brlcad/blob/cd3ed94705933600f2a94f9e7ccde2e2ddd69497/brlcad/primitives/sketch.py#L408\" target=\"_blank\" title=\"https://github.com/Killthebug/python-brlcad/blob/cd3ed94705933600f2a94f9e7ccde2e2ddd69497/brlcad/primitives/sketch.py#L408\">https://github.com/Killthebug/python-brlcad/blob/cd3ed94705933600f2a94f9e7ccde2e2ddd69497/brlcad/primitives/sketch.py#L408</a> . I</p>\n<p>have figured out what the argument structure if for each of them, but I keep running into this error : <a href=\"https://hastebin.com/unapohiduq.coffeescript\" target=\"_blank\" title=\"https://hastebin.com/unapohiduq.coffeescript\">https://hastebin.com/unapohiduq.coffeescript</a></p>",
        "id": 131099807,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533724256
    },
    {
        "content": "<p>I'll check in the evening and let you know !</p>",
        "id": 131099949,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533724533
    },
    {
        "content": "<p>Sure! Thanks :)</p>",
        "id": 131100003,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533724571
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>What about the undistinguished parameters, are you referring to the arb7? (orange in top row)</p>\n</blockquote>\n<p>arb7 is one of them, looks like an arb6.  all of the arbs could use some rotation, like 20-50 degrees about Z so that we can see at least 2 sides of the arb4.  green ehy(?) on second-from-top row looks like an arb6.  green and red pointy cylinders  -- (what are those?) look like rcc, too pointy.  bot should be something more detailed (maybe teapot from the 'tea' command). and is the last red one in the corner an ars?  something like the wiki example is needed, something more interesting than a wedge-looking shape.</p>\n</blockquote>\n<p>Rotating all the arb* to maximize viewing angle. <br>\nThe green and red pointy cylinders are : rhc &amp; rpc respectively. Inspired from the example at : (<a href=\"https://brlcad.org/gallery/diagrams/primitives\" target=\"_blank\" title=\"https://brlcad.org/gallery/diagrams/primitives\">https://brlcad.org/gallery/diagrams/primitives</a>)</p>",
        "id": 131101402,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533726898
    },
    {
        "content": "<p>Guys, I'm still stuck on the error that I had shared earlier ( <a href=\"https://hastebin.com/unapohiduq.coffeescript\" target=\"_blank\" title=\"https://hastebin.com/unapohiduq.coffeescript\">https://hastebin.com/unapohiduq.coffeescript</a>), could you please have a look and see if you can give any leads..</p>",
        "id": 131134176,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533764379
    },
    {
        "content": "<p><code>genptr_t</code> is \"generic pointer type\", which appears to have been deprecated in 7.16, and replaced with <code>void *</code></p>",
        "id": 131136067,
        "sender_full_name": "Cezar",
        "timestamp": 1533767056
    },
    {
        "content": "<p><a href=\"https://github.com/kanzure/python-brlcad/blob/master/brlcad/primitives/sketch.py#L473\" target=\"_blank\" title=\"https://github.com/kanzure/python-brlcad/blob/master/brlcad/primitives/sketch.py#L473\">https://github.com/kanzure/python-brlcad/blob/master/brlcad/primitives/sketch.py#L473</a></p>",
        "id": 131136099,
        "sender_full_name": "Cezar",
        "timestamp": 1533767149
    },
    {
        "content": "<p><code>c_void_p</code> is what you're looking for, like on that line</p>",
        "id": 131136151,
        "sender_full_name": "Cezar",
        "timestamp": 1533767184
    },
    {
        "content": "<blockquote>\n<p>have figured out what the argument structure if for each of them, but I keep running into this error : <a href=\"https://hastebin.com/unapohiduq.coffeescript\" target=\"_blank\" title=\"https://hastebin.com/unapohiduq.coffeescript\">https://hastebin.com/unapohiduq.coffeescript</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> it looks like the ctypesgen interface is out of sync with the C code.  there are no longer genptr_t types anywhere.  they were all converted to void* ... not sure what that means for you on the python side, but it's something wrong in the python binding</p>",
        "id": 131153436,
        "sender_full_name": "Sean",
        "timestamp": 1533795834
    },
    {
        "content": "<blockquote>\n<p>The green and red pointy cylinders are : rhc &amp; rpc respectively. Inspired from the example at : (<a href=\"https://brlcad.org/gallery/diagrams/primitives\" target=\"_blank\" title=\"https://brlcad.org/gallery/diagrams/primitives\">https://brlcad.org/gallery/diagrams/primitives</a>)</p>\n</blockquote>\n<p>That's not possible, rhc/rpc are the second row, green and fleshtone on the left (and the rhc is too pointy).  I'd believe the gray and green next to it are epa and ehy, but again one of them is way too pointy -- looks like a trc.  and if they are, that leaves a mystery for the red one in the 5th bottom row on the left.</p>",
        "id": 131153693,
        "sender_full_name": "Sean",
        "timestamp": 1533796320
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"106398\">@Cezar</span> !  looks spot on</p>",
        "id": 131153748,
        "sender_full_name": "Sean",
        "timestamp": 1533796394
    },
    {
        "content": "<blockquote>\n<p>Guys, I'm still stuck on the error that I had shared earlier ( <a href=\"https://hastebin.com/unapohiduq.coffeescript\" target=\"_blank\" title=\"https://hastebin.com/unapohiduq.coffeescript\">https://hastebin.com/unapohiduq.coffeescript</a>), could you please have a look and see if you can give any leads..</p>\n</blockquote>\n<p>Cezar stands correct.</p>",
        "id": 131155637,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533799296
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> <a href=\"https://hastebin.com/xiwohagonu.cpp\" target=\"_blank\" title=\"https://hastebin.com/xiwohagonu.cpp\">https://hastebin.com/xiwohagonu.cpp</a> . The file reading and writing out part works well, I was earlier having troubles saving and loading the filename in the import and export functions. Though all my attempts were before you had fixed it.</p>\n</blockquote>\n<p>This should work now. I'll give it a try this evening</p>",
        "id": 131155687,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533799326
    },
    {
        "content": "<blockquote>\n<p><code>c_void_p</code> is what you're looking for, like on that line</p>\n</blockquote>\n<p>This seemed to have solved that error, but I've run into many more after it.</p>",
        "id": 131182529,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533831415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> There are a lot of incomplete functions in the sketch primitive api and these are not pythonic errors, rather it's not been tested in the first place when it was created. There are no tests or examples for the sketch primitive and all the code is without any sort of comments for direction.</p>",
        "id": 131182644,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533831580
    },
    {
        "content": "<p>The issue arises in creating the curves in a sketch. There are a lot of helper functions involved that seem to be acting together. If I fix one, I break the other and the cycle seems to continue.</p>",
        "id": 131182716,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533831629
    },
    {
        "content": "<p>I'm going to devote one more day to else I will re-write the entire binding on my own. The current binding <em>might</em> also be working but I just can't wrap my head around it.</p>",
        "id": 131182750,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533831679
    },
    {
        "content": "<p>I will soon share the primitive scene with the requested changes and we can work on perfecting that. Along with it, I will try and get the describe function for the script primitive working because I had spent a fair amount of time on it as well earlier (before <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> had fixed it).</p>",
        "id": 131182815,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533831757
    },
    {
        "content": "<blockquote>\n<p><code>genptr_t</code> is \"generic pointer type\", which appears to have been deprecated in 7.16, and replaced with <code>void *</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"106398\">@Cezar</span>  Thanks a ton for this. I knew something was deprecated but I didn't have a clue what it was. :)</p>",
        "id": 131182831,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533831798
    },
    {
        "content": "<p>If you can make straight lines, how about just making an example using that, like a tessellated ‘S’ sketch with like 20 line segments?  Then use that with extrude.  Can leave a fixme in the code for curves.</p>",
        "id": 131189239,
        "sender_full_name": "Sean",
        "timestamp": 1533839063
    },
    {
        "content": "<p>Otherwise sounds look or a plan..  just please leave yourself a day to write up a summary report with images to post somewhere, showcase everything you did blogpost style.  :)</p>",
        "id": 131189353,
        "sender_full_name": "Sean",
        "timestamp": 1533839211
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> There are a lot of incomplete functions in the sketch primitive api and these are not pythonic errors, rather it's not been tested in the first place when it was created. There are no tests or examples for the sketch primitive and all the code is without any sort of comments for direction.</p>\n</blockquote>\n<p>I know how it feels. Don't worry we'll fix it. Don't get stuck on this, move on with the reports and the documentation.</p>",
        "id": 131220031,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533883578
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/oLYyYWkbO6zARKV_1-9VMX8p/Screen-Shot-2018-08-10-at-2.54.28-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-08-10-at-2.54.28-PM.png\">Screen-Shot-2018-08-10-at-2.54.28-PM.png</a> <br>\n<span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> The describe function works :)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/oLYyYWkbO6zARKV_1-9VMX8p/Screen-Shot-2018-08-10-at-2.54.28-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-08-10-at-2.54.28-PM.png\"><img src=\"/user_uploads/1549/oLYyYWkbO6zARKV_1-9VMX8p/Screen-Shot-2018-08-10-at-2.54.28-PM.png\"></a></div>",
        "id": 131226806,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533893129
    },
    {
        "content": "<p>BTW, some of the c-code that you're seeing that has been logged was present in the new.py file :P</p>",
        "id": 131227041,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533893480
    },
    {
        "content": "<p>There are a small hack and a minor change that I had to put in place. It doesn't break anything, but it has to be fixed in the export function. I'll share the diff soon and point out in that.</p>",
        "id": 131227109,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1533893571
    },
    {
        "content": "<p>I dont exactly get it.... Will you please share the code, I'll go through it</p>",
        "id": 131230063,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533897949
    },
    {
        "content": "<p>What exactly is the issue that you are facing with the buffer (ep-&gt;extbytes) ?</p>",
        "id": 131230765,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1533899096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> , sending patch.</p>",
        "id": 132007082,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1534099217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> Here's a basic blog post on how to work with python brlcad, do have a look and let me know what you think? :D</p>",
        "id": 132007087,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1534099244
    },
    {
        "content": "<p><a href=\"https://medium.com/@Mr_Jaypee/990e3c286a63\" target=\"_blank\" title=\"https://medium.com/@Mr_Jaypee/990e3c286a63\">https://medium.com/@Mr_Jaypee/990e3c286a63</a></p>",
        "id": 132007187,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1534099475
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/v3-QvwGfMihlGKTmXtiObN19/describe.diff\" target=\"_blank\" title=\"describe.diff\">describe.diff</a></p>",
        "id": 132043293,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1534163438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> ^ Here's the diff file.</p>",
        "id": 132043300,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1534163453
    },
    {
        "content": "<p>Daily logs updated :)</p>",
        "id": 132045488,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1534165675
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://medium.com/@Mr_Jaypee/990e3c286a63\" target=\"_blank\" title=\"https://medium.com/@Mr_Jaypee/990e3c286a63\">https://medium.com/@Mr_Jaypee/990e3c286a63</a></p>\n</blockquote>\n<p>this is looking good <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> !  I like the overview of procedural geometry.  would it make sense to say more about \"Approach 2\"?<br>\n you introduce it but then jump back to all the detail on Approach 1.  reads a little confusing.  I would suggest either explaining the downsides of Approach 2 and why Approach 1 was developed further, giving you the lead into the next section.  also, suggest removing the three 'wdb' references (maybe just call them geometry) since we don't want to have to explain it.  also, don't really need \"brl_\" prefix -- db works great and is easier to understand.  it would be good to end the article with a mention of where there are more docs -- you mention the github repo, so maybe just say see comments in the code or point them to a specific file or something similar.</p>",
        "id": 132065358,
        "sender_full_name": "Sean",
        "timestamp": 1534186754
    },
    {
        "content": "<p>minor point, but it would be good to update all the BRLCAD to BRL-CAD for consistency</p>",
        "id": 132065400,
        "sender_full_name": "Sean",
        "timestamp": 1534186792
    },
    {
        "content": "<p>nice write-up regardless.  did we give up on a straight-edge sketch/extrude/revolve?</p>",
        "id": 132065476,
        "sender_full_name": "Sean",
        "timestamp": 1534186837
    },
    {
        "content": "<p>Done!</p>",
        "id": 132087036,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1534217098
    },
    {
        "content": "<blockquote>\n<p>nice write-up regardless.  did we give up on a straight-edge sketch/extrude/revolve?</p>\n</blockquote>\n<p>Yea, for now :/<br>\nEven the straight edge (line), depends on the curve class, which itself seems to be causing all the trouble</p>",
        "id": 132087050,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1534217128
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://medium.com/@Mr_Jaypee/990e3c286a63\" target=\"_blank\" title=\"https://medium.com/@Mr_Jaypee/990e3c286a63\">https://medium.com/@Mr_Jaypee/990e3c286a63</a></p>\n</blockquote>\n<p>Awesome <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  !</p>",
        "id": 132092468,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1534227705
    },
    {
        "content": "<blockquote>\n<p><a href=\"/user_uploads/1549/v3-QvwGfMihlGKTmXtiObN19/describe.diff\" target=\"_blank\" title=\"describe.diff\">describe.diff</a></p>\n</blockquote>\n<p>Ill look into it by the evening !</p>",
        "id": 132092512,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1534227735
    },
    {
        "content": "<p>Some issues with the buffer that need to be rectified..</p>",
        "id": 132124533,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1534268445
    }
]