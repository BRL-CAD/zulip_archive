[
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"jpsinghgoud@gmail.com\" data-user-id=\"109577\">@Jaipal Singh</span> welcome -- you'll need to look through the previous GSoC projects on our wiki, find the ones related to python, and check out the reference links on the idea page</p>",
        "id": 123184790,
        "sender_full_name": "Sean",
        "timestamp": 1519999645
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"brlcad@mac.com\" data-user-id=\"102902\">@Sean</span> ! Sure, I'll go ahead and do that.</p>",
        "id": 123189256,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1520007321
    },
    {
        "content": "<p>please do ask questions if you have them, the more specific the better</p>",
        "id": 123196823,
        "sender_full_name": "Sean",
        "timestamp": 1520018919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"brlcad@mac.com\" data-user-id=\"102902\">@Sean</span> , from what I have collected, the last work on python-brlcad was done in 2014, by Kanzure (<a href=\"https://github.com/kanzure/python-brlcad\" target=\"_blank\" title=\"https://github.com/kanzure/python-brlcad\">https://github.com/kanzure/python-brlcad</a>)&gt;<br>\n((Please correct me if I'm wrong here))</p>",
        "id": 123224016,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1520073530
    },
    {
        "content": "<p>There's not much documentation available for this on the github page, would it be present in the brl-cad docs somewhere? <br>\nIf not, I could spend a while fidgeting around and figure out what does what.</p>",
        "id": 123224062,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1520073645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"jpsinghgoud@gmail.com\" data-user-id=\"109577\">@Jaipal Singh</span>  Hello, hope you got familiar with the basics of BRL-CAD. As you may have figured out by now, that we have numerous primitives out of which only a portion of which has been implemented in python. (<a href=\"http://brlcad.org/wiki/Python_Geometry\" target=\"_blank\" title=\"http://brlcad.org/wiki/Python_Geometry\">http://brlcad.org/wiki/Python_Geometry</a>) <br>\n You may find useful to have a look at code for the converted primitives- &gt; <a href=\"https://github.com/kanzure/python-brlcad/tree/master/brlcad/primitives\" target=\"_blank\" title=\"https://github.com/kanzure/python-brlcad/tree/master/brlcad/primitives\">https://github.com/kanzure/python-brlcad/tree/master/brlcad/primitives</a> . Here you can find the implementations for the converted primitives (arb8.py, ebm.py etc.) <br>\nAfter having a look at them you may be able to figure out the set of functions required :<br>\n- update_params()<br>\n- copy()<br>\n-  has_same_data()<br>\n-  from_wdb () etc.<br>\nHaving a look at these primitives will give you an insight into wrapping the remaining primitives i.e. ARS, BINUNIF, BOT, BREP, CLINE, DSP etc. <br>\nI hope this  helps.<br>\nDo ask questions if you get stuck somewhere. Cheers !</p>",
        "id": 123269071,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1520184969
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"shubhamrathore1947@gmail.com\" data-user-id=\"103555\">@Shubham Rathore</span>  Thanks a ton for the insights! I'll surely go ahead and work on these. Shall keep you posted! Cheers!</p>",
        "id": 123269717,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1520186456
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-email=\"shubhamrathore1947@gmail.com\" data-user-id=\"103555\">@Shubham Rathore</span> , I'm done with the mged tutorials chapter 1 and 2 (because I thought those were the ones that were most relevant for this project). Would you suggest going through any other particular topics?</p>",
        "id": 123308150,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1520268023
    },
    {
        "content": "<p>I've also gone through the code for some of the primitives in python (ars, base, etc) and I won't say I understood a lot. Could you point me to where I might have a look at their C-code?</p>",
        "id": 123308237,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1520268173
    },
    {
        "content": "<p>Also, how are the python primitives brought to life? I mean, where can one see them working or test them out in development?</p>",
        "id": 123308252,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1520268222
    },
    {
        "content": "<p>I'm going to have a go at explaining the different functions that you mentioned.<br>\nupdate_params() : essentially populates the points for a given primitive. Every primitive takes 8, 3 dimensional points that are then used to plot the primitive<br>\ncopy() : maybe attributes the points matrix to a given primitive name<br>\nhas_same_data() : probably as the name suggests, compares the point matrices for two given primitives?</p>",
        "id": 123308621,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1520268791
    },
    {
        "content": "<blockquote>\n<p>Hey <span class=\"user-mention\" data-user-email=\"shubhamrathore1947@gmail.com\" data-user-id=\"103555\">@Shubham Rathore</span> , I'm done with the mged tutorials chapter 1 and 2 (because I thought those were the ones that were most relevant for this project). Would you suggest going through any other particular topics?</p>\n</blockquote>",
        "id": 123335319,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1520313533
    },
    {
        "content": "<p>The basic motive is to get familiar with the working of BRL-CAD. Tutorials are indeed the best way to get familiar :)</p>",
        "id": 123335329,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1520313592
    },
    {
        "content": "<blockquote>\n<p>I've also gone through the code for some of the primitives in python (ars, base, etc) and I won't say I understood a lot. Could you point me to where I might have a look at their C-code?</p>\n</blockquote>\n<p>BRL-CAD code resides on sourceforge. Please do have a look !</p>",
        "id": 123335385,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1520313647
    },
    {
        "content": "<p>Sure! Thanks!</p>",
        "id": 123339098,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1520321706
    },
    {
        "content": "<blockquote>\n<p>Also, how are the python primitives brought to life? I mean, where can one see them working or test them out in development?</p>\n</blockquote>\n<p>Refer this: <a href=\"https://github.com/kanzure/python-brlcad/blob/master/README.md\" target=\"_blank\" title=\"https://github.com/kanzure/python-brlcad/blob/master/README.md\">https://github.com/kanzure/python-brlcad/blob/master/README.md</a></p>",
        "id": 123356159,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1520352700
    },
    {
        "content": "<blockquote>\n<p>Hey <span class=\"user-mention\" data-user-email=\"shubhamrathore1947@gmail.com\" data-user-id=\"103555\">@Shubham Rathore</span> , I'm done with the mged tutorials chapter 1 and 2 (because I thought those were the ones that were most relevant for this project). Would you suggest going through any other particular topics?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-email=\"jpsinghgoud@gmail.com\" data-user-id=\"109577\">@Jaipal Singh</span> that's good though for something like the python project, it might actually help for you to go through even more tutorials, maybe all of them since the heart of wrapping geometry in python would be the ability to do all 16 tutorials with python eventually</p>",
        "id": 123499043,
        "sender_full_name": "Sean",
        "timestamp": 1520615796
    },
    {
        "content": "<p>also, take a look at the appendix at the end of the tutorials for a listing of many primitives.  in code, they are all in src/librt/primitives</p>",
        "id": 123499062,
        "sender_full_name": "Sean",
        "timestamp": 1520615837
    },
    {
        "content": "<p>Greetings,</p>\n<p>This is Deepak Sharma, final year master's student from Canada. I would like to work on OGV for this GSoC. As OGV has been reached almost at  final stage of it's release I would also like to add my shots in it so that we can release it by the end of this GSoC. <br>\nHappy to be the part of the BRL-CAD family and looking forward to contribute to the organization with the guidance of esteemed mentors and other great minds already working.</p>",
        "id": 123523511,
        "sender_full_name": "ih8sum3r",
        "timestamp": 1520658553
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Sure! I'll go ahead and complete all the tutorials in a couple of days. Also, I've been reading up on the source for the primitives in src/librt/primitives and drawing a rough comparison between the c-code and the python-wrappings for individual primitives. I'm trying to figure out what sort of functionality is given to different primitives. From what I've collected all of them seem to have a basic definition of their parameters and certain constant functions (__init__, copy, has_same_data, update_params) in the python code along with some other wrapping having additional functions not present in the others.</p>",
        "id": 123523945,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1520659657
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span>  for your feedback on the doc, I'll go through them and revert back to yo if I have some doubts! :)</p>",
        "id": 123525382,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1520663357
    },
    {
        "content": "<p>Hey DK,<br>\nHow are you? It's your second GSoC participation, is it?<br>\nAnyway, welcome back dude! Nice to see you back here again. Please take a look at github issues and the project. Try to do as many low hanging PRs as possible and please keep me involved while drafting the proposal. We want to cater to tougher and important things this time so we gotta make sure that only most important things are done.</p>",
        "id": 123531109,
        "sender_full_name": "Inder Singh",
        "timestamp": 1520678484
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"103652\">@pooh (inder)</span>  <br>\nHow are you? Hope everything is going well.<br>\nYes, it's my second GSoC. I have gone through project idea page and it seems this time there is a lot of work to do. <br>\nI have updated it to meteor's latest version and submitted PR for the same. Please have a look at it (<a href=\"https://github.com/BRL-CAD/OGV-meteor/pull/76\" target=\"_blank\" title=\"https://github.com/BRL-CAD/OGV-meteor/pull/76\">https://github.com/BRL-CAD/OGV-meteor/pull/76</a>). <br>\nMoreover, I have found many problems in development branch version. I have something to ask and something to share. <br>\nWhat says let's have a group talk about this stuff. </p>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  <span class=\"user-mention\" data-user-id=\"103652\">@pooh (inder)</span> let's set tables and discuss more thing on this. I too want to share some plans/ideas of mine regarding OGV.</p>",
        "id": 123556590,
        "sender_full_name": "ih8sum3r",
        "timestamp": 1520740896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span> keep a particular eye out for the \"wdb\" interface, which is the API for creating geometry (see include/wdb.h and src/libwdb)</p>",
        "id": 123588615,
        "sender_full_name": "Sean",
        "timestamp": 1520818470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110957\">@Tejas Ajay Zodage</span> thanks for the intro -- you'll want to also introduce yourself on the freecad forums or IRC channel (neither of which is here).  also, big bonus points if you can find a way to make some part of your project general or reusable by other projects as well as for freecad</p>",
        "id": 123731492,
        "sender_full_name": "Sean",
        "timestamp": 1521079441
    },
    {
        "content": "<p>Welcome <span class=\"user-mention\" data-user-id=\"111393\">@Fatema</span> , this channel is for asking questions, so no need to ask for asking <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span> <br>\nsimply ask your stuff and wait for response<br>\nand take care to use appropriate stream and topic for your questions, like this one</p>",
        "id": 123872145,
        "sender_full_name": "Armin (LordOfBikes)",
        "timestamp": 1521364945
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>! I've been looking going through libwdb and will share a couple of doubts that I have soon. Also, sorry for being rather inactive in the past week, I was caught up with my mid-term exams at university.</p>",
        "id": 123877567,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521378359
    },
    {
        "content": "<p>Ok then I was enquiring about task \"Material and Shader Objects\" if it is taken yet.<br>\nAs I am familiar with C and have previously worked with Shaders and OpenGL.<br>\nIf I could have some pointers to tackle in the task to be more familiar. xD thank you</p>",
        "id": 123890523,
        "sender_full_name": "Fatema",
        "timestamp": 1521409576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111393\">@Fatema</span> <br>\nEvery idea is still available ;)<br>\nTo become familiar with this topic you should download the sources from our subversion repository (see <a href=\"https://brlcad.org/wiki/SVN\" target=\"_blank\" title=\"https://brlcad.org/wiki/SVN\">https://brlcad.org/wiki/SVN</a>, you want the brlcad module there), compile the programs (see <a href=\"https://brlcad.org/wiki/Compiling\" target=\"_blank\" title=\"https://brlcad.org/wiki/Compiling\">https://brlcad.org/wiki/Compiling</a>, which OS do you work with?), and go through our tutorial series (<a href=\"https://brlcad.org/w/images/c/cf/Introduction_to_MGED.pdf\" target=\"_blank\" title=\"https://brlcad.org/w/images/c/cf/Introduction_to_MGED.pdf\">https://brlcad.org/w/images/c/cf/Introduction_to_MGED.pdf</a>) to learn how materials and shaders are currently handled.<br>\nFeel free to ask questions here if you get stuck, sourceforge (where our source code repository is hosted) and the compilation process are currently a little bit bumpy.</p>",
        "id": 123922786,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1521476064
    },
    {
        "content": "<p>Thank you for responding, I followed the process but stumbled in compilation. I had an error linking some libraries.<br>\nLinking C executable ../../bin/g-nff<br>\n../../lib/librt.so.20.0.1: undefined reference to `_tthread_timespec_get'<br>\ncollect2: error: ld returned 1 exit status<br>\nsrc/conv/CMakeFiles/g-nff.dir/build.make:110: recipe for target 'bin/g-nff' failed<br>\nmake[2]: <strong><em> [bin/g-nff] Error 1<br>\nCMakeFiles/Makefile2:21550: recipe for target 'src/conv/CMakeFiles/g-nff.dir/all' failed<br>\nmake[1]: </em></strong> [src/conv/CMakeFiles/g-nff.dir/all] Error 2<br>\nMakefile:160: recipe for target 'all' failed<br>\nmake: *** [all] Error 2</p>",
        "id": 123934899,
        "sender_full_name": "Fatema",
        "timestamp": 1521494814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111393\">@Fatema</span> you're also encouraged to check out openscad -- i don't think they have enough interest from gsoc candidates.  your brl-cad quild error is from a recent change -- try Release build type instead of the default.</p>",
        "id": 123949241,
        "sender_full_name": "Sean",
        "timestamp": 1521524802
    },
    {
        "content": "<p>[DOUBT : Python BRLCAD] <br>\nHey folks, I'm working on setting up python brlcad (<a href=\"https://github.com/kanzure/python-brlcad\" target=\"_blank\" title=\"https://github.com/kanzure/python-brlcad\">https://github.com/kanzure/python-brlcad</a>). I'm trying to follow the step wise procedure to set it up. </p>\n<p>When I run the setup.py, I get the error : \"SetupException: Couldn't find a matching brlcad installation ! \"</p>\n<p>I have brlcad up and running on my system but it seems like python is unable to pick it up. I'm on OSX(10.12.6). Any suggestions on how to overcome this?</p>",
        "id": 124022238,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521654104
    },
    {
        "content": "<p>Dump from the last installation failure : <a href=\"https://pastebin.com/GaJgRRUL\" target=\"_blank\" title=\"https://pastebin.com/GaJgRRUL\">https://pastebin.com/GaJgRRUL</a></p>",
        "id": 124022353,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521654250
    },
    {
        "content": "<p>I'll try building it from the source and see if that can solve the problem</p>",
        "id": 124022757,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521654882
    },
    {
        "content": "<p>Also, it seems like python brlcad is designed to run only with python2.7. Do you think we should extend support for 3.x versions as well?</p>",
        "id": 124023159,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521655466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> From what I understand about libwdb, it helps in writing to the database by acting as an interface and librt would help in reading from the same.</p>",
        "id": 124023763,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521656329
    },
    {
        "content": "<blockquote>\n<p>Also, it seems like python brlcad is designed to run only with python2.7. Do you think we should extend support for 3.x versions as well?</p>\n</blockquote>\n<p>That seems like a bit of a silly question, don't you think?</p>",
        "id": 124045591,
        "sender_full_name": "Sean",
        "timestamp": 1521694424
    },
    {
        "content": "<p>I'd agree it's a silly one, was just wondering if this were a priority. I figure it would be</p>",
        "id": 124048389,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521700800
    },
    {
        "content": "<p>I found a few primitives like \"cone\" <a href=\"https://github.com/kanzure/python-brlcad/blob/c1efe9e0823ebe30e3a2a01ac021b2c080c8ebf2/brlcad/wdb.py#L179\" target=\"_blank\" title=\"https://github.com/kanzure/python-brlcad/blob/c1efe9e0823ebe30e3a2a01ac021b2c080c8ebf2/brlcad/wdb.py#L179\">https://github.com/kanzure/python-brlcad/blob/c1efe9e0823ebe30e3a2a01ac021b2c080c8ebf2/brlcad/wdb.py#L179</a> ), that were being created by wdb but they didn't have a corresponding wrapper in the primitives folder. How does that work?</p>",
        "id": 124048491,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521700971
    },
    {
        "content": "<p>Are we somehow trying to use solids like RCC to create cones (certain parameters can result in a cone)? If so, what is the use of other primitives like TGC? Is it common (or even allow) to use one solid to create a different shape?</p>",
        "id": 124048593,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521701244
    },
    {
        "content": "<blockquote>\n<p>[DOUBT : Python BRLCAD] <br>\nHey folks, I'm working on setting up python brlcad (<a href=\"https://github.com/kanzure/python-brlcad\" target=\"_blank\" title=\"https://github.com/kanzure/python-brlcad\">https://github.com/kanzure/python-brlcad</a>). I'm trying to follow the step wise procedure to set it up. </p>\n<p>When I run the setup.py, I get the error : \"SetupException: Couldn't find a matching brlcad installation ! \"</p>\n<p>I have brlcad up and running on my system but it seems like python is unable to pick it up. I'm on OSX(10.12.6). Any suggestions on how to overcome this?</p>\n</blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  ,  we dont have support for OSX currently. Perhaps you could work on it !  Your first priority should be to wrap the remaining primitives, then work on the tests. First make sure that things work on linux itself (virtual env may be a good option in case you dont own a linux machine). Extending support for other OSes doesnt sound a big task and can be done with quite ease. (python 3 is obviously a priority :P )</p>",
        "id": 124054102,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1521712863
    },
    {
        "content": "<p>VMBox sounds like a good idea to test and break things. <br>\n<span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> How do I decide what primitives are remaining to be wrapped? Would I be following the list given here : <a href=\"https://brlcad.org/wiki/BRL-CAD_Primitives\" target=\"_blank\" title=\"https://brlcad.org/wiki/BRL-CAD_Primitives\">https://brlcad.org/wiki/BRL-CAD_Primitives</a> ?</p>",
        "id": 124056741,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521718149
    },
    {
        "content": "<blockquote>\n<p>I found a few primitives like \"cone\" <a href=\"https://github.com/kanzure/python-brlcad/blob/c1efe9e0823ebe30e3a2a01ac021b2c080c8ebf2/brlcad/wdb.py#L179\" target=\"_blank\" title=\"https://github.com/kanzure/python-brlcad/blob/c1efe9e0823ebe30e3a2a01ac021b2c080c8ebf2/brlcad/wdb.py#L179\">https://github.com/kanzure/python-brlcad/blob/c1efe9e0823ebe30e3a2a01ac021b2c080c8ebf2/brlcad/wdb.py#L179</a> ), that were being created by wdb but they didn't have a corresponding wrapper in the primitives folder. How does that work?</p>\n</blockquote>\n<p>I would assume it doesn't.  Remember that the last work on the python wrapper was several years ago, so it's also likely that some calls will have changed or been renamed or added, etc.</p>",
        "id": 124061893,
        "sender_full_name": "Sean",
        "timestamp": 1521727400
    },
    {
        "content": "<blockquote>\n<p>Are we somehow trying to use solids like RCC to create cones (certain parameters can result in a cone)? If so, what is the use of other primitives like TGC? Is it common (or even allow) to use one solid to create a different shape?</p>\n</blockquote>\n<p>some primitives are simply special cases of another.  sphere is a special case ellipsoid where the three orthogonal vectors are equal length.  similarly, rcc is a special case tgc.</p>",
        "id": 124061976,
        "sender_full_name": "Sean",
        "timestamp": 1521727530
    },
    {
        "content": "<blockquote>\n<p>VMBox sounds like a good idea to test and break things. <br>\n<span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> How do I decide what primitives are remaining to be wrapped? Would I be following the list given here : <a href=\"https://brlcad.org/wiki/BRL-CAD_Primitives\" target=\"_blank\" title=\"https://brlcad.org/wiki/BRL-CAD_Primitives\">https://brlcad.org/wiki/BRL-CAD_Primitives</a> ?</p>\n</blockquote>\n<p>I would suggest looking at the source code, not just whatever happened to be documented on the wiki...</p>",
        "id": 124062392,
        "sender_full_name": "Sean",
        "timestamp": 1521728192
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>VMBox sounds like a good idea to test and break things. <br>\n<span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> How do I decide what primitives are remaining to be wrapped? Would I be following the list given here : <a href=\"https://brlcad.org/wiki/BRL-CAD_Primitives\" target=\"_blank\" title=\"https://brlcad.org/wiki/BRL-CAD_Primitives\">https://brlcad.org/wiki/BRL-CAD_Primitives</a> ?</p>\n</blockquote>\n<p>I would suggest looking at the source code, not just whatever happened to be documented on the wiki...</p>\n</blockquote>\n<p>So, would this mean, all the primitives defined in librt only?</p>",
        "id": 124093800,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521783564
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p>VMBox sounds like a good idea to test and break things. <br>\n<span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> How do I decide what primitives are remaining to be wrapped? Would I be following the list given here : <a href=\"https://brlcad.org/wiki/BRL-CAD_Primitives\" target=\"_blank\" title=\"https://brlcad.org/wiki/BRL-CAD_Primitives\">https://brlcad.org/wiki/BRL-CAD_Primitives</a> ?</p>\n</blockquote>\n<p>I would suggest looking at the source code, not just whatever happened to be documented on the wiki...</p>\n</blockquote>\n<p>So, would this mean, all the primitives defined in librt only?</p>\n</blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"109577\">@Jaipal Singh</span>  ! librt comprises of all the primitives that we have. So its a yes !</p>",
        "id": 124094251,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1521784489
    },
    {
        "content": "<p>Great! Thanks <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span></p>",
        "id": 124094477,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521784942
    },
    {
        "content": "<p>if i want to submit a draft, should i do so in the gsoc interface, or on the wiki?</p>",
        "id": 124103210,
        "sender_full_name": "Cezar",
        "timestamp": 1521803153
    },
    {
        "content": "<p>also, there will be some things that i'll need to look into more after submitting the proposal (e.g., how the code for the ray tracer works, how libbu is used in other places), and i was wondering if this is okay. and if so, should i put this in the \"community bonding\" section, or in the first phases of the coding section?</p>",
        "id": 124105135,
        "sender_full_name": "Cezar",
        "timestamp": 1521807022
    },
    {
        "content": "<p>oh, and i'm also curious what happens during community bonding</p>",
        "id": 124105157,
        "sender_full_name": "Cezar",
        "timestamp": 1521807092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"106398\">@Cezar</span> : Hey! I'm not a mentor for BRLCAD but as someone who's done GSoC before, I think I can answer your questions. </p>\n<p>Your proposal is not very hard and fast. Deadlines and objectives can vary based on the progress of your project.</p>",
        "id": 124105632,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521807966
    },
    {
        "content": "<p>The community bonding period on the other hand gives you an opportunity to get well versed with the code-base you'll be working with and gather all the pre-requisite information required to meet your deadlines in the next 3 months. This is the phase where you can work with your mentor to finalize the fine grained nuances of your project and more or less finalize everything in your proposal.</p>",
        "id": 124105655,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1521808046
    },
    {
        "content": "<p>Hey! I'm Peter and I'd like to apply as a student for GSoC.  I know C and some C++ (and lots of Lua and some Python (and lots of etc)) and I think I could do one of the easy projects. The Lua scripting support is very tempting, so is the general tree walker because I like refactoring things. The STEP exporter and the exec option also seem interesting.<br>\nWhat I'd like to know is which one is most urgent and what are the difficulties? (also, the STEP reference links aren't working, they need authentication)</p>",
        "id": 124129846,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1521845288
    },
    {
        "content": "<blockquote>\n<p>if i want to submit a draft, should i do so in the gsoc interface, or on the wiki?</p>\n</blockquote>\n<p>gsoc interface will be fine for feedback, that way you at least have your account set up and a rough draft submitted</p>",
        "id": 124135071,
        "sender_full_name": "Sean",
        "timestamp": 1521856457
    },
    {
        "content": "<blockquote>\n<p>also, there will be some things that i'll need to look into more after submitting the proposal (e.g., how the code for the ray tracer works, how libbu is used in other places), and i was wondering if this is okay. and if so, should i put this in the \"community bonding\" section, or in the first phases of the coding section?</p>\n</blockquote>\n<p>it's okay not knowing everything there is to know, but you should keep doing research, work on a patch or three in related code, reading code, discussing your project all the way to the submission deadline (and after if you like).  community bodying period is for doing any additional research needed, so that really shouldn't go into the coding section.  community bonding is also typically where gsocers get familiarized with code, get fully set up to code, and continue working on code related to their project (maybe even directly supporting their project).</p>",
        "id": 124136050,
        "sender_full_name": "Sean",
        "timestamp": 1521858739
    },
    {
        "content": "<blockquote>\n<p>Hey! I'm Peter and I'd like to apply as a student for GSoC.  I know C and some C++ (and lots of Lua and some Python (and lots of etc)) and I think I could do one of the easy projects. The Lua scripting support is very tempting, so is the general tree walker because I like refactoring things. The STEP exporter and the exec option also seem interesting.<br>\nWhat I'd like to know is which one is most urgent and what are the difficulties? (also, the STEP reference links aren't working, they need authentication)</p>\n</blockquote>\n<p>welcome <span class=\"user-mention\" data-user-id=\"111633\">@Peter Pronai</span> and thanks for the intro!  of the topics you mentioned, step export would be the most beneficial but by far the hardest, too, so don't consider it unless you have significant geometry experience.  between lua and exec -- exec is far more pressing as it would result in an immediate end-user feature.</p>",
        "id": 124136836,
        "sender_full_name": "Sean",
        "timestamp": 1521860722
    },
    {
        "content": "<p>i've uploaded a link to my draft on the gsoc website. i expect there to be things you want me to add or modify, but i submitted it to see where exactly i should make the changes.</p>",
        "id": 124150235,
        "sender_full_name": "Cezar",
        "timestamp": 1521895012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> thanks for the warm welcome! I only have experience with Blender, which is (nearly) entirely polygonal, so I don't think I have the \"significant geometry experience\" that would be required for STEP, so that leaves <code>--exec</code>. I'll take a closer look at it today.</p>",
        "id": 124156354,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1521910507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111633\">@Peter Pronai</span> the search command is HEAVILY based on the unix \"find\" command, so you should read up on that as well (particularly find's -exec option).  lots of tutorials all around the web</p>",
        "id": 124164731,
        "sender_full_name": "Sean",
        "timestamp": 1521928940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I checked <code>man find</code> to brush up. I admit I didn't know about the alternative form. Would BRL-CAD need any of those?</p>",
        "id": 124170701,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1521941259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111633\">@Peter Pronai</span> what do you mean by \"alternative form\"?</p>",
        "id": 124176668,
        "sender_full_name": "Sean",
        "timestamp": 1521954072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> there is apparently a <code>find -exec command {} +</code> form, at least in my version of GNU coreutils. I am honestly not sure what its use case is.</p>",
        "id": 124192785,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1521994254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111633\">@Peter Pronai</span> yes there is a find -exec command {}  + form, so what is the \"other\" form? like I said, you'll need to become experienced in how the find command works including the -exec flag (do some tutorials).. if you don't know it's use case, then you don't know what to do for your project</p>",
        "id": 124195599,
        "sender_full_name": "Sean",
        "timestamp": 1522001239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  The one I've used and seen everywhere is <code>find -exec command {} ;</code>,  the same that is given as an example in the project description. I have never needed the <code>+</code> form before and I have never seen anyone use it.<br>\nIt is not even present in every version of find, such as UNIX v8: <a href=\"http://man.cat-v.org/unix_8th/1/find\" target=\"_blank\" title=\"http://man.cat-v.org/unix_8th/1/find\">http://man.cat-v.org/unix_8th/1/find</a></p>\n<p>So, my question is, should a GNU extension even be considered?</p>",
        "id": 124195745,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522001579
    },
    {
        "content": "<p>ahh, didn't realize you were referring specifically to the substitution form</p>",
        "id": 124195881,
        "sender_full_name": "Sean",
        "timestamp": 1522001937
    },
    {
        "content": "<p>do you understand the difference of ; vs + ?</p>",
        "id": 124195884,
        "sender_full_name": "Sean",
        "timestamp": 1522001945
    },
    {
        "content": "<p>I would think it's trivial to support it, but don't get distracted.  the focus should very much on getting -exec to work properly.  you should definitely understand the difference between the two and where that comes in handy, understand what xargs does, etc.</p>",
        "id": 124195979,
        "sender_full_name": "Sean",
        "timestamp": 1522002139
    },
    {
        "content": "<p>It looks like it adds all(?) files as arguments to <code>command</code>. I guess it's useful for when you want to run a single command over them? To be honest I would just use the output of find, using that weird option is IMHO too cryptic.</p>",
        "id": 124196139,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522002580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> (but there is probably some weird edge cases with weird file names that would be hard to handle from the shell)<br>\nI think I understand <code>xargs</code> although I haven't had to use it so far. It builds argument lists and sends them to commands and there are some extra modes for handling different input formats and limiting arguments.</p>",
        "id": 124196236,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522002733
    },
    {
        "content": "<p>figuring out edge cases is a problem with {} substitution regardless of ; or + .. and that's an essential issue you would have to make sure works as part of any development plan and unit testing (which should be part of your proposal).</p>",
        "id": 124212683,
        "sender_full_name": "Sean",
        "timestamp": 1522042626
    },
    {
        "content": "<p>you should definitely go through tutorials on xargs as it's relevant, related.  kinda important and a powerful fundamental command.</p>",
        "id": 124212688,
        "sender_full_name": "Sean",
        "timestamp": 1522042662
    },
    {
        "content": "<blockquote>\n<p>It looks like it adds all(?) files as arguments to <code>command</code>. I guess it's useful for when you want to run a single command over them? To be honest I would just use the output of find, using that weird option is IMHO too cryptic.</p>\n</blockquote>\n<p>it's certainly not a priority, but you should fully understand what it does as it is part of the find interface (per posix)  it was adopted quite some time ago: <a href=\"https://collaboration.opengroup.org/external/pasc.org/interpretations/unofficial/db/p1003.2/pasc-1003.2-210.html\" target=\"_blank\" title=\"https://collaboration.opengroup.org/external/pasc.org/interpretations/unofficial/db/p1003.2/pasc-1003.2-210.html\">https://collaboration.opengroup.org/external/pasc.org/interpretations/unofficial/db/p1003.2/pasc-1003.2-210.html</a></p>",
        "id": 124212845,
        "sender_full_name": "Sean",
        "timestamp": 1522043005
    },
    {
        "content": "<p>i added a weekly schedule to my proposal :D</p>",
        "id": 124217597,
        "sender_full_name": "Cezar",
        "timestamp": 1522053524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span>  Submitted the draft! Please let me know what I could do to improve it :)</p>",
        "id": 124218259,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1522054826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> as I understand it, the crux of the problem is that Tcl commands (at least in this version of the language) only take strings as arguments, so there is no function passing or lambda expressions (I'm not even sure it has closures), so <code>search</code> has to call-by-name, but all the command names live currently live in MGED alongside the global Tcl interpreter. Commands are not simply C functions, they are also assigned a <code>ClientData</code>, which gets passed to them.<br>\nAs for the Tcl side:<br>\nCurly braces probably can't be used unquoted because they are syntactically significant in Tcl? (although a different character (pair) could also be used instead, this is probably the smallest issue)<br>\nI think <code>eval</code> could be used for running the <code>command</code> but since paths can have funny characters in them, they must be safely quoted. I'll have to look more at Tcl but I've solved similar problems in Lua so I think I can find a bulletproof way. If all else fails, there is base64: Instead of constructing the eval string by placing paths in it, encode the path in base64 and place a <code>[base64dec &lt;path-in-base64&gt;]</code> inside.<br>\nThe bigger problem is not on the Tcl side but on the C side, right?</p>",
        "id": 124232742,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522079979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> The name resolution part is trickier and I don't entirely understand how it would ideally look......<br>\nI'll write my thought process here:<br>\nSo, <code>cmd_search</code> is in <code>mged/cmd.c</code>, it has no associated <code>libged</code> function in the command table, instead it uses <code>ged_search</code> internally.</p>",
        "id": 124233142,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522080455
    },
    {
        "content": "<p>And GED in turn wraps the raytracer search.</p>",
        "id": 124233304,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522080641
    },
    {
        "content": "<p>So. db_seach is what ultimately does the searching, right? libged seems to just do a lot of very complicated and deeply nested processing on the search results.<br>\nNote: there are a lot of unnamed constants, eg.: <code>search_type != 1</code>, I think it would be better to give the search types an enum.</p>",
        "id": 124234114,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522081835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111633\">@Peter Pronai</span> this is an in-depth topic but search -exec should be completely independent from Tcl -- that's what makes this a project.  you need to be able to invoke commands and pass arguments along to other commands, which means there needs to be a dictionary or registration of commands somewhere and the ged state will need to get passed from ged_search() to the other ged_*() commands some how</p>",
        "id": 124236104,
        "sender_full_name": "Sean",
        "timestamp": 1522085114
    },
    {
        "content": "<p>doing that, names/paths are merely lookup keys which could refer to object already looked up and stored in the ged struct</p>",
        "id": 124236115,
        "sender_full_name": "Sean",
        "timestamp": 1522085152
    },
    {
        "content": "<p>but that's for later.  starting with strings is fine.  the trick is how ged search can call another ged command without it explicitly knowing about them all directly (hence a registry of some sort)</p>",
        "id": 124236173,
        "sender_full_name": "Sean",
        "timestamp": 1522085217
    },
    {
        "content": "<blockquote>\n<p>So. db_seach is what ultimately does the searching, right? libged seems to just do a lot of very complicated and deeply nested processing on the search results.<br>\nNote: there are a lot of unnamed constants, eg.: <code>search_type != 1</code>, I think it would be better to give the search types an enum.</p>\n</blockquote>\n<p>Yes, librt does the low-level lookups, libged does the formatting/printing of the output (and should manage ged state)</p>",
        "id": 124236546,
        "sender_full_name": "Sean",
        "timestamp": 1522085821
    },
    {
        "content": "<p>the search constants could be converted, but I'd save that for later -- the code was directly forked from BSD 'find' command code and adapted for our use</p>",
        "id": 124236556,
        "sender_full_name": "Sean",
        "timestamp": 1522085852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> </p>\n<blockquote>\n<p>there needs to be a dictionary or registration of commands somewhere</p>\n</blockquote>\n<p>Isn't the Tcl interpreter enough? It has full access to its namespace (which, afaik, is dynamic, so there is no guarantee that eg. <code>analyze</code> will still be called <code>analyze</code> when we run <code>search</code>), so it should be able to inspect them and see if they are from C or if they are defined in Tcl.</p>",
        "id": 124238312,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522088674
    },
    {
        "content": "<p>that's certainly possible <span class=\"user-mention\" data-user-id=\"111633\">@Peter Pronai</span> but it wasn't what I originally had in mind ... let's talk it through.</p>",
        "id": 124238774,
        "sender_full_name": "Sean",
        "timestamp": 1522089491
    },
    {
        "content": "<p>from an API perspective there will eventually be something like ged_exec() that is called by some shell environment</p>",
        "id": 124238784,
        "sender_full_name": "Sean",
        "timestamp": 1522089554
    },
    {
        "content": "<p>right now, that environment is a Tcl one, so it's easy enough to pass the Tcl_Interpreter down through (i..e., keep it stashed in the ged struct) and then ged_search() could use it to invoke subcommands</p>",
        "id": 124238833,
        "sender_full_name": "Sean",
        "timestamp": 1522089606
    },
    {
        "content": "<p>however, it could just as well use ged_exec() to invoke subcommands too, and be fully agnostic of Tcl</p>",
        "id": 124238848,
        "sender_full_name": "Sean",
        "timestamp": 1522089664
    },
    {
        "content": "<p>so the implication, I suppose is whether / how we can get at built-in commands that possibly wouldn't be registered with libged (e.g., pwd), and being able to invoke them via search -exec</p>",
        "id": 124238946,
        "sender_full_name": "Sean",
        "timestamp": 1522089813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  What if we pass function pointers in <code>db_search</code>? The prototype would include the database and the current path as parameters, return type would be <code>bool</code> and it should probably have a <code>void *userdata</code> parameter too.<br>\nThat way the calling environment can decide what to do, eg. MGED could send a pointer to a function that wraps a Tcl procedure. It can also do a simple parse of the <code>search</code> parameters and translate <code>-exec</code>s into function pointers. If it's a Tcl function, the interpreter can be passed along in the userdata. This is a bit ugly but avoids <code>librt</code> having to know about Tcl.</p>",
        "id": 124239209,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522090262
    },
    {
        "content": "<p>possibly, we definitely don't want librt to know about Tcl directly</p>",
        "id": 124239283,
        "sender_full_name": "Sean",
        "timestamp": 1522090399
    },
    {
        "content": "<p>I don't recall exactly, but I think the exec logic from 'find' would also be down in db_search() since that's the original code</p>",
        "id": 124239291,
        "sender_full_name": "Sean",
        "timestamp": 1522090435
    },
    {
        "content": "<p>we probably should remain as aligned as possible with 'find' in case we ever need to re-do our implementation</p>",
        "id": 124239332,
        "sender_full_name": "Sean",
        "timestamp": 1522090462
    },
    {
        "content": "<p>so then the question is whether libged is doing the exec parsing/invoking or whether librt is doing it</p>",
        "id": 124239356,
        "sender_full_name": "Sean",
        "timestamp": 1522090522
    },
    {
        "content": "<p>I think libged should do it, librt should get an \"AST\" as a parameter. (not exactly an AST because it wouldn't necessarily just contain strings)</p>",
        "id": 124239509,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522090702
    },
    {
        "content": "<p>conceptually, libged is supposed to be the \"command strings to result strings\" layer and librt is supposed to be the \"object name to object layer\"</p>",
        "id": 124239548,
        "sender_full_name": "Sean",
        "timestamp": 1522090798
    },
    {
        "content": "<p>the difficulty is that most of the processing that search/find does is in object-space (i.e., librt) while most of the work done by -exec is in string-space (i.e., libged)</p>",
        "id": 124239613,
        "sender_full_name": "Sean",
        "timestamp": 1522090850
    },
    {
        "content": "<p>the command-line parsing of find/search is quite intricate, so separating them is not exactly easy or desirable</p>",
        "id": 124239624,
        "sender_full_name": "Sean",
        "timestamp": 1522090883
    },
    {
        "content": "<p>Is parsing dependent on any context? Couldn't it be cut out into an external routine?</p>",
        "id": 124239746,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522091119
    },
    {
        "content": "<p>find's syntax is stateful based on previous arguments and expressions</p>",
        "id": 124239790,
        "sender_full_name": "Sean",
        "timestamp": 1522091169
    },
    {
        "content": "<p>But AFAIK not on anything external, so it won't treat something differently if eg. there is a file with the same name.</p>",
        "id": 124239808,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522091239
    },
    {
        "content": "<p>so you can do things like:  find . -type f -exec chmod 664 {} \\; -type d  -exec chmod 775 \\; -o -not ( -type d -o -type f ) -exec echo oh no \\;</p>",
        "id": 124239816,
        "sender_full_name": "Sean",
        "timestamp": 1522091253
    },
    {
        "content": "<p>Sooo, is cutting out parsing a bad idea?</p>",
        "id": 124239888,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522091399
    },
    {
        "content": "<p>what I think needs to happen is that ged_search() needs to pass a callback (e.g., ged_exec) and data parameter (e.g., struct ged) to db_search() where the -exec logic lives, that way db_search() can invoke the callback, pass the data, and the args as a simple argc/argv while maintaining a context (the struct ged)</p>",
        "id": 124239935,
        "sender_full_name": "Sean",
        "timestamp": 1522091410
    },
    {
        "content": "<p>then it can be ged_exec's problem to utilize the Tcl interpreter or not</p>",
        "id": 124239945,
        "sender_full_name": "Sean",
        "timestamp": 1522091464
    },
    {
        "content": "<p>I think that sounds good. Can't really think of anything better.</p>",
        "id": 124240128,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522091822
    },
    {
        "content": "<p>still won't mean it's easy, but that's why this is a gsoc project ;)</p>",
        "id": 124240145,
        "sender_full_name": "Sean",
        "timestamp": 1522091874
    },
    {
        "content": "<p>that's why it's fun too :D<br>\nshould we talk milestones then?</p>",
        "id": 124240191,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522091921
    },
    {
        "content": "<p>you'll have to think through milestones and objectives hand in hand -- considering the proposed implementation approach, how it'll be tested/verified, documentation, etc</p>",
        "id": 124240278,
        "sender_full_name": "Sean",
        "timestamp": 1522092087
    },
    {
        "content": "<p>(I guess I was thinking of deliverables then? anyways)<br>\nCan I use TTD? Should I commit failing tests?</p>",
        "id": 124240386,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522092295
    },
    {
        "content": "<p>TDD is great</p>",
        "id": 124240392,
        "sender_full_name": "Sean",
        "timestamp": 1522092329
    },
    {
        "content": "<p>s/TTD/TDD/ <em>doh</em></p>",
        "id": 124240396,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522092351
    },
    {
        "content": "<p>As for passing callbacks, I think an easy way to do it would be passing them together in an array? The plan string could encode which exec refers to which callback.</p>",
        "id": 124240611,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522092752
    },
    {
        "content": "<p>not following, what do you mean?</p>",
        "id": 124240630,
        "sender_full_name": "Sean",
        "timestamp": 1522092817
    },
    {
        "content": "<p>typewise, there needs to be a pointer to a function and a pointer to an object/data ... technically, you can put the function pointer into the object/data pointer, so that is the bare minimum</p>",
        "id": 124240676,
        "sender_full_name": "Sean",
        "timestamp": 1522092887
    },
    {
        "content": "<p>whether that minimum makes sense or not, wouldn't know without seeing a specific api proposed</p>",
        "id": 124240685,
        "sender_full_name": "Sean",
        "timestamp": 1522092925
    },
    {
        "content": "<p>or examples how it gets used like some test cases</p>",
        "id": 124240690,
        "sender_full_name": "Sean",
        "timestamp": 1522092948
    },
    {
        "content": "<p>in db_search, the plan_str roughly equals a program right? that is the thing that encodes what tests to run on each node and what logical operations to combine the tests with. <code>-exec</code> is just a node in that, but it needs to refer to a callback, so what I was thinking:</p>\n<p>add a <code>callback_t callbacks[]</code> parameter in <code>db_search</code> and make <code>plan_str</code> index into that. would need some bounds checks but that's it.</p>",
        "id": 124240809,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522093097
    },
    {
        "content": "<p>Ohhhhhh. Wait. Nevermind. The callback is per-db_search call, not per-exec-option. Yeah, that makes more sense.</p>",
        "id": 124241363,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522094096
    },
    {
        "content": "<p>So the translation happens inside the callback.</p>",
        "id": 124241372,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522094122
    },
    {
        "content": "<p>NOT inside ged_search or cmd_search</p>",
        "id": 124241378,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522094138
    },
    {
        "content": "<p><em>doh #2</em></p>",
        "id": 124241433,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522094234
    },
    {
        "content": "<p>that sounds right.  You may want to look at some original find.c bsd source code to see how they implement -exec since that's essentially what needs to be added back.</p>",
        "id": 124243232,
        "sender_full_name": "Sean",
        "timestamp": 1522097287
    },
    {
        "content": "<p>I finished a draft proposal, could you (or someone) take a look at it?<br>\n<a href=\"http://brlcad.org/wiki/User:Paddedto10#GSoC_proposal_:_Adding_support_for_the_-exec_option_in_the_search_command\" target=\"_blank\" title=\"http://brlcad.org/wiki/User:Paddedto10#GSoC_proposal_:_Adding_support_for_the_-exec_option_in_the_search_command\">http://brlcad.org/wiki/User:Paddedto10#GSoC_proposal_:_Adding_support_for_the_-exec_option_in_the_search_command</a></p>",
        "id": 124249425,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522108194
    },
    {
        "content": "<p>looks really good <span class=\"user-mention\" data-user-id=\"111633\">@Peter Pronai</span> -- the only thing that would make it better is demonstrating your ability to code by submitting a code patch, either related to search exec or libged ... there's a whole TODO in src/libged as well as some items in the top level TODO and BUGS files</p>",
        "id": 124252740,
        "sender_full_name": "Sean",
        "timestamp": 1522115202
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> ! I've submitted the draft, let me know what you think? :)</p>",
        "id": 124252748,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1522115261
    },
    {
        "content": "<p>Thanks for the feedback <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> ! I'll look into the bugs in a sec.</p>",
        "id": 124252795,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522115349
    },
    {
        "content": "<p>I didn't have energy for it yesterday, but I added a sample patch in the last hour. I've updated my wiki page and the proposal.</p>",
        "id": 124276055,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522163369
    },
    {
        "content": "<p>ah, nvm, gotta fix a few build errors first</p>",
        "id": 124276180,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522163525
    },
    {
        "content": "<p>@all  There is time in the Application Review Period to provide patches. We'll probable ask you to make some improvements to your proposals, schedule time for testing and documentation, providing a patch, etc.. Don't panic.</p>",
        "id": 124276604,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1522164244
    },
    {
        "content": "<p>Thanks, I wasn't sure if that also had the same deadline. I guess I'll take it slower then.</p>",
        "id": 124276631,
        "sender_full_name": "Peter Pronai",
        "timestamp": 1522164308
    },
    {
        "content": "<blockquote>\n<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> ! I've submitted the draft, let me know what you think? :)</p>\n</blockquote>\n<p>That's great. If we could have a piece of code from your side demonstrating your coding abilities, it'll be good. Cheers !</p>",
        "id": 124282208,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1522173283
    },
    {
        "content": "<p>Sure thing <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> I'll submit a couple of patches soon :)</p>",
        "id": 124283133,
        "sender_full_name": "Jaipal Singh",
        "timestamp": 1522174512
    }
]