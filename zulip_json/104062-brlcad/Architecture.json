[
    {
        "content": "<p>This has been shared with a few developers already, but opening the discussion to a broader community for input, feedback, awareness.  It's a work-in-progress diagram showing a near-term path for BRL-CAD's major architecture, particularly as it relates to major libraries and a push towards a single graphical application framework. <a href=\"/user_uploads/1549/a7bRNbCM-cBju18SQOs9iB8N/BRL-CAD-Architecture-Prospectus.pdf\" target=\"_blank\" title=\"BRL-CAD-Architecture-Prospectus.pdf\">BRL-CAD-Architecture-Prospectus.pdf</a></p>",
        "id": 164845169,
        "sender_full_name": "Sean",
        "timestamp": 1556936739
    },
    {
        "content": "<p>The main implications of this are in line with the massive consolidation and reduction efforts announced over a year ago (to get command-line apps down below 10 and ged commands below 100), namely that a lot of the complexity that currently exists in command-line form is getting grouped together with related features or eliminated where out of scope, immature, and/or undeveloped.</p>\n<p>It indicates we're planning to drop a few major dependencies (like Tcl/Tk for GUI) and adopt a few major dependencies that we've already proofed in some form (like Qt and OSPray for GUI) along with TBB and C++11 for our core runtime, the latter of which is already under way.</p>\n<p>Some aspects are heavily dependent on how quickly GUI development matures and whether we can secure dedicated development support, but other work hinted at include integration of 3rd party framework like OSG for scene management, appleseed for advanced rendering, and possible consolidation of BU+BN+BG into a LIBBPR. </p>\n<p>Not depicted but intended with this rearchitecting is a change to how BRL-CAD has been historically packaged and deployed.  Instead of hundreds of binaries with adhoc conflict with system facilities, adopting modern packaging standards for Mac, Linux, and Windows where there is a singular entry point into our ecosystem that can be made to comply with LSB, iOS, Windows 10, and other common standards.</p>",
        "id": 164845766,
        "sender_full_name": "Sean",
        "timestamp": 1556937825
    },
    {
        "content": "<p>Hi All, it's been a year of reflection, so I've updated the architecture diagram.  This is in response to code discoveries, development, discussions, and more.  Feedback and discussion is of course always welcome, particularly from any of you new guys from GCI seeing things for the first time, and core devs of course.</p>",
        "id": 186419707,
        "sender_full_name": "Sean",
        "timestamp": 1579804373
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/TxmGQ84lI5Y-xEK7OXp6eaaN/BRL-CAD-Architecture-Prospectus.png\" target=\"_blank\" title=\"BRL-CAD-Architecture-Prospectus.png\">BRL-CAD-Architecture-Prospectus.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/TxmGQ84lI5Y-xEK7OXp6eaaN/BRL-CAD-Architecture-Prospectus.png\" target=\"_blank\" title=\"BRL-CAD-Architecture-Prospectus.png\"><img src=\"/user_uploads/1549/TxmGQ84lI5Y-xEK7OXp6eaaN/BRL-CAD-Architecture-Prospectus.png\"></a></div>",
        "id": 186419729,
        "sender_full_name": "Sean",
        "timestamp": 1579804386
    },
    {
        "content": "<p>Just a note, but the spacings in the GUI app denote where we currently have code \"air gapped\" in separate repos.  The biggest change is making MOOSE be the main engine and interface through which the GUI represents and interacts with geometry.</p>",
        "id": 186419979,
        "sender_full_name": "Sean",
        "timestamp": 1579804541
    },
    {
        "content": "<p>I like the libcad <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 186421063,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579805257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252475\">@Himanshu Sekhar Nayak</span> diagram is maybe useful context?  This isn't the current state, but a proposed direction (at least that I'm slowly working towards)</p>",
        "id": 282142279,
        "sender_full_name": "Sean",
        "timestamp": 1652376410
    },
    {
        "content": "<p>Wow so many libraries that I have never seen and heard about it. In my free time, I will look into it. What I understand that MOOSE will be the main kernel where it will take requests from the GUI side and will send to the libraries. It is similar to what I know about OS kernel <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>.</p>",
        "id": 282145405,
        "sender_full_name": "Himanshu",
        "timestamp": 1652377637
    },
    {
        "content": "<p>There will be one GUI for total number of command line applications or for each command line application there will be each gui?</p>",
        "id": 282145737,
        "sender_full_name": "Himanshu",
        "timestamp": 1652377762
    },
    {
        "content": "<p>That's the hope/goal (for me at least) that there will be one primary GUI application environment built on top of MOOSE.  There will also be other CLI applications where needed (e.g., for rendering, image and data conversion, scripting needs, etc).</p>",
        "id": 282147949,
        "sender_full_name": "Sean",
        "timestamp": 1652378560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/channel/111975-Google-Summer-of-Code/topic/New.20BRL-CAD.20GUI/near/529607057\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> Is there a good example somewhere of an implementation of that pattern (ideally cross platform?)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span>, <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>, I think, this is more a general architectural discussion now:</p>\n<p>Cross platform: yes, Open source: no. However, here are some principles and practice:</p>",
        "id": 529680578,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1753009879
    },
    {
        "content": "<p>For the OS part, I use Qt. Doing this for every OS separately with its low-level functions would be error-prone and like a hare and tortoise game, when they decide to change something in their API for the new version. I.e., I do shared library handling with Qt.</p>",
        "id": 529680655,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1753009968
    },
    {
        "content": "<p>There, I search for something like</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"n\">BRLCAD_MODULE_EXPORT</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">RegisterBrlCadModule</span><span class=\"p\">(</span><span class=\"n\">BrlCadModuleRegisterCallback</span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>in the shared libraries. (In fact, it's C call and it looks for a <strong>RegisterBrlCadModule</strong> only.)</p>\n<p>If <code>RegisterBrlCadModule</code> is found, it will be executed with a <code>BrlCadModuleCallback</code> object, which has methods like</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">RegisterGedCommand</span><span class=\"p\">(</span><span class=\"n\">GedCommand</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">create</span><span class=\"p\">)(</span><span class=\"n\">BRLCAD</span><span class=\"o\">::</span><span class=\"n\">Core</span><span class=\"o\">&amp;</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">commandName</span><span class=\"p\">,</span>\n<span class=\"w\">                        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">helpString</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>I.e., what's typed after <strong>commandName</strong> will be handed over to the corresponding <code>GedCommand</code> object.</p>",
        "id": 529682166,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1753011362
    },
    {
        "content": "<p>Then, there are the \"call-backs\" to the core. One could imagine to make the important librt functionality, which cannot reached via <code>BRLCAD::Database</code>, accessible via a <code>BRLCAD::Core</code> object. But libbu stuff?</p>\n<p>This can be done as a header-only implementation. For more complex objects, an additional source file can be provided, which had to be compiled and linked to the module's binary.</p>",
        "id": 529682966,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1753012100
    },
    {
        "content": "<p>The memory management needs special attention. When the core and the module use different registries, one side cannot free what the other allocated. This already happens when booth sides where build with different versions of MS Visual Studio.</p>\n<p>This issue can be solved by providing virtual functions for features, which require allocation or freeing of heap memory. Sometimes, even destructing of objects had to be done this way.</p>",
        "id": 529683457,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1753012575
    }
]