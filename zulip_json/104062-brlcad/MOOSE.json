[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> What are the next steps for MOOSE?</p>",
        "id": 185398213,
        "sender_full_name": "Sean",
        "timestamp": 1578763855
    },
    {
        "content": "<p>I still can't believe I forgot the name we'd settled on.  I love it.</p>",
        "id": 185398220,
        "sender_full_name": "Sean",
        "timestamp": 1578763866
    },
    {
        "content": "<p>Well, I don't know. The C++ interface is my standard API for doing something with BR-CAD. But, it looks like I'm the only one using it. Its features are sufficient for my current needs. Maybe, they have to be enlarged if i can really realize my ideas for a new GUI.</p>\n<p>There is however more behind MOOSE as only \"doing things in C++\". It's a behavior description of the BRL-CAD kernel and a reference for how to use the standard C API. AND, with the brlcad.dll, a demonstration of how the BRL-CAD kernel can be included as a module in other applications, <a href=\"https://univemo.iabg.de/Download/BrlCadViewer30_setup.exe\" target=\"_blank\" title=\"https://univemo.iabg.de/Download/BrlCadViewer30_setup.exe\">https://univemo.iabg.de/Download/BrlCadViewer30_setup.exe</a> for example. I mentioned this here in the Appleseed thread too.</p>",
        "id": 185398936,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578765154
    },
    {
        "content": "<blockquote>\n<p>Maybe, they have to be enlarged if i can really realize my ideas for a new GUI.</p>\n</blockquote>\n<p>That's what I'm getting at.  I think it can/should be the foundation for the new GUI (not direct linkage into librt).  Towards that end, though, I do think it needs some things.  I'm not 100% on what that TODO looks like yet, though.</p>\n<p>I think my next step will be to take the IBRT interface (which directly calls librt) and see how well it converts over.  Right now, it and the Qt bits we have would make a pretty decent GUI.</p>\n<blockquote>\n<p>It's a behavior description of the BRL-CAD kernel and a reference for how to use the standard C API. AND, with the brlcad.dll, a demonstration of how the BRL-CAD kernel can be included as a module in other applications,[snip]</p>\n</blockquote>\n<p>To me MOOSE <em>becomes</em> the kernel and the lower level C libraries are implementation encapsulation/layering/grouping details.</p>",
        "id": 185401802,
        "sender_full_name": "Sean",
        "timestamp": 1578770242
    },
    {
        "content": "<p>Towards that end, this is still the roadmap I have in mind: <a href=\"/user_uploads/1549/m2VUdnNjCy5OGebYLNHCTvoR/Unknown.png\" target=\"_blank\" title=\"Unknown.png\">Unknown.png</a>  </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/m2VUdnNjCy5OGebYLNHCTvoR/Unknown.png\" target=\"_blank\" title=\"Unknown.png\"><img src=\"/user_uploads/1549/m2VUdnNjCy5OGebYLNHCTvoR/Unknown.png\"></a></div><p>Begs some discussion on how libged is going to become exposed to applications, but one possibility is that appleseed and ospray move up into the application layer and the purple layerC++  sits over all the C libs including icv, gcv, ged, rt, &amp; analyze.</p>",
        "id": 185402163,
        "sender_full_name": "Sean",
        "timestamp": 1578770911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> how do you feel about adding something like BRLCAD:Database.execute() ?</p>",
        "id": 185615008,
        "sender_full_name": "Sean",
        "timestamp": 1579020903
    },
    {
        "content": "<p>as a means to expose the entirety of the libged API, assuming a corresponding ged_exec() that it would call into for running any ged command on the given database.  this would probably entail storing a struct ged alongside the struct wdb (or instead of it since you can extract a wdb from a ged).</p>",
        "id": 185615421,
        "sender_full_name": "Sean",
        "timestamp": 1579021123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252475\">@Himanshu Sekhar Nayak</span> what task are you working on now?</p>",
        "id": 185619160,
        "sender_full_name": "Sean",
        "timestamp": 1579023282
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252475\">Himanshu Sekhar Nayak</span> what task are you working on now?</p>\n</blockquote>\n<p>currently working on <code>BRL-CAD Lua binding: Test BRLCAD.database:Title() (part #1 of 2)</code></p>",
        "id": 185619213,
        "sender_full_name": "Himanshu",
        "timestamp": 1579023333
    },
    {
        "content": "<p>ah cool, unit test for the Title interface?  what's part 2?</p>",
        "id": 185619239,
        "sender_full_name": "Sean",
        "timestamp": 1579023361
    },
    {
        "content": "<p>didn't see part 2 yet</p>",
        "id": 185619316,
        "sender_full_name": "Himanshu",
        "timestamp": 1579023395
    },
    {
        "content": "<p>yeah Unit test for Title interface</p>",
        "id": 185619357,
        "sender_full_name": "Himanshu",
        "timestamp": 1579023438
    },
    {
        "content": "<p>ah, I see part 2 is not uploaded/enabled yet</p>",
        "id": 185619456,
        "sender_full_name": "Sean",
        "timestamp": 1579023491
    },
    {
        "content": "<p>btw there are still some binding left</p>",
        "id": 185619527,
        "sender_full_name": "Himanshu",
        "timestamp": 1579023565
    },
    {
        "content": "<p>yeah, I just noticed, 5 remaining</p>",
        "id": 185619548,
        "sender_full_name": "Sean",
        "timestamp": 1579023585
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> how do you feel about adding something like BRLCAD:Database.execute() ?</p>\n</blockquote>\n<p>Not so good.</p>\n<p>libged is command language interface (namely TCL). (int argc, const char *argv[]) looks like a riddle. The return value is a string, its evaluation is the hell, unless you work with a language like TCL. And, libged is closely linked to the graphics library.</p>\n<p>The C++ interface is a non-libged. Behavior oriented, methods with parameters, easy to work with in the language it’s written, no assumptions regarding the environment at all. It hasn’t even simple vector functions, because they are likely already present in the application where the BRL-CAD core is linked to. Instead, the Vector2D etc. structures are designed for easy casting to “usual” vector classes.</p>\n<p>However, the <strong>M</strong> in MOOSE stands for <strong>modular</strong>. I see the core interface only as one component. There are more parts of the BRL-CAD libraries, which may be worth to export via the new API. The command language interface from libged is one of them, even a problematic one, because of its strong dependency to the current mged and Archer architecture.</p>\n<p>In any case, libged is not a functionality of the database. It has some commands which operate on the database, but that’s all. It’s rather the central command interface of the current BRL-CAD program infrastructure.</p>",
        "id": 185632830,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579031303
    },
    {
        "content": "<blockquote>\n<p>Not so good.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  Appreciate the honesty.</p>\n<blockquote>\n<p>libged is command language interface (namely TCL). (int argc, const char *argv[]) looks like a riddle. The return value is a string, its evaluation is the hell, unless you work with a language like TCL. And, libged is closely linked to the graphics library.</p>\n</blockquote>\n<p>return value is <em>currently</em> a string, but that is not the intended end state.  I'm not sure of your tcl references, though, as the library is almost entirely stripped of it's former tcl association.  the command pattern it uses was intentionally designed to be abstracted from the evaluation layer above it, which could be tcl, perl, shell, lisp, lua, etc. , as simple commands followed by arguments which translates to nearly all interactive scripting environments.</p>\n<blockquote>\n<p>The C++ interface is a non-libged. Behavior oriented, methods with parameters, ...[snip]</p>\n</blockquote>\n<p>This I totally get and would reject myself as muddying the object-oriented behavior model.  What  I guess I'm hoping to find is a way to make them play together effectively (and not kludged) to benefit applications.  I believe you phrased it better in the next point...</p>\n<blockquote>\n<p>...[snip]... even a problematic one, because of it's strong dependency to the current mged and Archer architecture.</p>\n</blockquote>\n<p>I'm not sure I'd agree with this characterization.  If anything, we now have such clean separation that you can invoke any ged command without mged or archer architecture.  You merely need a database handle.  See src/libged/tests/test_tops.c for example.</p>\n<p>Now where I do agree there remains a problem is that currently commands either acts on the database and returns a dumb string.  These are all side effects and that's not ideal or desired long-term.</p>\n<blockquote>\n<p>In any case, libged is not a functionality of the database.  It has some commands which operate on the database, but that's all.  It's rather the central command interface of the current BRL-CAD program infrastructure.</p>\n</blockquote>\n<p>From a pure object-oriented design standpoint, I would counter that this has been framed in library terms which is not entirely relevant to the conceptual model.  Conceptually, a Database certainly could/does have a notion of operations it can perform.  Whether this is presented as a db-&gt;tops() or db-&gt;invoke(\"tops\") is a not a divergent distinction.  That's not to say I think only the prior or the latter should exist, just that it's not inconsistent for a database (class or object) to have some intrinsic ability to perform supported operations.</p>\n<p>While it's undeniably the clI to the current infrastructure, I have no desire to abandon it going forward.  To the contrary, I think the issues (some you have noted) are simply items to be worked as we develop new GUIs and expand new use cases as a means to leverage existing functionality while also enabling and creating new apps that rid themselves of mged/archer baggage.</p>",
        "id": 185671050,
        "sender_full_name": "Sean",
        "timestamp": 1579067975
    },
    {
        "content": "<p>I‘m aware of the fact that the direct TCL calls were removed from libged, but it is still a command language with flags and variable parameters. This is usual for shell scripts and scripting languages which imitate their behavior. For other languages, this is a problem.</p>\n<p>I’m also aware, that we don’t need a fully featured mged or Archer to use libged. For example, if we use mged with nu atached. Nevertheless, we shouldn’t ignore the many graphics functions in libged which are closely related to the current display manager logic.</p>\n<p>The solution which I recommend is to access libged through an own MOOSE module. This way, MOOSE based application can use libged functionality if they can profit from them, without disturbing the other parts.</p>",
        "id": 185732502,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579115341
    },
    {
        "content": "<p>I created a first draft of a <strong>BRL-CAD MOOSE</strong> implementation: <a href=\"https://github.com/drossberg/MOOSE\" title=\"https://github.com/drossberg/MOOSE\">https://github.com/drossberg/MOOSE</a><br>\nThis shouldn't be considered in no sense as complete, but I want to share it because I don't want to put much effort in something we won't agree on.</p>\n<p>At least, it compiles on Linux.</p>",
        "id": 194341302,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1587058947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252475\">@Himanshu Sekhar Nayak</span> MOOSE usually denotes the BRL-CAD core C++ interface. Its code can be found in the rt^3 branch of the main repository. Look at the include/brlcad and src/coreInterface directories there.</p>\n<p>To start, you can check the sources for consistency. E.g., does Database.cpp support all available object types?</p>\n<p>A prototype/demonstrator of a BRL-CAD library with MOOSE API can be found here: <a href=\"https://github.com/drossberg/MOOSE\" title=\"https://github.com/drossberg/MOOSE\">https://github.com/drossberg/MOOSE</a><br>\nA demonstration of how to write programs on top of BRL-CAD MOOSE: <a href=\"https://github.com/drossberg/BrlCadGUI\" title=\"https://github.com/drossberg/BrlCadGUI\">https://github.com/drossberg/BrlCadGUI</a><br>\nI made both CMake set-ups for Linux. They are demonstrators only.</p>",
        "id": 196762208,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588854252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  yeah just starting today. First I am cleaning my workspace so that I can work again into it and I forked your repo too. I will start looking into it today onwards</p>",
        "id": 198541974,
        "sender_full_name": "Himanshu",
        "timestamp": 1590250830
    },
    {
        "content": "<p>You may want to look at <strong>BrlCadGUI</strong> too, as this is an example for how to use MOOSE. You have to install MOOSE and give the BrlCadGUI CMake the installation directory, such that it'll find the lib and headers there. The GUI itself is Qt based.</p>",
        "id": 198542230,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1590251294
    },
    {
        "content": "<p>Is there a good example for a tree-walk to create a wire-frame view from a subtree? I.e., a db_walk_tree() which calls ft_plot() for the leafs. I wouls especially like to know how to include the transformations from the combinations. libged/draw.c gave me no idea.</p>",
        "id": 198854186,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1590561345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> I wouldn't call it a \"good\" example, but the submodel code is probably the most concise example in librt/primitives/submodel/submodel.c in rt_submodel_plot() where it make a db_walk_tree to plot separate database models.</p>",
        "id": 199457683,
        "sender_full_name": "Sean",
        "timestamp": 1591082939
    },
    {
        "content": "<p>Yeah, a saw this too.<br>\nIt looks like the tree walking code can be rather short. This is what I made of it: <a href=\"https://github.com/drossberg/MOOSE/blob/master/src/Database/ConstDatabase.cpp#L459\">https://github.com/drossberg/MOOSE/blob/master/src/Database/ConstDatabase.cpp#L459</a></p>\n<p>However, creating the application to test it needs a bit more time...</p>",
        "id": 199479102,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1591098280
    },
    {
        "content": "<p>That looks right.  Looks nice and clean too.  I like the integration with VectorList, though it highlights the expansion of vlist to more than vectors...</p>",
        "id": 199539229,
        "sender_full_name": "Sean",
        "timestamp": 1591125117
    },
    {
        "content": "<p>sorry, <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> as I am unable to contribute due to some keyboard problems in my laptop as most of the keys are in bad shape and since my pc is outdated. So I bought new laptop today. I will start working on moose in a few days</p>",
        "id": 200631577,
        "sender_full_name": "Himanshu",
        "timestamp": 1591932246
    },
    {
        "content": "<p>I added the Lua bindings to the lib. It can now be loaded in Lua as a module.</p>",
        "id": 200640420,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1591946177
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  I am getting <code>Could not find BRL-CAD root directory - please set BRLCAD_BASE_DIR in CMake</code>. Should it find the BrlCadGUI or the <code>/usr/brlcad/dev-7.31.0/\n</code> ?</p>",
        "id": 200792262,
        "sender_full_name": "Himanshu",
        "timestamp": 1592094146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252475\">@Himanshu Sekhar Nayak</span> BRLCAD_BASE_DIR should point to wherever the main libs like libbu and librt are installed, typically /usr/brlcad/dev-7.31.0 or similar.</p>",
        "id": 200899661,
        "sender_full_name": "Sean",
        "timestamp": 1592232831
    },
    {
        "content": "<p>btw I am getting this</p>",
        "id": 201143262,
        "sender_full_name": "Himanshu",
        "timestamp": 1592401849
    },
    {
        "content": "<p><code>CMake Error: The following variables are used in this project, but they are set to NOTFOUND.\nPlease set them or make sure they are set and tested correctly in the CMake files:\nBRLCAD_LZ4_STATIC_LIBRARY\n    linked by target \"brlcad\" in directory /home/h1manshu/brlcad/MOOSE/src\n</code></p>",
        "id": 201143267,
        "sender_full_name": "Himanshu",
        "timestamp": 1592401854
    },
    {
        "content": "<p>I have done exporting but I am not if I am giving correct PATH or something</p>",
        "id": 201143368,
        "sender_full_name": "Himanshu",
        "timestamp": 1592401896
    },
    {
        "content": "<p><code>export PATH=\"/usr/brlcad/dev-7.31.0/bin:$PATH\"</code></p>",
        "id": 201143390,
        "sender_full_name": "Himanshu",
        "timestamp": 1592401909
    },
    {
        "content": "<p>You may need to clear the CMakeCache.txt file</p>",
        "id": 201169598,
        "sender_full_name": "starseeker",
        "timestamp": 1592413034
    },
    {
        "content": "<p>Another possibility: This can happen if there is a lz4 development package installed. In this case, BRL-CAD won't build an own one. setting BRLCAD_LZ4_STATIC_LIBRARY to the place of the installed lib (e.g. /usr/lib/liblz4.a) should help.</p>\n<p>The CMake logic in MOOSE isn't very intelligent yet.</p>",
        "id": 201170441,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1592413355
    },
    {
        "content": "<p>lz4 is now embedded with librt. I.e., there is no separate lz4 library any more. I adapted the MOOSE CMake file accordingly.</p>",
        "id": 201487210,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1592673010
    },
    {
        "content": "<p>yeah build passed</p>",
        "id": 201687017,
        "sender_full_name": "Himanshu",
        "timestamp": 1592886898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> <a href=\"#narrow/stream/104062-general/topic/MOOSE/near/196762208\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252475\">Himanshu Sekhar Nayak</span> MOOSE usually denotes the BRL-CAD core C++ interface. Its code can be found in the rt^3 branch of the main repository. Look at the include/brlcad and src/coreInterface directories there.</p>\n<p>To start, you can check the sources for consistency. E.g., does Database.cpp support all available object types?</p>\n<p>A prototype/demonstrator of a BRL-CAD library with MOOSE API can be found here: <a href=\"https://github.com/drossberg/MOOSE\">https://github.com/drossberg/MOOSE</a><br>\nA demonstration of how to write programs on top of BRL-CAD MOOSE: <a href=\"https://github.com/drossberg/BrlCadGUI\">https://github.com/drossberg/BrlCadGUI</a><br>\nI made both CMake set-ups for Linux. They are demonstrators only.</p>\n</blockquote>\n<p>btw I saw, you had included all the objects types that are supported to Database.cpp. So can I know how to look further in this regard?</p>",
        "id": 201687670,
        "sender_full_name": "Himanshu",
        "timestamp": 1592887939
    },
    {
        "content": "<p>Did you had a look at the Lua interface, which is part of MOOSE? It's interesting to see how it's used.</p>",
        "id": 201693304,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1592895943
    },
    {
        "content": "<p>I did a step towards a MOOSE interface for libged, but got an odd issue on Linux: When linking the resulting <code>libbrlcad.so</code> (the MOOSE library) to an executable, I get three undefined references: <strong>bu_cmd</strong>, <strong>bu_terminate</strong>, and <strong>quat_mat2quat</strong>. However, how can <strong>quat_mat2quat</strong> be so different from <strong>quat_quat2mat</strong>? Any idea what could cause the undefined references? On Windows, it's fine.</p>",
        "id": 303301735,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1665423619
    },
    {
        "content": "<p>It seems to be connected with the order of the libraries in <code>target_link_libraries()</code>. Moving <strong>libged</strong> above <strong>libnbu</strong> but below <strong>libbn</strong> removes the undefined <em>bu_</em> references. But moving <strong>libged</strong> above <strong>libbn</strong> gives link errors in MOOSE: <code>multiple definition of 'XXH_versionNumber'</code>, etc..</p>",
        "id": 303303162,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1665424292
    },
    {
        "content": "<p>I might not be including the xxhash.h header quite right - that's presumably where the XXH_* complaints are coming from.</p>",
        "id": 303352758,
        "sender_full_name": "starseeker",
        "timestamp": 1665456907
    },
    {
        "content": "<p>For bu_cmd, does it help if you move bu_cmdtab inside the __BEGIN_DECLS block in bu/cmd.h?</p>",
        "id": 303352861,
        "sender_full_name": "starseeker",
        "timestamp": 1665457027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/MOOSE/near/303352861\">said</a>:</p>\n<blockquote>\n<p>For bu_cmd, does it help if you move bu_cmdtab inside the __BEGIN_DECLS block in bu/cmd.h?</p>\n</blockquote>\n<p>For <strong>bu_cmd</strong> and <strong>bu_terminate</strong> it helps to move <strong>libged</strong> before <strong>libbu</strong>. I.e., I consider these as solved :)</p>",
        "id": 303369814,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1665471529
    },
    {
        "content": "<p>It's a bit surprising that the linking order is so important. I think that I had this kind of issue already before, but forgot it.</p>",
        "id": 303370093,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1665471668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/MOOSE/near/303352758\">said</a>:</p>\n<blockquote>\n<p>I might not be including the xxhash.h header quite right - that's presumably where the XXH_* complaints are coming from.</p>\n</blockquote>\n<p><a href=\"https://github.com/BRL-CAD/brlcad/pull/60\">https://github.com/BRL-CAD/brlcad/pull/60</a> fixes it. At least for the moment.</p>",
        "id": 303887152,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1665681810
    },
    {
        "content": "<p>I'm seeing linker errors when trying to build the brlcad library from MOOSE:</p>\n<div class=\"codehilite\"><pre><span></span><code>/bin/ld: /home/rossberg/bin/brlcad/lib/libbv.a(vlist.c.o): in function `pd_3&#39;:\n/home/rossberg/Devel/BRL-CAD/brlcad/src/libbv/vlist.c:310: multiple definition of `pd_3&#39;; /home/rossberg/bin/brlcad/lib/libbg.a(polygon.c.o):/home/rossberg/Devel/BRL-CAD/brlcad/include/bv/plot3.h:310: first defined here\n</code></pre></div>\n<p>There are similar errors with Visual Studio on Windows.</p>\n<p>I assume that these errors are related to <a href=\"https://github.com/BRL-CAD/brlcad/commit/717eaf57ef5c9bb7dfdab3196f00efc4e8ca6aab\">https://github.com/BRL-CAD/brlcad/commit/717eaf57ef5c9bb7dfdab3196f00efc4e8ca6aab</a>. Any idea, how this can be fixed? In MOOSE, the brlcad library is build from the static librt, libbu, etc..</p>",
        "id": 421203689,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1707815964
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> Looks like <a href=\"https://github.com/BRL-CAD/brlcad/commit/f5f1e19d376b2acdbc142cf16665eb1e5ab94aa5\">https://github.com/BRL-CAD/brlcad/commit/f5f1e19d376b2acdbc142cf16665eb1e5ab94aa5</a> fixed the issu. Thanks <span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span>!</p>",
        "id": 421621898,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1707992115
    },
    {
        "content": "<p>However, after fixing an issue is before discovering a new one: I'm seeing two undefined references when linking arbalest:</p>\n<ul>\n<li><code>bu_vls_incr</code></li>\n<li><code>bg_distsq_lseg3_pt</code></li>\n</ul>\n<p>I just try to find out what's special with them. Any idea?</p>",
        "id": 421622600,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1707992399
    },
    {
        "content": "<p>looks like it is connected to the linking order in MOOSE...</p>",
        "id": 421625168,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1707993362
    },
    {
        "content": "<p>Fixed.</p>",
        "id": 421627238,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1707994083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Any chance you could put together a Github Actions test that checks this for us on a regular basis?  It's not a build mode I normally test so it'd be a good candidate for automated checking.</p>",
        "id": 422024666,
        "sender_full_name": "starseeker",
        "timestamp": 1708186821
    },
    {
        "content": "<p>I never looked at Github Actions before, but it sounds like a good idea. I'll give it a try. (I may need some time and support.)</p>",
        "id": 422044834,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1708206223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>   If I get a chance I'll try to rough something in place, but I'll need you to verify it's actually building what we need to build the way we need to build it to act as a good test.</p>",
        "id": 422155486,
        "sender_full_name": "starseeker",
        "timestamp": 1708314841
    },
    {
        "content": "<p>Okay, let's see, if I understood it right (Linux only, for the start):</p>\n<ul>\n<li>The file to change is <code>.github/workflows/check.yml</code></li>\n<li>The BRL-CAD installation is needed, therefore<ul>\n<li>Add something like <code>-DCMAKE_INSTALL_PREFIX=$ENV{GITHUB_WORKSPACE}/install</code> to the cmake command</li>\n<li>Add <code>cmake --build build --config Release --target install</code> to the Build</li>\n</ul>\n</li>\n<li>Checkout MOOSE</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"w\">      </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Checkout MOOSE</span>\n<span class=\"w\">        </span><span class=\"nt\">uses</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">actions/checkout@v4</span>\n<span class=\"w\">        </span><span class=\"nt\">with</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nt\">repository</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">brlcad/MOOSE</span>\n</code></pre></div>\n<p>(I'm not sure about the <code>@4</code> here.)</p>\n<ul>\n<li>Configure MOOSE<ul>\n<li>Point it to the BRL-CAD install directory <code>-DBRLCAD_BASE_DIR=$ENV{GITHUB_WORKSPACE}/install</code></li>\n</ul>\n</li>\n<li>Build the all(?) target of MOOSE</li>\n</ul>",
        "id": 422196355,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1708335982
    },
    {
        "content": "<p>I'd suggest adding a separate moose.yml file for this specific case, but it can work either way.</p>",
        "id": 422290217,
        "sender_full_name": "starseeker",
        "timestamp": 1708368430
    },
    {
        "content": "<p>Sounds like you've got the right idea.</p>",
        "id": 422290252,
        "sender_full_name": "starseeker",
        "timestamp": 1708368459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/MOOSE/near/422290217\">said</a>:</p>\n<blockquote>\n<p>I'd suggest adding a separate moose.yml file for this specific case, but it can work either way.</p>\n</blockquote>\n<p>Yes, for developing and testing the action, and it could be hooked to MOOSE commits. But, for hooking it to brlcad commits, it has the disadvantage of building brlcad twice in this case.</p>\n<p>However, first it needs to work. I'll take a look at it.</p>",
        "id": 422580359,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1708509225
    },
    {
        "content": "<p>There is an issue with the static brlcad libraries on Windows with Visual Studio: The rt_tgc_tess() and rt_tgc_tnurb() functions are missing. I think, this is because of a Visual Studio individuality, where the linker thinks that these functions are unused. I created a pull request with a proposed solution: <a href=\"https://github.com/BRL-CAD/brlcad/pull/115\">https://github.com/BRL-CAD/brlcad/pull/115</a></p>",
        "id": 422646039,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1708530011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Interesting that those two functions have a problem, but rt_tgc_mirror does not.  I think it's probably my fault for missing something when I moved them...</p>",
        "id": 423099015,
        "sender_full_name": "starseeker",
        "timestamp": 1708724499
    },
    {
        "content": "<p>OK, I guess we can merge them back in for now... I'd like to understand why that didn't work, but in the meantime we can get up and running again.</p>",
        "id": 423099372,
        "sender_full_name": "starseeker",
        "timestamp": 1708724673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/MOOSE/near/423099015\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> Interesting that those two functions have a problem, but rt_tgc_mirror does not.  I think it's probably my fault for missing something when I moved them...</p>\n</blockquote>\n<p>rt_tgc_mirror() is used in src/librt/primitives/mirror.c</p>",
        "id": 423103234,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1708726507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/MOOSE/near/423099372\">said</a>:</p>\n<blockquote>\n<p>OK, I guess we can merge them back in for now... I'd like to understand why that didn't work, but in the meantime we can get up and running again.</p>\n</blockquote>\n<p>Maybe there is even a difference between MSVS 2019 and 2022...</p>",
        "id": 423103324,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1708726553
    },
    {
        "content": "<p>When running my examples with the ged version of MOOSE, I'm seeing</p>\n<div class=\"codehilite\"><pre><span></span><code>free(): double free detected in tcache 2\nAborted (core dumped)\n</code></pre></div>\n<p>The gdb back-trace is</p>\n<div class=\"codehilite\"><pre><span></span><code>#0  __pthread_kill_implementation (threadid=&lt;optimized out&gt;, signo=signo@entry=6, no_tid=no_tid@entry=0)\n    at ./nptl/pthread_kill.c:44\n#1  0x00007ffff46a9f1f in __pthread_kill_internal (signo=6, threadid=&lt;optimized out&gt;) at ./nptl/pthread_kill.c:78\n#2  0x00007ffff465afb2 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26\n#3  0x00007ffff4645472 in __GI_abort () at ./stdlib/abort.c:79\n#4  0x00007ffff469e430 in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff47b8459 &quot;%s\\n&quot;)\n    at ../sysdeps/posix/libc_fatal.c:155\n#5  0x00007ffff46b383a in malloc_printerr (str=str@entry=0x7ffff47bb098 &quot;free(): double free detected in tcache 2&quot;)\n    at ./malloc/malloc.c:5660\n#6  0x00007ffff46b5ac6 in _int_free (av=0x7ffff47f1c60 &lt;main_arena&gt;, p=0x555555649560, have_lock=have_lock@entry=0)\n    at ./malloc/malloc.c:4469\n#7  0x00007ffff46b7f1f in __GI___libc_free (mem=&lt;optimized out&gt;) at ./malloc/malloc.c:3385\n#8  0x00007ffff532bb19 in onrealloc () from /home/rossberg/bin/BrlcadMoose/lib/libbrlcad.so\n#9  0x00007ffff4f7df92 in ON_HatchPattern::~ON_HatchPattern() ()\n   from /home/rossberg/bin/BrlcadMoose/lib/libbrlcad.so\n#10 0x00007ffff465cff7 in __cxa_finalize (d=0x7ffff12b4600) at ./stdlib/cxa_finalize.c:83\n#11 0x00007ffff0c78d27 in __do_global_dtors_aux () from /home/rossberg/bin/brlcad/lib/libOpenNURBS.so\n#12 0x0000555555580830 in ?? ()\n#13 0x00007ffff7fcc12a in _dl_call_fini (closure_map=0x7fffffffd7f0, closure_map@entry=0x555555580830)\n    at ./elf/dl-call_fini.c:43\n#14 0x00007ffff7fcf81e in _dl_fini () at ./elf/dl-fini.c:114\n#15 0x00007ffff465d55d in __run_exit_handlers (status=1, listp=0x7ffff47f1820 &lt;__exit_funcs&gt;,\n    run_list_atexit=run_list_atexit@entry=true, run_dtors=run_dtors@entry=true) at ./stdlib/exit.c:116\n#16 0x00007ffff465d69a in __GI_exit (status=&lt;optimized out&gt;) at ./stdlib/exit.c:146\n#17 0x00007ffff4646251 in __libc_start_call_main (main=main@entry=0x5555555551b9 &lt;main&gt;, argc=argc@entry=1,\n    argv=argv@entry=0x7fffffffe318) at ../sysdeps/nptl/libc_start_call_main.h:74\n#18 0x00007ffff4646305 in __libc_start_main_impl (main=0x5555555551b9 &lt;main&gt;, argc=1, argv=0x7fffffffe318,\n    init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=0x7fffffffe308)\n    at ../csu/libc-start.c:360\n#19 0x00005555555550f1 in _start ()\n</code></pre></div>\n<p>This happens even without calling any BRL-CAD function. Just linking to MOOSE triggers it, and it has to be the ged version. It looks like one of the static ON_HatchPattern objects is double-freed <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 491601937,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1735820229
    }
]