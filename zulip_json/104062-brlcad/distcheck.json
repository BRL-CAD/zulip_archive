[
    {
        "content": "<p>Anyone else seeing distcheck-full errors on main?  I'm getting a handful that look like valid bugs:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>...\n 35/922 Test  #33: bu_file ....................................................***Failed    0.01 sec\n\nfile [FAIL] test input file bu_file_test_dir/bu_file_1 is incorrectly reported to be executable\n...\n373/922 Test #374: bu_color_to_rgb_floats_1 ...................................***Failed    0.00 sec\nResult: 0.752941,0.305882,0.839216\n...\nStart 922: ged_test_drawing_quad\n919/922 Test #922: ged_test_drawing_quad ......................................Subprocess aborted***Exception:   0.00 sec\ndyld[94599]: Library not loaded: @executable_path/../lib/libtcl8.6.dylib\n  Referenced from: &lt;77324E71-4FC8-3FA9-B662-6DD9330C4344&gt; /Volumes/X10/brlcad/.build.debug/distcheck-in_src_dir/brlcad-7.40.1/src/libged/tests/draw/ged_test_quad\n  Reason: tried: '/Volumes/X10/brlcad/.build.debug/distcheck-in_src_dir/brlcad-7.40.1/src/libged/tests/lib/libtcl8.6.dylib' (no such file)\n\n920/922 Test #907: rt_cache_serial_multiple_different_objects .................   Passed    7.23 sec\n921/922 Test #555: bu_mappedfile_serial_16384 .................................   Passed  100.26 sec\n922/922 Test #556: bu_mappedfile_parallel_16384 ...............................   Passed  120.57 sec\n\n99% tests passed, 12 tests failed out of 922\n\nTotal Test time (real) = 125.61 sec\n\nThe following tests FAILED:\n         33 - bu_file (Failed)\n        374 - bu_color_to_rgb_floats_1 (Failed)\n        910 - rt_search_tests (Subprocess aborted)\n        914 - ged_test_tops_moss (Subprocess aborted)\n        915 - ged_test_list (Subprocess aborted)\n        916 - ged_test_material (Subprocess aborted)\n        917 - ged_test_search (Subprocess aborted)\n        918 - ged_test_drawing_basic (Subprocess aborted)\n        919 - ged_test_drawing_faceplate (Subprocess aborted)\n        920 - ged_test_drawing_lod (Subprocess aborted)\n        921 - ged_test_drawing_select (Subprocess aborted)\n        922 - ged_test_drawing_quad (Subprocess aborted)\nErrors while running CTest\n</code></pre></div>\n<p>First two look like bugs, subprocess looks to be maybe something wrong in the relocatability dylib/exec editing.</p>",
        "id": 455712803,
        "sender_full_name": "Sean",
        "timestamp": 1722533448
    },
    {
        "content": "<p>I've not seen those errors - are they only in the in-src-dir config or do they pop up in others as well?</p>",
        "id": 455731489,
        "sender_full_name": "starseeker",
        "timestamp": 1722538355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> I just ran distcheck-full… didn’t see any other errors.  I haven’t just run a plain distcheck too but was going to check that also.</p>",
        "id": 455760039,
        "sender_full_name": "Sean",
        "timestamp": 1722547910
    },
    {
        "content": "<p>Just an update, ran make check and the errors are agnostic.  Fails debug and release on those tests, so something newish.</p>",
        "id": 455794065,
        "sender_full_name": "Sean",
        "timestamp": 1722560873
    },
    {
        "content": "<p>Failures are also on RELEASE branch just the same. </p>\n<p>Looking into the lib issues, looks like it's because the unit tests are wired wrong, as if they were installed into bin:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>morrison@Miniagua tests % ./ged_test_tops\ndyld[47269]: Library not loaded: @executable_path/../lib/libtcl8.6.dylib\n  Referenced from: &lt;82312D51-F510-33AC-9283-067C3FBAFF54&gt; /Volumes/X10/brlcad.RELEASE/.build.release/src/libged/tests/ged_test_tops\n  Reason: tried: '/Volumes/X10/brlcad.RELEASE/.build.release/src/libged/lib/libtcl8.6.dylib' (no such file)\nzsh: abort      ./ged_test_tops\nmorrison@Miniagua tests % DYLD_LIBRARY_PATH=../../../lib ./ged_test_tops\nUsage: ./ged_test_tops file.g\nmorrison@Miniagua tests % otool -L ./ged_test_tops\n./ged_test_tops:\n    @rpath/libged.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    @rpath/libanalyze.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    @rpath/libwdb.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    @rpath/liboptical.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    @executable_path/../lib/libtcl8.6.dylib (compatibility version 8.6.0, current version 8.6.14)\n    @rpath/libdm.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    @rpath/libicv.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    @rpath/libnetpbm.dylib (compatibility version 0.0.0, current version 0.0.0)\n    @rpath/libutahrle.19.dylib (compatibility version 19.0.0, current version 19.0.1)\n    @rpath/librt.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    @rpath/libbrep.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    @rpath/libnmg.dylib (compatibility version 0.0.0, current version 0.0.0)\n    @rpath/libbv.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    @rpath/libbg.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    @rpath/libbn.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    @rpath/libOpenNURBS.dylib (compatibility version 0.0.0, current version 0.0.0)\n    @rpath/libmanifold.2.dylib (compatibility version 2.0.0, current version 2.4.5)\n    @rpath/libassimp.5.dylib (compatibility version 5.0.0, current version 5.4.1)\n    @rpath/libgeogram.1.dylib (compatibility version 1.0.0, current version 1.9.0)\n    @rpath/libpkg.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    @rpath/libbu.20.dylib (compatibility version 20.0.0, current version 20.0.1)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1336.61.1)\n    @rpath/png.framework/Versions/1.6.43/png (compatibility version 0.0.0, current version 0.0.0)\n    @rpath/libz_brl.1.dylib (compatibility version 1.0.0, current version 1.3.1)\n    @rpath/liblmdb.dylib (compatibility version 0.0.0, current version 0.0.0)\n    @rpath/libregex_brl.1.dylib (compatibility version 1.0.0, current version 1.0.4)\nmorrison@Miniagua tests % pwd\n/Volumes/X10/brlcad.RELEASE/.build.release/src/libged/tests\n</code></pre></div>",
        "id": 455840434,
        "sender_full_name": "Sean",
        "timestamp": 1722578903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> investigated the dyld issue a few hours and don't understand why libtcl is being changed/installed with a @executable_path into the lib.  Do you recall why? </p>\n<p>That seems to fundamentally be the issue.  If I replace @executable_path/../lib/libtcl8.6.dylib with @rpath/libtcl8.6.dylib like all the other libs, it works just fine.  I had to replace them in libtcl itself as well as all the libs and apps that link tcl, but presumably they're inheriting from libtcl's original setting.</p>\n<p>I found the section in the patch file where you override it, but wanted to check why before mucking with it.</p>",
        "id": 456036621,
        "sender_full_name": "Sean",
        "timestamp": 1722630253
    },
    {
        "content": "<p>At a guess I probably was using the settings from elsewhere in our build, and didn't properly clue in that I needed to go that route for libtcl</p>",
        "id": 456053022,
        "sender_full_name": "starseeker",
        "timestamp": 1722637674
    },
    {
        "content": "<p>No other library appears to have/do that.. don't see it anywhere else, but maybe I'm missing it.  That's why I was wondering why you have that specific patch being applied to Tcl's build logic, to make it use @executable_path.</p>",
        "id": 456109002,
        "sender_full_name": "Sean",
        "timestamp": 1722664211
    },
    {
        "content": "<p>I don't recall anything specific - most likely an error on my part, would be my guess</p>",
        "id": 456157569,
        "sender_full_name": "starseeker",
        "timestamp": 1722690880
    },
    {
        "content": "<p>I might have an idea about what I was thinking, looking at the Tcl patch.  The first part of the patch, with the logic for CFG_RUNTIME and CFG_INSTALL, depends on Tcl_GetNameOfExecutable having something that will work with the relative paths.</p>",
        "id": 456720201,
        "sender_full_name": "starseeker",
        "timestamp": 1722897203
    },
    {
        "content": "<p>It's basically similar to what happens when _bu_dir_brlcad_root calls  wai_getExecutablePath - except in the Tcl case we don't have the equivalent of a fallback to wai_getModulePath</p>",
        "id": 456720418,
        "sender_full_name": "starseeker",
        "timestamp": 1722897290
    },
    {
        "content": "<p>In a \"normal\" Tcl install those paths are absolute to the install path, so it's not an issue, but that's not an option for a relocatable Tcl install.</p>",
        "id": 456720655,
        "sender_full_name": "starseeker",
        "timestamp": 1722897384
    },
    {
        "content": "<p>That may be why I went ahead and set that DYLIB_INSTALL_DIR the way I did, since there wouldn't be any expectation of things working without a suitable path from Tcl_GetNameOfExecutable</p>",
        "id": 456721000,
        "sender_full_name": "starseeker",
        "timestamp": 1722897520
    },
    {
        "content": "<p>I'll try the @rpath setting anyway and we can see what happens</p>",
        "id": 456726874,
        "sender_full_name": "starseeker",
        "timestamp": 1722900526
    },
    {
        "content": "<p>Pushed to main</p>",
        "id": 456727061,
        "sender_full_name": "starseeker",
        "timestamp": 1722900615
    },
    {
        "content": "<p>At least on a auto debug rebuild, I'm hitting an error that is probably unrelated, but same error I think bill was getting:</p>\n<p>[  6%] Building C object CMakeFiles/itcl3.4.dir/generic/itclStubInit.c.o<br>\n-- stderr output is:</p>\n<p>In file included from /Volumes/X10/brlcad/.build/bext_build/itcl/ITCL_BLD-prefix/src/ITCL_BLD/generic/itclStubInit.c:12:</p>\n<p>/Volumes/X10/brlcad/.build/bext_build/itcl/ITCL_BLD-prefix/src/ITCL_BLD/generic/itclInt.h:50:10: fatal error: 'tclInt.h' file not found</p>\n<p>#include \"tclInt.h\"</p>\n<p>^~~~~~~~~~</p>\n<p>1 error generated.</p>\n<p>make[5]: *** [CMakeFiles/itcl3.4.dir/generic/itclStubInit.c.o] Error 1</p>",
        "id": 456873718,
        "sender_full_name": "Sean",
        "timestamp": 1722955089
    },
    {
        "content": "<p>On a debug BRLCAD_BEXT_DIR build, it gets much much farther, but fails during asc2g:</p>\n<p>[ 62%] Built target asc2g</p>\n<p>[ 62%] <strong>Generating ../share/db/bldg391.g</strong></p>\n<p>[ 62%] Built target bldg391.g</p>\n<p>[ 62%] <strong>Generating ../share/db/m35.g</strong></p>\n<p>[ 62%] Built target m35.g</p>\n<p>[ 62%] <strong>Generating ../share/db/moss.g</strong></p>\n<p>[ 62%] Built target moss.g</p>\n<p>[ 62%] <strong>Generating ../share/db/sphflake.g</strong></p>\n<p>[ 62%] Built target sphflake.g</p>\n<p>[ 62%] <strong>Generating ../share/db/star.g</strong></p>\n<p>[ 62%] Built target star.g</p>\n<p>[ 62%] <strong>Generating ../share/db/world.g</strong></p>\n<p>[ 62%] Built target world.g</p>\n<p>[ 62%] <strong>Generating ../share/db/aet.g</strong></p>\n<p>CMake Error at aet.cmake:36 (message):</p>\n<p>[aet] Failure: 1</p>\n<p>/Volumes/X10/brlcad/.build.debug/bin/asc2g</p>\n<p>/Volumes/X10/brlcad/db/aet.asc;/Volumes/X10/brlcad/.build.debug/share/db/aet.g\"</p>\n<p>Failed to process input file (/Volumes/X10/brlcad/db/aet.asc)!</p>\n<p>unknown command: title</p>",
        "id": 456874039,
        "sender_full_name": "Sean",
        "timestamp": 1722955170
    },
    {
        "content": "<p>release fails also on same asc2g</p>",
        "id": 456874142,
        "sender_full_name": "Sean",
        "timestamp": 1722955199
    },
    {
        "content": "<p>OK.  The latter means Tcl isn't functioning correctly - probably not initializing correctly.  If you try manually running btclsh or bwish I would expect some kind of error report?</p>",
        "id": 456874425,
        "sender_full_name": "starseeker",
        "timestamp": 1722955246
    },
    {
        "content": "<p>The tclInt.h bit is Itcl not finding an internal Tcl header it needs to build</p>",
        "id": 456874546,
        "sender_full_name": "starseeker",
        "timestamp": 1722955268
    },
    {
        "content": "<p>Hold on the latter -- it doesn't look like it applied your rpath change</p>",
        "id": 456874565,
        "sender_full_name": "Sean",
        "timestamp": 1722955271
    },
    {
        "content": "<p>The Itcl CMakeLists.txt file should be telling the Itcl build where to go looking for Tcl private headers - we should be passing in TCL_SOURCE_DIR to the parent ExternalProject_Add for Itcl</p>",
        "id": 456875186,
        "sender_full_name": "starseeker",
        "timestamp": 1722955425
    },
    {
        "content": "<p>-DTCL_SOURCE_DIR=${CMAKE_SOURCE_DIR}/tcl/tcl</p>",
        "id": 456875214,
        "sender_full_name": "starseeker",
        "timestamp": 1722955437
    },
    {
        "content": "<p><em>sigh</em> .. so I must be crazy, but outside of blowing away an entire bext build dir, how \"should\" I be getting libtcl to recompile correctly?</p>",
        "id": 456875274,
        "sender_full_name": "Sean",
        "timestamp": 1722955444
    },
    {
        "content": "<p>If the tcl/tcl submodule isn't populated, that's when I would expect it not to find the header</p>",
        "id": 456875367,
        "sender_full_name": "starseeker",
        "timestamp": 1722955469
    },
    {
        "content": "<p>I clear the build subdirectory for the specific target I'm wanting to reset.  So, if I needed to start over with Tcl, I'd clear the build/tcl subdirectory</p>",
        "id": 456875458,
        "sender_full_name": "starseeker",
        "timestamp": 1722955498
    },
    {
        "content": "<p>CMake should automatically re-run and reset things</p>",
        "id": 456875500,
        "sender_full_name": "starseeker",
        "timestamp": 1722955508
    },
    {
        "content": "<p>just doing a git pull and rebuild is what I'd expect and that didn't work.</p>",
        "id": 456875552,
        "sender_full_name": "Sean",
        "timestamp": 1722955523
    },
    {
        "content": "<p>Once the ExternalProject_Add outputs are populated, an update of the source directory doesn't (in my experience) reliably reset things</p>",
        "id": 456875658,
        "sender_full_name": "starseeker",
        "timestamp": 1722955556
    },
    {
        "content": "<p>so make clean in bext/.build/tcl ?</p>",
        "id": 456875663,
        "sender_full_name": "Sean",
        "timestamp": 1722955556
    },
    {
        "content": "<p>That might do it - I would straight up remove bext/.build/tcl</p>",
        "id": 456875765,
        "sender_full_name": "starseeker",
        "timestamp": 1722955576
    },
    {
        "content": "<p>You can then do make TCL_BLD to just redo the Tcl build and dependencies</p>",
        "id": 456875877,
        "sender_full_name": "starseeker",
        "timestamp": 1722955611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-brlcad/topic/distcheck/near/456875658\">said</a>:</p>\n<blockquote>\n<p>Once the ExternalProject_Add outputs are populated, an update of the source directory doesn't (in my experience) reliably reset things</p>\n</blockquote>\n<p>Is there intuition as to why that's not working?  Is that because of things in our cmake?  What can we do about it barring massive deletions?</p>",
        "id": 456877154,
        "sender_full_name": "Sean",
        "timestamp": 1722955947
    },
    {
        "content": "<p>Because that's going to bite ... every time we git pull on bext, going to have to either blow everything away whenever there's an update (which is going to be crazy dev cycle times) or hope to catch which subdirs update each pull and manually make-clean each of them (make clean in tcl subdir worked btw)</p>",
        "id": 456877648,
        "sender_full_name": "Sean",
        "timestamp": 1722956085
    },
    {
        "content": "<p>I'm not completely sure of the reasons.  I do have the parent build always re-executing the build steps every time  the targets are run, specifically to try to catch such things, but I think that may be only the build step.</p>",
        "id": 456878309,
        "sender_full_name": "starseeker",
        "timestamp": 1722956281
    },
    {
        "content": "<p>I did notice it seems to reliably avoid rework once compile + install is complete</p>",
        "id": 456878502,
        "sender_full_name": "Sean",
        "timestamp": 1722956328
    },
    {
        "content": "<p>I don't know if it will re-execute the configure step reliably - that may be up to the build system itself (the way CMake spots and knows to re-run configure if the build files change.)</p>",
        "id": 456878525,
        "sender_full_name": "starseeker",
        "timestamp": 1722956337
    },
    {
        "content": "<p>So if Tcl isn't smart about that, we may not be getting reconfigures we need after a source update</p>",
        "id": 456878581,
        "sender_full_name": "starseeker",
        "timestamp": 1722956356
    },
    {
        "content": "<p>Here's another error, bext release rebuild (after clearing and rebuilding tcl):</p>\n<p>CMake Error at /Volumes/X10/brlcad.bext/.build.release/qt/Qt6_BLD-prefix/src/Qt6_BLD-stamp/Qt6_BLD-build-Release.cmake:37 (message):</p>\n<p>Command failed: 1</p>\n<p>'/opt/homebrew/Cellar/cmake/3.28.3/bin/cmake' '-DCMAKE_BUILD_TYPE=Release' '-P' '/Volumes/X10/brlcad.bext/.build.release/qt/qt_build.cmake'</p>\n<p>See also</p>\n<p>/Volumes/X10/brlcad.bext/.build.release/qt/Qt6_BLD-prefix/src/Qt6_BLD-stamp/Qt6_BLD-build-*.log<br>\n-- stdout output is:<br>\n-- stderr output is:</p>\n<p>CMake Error at /Volumes/X10/brlcad.bext/.build.release/qt/qt_build.cmake:18 (message):</p>\n<p>Qt build failed: [ 0%] Built target syncqt</p>\n<p>[ 1%] Built target Core_lib_pri</p>\n<p>[ 1%] Built target qmodule_pri</p>\n<p>Error copying directory from</p>\n<p>\"/Volumes/X10/brlcad.bext/.build.release/qt/qt6-build/include/QtCore/.syncqt_staging\"</p>\n<p>to</p>\n<p>\"/Volumes/X10/brlcad.bext/.build.release/qt/qt6-build/lib/QtCore.framework/Versions/A/Headers\".</p>\n<p>make[5]: *** [src/corelib/CMakeFiles/Core_copy_fw_sync_headers] Error 1</p>\n<p>make[4]: *** [src/corelib/CMakeFiles/Core_copy_fw_sync_headers.dir/all]</p>",
        "id": 456878663,
        "sender_full_name": "Sean",
        "timestamp": 1722956378
    },
    {
        "content": "<p>That one is surprising - that appears to be internal to the Qt build itself</p>",
        "id": 456878811,
        "sender_full_name": "starseeker",
        "timestamp": 1722956413
    },
    {
        "content": "<p>That's why I remove the tcl subdirectory in such a case - it reliably reconfigures and rebuilds from scratch</p>",
        "id": 456879051,
        "sender_full_name": "starseeker",
        "timestamp": 1722956467
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>\n\n<p>CMake Warning (dev) at /opt/homebrew/Cellar/cmake/3.28.3/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:438 (message):</p>\n<p>The package name passed to <code>find_package_handle_standard_args</code> (OpenCV)</p>\n<p>does not match the name of the calling package (OPENCV).  This can lead to</p>\n<p>problems in calling code that expects <code>find_package</code> result variables</p>\n<p>(e.g., <code>_FOUND</code>) to follow a certain pattern.</p>\n<p>Call Stack (most recent call first):</p>\n<p>/opt/homebrew/lib/cmake/opencv4/OPENCVConfig.cmake:354 (find_package_handle_standard_args)</p>\n<p>CMakeLists.txt:374 (find_package)</p>\n<p>opencv/CMakeLists.txt:4 (bext_enable)</p>\n<p>This warning is for project developers.  Use -Wno-dev to suppress it.</p>\n<p>CMake Warning (dev) at /opt/homebrew/Cellar/cmake/3.28.3/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:447 (message):</p>\n<p><code>find_package()</code> specify a version range but the module TCL does not</p>\n<p>support this capability.  Only the lower endpoint of the range will be</p>\n<p>used.</p>\n<p>Call Stack (most recent call first):</p>\n<p>CMake/FindTCL.cmake:461 (FIND_PACKAGE_HANDLE_STANDARD_ARGS)</p>\n<p>tcl/CMakeLists.txt:24 (find_package)</p>\n<p>This warning is for project developers.  Use -Wno-dev to suppress it.</p>",
        "id": 456884506,
        "sender_full_name": "Sean",
        "timestamp": 1722957756
    },
    {
        "content": "<p>Looks like the @rpath fix to Tcl is working, at least preliminary build and make check are back to working again without that issue.</p>\n<p>Remaining check failures are:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>The following tests FAILED:\n\n33 - bu_file (Failed)\n374 - bu_color_to_rgb_floats_1 (Failed)\n918 - ged_test_drawing_basic (Failed)\n920 - ged_test_drawing_lod (Failed)\n921 - ged_test_drawing_select (Failed)\n</code></pre></div>",
        "id": 457136706,
        "sender_full_name": "Sean",
        "timestamp": 1723044441
    },
    {
        "content": "<p>fixed bu_file, test had a flawed assumption about defaults</p>",
        "id": 457159568,
        "sender_full_name": "Sean",
        "timestamp": 1723051518
    },
    {
        "content": "<p>fixed bu_color_to_rgb_floats_1</p>",
        "id": 457169610,
        "sender_full_name": "Sean",
        "timestamp": 1723055324
    },
    {
        "content": "<p>(note @rpath is fixed on bext main, not bext RELEASE)</p>",
        "id": 457170169,
        "sender_full_name": "Sean",
        "timestamp": 1723055441
    }
]