[
    {
        "content": "<p>hey<br>\ni tried following the instructions in INSTALL and README</p>",
        "id": 229088555,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615028432
    },
    {
        "content": "<p>but none of it is working</p>",
        "id": 229088564,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615028445
    },
    {
        "content": "<p>hey<br>\nthe instructions in INSTALL is outdated i think</p>",
        "id": 229090082,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615029853
    },
    {
        "content": "<p>Yea, it is. The main reason is probable that rt-cubed (the old rt^3) is more of a collection of ideas, small project, than a project site of its own. I.e., nobody feels responsible to update these files <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>\n<p>Here is the description from the 209th GCi task:</p>\n<blockquote>\n<p>The rt^3 module contains new, experimental features as e.g. a C++ geometry engine interface and Lua bindings.<br>\nThe goal of this task is to compile this module from a source code checkout.<br>\nThis is a prerequisite for all coding tasks in the rt^3 module.</p>\n<p>After compiling and Installing BRL-CAD from latest source code (there is an own task for it which you should have completed before)</p>\n<ul>\n<li>Download the rt^3 source tree (see <a href=\"https://brlcad.org/wiki/SVN\">https://brlcad.org/wiki/SVN</a>)</li>\n<li>Set up the build environment by using the top level CMakeLists.txt file</li>\n<li>Build the <code>coreinterface</code>, <code>printTitle</code>, <code>embeddedlua</code>, and <code>hellobrlcad</code> targets</li>\n<li>Run the <code>printTitle</code> program with a BRL-CAD database of your choice</li>\n<li>Run the <code>hellobrlcad</code> program with a BRL-CAD database of your choice</li>\n</ul>\n</blockquote>\n<p>Now, with rt-cubed and github, of course.</p>",
        "id": 229109319,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615047221
    },
    {
        "content": "<p>oh</p>",
        "id": 229109564,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615047444
    },
    {
        "content": "<p>so it doesnt have all the functionalities of brl-cad?<br>\nand if thats so.....what are the functionalities that are available right now in rt-cubed?</p>",
        "id": 229109572,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615047472
    },
    {
        "content": "<p>It uses the functionality of <em>main</em> BRL-CAD. You have to install it first.</p>",
        "id": 229109669,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615047548
    },
    {
        "content": "<p>thats not what i meant to ask</p>",
        "id": 229109690,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615047583
    },
    {
        "content": "<p>what functionalities from the main installation does it use right now? as it doesnt seem to have all of the features..</p>",
        "id": 229109787,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615047637
    },
    {
        "content": "<p>What do you mean with \"it\". I haven't looked at every project there. My main emphasis is on the C++ API and programs/libraries build on it.</p>\n<p>The C++ API covers well the creation and manipulation of database objects and the ray-trace with different types of databases (non-modifiable file, file, in-memory), but it may miss features necessary for a GUI. <a href=\"https://github.com/BRL-CAD/arbalest\">https://github.com/BRL-CAD/arbalest</a> is a prototype of a new GUI build on top of BRL-CAD's C++ core interface.</p>",
        "id": 229110241,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615048087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> <a href=\"#narrow/stream/104062-general/topic/compiling.20rt-cubed/near/229110241\">said</a>:</p>\n<blockquote>\n<p>What do you mean with \"it\". I haven't looked at every project there. My main emphasis is on the C++ API and programs/libraries build on it.</p>\n<p>The C++ API covers well the creation and manipulation of database objects and the ray-trace with different types of databases (non-modifiable file, file, in-memory), but it may miss features necessary for a GUI. <a href=\"https://github.com/BRL-CAD/arbalest\">https://github.com/BRL-CAD/arbalest</a> is a prototype of a new GUI build on top of BRL-CAD's C++ core interface.</p>\n</blockquote>\n<p>by \"it\", i mean the rt-cubed project</p>",
        "id": 229110274,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615048136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> <a href=\"#narrow/stream/104062-general/topic/compiling.20rt-cubed/near/229110241\">said</a>:</p>\n<blockquote>\n<p>What do you mean with \"it\". I haven't looked at every project there. My main emphasis is on the C++ API and programs/libraries build on it.</p>\n<p>The C++ API covers well the creation and manipulation of database objects and the ray-trace with different types of databases (non-modifiable file, file, in-memory), but it may miss features necessary for a GUI. <a href=\"https://github.com/BRL-CAD/arbalest\">https://github.com/BRL-CAD/arbalest</a> is a prototype of a new GUI build on top of BRL-CAD's C++ core interface.</p>\n</blockquote>\n<p>so all of the things that can be done by code in C is doable with rt-cubed in c++?</p>",
        "id": 229110303,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615048174
    },
    {
        "content": "<p>As I already wrote, rt-cubed is a repository containing a loose collection of projects related to BRL-CAD. Some of them may be sketches only, others can be used in production.</p>",
        "id": 229110458,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615048320
    },
    {
        "content": "<p>ohk<br>\nI was thinking about trying to do bindings with this C++ API as C API hasnt worked that well because of the macros</p>",
        "id": 229110680,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615048468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> <a href=\"#narrow/stream/104062-general/topic/compiling.20rt-cubed/near/229110303\">said</a>:</p>\n<blockquote>\n<p>so all of the things that can be done by code in C is doable with rt-cubed in c++?</p>\n</blockquote>\n<p>Let's say many, not all. The C++ core interface (this is one of the many projects contained in the rt-cubed repository, in src/coreInterface) is a thin layer on BRL-CAD's basic C functions. See include/brlcad for the C++ classes declarations. See tests/coreInterface for some example progams. PrintTitle is a nice one, because it's very basic and short. You may also want to have a look at <a href=\"https://brlcad.org/wiki/BRL-CAD%27s_core_C%2B%2B_interface\">https://brlcad.org/wiki/BRL-CAD%27s_core_C%2B%2B_interface</a></p>",
        "id": 229110847,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615048630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> <a href=\"#narrow/stream/104062-general/topic/compiling.20rt-cubed/near/229110680\">said</a>:</p>\n<blockquote>\n<p>ohk<br>\nI was thinking about trying to do bindings with this C++ API as C API hasnt worked that well because of the macros</p>\n</blockquote>\n<p>Good idea <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 229110858,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615048665
    },
    {
        "content": "<p>i thought of C++ because i found a bindings generator which is up-to-date right now</p>",
        "id": 229110981,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615048774
    },
    {
        "content": "<p>With Visual Studio on Windows, you can use a precompiled library: <a href=\"https://sourceforge.net/projects/brlcad/files/BRL-CAD%20Runtime%20Libraries/7.32.0/\">https://sourceforge.net/projects/brlcad/files/BRL-CAD%20Runtime%20Libraries/7.32.0/</a></p>",
        "id": 229110997,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615048795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> <a href=\"#narrow/stream/104062-general/topic/compiling.20rt-cubed/near/229110981\">said</a>:</p>\n<blockquote>\n<p>i thought of C++ because i found a bindings generator which is up-to-date right now</p>\n</blockquote>\n<p>so if i find a problem, they might be able to help me fix that....</p>",
        "id": 229111013,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615048802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> <a href=\"#narrow/stream/104062-general/topic/compiling.20rt-cubed/near/229110997\">said</a>:</p>\n<blockquote>\n<p>With Visual Studio on Windows, you can use a precompiled library: <a href=\"https://sourceforge.net/projects/brlcad/files/BRL-CAD%20Runtime%20Libraries/7.32.0/\">https://sourceforge.net/projects/brlcad/files/BRL-CAD%20Runtime%20Libraries/7.32.0/</a></p>\n</blockquote>\n<p>i am on linux so dont think i will have to do that right now</p>",
        "id": 229111105,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615048851
    },
    {
        "content": "<p>The version in rt-cubed is kind of concept work. A real product would be more like this: <a href=\"https://github.com/drossberg/MOOSE\">https://github.com/drossberg/MOOSE</a></p>\n<p>The functionality is basically the same, but MOOSE uses more C++11 and builds (and installs) a brlcad library (<a href=\"http://libbrlcad.so\">libbrlcad.so</a>, brlcad.dll, ...) containing all necessary functions. In addition, other bindings could be added there. At the moment, it contains a raw Lua interface.</p>",
        "id": 229111589,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615049245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> <a href=\"#narrow/stream/104062-general/topic/compiling.20rt-cubed/near/229111589\">said</a>:</p>\n<blockquote>\n<p>The version in rt-cubed is kind of concept work. A real product would be more like this: <a href=\"https://github.com/drossberg/MOOSE\">https://github.com/drossberg/MOOSE</a></p>\n<p>The functionality is basically the same, but MOOSE uses more C++11 and builds (and installs) a brlcad library (<a href=\"http://libbrlcad.so\">libbrlcad.so</a>, brlcad.dll, ...) containing all necessary functions. In addition, other bindings could be added there. At the moment, it contains a raw Lua interface.</p>\n</blockquote>\n<p>rt-cubed == MOOSE but much stable and independent of brlcad libraries?</p>",
        "id": 229111738,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615049401
    },
    {
        "content": "<p>MOOSE = rt-cubed/src/coreInterface with slightly improved API (directory structure, C++11, but not more stable) and optimized build (which creates one library containing everything needed).</p>\n<p>Regarding stability: If I find a flow in MOOSE, I'll fix it in rt-cubed too, and vice versa.</p>",
        "id": 229112270,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615049885
    },
    {
        "content": "<p>so MOOSE doesnt need main brlcal installation unlike rt-cubed?</p>",
        "id": 229112342,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615049996
    },
    {
        "content": "<p>It needs it for building. But, if once installed, the main BRL-CAD isn't needed any more.</p>",
        "id": 229112476,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615050057
    },
    {
        "content": "<p>isnt rt-cubed like that or does it require them even when it is installed?</p>",
        "id": 229112567,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615050126
    },
    {
        "content": "<p>The rt-cubed version uses the BRL-CAD libraries from the main installation during runtime too. MOOSE compiles everything in a big binary (e.g. <a href=\"http://libbrlcad.so\">libbrlcad.so</a> on Linux), such that the libraries from the main installation aren't necessary any more.</p>",
        "id": 229112718,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615050285
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 229113484,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615050873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> what macro problem were you referring to?</p>",
        "id": 229118155,
        "sender_full_name": "Sean",
        "timestamp": 1615055118
    },
    {
        "content": "<p>the other binding generators couldnt read the macros defined in <code>vmath.h</code></p>",
        "id": 229118186,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615055151
    },
    {
        "content": "<p>and nobody was there who was updating the repo</p>",
        "id": 229118240,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615055168
    },
    {
        "content": "<p>so that was a problem</p>",
        "id": 229118248,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615055176
    },
    {
        "content": "<p>hm, I missing some context I think ... nobody was updating what repo?</p>",
        "id": 229118266,
        "sender_full_name": "Sean",
        "timestamp": 1615055203
    },
    {
        "content": "<p>and what are you doing with a binding generator, sounds interesting</p>",
        "id": 229118296,
        "sender_full_name": "Sean",
        "timestamp": 1615055229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/compiling.20rt-cubed/near/229118266\">said</a>:</p>\n<blockquote>\n<p>hm, I missing some context I think ... nobody was updating what repo?</p>\n</blockquote>\n<p>sorry for that.....i was talking about the repos of the binding generators.</p>",
        "id": 229118301,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615055238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/compiling.20rt-cubed/near/229118296\">said</a>:</p>\n<blockquote>\n<p>and what are you doing with a binding generator, sounds interesting</p>\n</blockquote>\n<p>I was trying something out....if it works , then thats a good news</p>",
        "id": 229118318,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615055281
    },
    {
        "content": "<p>just a note, much of what's in vmath is just helpers that are macros for performance reasons.  they could be all turned into functions really easily (some already are), probably in an hour or two.</p>",
        "id": 229118518,
        "sender_full_name": "Sean",
        "timestamp": 1615055421
    },
    {
        "content": "<p>you can't bind to a macro, of course, because they don't exist from a compiler's perspective</p>",
        "id": 229118542,
        "sender_full_name": "Sean",
        "timestamp": 1615055446
    },
    {
        "content": "<p>the preprocessor basically inlines them</p>",
        "id": 229118548,
        "sender_full_name": "Sean",
        "timestamp": 1615055456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/compiling.20rt-cubed/near/229118542\">said</a>:</p>\n<blockquote>\n<p>you can't bind to a macro, of course, because they don't exist from a compiler's perspective</p>\n</blockquote>\n<p>that was the problem i guess then</p>",
        "id": 229118554,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615055464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/compiling.20rt-cubed/near/229118518\">said</a>:</p>\n<blockquote>\n<p>just a note, much of what's in vmath is just helpers that are macros for performance reasons.  they could be all turned into functions really easily (some already are), probably in an hour or two.</p>\n</blockquote>\n<p>might have had to do that</p>",
        "id": 229118576,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615055477
    },
    {
        "content": "<p>when you compile a file, one of the first things is the \"cpp\" preprocessor.  it replaces all the #includes and #define and basically processes all the # lines in the code, replacing  them completely so that the compiler is fed something that looks quite different.</p>",
        "id": 229118689,
        "sender_full_name": "Sean",
        "timestamp": 1615055572
    },
    {
        "content": "<p>you can actually see the intermediate states by compiling a file with -E and save that to a file, or by adding --save-temps to gcc to keep the intermediates around (you'll end up with file.c.i files).</p>",
        "id": 229119027,
        "sender_full_name": "Sean",
        "timestamp": 1615055844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/compiling.20rt-cubed/near/229118296\">said</a>:</p>\n<blockquote>\n<p>and what are you doing with a binding generator, sounds interesting</p>\n</blockquote>\n<p>i was using a python binding generator before for the C code</p>",
        "id": 229343316,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615225676
    },
    {
        "content": "<p>but most of the generators were not up to date</p>",
        "id": 229343379,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615225692
    },
    {
        "content": "<p>but recently i found a generator which is up to date, but it was for C++</p>",
        "id": 229343733,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615225861
    },
    {
        "content": "<p>not for C</p>",
        "id": 229343738,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615225864
    },
    {
        "content": "<p>so tried out for rt-cubed</p>",
        "id": 229345329,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615226489
    }
]