[
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  i have done the following things for in-DB support for vol</p>",
        "id": 210052831,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112214
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 210052889,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112239
    },
    {
        "content": "<p>should i submit it as a patch?</p>",
        "id": 210052909,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112250
    },
    {
        "content": "<p>or do something more and then submit it as a patch?</p>",
        "id": 210052935,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112269
    },
    {
        "content": "<p>things i have done till now for in-DB support -<br>\n<a href=\"/user_uploads/1549/8jslmz4_hYOefxg6K2qrTxOX/tasks.txt\">tasks.txt</a></p>",
        "id": 210053065,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112335
    },
    {
        "content": "<p>holy moly!</p>",
        "id": 210053091,
        "sender_full_name": "Sean",
        "timestamp": 1600112355
    },
    {
        "content": "<p>what?</p>",
        "id": 210053110,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112370
    },
    {
        "content": "<p>just that you've been making progress, that's fantastic!</p>",
        "id": 210053191,
        "sender_full_name": "Sean",
        "timestamp": 1600112408
    },
    {
        "content": "<p>did i do something wrong?</p>",
        "id": 210053192,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112409
    },
    {
        "content": "<p>and looks like you're on the right track</p>",
        "id": 210053203,
        "sender_full_name": "Sean",
        "timestamp": 1600112423
    },
    {
        "content": "<p>i wouldn't post it to <a href=\"http://sf.net\">sf.net</a> as a patch until it can be committed</p>",
        "id": 210053247,
        "sender_full_name": "Sean",
        "timestamp": 1600112452
    },
    {
        "content": "<p>ok</p>",
        "id": 210053276,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112468
    },
    {
        "content": "<p>but you can post it here and can see if there's any feedback or issues</p>",
        "id": 210053279,
        "sender_full_name": "Sean",
        "timestamp": 1600112469
    },
    {
        "content": "<p>i am right now building it with target <code>all</code></p>",
        "id": 210053313,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112491
    },
    {
        "content": "<p>since you implemented the prompt for the filename, that will affect the ability to merge it (e.g., if it prompts now and then we post a release, that'd be a problem of course since people would expect if its prompting it must be doing that thing</p>",
        "id": 210053450,
        "sender_full_name": "Sean",
        "timestamp": 1600112559
    },
    {
        "content": "<p>but yeah, this is fantastic</p>",
        "id": 210053471,
        "sender_full_name": "Sean",
        "timestamp": 1600112575
    },
    {
        "content": "<p>thats why i was asking if i should post it or not right now</p>",
        "id": 210053487,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112587
    },
    {
        "content": "<p>yeah, just share it here if you like</p>",
        "id": 210053514,
        "sender_full_name": "Sean",
        "timestamp": 1600112602
    },
    {
        "content": "<p>i saw the release thread</p>",
        "id": 210053526,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112606
    },
    {
        "content": "<p>or if you want to extract the portions that can be committed, you could submit those</p>",
        "id": 210053551,
        "sender_full_name": "Sean",
        "timestamp": 1600112623
    },
    {
        "content": "<p>ok. let the build finish. then i will post it here</p>",
        "id": 210053580,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112641
    },
    {
        "content": "<p>i.e., not the typein.c changes</p>",
        "id": 210053581,
        "sender_full_name": "Sean",
        "timestamp": 1600112642
    },
    {
        "content": "<p>ok</p>",
        "id": 210053631,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112650
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 210053760,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600112727
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/rSp-pZxX5Fg5yDbTihe1dg4q/patch.patch\">patch.patch</a></p>",
        "id": 210055448,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600113563
    },
    {
        "content": "<p>this include most of the changes i did for in-db support</p>",
        "id": 210055571,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600113607
    },
    {
        "content": "<p>except for the typein.c changes</p>",
        "id": 210055596,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600113620
    },
    {
        "content": "<p>this was all i could do in tonight's time</p>",
        "id": 210055735,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600113696
    },
    {
        "content": "<p>/me looks</p>",
        "id": 210055759,
        "sender_full_name": "Sean",
        "timestamp": 1600113711
    },
    {
        "content": "<p>good night</p>",
        "id": 210055867,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600113749
    },
    {
        "content": "<p>okay, see you in your morning ;)</p>",
        "id": 210055891,
        "sender_full_name": "Sean",
        "timestamp": 1600113763
    },
    {
        "content": "<p>tell me if it needs more changes in the other files</p>",
        "id": 210055895,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600113765
    },
    {
        "content": "<p>I just looked through the patch file and it looks spot-on to me.</p>",
        "id": 210056726,
        "sender_full_name": "Sean",
        "timestamp": 1600114217
    },
    {
        "content": "<p>no changes necessary to the ones you made -- it of course depends what you do with those changes, but looks like you're following what ebm is doing.</p>",
        "id": 210056782,
        "sender_full_name": "Sean",
        "timestamp": 1600114264
    },
    {
        "content": "<p>notice that dsp is slightly different (and more simple in some ways) as i t uses vls strings and doesn't have as much type toggling</p>",
        "id": 210056826,
        "sender_full_name": "Sean",
        "timestamp": 1600114289
    },
    {
        "content": "<p>I am going from ebm because I have made one and saw how it works</p>",
        "id": 210058674,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600115283
    },
    {
        "content": "<p>So i want vol to work the same way</p>",
        "id": 210058735,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600115311
    },
    {
        "content": "<p>it's fine, the differences are subtle</p>",
        "id": 210058768,
        "sender_full_name": "Sean",
        "timestamp": 1600115334
    },
    {
        "content": "<p>both dsp and ebm essentially do the same thing.  main difference is little things like ebm stores the object name in a name field that's a char[] whereas dsp stores it in a bu_vls string.</p>",
        "id": 210058985,
        "sender_full_name": "Sean",
        "timestamp": 1600115447
    },
    {
        "content": "<p>Ok</p>",
        "id": 210059014,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600115465
    },
    {
        "content": "<p>so you'll see differences accessing the object name</p>",
        "id": 210059020,
        "sender_full_name": "Sean",
        "timestamp": 1600115472
    },
    {
        "content": "<p>ebm can just use the name string, whereas dsp has to call bu_vls_cstr() or bu_vls_addr() to get the name string.  of course, ebm has to have overflow/buffer checks though, and dsp does not  -- dsp memory is semiautomatically managed.</p>",
        "id": 210059153,
        "sender_full_name": "Sean",
        "timestamp": 1600115542
    },
    {
        "content": "<p>when it comes to accessing the data, you'll want to follow what ebm is doing anyway</p>",
        "id": 210059195,
        "sender_full_name": "Sean",
        "timestamp": 1600115568
    },
    {
        "content": "<p>so it looks like this can be committed.  i haven't tested it to make sure it compiles, but if you can test that,  you could submit it to <a href=\"http://sf.net\">sf.net</a> as your second patch!</p>",
        "id": 210061748,
        "sender_full_name": "Sean",
        "timestamp": 1600116795
    },
    {
        "content": "<p>it will not build actually</p>",
        "id": 210086653,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600139508
    },
    {
        "content": "<p>a change i made in include/rt/geom.h was changing the <code>char file</code> variable to <code>char name</code>.</p>",
        "id": 210086707,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600139576
    },
    {
        "content": "<p>because of which a lot of problems will crop up during build in typein.c</p>",
        "id": 210086715,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600139597
    },
    {
        "content": "<p>i will submit it later to <a href=\"http://sf.net\">sf.net</a> after making some more necessary changes</p>",
        "id": 210086721,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600139609
    },
    {
        "content": "<p>so i tested the 'f' part of the question and it still works</p>",
        "id": 210087125,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600140202
    },
    {
        "content": "<p>only part that is left is the 'o' part</p>",
        "id": 210087132,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600140217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <a href=\"/user_uploads/1549/aXhftg7bhsiGfirpS0_qHRqA/tasks.txt\">tasks.txt</a> <br>\ndone upto this. now the only thing that is left is build it and test it if it works</p>",
        "id": 210096674,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600153727
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 210097885,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600154752
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 210097894,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600154758
    },
    {
        "content": "<p>its building successfully but not working</p>",
        "id": 210097942,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600154774
    },
    {
        "content": "<p>now its printing the following stuff:</p>\n<div class=\"codehilite\"><pre><span></span><code>ERROR: Binary object &#39;dbobj&#39; has invalid data (expected type 4, found 4).\n       Expecting 160000 8-bit unsigned char (nuc) integer data values.\n       Encountered 480000 unsigned 8-bit ints\n\nCouldn&#39;t find the associated file/object dbobj\nERROR: Binary object &#39;dbobj&#39; has invalid data (expected type 4, found 4).\n       Expecting 160000 8-bit unsigned char (nuc) integer data values.\n       Encountered 480000 unsigned 8-bit ints\n\nCouldn&#39;t find the associated file/object dbobj\nERROR: Binary object &#39;dbobj&#39; has invalid data (expected type 4, found 4).\n       Expecting 160000 8-bit unsigned char (nuc) integer data values.\n       Encountered 480000 unsigned 8-bit ints\n\nCouldn&#39;t find the associated file/object dbobj\n</code></pre></div>",
        "id": 210098568,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600155264
    },
    {
        "content": "<p>this is the patch <a href=\"/user_uploads/1549/qIuNrSe46TZK70Tc0VBs7WHG/patch.patch\">patch.patch</a></p>",
        "id": 210098619,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600155309
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Couldn&#39;t find the associated file/object dbobj\n</code></pre></div>\n\n\n<p>i added this line for debugging purposes</p>",
        "id": 210098661,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600155351
    },
    {
        "content": "<p>its now working perfectly</p>",
        "id": 210114195,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600167202
    },
    {
        "content": "<p>but it is not showing up on the graphic window</p>",
        "id": 210114209,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600167222
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/hm-QclcmjC_jKb2vPeqxRpWD/tasks.txt\">tasks.txt</a></p>",
        "id": 210125259,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600174854
    },
    {
        "content": "<p>this is the things i have done in there</p>",
        "id": 210125276,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600174862
    },
    {
        "content": "<p>and this is the patch after fixing the problems <a href=\"/user_uploads/1549/ndXqJyBwD5YNFsC3AlBFRyW2/patch.patch\">patch.patch</a></p>",
        "id": 210129951,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600177014
    },
    {
        "content": "<p>That's great.  Did you post the patch of the bits that were working to <a href=\"http://sf.net\">sf.net</a> without the typein user prompting?</p>",
        "id": 210133990,
        "sender_full_name": "Sean",
        "timestamp": 1600178877
    },
    {
        "content": "<p>actually i implemented it fully</p>",
        "id": 210134079,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600178908
    },
    {
        "content": "<p>except for the visual part which i am trying to fix</p>",
        "id": 210134110,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600178926
    },
    {
        "content": "<p>seriously?  that's awesome!</p>",
        "id": 210134116,
        "sender_full_name": "Sean",
        "timestamp": 1600178931
    },
    {
        "content": "<p>file part is working properly</p>",
        "id": 210134154,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600178946
    },
    {
        "content": "<p>only object part's drawing has to be fixed</p>",
        "id": 210134185,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600178961
    },
    {
        "content": "<p>its also building properly</p>",
        "id": 210134233,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600178985
    },
    {
        "content": "<p>well building is the first and typically easiest step.  lots of ways for something to compile and still be quite wrong. :)</p>",
        "id": 210137770,
        "sender_full_name": "Sean",
        "timestamp": 1600180492
    },
    {
        "content": "<p>so you got the binunif aspect sorted out with the right data types?</p>",
        "id": 210137824,
        "sender_full_name": "Sean",
        "timestamp": 1600180516
    },
    {
        "content": "<p>bw (i.e., 8-bit unsigned char) is the native format for vol slices and it will need to read either multiple bw or one bw with multiple layers (you probably fed the latter in your test?)</p>",
        "id": 210138051,
        "sender_full_name": "Sean",
        "timestamp": 1600180613
    },
    {
        "content": "<p>Yea</p>",
        "id": 210155595,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600188495
    },
    {
        "content": "<p>I fed one bw with multiple layers</p>",
        "id": 210155611,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600188508
    },
    {
        "content": "<p>Should I do something else instead of this?</p>",
        "id": 210156960,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600189046
    },
    {
        "content": "<p>No, I think that's fine <span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span></p>",
        "id": 210161947,
        "sender_full_name": "Sean",
        "timestamp": 1600191243
    },
    {
        "content": "<p>I mean it might be nice if the user didn't have to combine them all, that gcv did it for them, but the internal guts in src/librt/primitives/vol should just be one data object</p>",
        "id": 210162042,
        "sender_full_name": "Sean",
        "timestamp": 1600191295
    },
    {
        "content": "<p>we'll likely change / extend that data object later with a proper \"image\" object instead of a binunif, but that's  future-talk</p>",
        "id": 210162215,
        "sender_full_name": "Sean",
        "timestamp": 1600191370
    },
    {
        "content": "<p>maybe your third set of commits ;)</p>",
        "id": 210162239,
        "sender_full_name": "Sean",
        "timestamp": 1600191381
    },
    {
        "content": "<p>going to submit the patch soon?</p>",
        "id": 210162254,
        "sender_full_name": "Sean",
        "timestamp": 1600191390
    },
    {
        "content": "<p>Yea</p>",
        "id": 210167463,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600193570
    },
    {
        "content": "<p>After fixing the drawing issue</p>",
        "id": 210167481,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600193577
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>static int\nget_obj_data(struct rt_vol_internal *vip, const struct db_i *dbip)\n{\n    struct rt_binunif_internal *bip;\n    int ret;\n    int nbytes;\n\n    BU_ALLOC(vip-&gt;bip, struct rt_db_internal);\n\n    ret = rt_retrieve_binunif(vip-&gt;bip, dbip, vip-&gt;name);\n    if (ret)\n    return -1;\n\n    if (RT_G_DEBUG &amp; RT_DEBUG_HF) {\n    bu_log(&quot;db_internal magic: 0x%08x  major: %d  minor: %d\\n&quot;,\n        vip-&gt;bip-&gt;idb_magic,\n        vip-&gt;bip-&gt;idb_major_type,\n        vip-&gt;bip-&gt;idb_minor_type);\n    }\n\n    bip = (struct rt_binunif_internal *)vip-&gt;bip-&gt;idb_ptr;\n\n    if (RT_G_DEBUG &amp; RT_DEBUG_HF)\n    bu_log(&quot;binunif magic: 0x%08x  type: %d count:%zu data[0]:%u\\n&quot;,\n        bip-&gt;magic, bip-&gt;type, bip-&gt;count, bip-&gt;u.uint8[0]);\n\n    if (bip-&gt;type != DB5_MINORTYPE_BINU_8BITINT_U\n    || (size_t)bip-&gt;count != (size_t)(vip-&gt;xdim*vip-&gt;ydim*vip-&gt;zdim))\n    {\n    size_t i = 0;\n    size_t size;\n  // size_t ret = 0;\n    struct bu_vls binudesc = BU_VLS_INIT_ZERO;\n    rt_binunif_describe(&amp;binudesc, vip-&gt;bip, 0, dbip-&gt;dbi_base2local);\n\n    /* skip the first title line*/\n    size = bu_vls_strlen(&amp;binudesc);\n    while (size &gt; 0 &amp;&amp; i &lt; size &amp;&amp; bu_vls_cstr(&amp;binudesc)[0] != &#39;\\n&#39;) {\n        bu_vls_nibble(&amp;binudesc, 1);\n    }\n    if (bu_vls_cstr(&amp;binudesc)[0] == &#39;\\n&#39;)\n        bu_vls_nibble(&amp;binudesc, 1);\n\n    bu_log(&quot;ERROR: Binary object &#39;%s&#39; has invalid data (expected type %d, found %d).\\n&quot;\n           &quot;       Expecting %zu 8-bit unsigned char (nuc) integer data values.\\n&quot;\n           &quot;       Encountered %s\\n&quot;,\n           vip-&gt;name,\n           DB5_MINORTYPE_BINU_8BITINT_U,\n           bip-&gt;type,\n           (size_t)(vip-&gt;xdim*vip-&gt;ydim*vip-&gt;zdim),\n           bu_vls_cstr(&amp;binudesc));\n    return -2;\n    }\n\n    nbytes = (vip-&gt;xdim+VOL_XWIDEN*2)*(vip-&gt;ydim+VOL_YWIDEN*2)*(vip-&gt;zdim+VOL_ZWIDEN*2);\n\n    if (!vip-&gt;buf) {\n    size_t x, y, z;\n    unsigned char* cp;\n\n    /* Prevent a multi-processor race */\n    bu_semaphore_acquire(RT_SEM_MODEL);\n    if (vip-&gt;buf) {\n        /* someone else beat us, nothing more to do */\n        bu_semaphore_release(RT_SEM_MODEL);\n        return 0;\n    }\n    vip-&gt;buf = (unsigned char *)bu_calloc(1, nbytes, &quot;rt_vol_import4 bitmap&quot;);\n    bu_semaphore_release(RT_SEM_MODEL);\n\n    /* Because of in-memory padding, read each scanline separately */\n    cp = (unsigned char *)bip-&gt;u.uint8;\n  for (z = 0; z &lt; vip-&gt;zdim; z++) {\n       for (x = 0; x &lt; vip-&gt;xdim; x++) {\n          /* bit() addresses into buf */\n           memcpy(vol_bit(vip, x, 0), cp, vip-&gt;ydim*vip-&gt;xdim);\n       }\n     cp += vip-&gt;xdim;\n  }\n    }\n    return 0;\n}\n</code></pre></div>\n\n\n<p>this is the function for taking binary object as a data source for vol</p>",
        "id": 210185741,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600201600
    },
    {
        "content": "<p>can you tell me whats wrong</p>",
        "id": 210185752,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600201608
    },
    {
        "content": "<p>After fixing the drawing issue</p>",
        "id": 210189556,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600203481
    },
    {
        "content": "<p>I don't see anything obvoius</p>",
        "id": 210194530,
        "sender_full_name": "Sean",
        "timestamp": 1600206030
    },
    {
        "content": "<p>oh, looks like the memcpy is wrong in the middle of that loop</p>",
        "id": 210194768,
        "sender_full_name": "Sean",
        "timestamp": 1600206165
    },
    {
        "content": "<p>copying the same cp over and over</p>",
        "id": 210194783,
        "sender_full_name": "Sean",
        "timestamp": 1600206175
    },
    {
        "content": "<p>if it's doing what I think you're intending, you may need to pull the cp += up into the loop</p>",
        "id": 210194849,
        "sender_full_name": "Sean",
        "timestamp": 1600206219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210194849\">said</a>:</p>\n<blockquote>\n<p>if it's doing what I think you're intending, you may need to pull the cp += up into the loop</p>\n</blockquote>\n<p>its in the correct loop?</p>",
        "id": 210217828,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600225798
    },
    {
        "content": "<p>but instead of at the end. it should be at first of the same loop?</p>",
        "id": 210217880,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600225836
    },
    {
        "content": "<p>think about what those loops are doing</p>",
        "id": 210217884,
        "sender_full_name": "Sean",
        "timestamp": 1600225852
    },
    {
        "content": "<p>the inner loop is copying a row of pixels</p>",
        "id": 210217889,
        "sender_full_name": "Sean",
        "timestamp": 1600225868
    },
    {
        "content": "<p>outer one is for each layer, and the inner one is for each pixel</p>",
        "id": 210217898,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600225905
    },
    {
        "content": "<p>i added one more loop for y dimensions but it slowed down the making of the vol very much</p>",
        "id": 210217947,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600225943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210217889\">said</a>:</p>\n<blockquote>\n<p>the inner loop is copying a row of pixels</p>\n</blockquote>\n<p>yea</p>",
        "id": 210217953,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600225951
    },
    {
        "content": "<p>not each pixel, it's each row.. so that loop basically copies one image</p>",
        "id": 210217961,
        "sender_full_name": "Sean",
        "timestamp": 1600225963
    },
    {
        "content": "<p>yea</p>",
        "id": 210217967,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600225980
    },
    {
        "content": "<p>so as it iterates, it's copying the bytes from cp into vip</p>",
        "id": 210217978,
        "sender_full_name": "Sean",
        "timestamp": 1600225999
    },
    {
        "content": "<p>yea</p>",
        "id": 210218031,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226055
    },
    {
        "content": "<p>well it's copying the same cp every iteration of the loop, and the loop is only incrementing x, which is the index into vip's array (via vol_bit())</p>",
        "id": 210218128,
        "sender_full_name": "Sean",
        "timestamp": 1600226189
    },
    {
        "content": "<p>but not incrementing cp because it's outside the loop</p>",
        "id": 210218136,
        "sender_full_name": "Sean",
        "timestamp": 1600226207
    },
    {
        "content": "<p>bring it in, and it should be copying the bytes correctly.</p>",
        "id": 210218155,
        "sender_full_name": "Sean",
        "timestamp": 1600226250
    },
    {
        "content": "<p>i think something else be added to cp</p>",
        "id": 210218157,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226263
    },
    {
        "content": "<p>i just dont know what should be added</p>",
        "id": 210218164,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226276
    },
    {
        "content": "<p>huh?</p>",
        "id": 210218206,
        "sender_full_name": "Sean",
        "timestamp": 1600226285
    },
    {
        "content": "<p>what else?  you loop is right there...</p>",
        "id": 210218212,
        "sender_full_name": "Sean",
        "timestamp": 1600226296
    },
    {
        "content": "<p>zdim is actually adding 3 each time</p>",
        "id": 210218240,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226340
    },
    {
        "content": "<p>there's only one line of code in the loop and the for condition that could possibly increment it</p>",
        "id": 210218241,
        "sender_full_name": "Sean",
        "timestamp": 1600226342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210218240\">said</a>:</p>\n<blockquote>\n<p>zdim is actually adding 3 each time</p>\n</blockquote>\n<p>and is that correct?</p>",
        "id": 210218325,
        "sender_full_name": "Sean",
        "timestamp": 1600226421
    },
    {
        "content": "<p>i dont think it is correct</p>",
        "id": 210218332,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226434
    },
    {
        "content": "<p>the inner loop is copying one layer i.e., one image out of the combined bw</p>",
        "id": 210218375,
        "sender_full_name": "Sean",
        "timestamp": 1600226513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210218325\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210218240\">said</a>:</p>\n<blockquote>\n<p>zdim is actually adding 3 each time</p>\n</blockquote>\n<p>and is that correct?</p>\n</blockquote>\n<p>zdim is actually adding 3 for me because i am using the same picture to test it</p>",
        "id": 210218417,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226535
    },
    {
        "content": "<p>adding 3 to what though</p>",
        "id": 210218433,
        "sender_full_name": "Sean",
        "timestamp": 1600226562
    },
    {
        "content": "<p>cp</p>",
        "id": 210218439,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226570
    },
    {
        "content": "<p>and why would you have it do that?</p>",
        "id": 210218447,
        "sender_full_name": "Sean",
        "timestamp": 1600226582
    },
    {
        "content": "<p>i dont know actually. i just was thinking about changing it but forgot</p>",
        "id": 210218455,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226611
    },
    {
        "content": "<p>let me test</p>",
        "id": 210218456,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226616
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>memcpy(vol_bit(vip, x, 0), cp, vip-&gt;ydim*vip-&gt;xdim);\n</code></pre></div>\n\n\n<p><code>vip-&gt;ydim*vip-&gt;xdim</code> this is correct for the number of bytes right?</p>",
        "id": 210218507,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226665
    },
    {
        "content": "<p>is it?</p>",
        "id": 210218521,
        "sender_full_name": "Sean",
        "timestamp": 1600226702
    },
    {
        "content": "<p>what is xdim?</p>",
        "id": 210218527,
        "sender_full_name": "Sean",
        "timestamp": 1600226708
    },
    {
        "content": "<p>the x dimensions of the file i.e. the width of the image</p>",
        "id": 210218536,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226738
    },
    {
        "content": "<p>and ydim?</p>",
        "id": 210218598,
        "sender_full_name": "Sean",
        "timestamp": 1600226837
    },
    {
        "content": "<p>\"dimensions of the file\" &lt;-- technically incorrect</p>",
        "id": 210218609,
        "sender_full_name": "Sean",
        "timestamp": 1600226856
    },
    {
        "content": "<p>y dimensions of the file i.e. the height of the image</p>",
        "id": 210218612,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226865
    },
    {
        "content": "<p>also technically incorrect</p>",
        "id": 210218620,
        "sender_full_name": "Sean",
        "timestamp": 1600226876
    },
    {
        "content": "<p>not file</p>",
        "id": 210218672,
        "sender_full_name": "Sean",
        "timestamp": 1600226902
    },
    {
        "content": "<p>i meant the image file</p>",
        "id": 210218678,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226913
    },
    {
        "content": "<p>what is the input?</p>",
        "id": 210218689,
        "sender_full_name": "Sean",
        "timestamp": 1600226936
    },
    {
        "content": "<p>input to the binary object or input to the vol?</p>",
        "id": 210218710,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600226989
    },
    {
        "content": "<p>they are one in the same, no?</p>",
        "id": 210218760,
        "sender_full_name": "Sean",
        "timestamp": 1600227008
    },
    {
        "content": "<p>actually yea</p>",
        "id": 210218774,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600227031
    },
    {
        "content": "<p>the bw file of an image is inputted to the binary object and the binary object is inputted to the vol</p>",
        "id": 210218799,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600227070
    },
    {
        "content": "<p>right</p>",
        "id": 210218807,
        "sender_full_name": "Sean",
        "timestamp": 1600227080
    },
    {
        "content": "<p>so think of the bw file as a big array of bytes, because it is that</p>",
        "id": 210218886,
        "sender_full_name": "Sean",
        "timestamp": 1600227178
    },
    {
        "content": "<p>how many bytes is it?</p>",
        "id": 210218890,
        "sender_full_name": "Sean",
        "timestamp": 1600227183
    },
    {
        "content": "<p>400 * 400 *3(for me)</p>",
        "id": 210218899,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600227199
    },
    {
        "content": "<p>x dimension * y dimensions *z dimensions</p>",
        "id": 210218911,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600227219
    },
    {
        "content": "<p>which is how many bytes?</p>",
        "id": 210218925,
        "sender_full_name": "Sean",
        "timestamp": 1600227242
    },
    {
        "content": "<p>480000</p>",
        "id": 210218995,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600227320
    },
    {
        "content": "<p>great</p>",
        "id": 210218998,
        "sender_full_name": "Sean",
        "timestamp": 1600227326
    },
    {
        "content": "<p>so at the end of the day, this function you've written -- this get_obj_data() function -- is making a copy of the data putting it into its vip structure</p>",
        "id": 210219177,
        "sender_full_name": "Sean",
        "timestamp": 1600227552
    },
    {
        "content": "<p>it should do that</p>",
        "id": 210219190,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600227582
    },
    {
        "content": "<p>so you sort of copied what you saw ebm was doing , right?</p>",
        "id": 210219199,
        "sender_full_name": "Sean",
        "timestamp": 1600227601
    },
    {
        "content": "<p>but the code i have written is not doing that correctly</p>",
        "id": 210219241,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600227610
    },
    {
        "content": "<p>it's not, but it's important to understand what you're trying to do first</p>",
        "id": 210219248,
        "sender_full_name": "Sean",
        "timestamp": 1600227629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210219199\">said</a>:</p>\n<blockquote>\n<p>so you sort of copied what you saw ebm was doing , right?</p>\n</blockquote>\n<p>somewhat. i also saw how the vol is being made from a file in <code>vol_from_file()</code> function</p>",
        "id": 210219267,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600227671
    },
    {
        "content": "<p>ah, excellent</p>",
        "id": 210219275,
        "sender_full_name": "Sean",
        "timestamp": 1600227691
    },
    {
        "content": "<p>but as it is reading a file directly, i cant follow it much</p>",
        "id": 210219342,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600227774
    },
    {
        "content": "<p>okay, no problem.  I don't think you need to.</p>",
        "id": 210219351,
        "sender_full_name": "Sean",
        "timestamp": 1600227791
    },
    {
        "content": "<p>so the first question you should be asking is why are we even making a copy of the data at all given we could just access the data directly in (unsigned char *)bip-&gt;u.uint8;</p>",
        "id": 210219367,
        "sender_full_name": "Sean",
        "timestamp": 1600227836
    },
    {
        "content": "<p>that also can be done.</p>",
        "id": 210219413,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600227865
    },
    {
        "content": "<p>then extra memory wont be used</p>",
        "id": 210219417,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600227885
    },
    {
        "content": "<p>but that's a question for another day -- we see that ebm and dsp are making copies, so just for sake of argument lets  assume there's some reason why</p>",
        "id": 210219418,
        "sender_full_name": "Sean",
        "timestamp": 1600227887
    },
    {
        "content": "<p>so assuming we need to copy the data out of bip-&gt;u.uint8, where are we copying it into?</p>",
        "id": 210219433,
        "sender_full_name": "Sean",
        "timestamp": 1600227913
    },
    {
        "content": "<p>from cp to vip?</p>",
        "id": 210219495,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600227969
    },
    {
        "content": "<p>don't abstract it, what's the actual  to and from arrays or pointers?</p>",
        "id": 210219507,
        "sender_full_name": "Sean",
        "timestamp": 1600227991
    },
    {
        "content": "<p>cp is a pointer to the actual \"from\" array</p>",
        "id": 210219520,
        "sender_full_name": "Sean",
        "timestamp": 1600228021
    },
    {
        "content": "<p>from a void pointer to another void pointer?</p>",
        "id": 210219546,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600228066
    },
    {
        "content": "<p>no, those are types -- i mean what is the actual container, the actual array of bytes?</p>",
        "id": 210219589,
        "sender_full_name": "Sean",
        "timestamp": 1600228101
    },
    {
        "content": "<p>the \"from\" container is what cp is pointing at -- the \"from\" is bip-&gt;u.uint8</p>",
        "id": 210219597,
        "sender_full_name": "Sean",
        "timestamp": 1600228131
    },
    {
        "content": "<p>where are we copying \"to\" ?</p>",
        "id": 210219606,
        "sender_full_name": "Sean",
        "timestamp": 1600228147
    },
    {
        "content": "<p>the \"to\" pointer is pointing to vip-&gt;buf</p>",
        "id": 210219622,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600228189
    },
    {
        "content": "<p>excellent</p>",
        "id": 210219627,
        "sender_full_name": "Sean",
        "timestamp": 1600228199
    },
    {
        "content": "<p>how much are we copying?</p>",
        "id": 210219668,
        "sender_full_name": "Sean",
        "timestamp": 1600228208
    },
    {
        "content": "<p>i changed it right now so its copying vip-&gt;xdim number of bytes(or 400 for me)</p>",
        "id": 210219699,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600228276
    },
    {
        "content": "<p>yes, to copy by line, that is one fix</p>",
        "id": 210219750,
        "sender_full_name": "Sean",
        "timestamp": 1600228332
    },
    {
        "content": "<p>its in the inner loop btw-&gt; <code>for (y = 0; y &lt; vip-&gt;ydim; y++)</code></p>",
        "id": 210219780,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600228402
    },
    {
        "content": "<p>yep</p>",
        "id": 210219790,
        "sender_full_name": "Sean",
        "timestamp": 1600228426
    },
    {
        "content": "<p>but if you continue with the question, you'll see this all probably simplifies greatly</p>",
        "id": 210219833,
        "sender_full_name": "Sean",
        "timestamp": 1600228444
    },
    {
        "content": "<p>how many bytes need to get copied from bip's array into vip's array?</p>",
        "id": 210219845,
        "sender_full_name": "Sean",
        "timestamp": 1600228485
    },
    {
        "content": "<p>overall or each time?</p>",
        "id": 210219854,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600228511
    },
    {
        "content": "<p>overall</p>",
        "id": 210219858,
        "sender_full_name": "Sean",
        "timestamp": 1600228519
    },
    {
        "content": "<p>ie.., what's this functions ultimate job</p>",
        "id": 210219864,
        "sender_full_name": "Sean",
        "timestamp": 1600228527
    },
    {
        "content": "<p>for me its probably about 480000 bytes</p>",
        "id": 210219917,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600228582
    },
    {
        "content": "<p>why \"about 480000\" ?</p>",
        "id": 210219924,
        "sender_full_name": "Sean",
        "timestamp": 1600228601
    },
    {
        "content": "<p>oh sorry it is 480000 bytes</p>",
        "id": 210219937,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600228634
    },
    {
        "content": "<p>better</p>",
        "id": 210219940,
        "sender_full_name": "Sean",
        "timestamp": 1600228644
    },
    {
        "content": "<p>so why not just do that?</p>",
        "id": 210219946,
        "sender_full_name": "Sean",
        "timestamp": 1600228658
    },
    {
        "content": "<p>copy in whole?</p>",
        "id": 210219950,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600228673
    },
    {
        "content": "<p>and not iterate?</p>",
        "id": 210219952,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600228679
    },
    {
        "content": "<p>memcpy() from bip's array to vip's array, that many bytes</p>",
        "id": 210219988,
        "sender_full_name": "Sean",
        "timestamp": 1600228684
    },
    {
        "content": "<p>one line of code</p>",
        "id": 210219997,
        "sender_full_name": "Sean",
        "timestamp": 1600228714
    },
    {
        "content": "<p>no iterations?</p>",
        "id": 210220016,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600228750
    },
    {
        "content": "<p>it's worth trying</p>",
        "id": 210220023,
        "sender_full_name": "Sean",
        "timestamp": 1600228776
    },
    {
        "content": "<p>wait a minute then</p>",
        "id": 210220164,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600229018
    },
    {
        "content": "<p>its building</p>",
        "id": 210220165,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600229023
    },
    {
        "content": "<p>there's a comment making some claim about alignment, but I think that was someone copying code from somewhere else without fully understanding the code they were copying.  </p>\n<p>and it got used again in some place (probably dsp) and again in another (ebm) and you've copied it again .. but the underlying premise that it needs to be iterated doesn't look valid to me because bip is just a big array.<br>\narrays can be copied to arrays without iteration.</p>",
        "id": 210220208,
        "sender_full_name": "Sean",
        "timestamp": 1600229047
    },
    {
        "content": "<p>actually yea</p>",
        "id": 210220211,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600229084
    },
    {
        "content": "<p>i copied but i also doubted why the array was being copied while  iterating</p>",
        "id": 210220239,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600229153
    },
    {
        "content": "<p>there's nothing wrong with iterating</p>",
        "id": 210220288,
        "sender_full_name": "Sean",
        "timestamp": 1600229181
    },
    {
        "content": "<p>other than it's just unnecessary ;)</p>",
        "id": 210220291,
        "sender_full_name": "Sean",
        "timestamp": 1600229191
    },
    {
        "content": "<p>let memcpy iterate</p>",
        "id": 210220296,
        "sender_full_name": "Sean",
        "timestamp": 1600229198
    },
    {
        "content": "<p>yea but it got messy</p>",
        "id": 210220302,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600229212
    },
    {
        "content": "<p>is this correct -&gt; <code>memcpy(vip-&gt;buf, cp, vip-&gt;xdim*vip-&gt;ydim*vip-&gt;zdim);</code>?</p>",
        "id": 210220545,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600229641
    },
    {
        "content": "<p>looks like about what I had in mind</p>",
        "id": 210220746,
        "sender_full_name": "Sean",
        "timestamp": 1600229935
    },
    {
        "content": "<p>nothing appears in the graphic window</p>",
        "id": 210220759,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600229972
    },
    {
        "content": "<p>still</p>",
        "id": 210220760,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600229975
    },
    {
        "content": "<p>well that's not to say there aren't other issues</p>",
        "id": 210220766,
        "sender_full_name": "Sean",
        "timestamp": 1600229995
    },
    {
        "content": "<p>thats the main issue right now</p>",
        "id": 210220812,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600230016
    },
    {
        "content": "<p>well that's a big assumption :)</p>",
        "id": 210220821,
        "sender_full_name": "Sean",
        "timestamp": 1600230059
    },
    {
        "content": "<p>it's the issue you can see is an issue (or can't see rather, hah)</p>",
        "id": 210220829,
        "sender_full_name": "Sean",
        "timestamp": 1600230089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210220821\">said</a>:</p>\n<blockquote>\n<p>well that's a big assumption <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>yea</p>",
        "id": 210220830,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600230090
    },
    {
        "content": "<p>everything is going correctly but its still not showing up</p>",
        "id": 210220912,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600230222
    },
    {
        "content": "<p>okay, so first there are at least two issues.  even if our memcpy is no good for some reason, it should at last just be messing up cell values, not affecting what is displayed</p>",
        "id": 210220916,
        "sender_full_name": "Sean",
        "timestamp": 1600230234
    },
    {
        "content": "<p>when you draw something, that ends up calling into the *_plot() function</p>",
        "id": 210220970,
        "sender_full_name": "Sean",
        "timestamp": 1600230274
    },
    {
        "content": "<p>ooh</p>",
        "id": 210220979,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600230288
    },
    {
        "content": "<p>so maybe start debugging from there</p>",
        "id": 210220980,
        "sender_full_name": "Sean",
        "timestamp": 1600230289
    },
    {
        "content": "<p>uh oh, and we do have at least another problem I think</p>",
        "id": 210221035,
        "sender_full_name": "Sean",
        "timestamp": 1600230384
    },
    {
        "content": "<p>just reading the file, I see this comment:</p>",
        "id": 210221039,
        "sender_full_name": "Sean",
        "timestamp": 1600230403
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>/*\n * Regular bit addressing is used:  (0..W-1, 0..N-1),\n * but the bitmap is stored with two cells of zeros all around,\n * so permissible subscripts run (-2..W+1, -2..N+1).\n * This eliminates special-case code for the boundary conditions.\n */\n</code></pre></div>",
        "id": 210221043,
        "sender_full_name": "Sean",
        "timestamp": 1600230408
    },
    {
        "content": "<p>which file?</p>",
        "id": 210221050,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600230424
    },
    {
        "content": "<p>that's in vol.c</p>",
        "id": 210221055,
        "sender_full_name": "Sean",
        "timestamp": 1600230437
    },
    {
        "content": "<p>thats why it seems familiar</p>",
        "id": 210221063,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600230455
    },
    {
        "content": "<p>i saw this but didnt think it was going to matter</p>",
        "id": 210221109,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600230487
    },
    {
        "content": "<p>if it's a true statement, that changes everything</p>",
        "id": 210221126,
        "sender_full_name": "Sean",
        "timestamp": 1600230520
    },
    {
        "content": "<p>why?</p>",
        "id": 210221130,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600230538
    },
    {
        "content": "<p>think about it... a vol is a stack of bitmap images.. if every image is being wrapped in zeros, that completely changes the bytes and copying patterns needed</p>",
        "id": 210221148,
        "sender_full_name": "Sean",
        "timestamp": 1600230584
    },
    {
        "content": "<p>so consider an example:</p>",
        "id": 210221155,
        "sender_full_name": "Sean",
        "timestamp": 1600230593
    },
    {
        "content": "<p>say our vol is a 2x2x3:</p>\n<div class=\"codehilite\"><pre><span></span><code>01\n23\n\n45\n67\n\n89\n01\n</code></pre></div>",
        "id": 210221213,
        "sender_full_name": "Sean",
        "timestamp": 1600230671
    },
    {
        "content": "<p>three little 2x2 images</p>",
        "id": 210221218,
        "sender_full_name": "Sean",
        "timestamp": 1600230685
    },
    {
        "content": "<p>those byte values in a bw file would be: \"012345678901\"</p>",
        "id": 210221224,
        "sender_full_name": "Sean",
        "timestamp": 1600230703
    },
    {
        "content": "<p>no newlines</p>",
        "id": 210221286,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600230801
    },
    {
        "content": "<p>at least, if we consider these byte indices as array indicies, that's what it'd look like.  bw files are actually bottom to top, so it'd actually be \"230167450189\"</p>",
        "id": 210221287,
        "sender_full_name": "Sean",
        "timestamp": 1600230802
    },
    {
        "content": "<p>newlines??</p>",
        "id": 210221290,
        "sender_full_name": "Sean",
        "timestamp": 1600230805
    },
    {
        "content": "<p>what newlines???</p>",
        "id": 210221293,
        "sender_full_name": "Sean",
        "timestamp": 1600230810
    },
    {
        "content": "<p>i mean its not taking them as individual lines</p>",
        "id": 210221339,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600230853
    },
    {
        "content": "<p>its taking the file as a whole</p>",
        "id": 210221344,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600230867
    },
    {
        "content": "<p>I think you're completely missing what I'm talking about if you're thinking about newlines :)</p>",
        "id": 210221351,
        "sender_full_name": "Sean",
        "timestamp": 1600230889
    },
    {
        "content": "<p>we're talking about vol data, bw data</p>",
        "id": 210221354,
        "sender_full_name": "Sean",
        "timestamp": 1600230898
    },
    {
        "content": "<p>they are unsigned 8-bit bytes</p>",
        "id": 210221356,
        "sender_full_name": "Sean",
        "timestamp": 1600230902
    },
    {
        "content": "<p>binary data</p>",
        "id": 210221363,
        "sender_full_name": "Sean",
        "timestamp": 1600230907
    },
    {
        "content": "<p>raw 0-255 values</p>",
        "id": 210221366,
        "sender_full_name": "Sean",
        "timestamp": 1600230913
    },
    {
        "content": "<p>that was a random thought. sorry for confusing.</p>",
        "id": 210221370,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600230925
    },
    {
        "content": "<p>what I \"drew\" was simply a visual depiction of bw values to help understand the ordering and quantity of bytes</p>",
        "id": 210221374,
        "sender_full_name": "Sean",
        "timestamp": 1600230952
    },
    {
        "content": "<p>so say you have a 2x2 bw image</p>",
        "id": 210221377,
        "sender_full_name": "Sean",
        "timestamp": 1600230961
    },
    {
        "content": "<p>it's looks sort of like this from an indexing perspective:</p>\n<div class=\"codehilite\"><pre><span></span><code>01\n23\n</code></pre></div>",
        "id": 210221420,
        "sender_full_name": "Sean",
        "timestamp": 1600230996
    },
    {
        "content": "<p>let say those numbers are the actual image values, just for simplicity</p>",
        "id": 210221452,
        "sender_full_name": "Sean",
        "timestamp": 1600231048
    },
    {
        "content": "<p>so on disk and in memory, the bytes will be \"2301\"</p>",
        "id": 210221456,
        "sender_full_name": "Sean",
        "timestamp": 1600231066
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 210221459,
        "sender_full_name": "Sean",
        "timestamp": 1600231077
    },
    {
        "content": "<p>yea</p>",
        "id": 210221500,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231099
    },
    {
        "content": "<p>I can literally put that into code:  unsigned char my_bw_image[4] = {2, 3, 0, 1};   ... that's a bw file in code</p>",
        "id": 210221507,
        "sender_full_name": "Sean",
        "timestamp": 1600231134
    },
    {
        "content": "<p>so say I have two more bw images like I showed above also.  and we join them into one .bw data file using copy or cat or whatever</p>",
        "id": 210221544,
        "sender_full_name": "Sean",
        "timestamp": 1600231203
    },
    {
        "content": "<p>the bytes are simply \"230167450189\" for those three layers.  understand that?</p>",
        "id": 210221575,
        "sender_full_name": "Sean",
        "timestamp": 1600231247
    },
    {
        "content": "<p>yea</p>",
        "id": 210221580,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231259
    },
    {
        "content": "<p>so then if I read that bw data into a binunif array called bip, what's the value of bip.u.uint8[6] ?</p>",
        "id": 210221635,
        "sender_full_name": "Sean",
        "timestamp": 1600231343
    },
    {
        "content": "<p>4?</p>",
        "id": 210221649,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231374
    },
    {
        "content": "<p>good</p>",
        "id": 210221650,
        "sender_full_name": "Sean",
        "timestamp": 1600231379
    },
    {
        "content": "<p>yes</p>",
        "id": 210221651,
        "sender_full_name": "Sean",
        "timestamp": 1600231381
    },
    {
        "content": "<p>okay, so now here's the stinker</p>",
        "id": 210221658,
        "sender_full_name": "Sean",
        "timestamp": 1600231394
    },
    {
        "content": "<p>that comment is saying that while the bip might be \"230167450189\" ... it's going to pad each of the images with zeros</p>",
        "id": 210221667,
        "sender_full_name": "Sean",
        "timestamp": 1600231437
    },
    {
        "content": "<p>like \"023010....\"</p>",
        "id": 210221711,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231460
    },
    {
        "content": "<p>so instead of \"2301\" for the first layer, those bytes will be...</p>\n<div class=\"codehilite\"><pre><span></span><code>000000\n000000\n000100\n002300\n000000\n000000\n</code></pre></div>",
        "id": 210221721,
        "sender_full_name": "Sean",
        "timestamp": 1600231492
    },
    {
        "content": "<p>oooh</p>",
        "id": 210221726,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231504
    },
    {
        "content": "<p>well, I'm assuming it's padding vertically, it may only pad horizontally like:</p>\n<div class=\"codehilite\"><pre><span></span><code>000100\n002300\n</code></pre></div>",
        "id": 210221733,
        "sender_full_name": "Sean",
        "timestamp": 1600231525
    },
    {
        "content": "<p>either way.. that changes the layer data in the vol to probably being \"000000000000002300000100000000000000\" for the first layer and so on for the other two</p>",
        "id": 210221778,
        "sender_full_name": "Sean",
        "timestamp": 1600231579
    },
    {
        "content": "<p>so what should be done?</p>",
        "id": 210221783,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231605
    },
    {
        "content": "<p>well we have to confirm what is going on in the file read function like how you'd started and understand what it's doing (especially now that we know there may be padding being added).   just keep in mind that the comment could also be totally wrong or misleading and there may be no padding, but it totally changes things if there is so we have to look and find out.</p>",
        "id": 210221840,
        "sender_full_name": "Sean",
        "timestamp": 1600231686
    },
    {
        "content": "<p>yea</p>",
        "id": 210221847,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231707
    },
    {
        "content": "<p>we know where the data is ending up, vip-&gt;buf</p>",
        "id": 210221848,
        "sender_full_name": "Sean",
        "timestamp": 1600231709
    },
    {
        "content": "<p>so just have to look at anything being passed vip or a pointer to vip</p>",
        "id": 210221859,
        "sender_full_name": "Sean",
        "timestamp": 1600231732
    },
    {
        "content": "<p>yea but i saw there was already an unsigned char ** in vip called map</p>",
        "id": 210221865,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231754
    },
    {
        "content": "<p>where the data was being stored for file</p>",
        "id": 210221872,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231771
    },
    {
        "content": "<p>so why'd you say vip-&gt;buf then? :)</p>",
        "id": 210221930,
        "sender_full_name": "Sean",
        "timestamp": 1600231838
    },
    {
        "content": "<p>i saw that right now</p>",
        "id": 210221934,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231850
    },
    {
        "content": "<p>there is no vip-&gt;buf</p>",
        "id": 210221936,
        "sender_full_name": "Sean",
        "timestamp": 1600231854
    },
    {
        "content": "<p>there is one</p>",
        "id": 210221938,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231862
    },
    {
        "content": "<p>there's not in my code</p>",
        "id": 210221954,
        "sender_full_name": "Sean",
        "timestamp": 1600231902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210221865\">said</a>:</p>\n<blockquote>\n<p>yea but i saw there was already an unsigned char ** in vip called map</p>\n</blockquote>\n<p>i am just saying can i store in this one?</p>",
        "id": 210221957,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231918
    },
    {
        "content": "<p>saying or asking? :)</p>",
        "id": 210222016,
        "sender_full_name": "Sean",
        "timestamp": 1600231976
    },
    {
        "content": "<p>asking</p>",
        "id": 210222022,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600231993
    },
    {
        "content": "<p>you are making these decisions</p>",
        "id": 210222023,
        "sender_full_name": "Sean",
        "timestamp": 1600231994
    },
    {
        "content": "<p>with these changes.</p>",
        "id": 210222026,
        "sender_full_name": "Sean",
        "timestamp": 1600231999
    },
    {
        "content": "<p>we know we need to copy the bw data into the vol, at least that was an assumption we decided</p>",
        "id": 210222083,
        "sender_full_name": "Sean",
        "timestamp": 1600232055
    },
    {
        "content": "<p>so yeah, if the file reader is storing all the bw data into vip-&gt;map, then I'm not sure why we'd possibly want to store into anything else</p>",
        "id": 210222116,
        "sender_full_name": "Sean",
        "timestamp": 1600232124
    },
    {
        "content": "<p>if you did store into something else, that would explain why nothing plots.  i mean if you added a vip-&gt;buf and there's a vip-&gt;map and the vol_plot() function is looking at vip-&gt;map and you copied into vip-&gt;buf... of course it's not going to find it.</p>",
        "id": 210222182,
        "sender_full_name": "Sean",
        "timestamp": 1600232211
    },
    {
        "content": "<p>that was my fault</p>",
        "id": 210222210,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600232257
    },
    {
        "content": "<p>so yeah, store into vip-&gt;map using a method similar if not identical to vol_from_file, but instead of fread() to copy bytes from file to memory, it'll be memcpy() to copy bytes from binunif to memory</p>",
        "id": 210222267,
        "sender_full_name": "Sean",
        "timestamp": 1600232327
    },
    {
        "content": "<p>right</p>",
        "id": 210222276,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600232352
    },
    {
        "content": "<p>use the same macros because they're the ones responsible for padding</p>",
        "id": 210222282,
        "sender_full_name": "Sean",
        "timestamp": 1600232365
    },
    {
        "content": "<p>yeah, here's the key:</p>\n<div class=\"codehilite\"><pre><span></span><code>    /* Get bit map from .bw(5) file */\n    nbytes = (xdim+VOL_XWIDEN*2)*\n        (ydim+VOL_YWIDEN*2)*\n        (zdim+VOL_ZWIDEN*2);\n    *map = (unsigned char *)bu_calloc(1, nbytes, &quot;vol_import4 bitmap&quot;);\n</code></pre></div>",
        "id": 210222370,
        "sender_full_name": "Sean",
        "timestamp": 1600232420
    },
    {
        "content": "<p>see nbytes?  that's not xdim * ydim * zdim...</p>",
        "id": 210222379,
        "sender_full_name": "Sean",
        "timestamp": 1600232434
    },
    {
        "content": "<p>i have the nbytes set up</p>",
        "id": 210222386,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600232457
    },
    {
        "content": "<p>but do you understand now what that's doing?</p>",
        "id": 210222392,
        "sender_full_name": "Sean",
        "timestamp": 1600232471
    },
    {
        "content": "<p>now i understand what the macros were for</p>",
        "id": 210222400,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600232500
    },
    {
        "content": "<p>vol_from_file() allocated an array (zero-initialized via calloc) with (xdim+4) * (ydim+4) * (zdim+4)</p>",
        "id": 210222453,
        "sender_full_name": "Sean",
        "timestamp": 1600232533
    },
    {
        "content": "<p>the macros are making it skip into the array at the right position given it copied</p>\n<div class=\"codehilite\"><pre><span></span><code>01\n23\n</code></pre></div>\n\n\n<p>into memory that looks like \"000000000000002300000100000000000000\", so the macros help jump index correctly into it</p>",
        "id": 210222535,
        "sender_full_name": "Sean",
        "timestamp": 1600232663
    },
    {
        "content": "<p>alright, my turn to rest.  good luck and catch up with you in a few hours ;)</p>",
        "id": 210222564,
        "sender_full_name": "Sean",
        "timestamp": 1600232739
    },
    {
        "content": "<p>woohoo!! <a href=\"/user_uploads/1549/piHSkEriq7pHjbhzjmnewsPb/Screenshot-from-2020-09-16-11-27-29.png\">Screenshot-from-2020-09-16-11-27-29.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/piHSkEriq7pHjbhzjmnewsPb/Screenshot-from-2020-09-16-11-27-29.png\" title=\"Screenshot-from-2020-09-16-11-27-29.png\"><img src=\"/user_uploads/1549/piHSkEriq7pHjbhzjmnewsPb/Screenshot-from-2020-09-16-11-27-29.png\"></a></div>",
        "id": 210224640,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600235888
    },
    {
        "content": "<p>created a vol from binary object</p>",
        "id": 210224653,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600235917
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 210224991,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600236369
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> i submitted the patch containing all the changes</p>",
        "id": 210227895,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600240004
    },
    {
        "content": "<p>see if it is okay or not</p>",
        "id": 210227910,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600240013
    },
    {
        "content": "<p>if any changes are needed, tell me</p>",
        "id": 210227927,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600240028
    },
    {
        "content": "<p>did you check my patch?</p>",
        "id": 210304782,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600282661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> I did check your patch and it looks good to me.  that said, I haven't finished testing it but should be done  soon.</p>",
        "id": 210318150,
        "sender_full_name": "Sean",
        "timestamp": 1600289075
    },
    {
        "content": "<p>did it work?</p>",
        "id": 210325440,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600293504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> What's next?</p>",
        "id": 210406566,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600356568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span>  so next is back in the plugin, no?</p>",
        "id": 210429347,
        "sender_full_name": "Sean",
        "timestamp": 1600366755
    },
    {
        "content": "<p>did it work?</p>",
        "id": 210429383,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600366771
    },
    {
        "content": "<p>oh, actually next would be to update the wdb interface</p>",
        "id": 210429387,
        "sender_full_name": "Sean",
        "timestamp": 1600366774
    },
    {
        "content": "<p>to include the obj changes?</p>",
        "id": 210429413,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600366787
    },
    {
        "content": "<p>I still haven't finished testing it.  A bug came up in testing (unrelated to your changes) that I had to debug and fix.  just finished up with that.</p>",
        "id": 210429521,
        "sender_full_name": "Sean",
        "timestamp": 1600366822
    },
    {
        "content": "<p>Ok</p>",
        "id": 210429543,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600366832
    },
    {
        "content": "<p>I should have it checked out here in a few hours while you're sleeping ;)</p>",
        "id": 210429586,
        "sender_full_name": "Sean",
        "timestamp": 1600366853
    },
    {
        "content": "<p>my reading of the code looked like it was good</p>",
        "id": 210429609,
        "sender_full_name": "Sean",
        "timestamp": 1600366869
    },
    {
        "content": "<p>I didn't catch any blatant issues</p>",
        "id": 210429643,
        "sender_full_name": "Sean",
        "timestamp": 1600366890
    },
    {
        "content": "<p>comments might be less though</p>",
        "id": 210429646,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600366891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210429387\">said</a>:</p>\n<blockquote>\n<p>oh, actually next would be to update the wdb interface</p>\n</blockquote>\n<p>what should be updated?</p>",
        "id": 210429922,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600367016
    },
    {
        "content": "<p>what do i have to update though?</p>",
        "id": 210440617,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600371715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> what should i update in the wdb interface?</p>",
        "id": 210570516,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600460204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> you maybe already did, but the mk_vol() function saved the name into the -&gt;file field of the vol, and I believe you renamed it?  Assuming you did, the function could use an additional parameter to indicate whether that is auto, file, or object</p>",
        "id": 210571699,
        "sender_full_name": "Sean",
        "timestamp": 1600460918
    },
    {
        "content": "<p>Yea I changed that because it was causing compilation errors</p>",
        "id": 210576658,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600463961
    },
    {
        "content": "<p>I can add a parameter like datasrc corresponding to the actual variable in <code>rt_vol_internal</code></p>",
        "id": 210576838,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600464089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210571699\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> you maybe already did, but the mk_vol() function saved the name into the -&gt;file field of the vol, and I believe you renamed it?  Assuming you did, the function could use an additional parameter to indicate whether that is auto, file, or object</p>\n</blockquote>\n<p>what will the datasrc parameter do anyways?</p>",
        "id": 210631142,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600543584
    },
    {
        "content": "<p>the same thing it does during the 'in' command prompting, it's the field you added to the struct that says whether the data is in an object or a file or auto</p>",
        "id": 210634702,
        "sender_full_name": "Sean",
        "timestamp": 1600548682
    },
    {
        "content": "<p>That means it will tell the function whether a binary object has been passed or a file name has been passed.</p>",
        "id": 210652615,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600584236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  should i change the <code>const char *</code> parameter for the file name to a <code>void *</code> and it will be used according to the (new)<code>datasrc</code> parameter? what do you think?</p>",
        "id": 210683795,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600633768
    },
    {
        "content": "<p>I actually meant to say that if the <code>datasrc</code> tells the function that it has been passed an object then the <code>void *</code> parameter will be casted to <code>rt_binunif</code>(or whatever the name of the the struct was) and if it tells the function that a file is going to be read then the generic pointer will be casted to <code>char *</code></p>",
        "id": 210712140,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600676164
    },
    {
        "content": "<p>No, it's still just a name - it's not passed an actual binunif <span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> .. callers first invoke mk_binunif() and then mk_vol() passing the name of the binunif created and auto or obj for the type.</p>",
        "id": 210826170,
        "sender_full_name": "Sean",
        "timestamp": 1600747292
    },
    {
        "content": "<p>so <code>char * name</code> will stay the same (i am talking about this parameter because i dont want to add another new parameter except for the <code>datasrc</code> parameter)</p>",
        "id": 210828019,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600750255
    },
    {
        "content": "<p>correct, it's just the object or file name</p>",
        "id": 210828026,
        "sender_full_name": "Sean",
        "timestamp": 1600750283
    },
    {
        "content": "<p>then the source parameter can indicate which</p>",
        "id": 210828031,
        "sender_full_name": "Sean",
        "timestamp": 1600750310
    },
    {
        "content": "<p>so i only have to add the <code>datasrc</code> parameter</p>",
        "id": 210828063,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600750324
    },
    {
        "content": "<p>correct</p>",
        "id": 210828075,
        "sender_full_name": "Sean",
        "timestamp": 1600750333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210828031\">said</a>:</p>\n<blockquote>\n<p>then the source parameter can indicate which</p>\n</blockquote>\n<p>yea</p>",
        "id": 210828078,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600750343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210826170\">said</a>:</p>\n<blockquote>\n<p>No, it's still just a name - it's not passed an actual binunif <span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> .. callers first invoke mk_binunif() and then mk_vol() passing the name of the binunif created and auto or obj for the type.</p>\n</blockquote>\n<p>auto for the type is next after changing the mk_vol (if i can)</p>",
        "id": 210828090,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600750396
    },
    {
        "content": "<p>ah, I see that neither mk_dsp() or mk_ebm() were updated.  they both appear to default to 'auto'.</p>",
        "id": 210828203,
        "sender_full_name": "Sean",
        "timestamp": 1600750575
    },
    {
        "content": "<p>actually, my recollection that they had an AUTO mode is apparently flawed also.</p>",
        "id": 210828396,
        "sender_full_name": "Sean",
        "timestamp": 1600750940
    },
    {
        "content": "<p>if I had to guess, I might guess that mk_dsp() and mk_ebm() are currently both broken because they don't set it and the code appears to treat unset/0 as an error since it's expecting 'o' or 'f'</p>",
        "id": 210828558,
        "sender_full_name": "Sean",
        "timestamp": 1600751198
    },
    {
        "content": "<p>would be nice to extend our fuzzer to call into the mk_() API....</p>",
        "id": 210828564,
        "sender_full_name": "Sean",
        "timestamp": 1600751231
    },
    {
        "content": "<p>fuzzer?</p>",
        "id": 210828569,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600751253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  will <code>wdb_export</code> handle the vol's input source according to <code>vol-&gt;datasrc</code>?</p>",
        "id": 210912975,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600799644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> wdb_export ends up calling ft_export which ends up calling rt_vol_export5() that you probably updated... but that would be the place to check whether you're serializing the datasrc field in the export5 function and deserializing it in the import5 function.</p>",
        "id": 210929237,
        "sender_full_name": "Sean",
        "timestamp": 1600807679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/210929237\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> wdb_export ends up calling ft_export which ends up calling rt_vol_export5() that you probably updated... but that would be the place to check whether you're serializing the datasrc field in the export5 function and deserializing it in the import5 function.</p>\n</blockquote>\n<p>i updated the function which both <code>rt_vol_import5</code> and <code>rt_vol_export5</code> functions call so it might be less messy.</p>",
        "id": 210955847,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600831193
    },
    {
        "content": "<p>looks like your patch file is missing some changes <span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> .... include dir changes weren't included</p>",
        "id": 210962814,
        "sender_full_name": "Sean",
        "timestamp": 1600841890
    },
    {
        "content": "<p>seriously?</p>",
        "id": 210962828,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600841912
    },
    {
        "content": "<p>i might have to update the patch then</p>",
        "id": 210962831,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600841925
    },
    {
        "content": "<p>definitely</p>",
        "id": 211004509,
        "sender_full_name": "Sean",
        "timestamp": 1600868670
    },
    {
        "content": "<p>updated it already</p>",
        "id": 211004557,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600868691
    },
    {
        "content": "<p>I see it now</p>",
        "id": 211004567,
        "sender_full_name": "Sean",
        "timestamp": 1600868699
    },
    {
        "content": "<p>cleaned it up a bit also</p>",
        "id": 211004577,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600868704
    },
    {
        "content": "<p>So indentation we use is atypical these days (used to be more common)... it's 4 char indents BUT 8 char tab stops</p>",
        "id": 211004683,
        "sender_full_name": "Sean",
        "timestamp": 1600868752
    },
    {
        "content": "<p>so 8 spaces for tab?</p>",
        "id": 211004794,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600868784
    },
    {
        "content": "<p>what's your editor?</p>",
        "id": 211004827,
        "sender_full_name": "Sean",
        "timestamp": 1600868798
    },
    {
        "content": "<p>atom</p>",
        "id": 211004850,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600868804
    },
    {
        "content": "<p>I'm not as familiar with atom, but yeah I think you want to set 8 spaces for tab, and I think hard tabs, but then somewhere you want to set 4 char indentation</p>",
        "id": 211005902,
        "sender_full_name": "Sean",
        "timestamp": 1600869238
    },
    {
        "content": "<p>looks like the auto mode may work too</p>",
        "id": 211006146,
        "sender_full_name": "Sean",
        "timestamp": 1600869325
    },
    {
        "content": "<p>for mk_vol?</p>",
        "id": 211006184,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600869348
    },
    {
        "content": "<p>for atom</p>",
        "id": 211006445,
        "sender_full_name": "Sean",
        "timestamp": 1600869447
    },
    {
        "content": "<p>atom has an auto tabs indentation mode where it detects what the file is using</p>",
        "id": 211006488,
        "sender_full_name": "Sean",
        "timestamp": 1600869468
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211006625,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600869506
    },
    {
        "content": "<p>ohh</p>",
        "id": 211006691,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600869532
    },
    {
        "content": "<p>I was too... I don't understand the  mk_vol question</p>",
        "id": 211006699,
        "sender_full_name": "Sean",
        "timestamp": 1600869535
    },
    {
        "content": "<p>this is for any code in brl-cad</p>",
        "id": 211006754,
        "sender_full_name": "Sean",
        "timestamp": 1600869557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/211006146\">said</a>:</p>\n<blockquote>\n<p>looks like the auto mode may work too</p>\n</blockquote>\n<p>i thought you were talking about auto in mk_vol</p>",
        "id": 211006820,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600869585
    },
    {
        "content": "<p>check out the \"Indentation whitespace\" section in HACKING for a visual diagram of the indent rules</p>",
        "id": 211006937,
        "sender_full_name": "Sean",
        "timestamp": 1600869622
    },
    {
        "content": "<p>ok</p>",
        "id": 211006954,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600869631
    },
    {
        "content": "<p>will do that</p>",
        "id": 211006979,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600869637
    },
    {
        "content": "<p>right, and that's why I said auto refers to atom indent settings</p>",
        "id": 211006987,
        "sender_full_name": "Sean",
        "timestamp": 1600869640
    },
    {
        "content": "<p>there's an auto tab setting</p>",
        "id": 211006997,
        "sender_full_name": "Sean",
        "timestamp": 1600869645
    },
    {
        "content": "<p>you might have to just try some edits to see, but first step will be to make sure you understand what it should be...</p>",
        "id": 211007024,
        "sender_full_name": "Sean",
        "timestamp": 1600869656
    },
    {
        "content": "<p>yea</p>",
        "id": 211007064,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600869678
    },
    {
        "content": "<p>I'd be a little surprised if atom can't handle the hybrid mode by default with the right settings, but this package may implement it: <a href=\"https://atom.io/packages/atom-smart-tabs\">https://atom.io/packages/atom-smart-tabs</a></p>",
        "id": 211007228,
        "sender_full_name": "Sean",
        "timestamp": 1600869734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/211007228\">said</a>:</p>\n<blockquote>\n<p>I'd be a little surprised if atom can't handle the hybrid mode by default with the right settings, but this package may implement it: <a href=\"https://atom.io/packages/atom-smart-tabs\">https://atom.io/packages/atom-smart-tabs</a></p>\n</blockquote>\n<p>thanks for that.</p>",
        "id": 211007344,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600869773
    },
    {
        "content": "<p>actually, never mind -- that's not quite what is needed</p>",
        "id": 211007368,
        "sender_full_name": "Sean",
        "timestamp": 1600869784
    },
    {
        "content": "<p>i will check it later today</p>",
        "id": 211007376,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600869786
    },
    {
        "content": "<p>that's tab indentation with alignment .. we use hybrid indentation chars</p>",
        "id": 211007503,
        "sender_full_name": "Sean",
        "timestamp": 1600869825
    },
    {
        "content": "<p>uh oh, looks like atom doesn't support it</p>",
        "id": 211007947,
        "sender_full_name": "Sean",
        "timestamp": 1600869987
    },
    {
        "content": "<p><a href=\"https://discuss.atom.io/t/distiguish-between-tab-size-and-indentation-size/40197\">https://discuss.atom.io/t/distiguish-between-tab-size-and-indentation-size/40197</a></p>",
        "id": 211007956,
        "sender_full_name": "Sean",
        "timestamp": 1600869989
    },
    {
        "content": "<p>ohh</p>",
        "id": 211008108,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600870049
    },
    {
        "content": "<p>what the moderator suggested appears to be a workaround, but a bit involved</p>",
        "id": 211008111,
        "sender_full_name": "Sean",
        "timestamp": 1600870050
    },
    {
        "content": "<p>i.e., insert spaces with tab width set to 4 but then replace all sequences of 8 chars with a tab on save</p>",
        "id": 211008323,
        "sender_full_name": "Sean",
        "timestamp": 1600870114
    },
    {
        "content": "<p>yep, this looks like the issue, auto-closed: <a href=\"https://github.com/atom/atom/issues/12931\">https://github.com/atom/atom/issues/12931</a></p>",
        "id": 211008957,
        "sender_full_name": "Sean",
        "timestamp": 1600870341
    },
    {
        "content": "<p>I opened a new issue: <a href=\"https://github.com/atom/atom/issues/21371\">https://github.com/atom/atom/issues/21371</a></p>",
        "id": 211015268,
        "sender_full_name": "Sean",
        "timestamp": 1600873065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/211015268\">said</a>:</p>\n<blockquote>\n<p>I opened a new issue: <a href=\"https://github.com/atom/atom/issues/21371\">https://github.com/atom/atom/issues/21371</a></p>\n</blockquote>\n<p>thanks for that</p>",
        "id": 211015383,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600873104
    },
    {
        "content": "<p>so yeah, <span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> .. you're kind of in a hard place using Atom.  It doesn't support the style we use so you're going to either have to deal with it manually or use another editor :(</p>",
        "id": 211015404,
        "sender_full_name": "Sean",
        "timestamp": 1600873117
    },
    {
        "content": "<p>we are planning on shifting to a different indentation style, but that's not happening yet/soon</p>",
        "id": 211015526,
        "sender_full_name": "Sean",
        "timestamp": 1600873177
    },
    {
        "content": "<p>i think i will deal with it manually right now</p>",
        "id": 211015540,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600873185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  so should i set 4 for tab length in atom for now?</p>",
        "id": 211172613,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600972755
    },
    {
        "content": "<p>or 8</p>",
        "id": 211172621,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600972760
    },
    {
        "content": "<p>need some help with mk_binunif</p>",
        "id": 211176158,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600974504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> I'd probably think it easiest to set it to 8 (with tabs, not spaces) and just manually fix</p>",
        "id": 211222930,
        "sender_full_name": "Sean",
        "timestamp": 1601015729
    },
    {
        "content": "<p>Ok</p>",
        "id": 211227849,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601020100
    },
    {
        "content": "<p>does the patch work?</p>",
        "id": 211429959,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601234047
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> does the patch work?</p>",
        "id": 211801101,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601490455
    },
    {
        "content": "<p>if yes then i will try to continue on it</p>",
        "id": 211801117,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601490465
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , i am switching to vscode for now.</p>",
        "id": 211875874,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601536515
    },
    {
        "content": "<p>so are the indentation and tab space settings different in there?</p>",
        "id": 211875959,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601536569
    },
    {
        "content": "<p>i used it many days ago but didnt know much about editor so if you know please tell me</p>",
        "id": 211875976,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601536593
    },
    {
        "content": "<p>Hahaha, <span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> VScode has the same problem. :)</p>",
        "id": 212121778,
        "sender_full_name": "Sean",
        "timestamp": 1601668952
    },
    {
        "content": "<p><span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 212121895,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601669017
    },
    {
        "content": "<p>It's Visual Studio (the Professional version) that supports mixed-mode.  Looks like for VSCode that some of the devs want to implement it and others want to encourage projects to choose spaces vs tabs.</p>",
        "id": 212121902,
        "sender_full_name": "Sean",
        "timestamp": 1601669019
    },
    {
        "content": "<p>i am one of those devs</p>",
        "id": 212121986,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601669050
    },
    {
        "content": "<p>Don't worry about it.  Just insert spaces for now.  They're the easiest to fix.</p>",
        "id": 212121989,
        "sender_full_name": "Sean",
        "timestamp": 1601669051
    },
    {
        "content": "<p>i switched to vscode for some perfomance and extension issues</p>",
        "id": 212122018,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601669071
    },
    {
        "content": "<p>We're planning on switching, but then I thought we'd decided on one thing and others thought we'd decided on something else, and it was deferred</p>",
        "id": 212122100,
        "sender_full_name": "Sean",
        "timestamp": 1601669119
    },
    {
        "content": "<p>Oh</p>",
        "id": 212122153,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601669145
    },
    {
        "content": "<p>and what is the status of the Github migration</p>",
        "id": 212122234,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601669174
    },
    {
        "content": "<p>and then deferred again for gsoc, and then release, and the can keeps getting kicked as once we do switch it, it will make most patches fail to apply cleanly (or at least a significant number of them) ... so there's some desire to close the patches out first.</p>",
        "id": 212122247,
        "sender_full_name": "Sean",
        "timestamp": 1601669182
    },
    {
        "content": "<p>there's a checklist on the wiki.  I had a few remaining issues that needed to be manually checked by someone other than starseeker.  You helped with a couple of them, so some can be checked off.</p>",
        "id": 212122400,
        "sender_full_name": "Sean",
        "timestamp": 1601669248
    },
    {
        "content": "<p>i am checking that list but seems like nothing has changed or it hasnt progressed much because of the releases</p>",
        "id": 212122547,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601669299
    },
    {
        "content": "<p>yes, nothing progressed while release was happening</p>",
        "id": 212122586,
        "sender_full_name": "Sean",
        "timestamp": 1601669320
    },
    {
        "content": "<p>it's only been in the past week, I finished one of them and need to annotate the ones you did</p>",
        "id": 212122626,
        "sender_full_name": "Sean",
        "timestamp": 1601669342
    },
    {
        "content": "<p>(or you can)</p>",
        "id": 212122633,
        "sender_full_name": "Sean",
        "timestamp": 1601669347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/in-database.20support.20for.20vol.20objects/near/212122633\">said</a>:</p>\n<blockquote>\n<p>(or you can)</p>\n</blockquote>\n<p>i dont know about that</p>",
        "id": 212122826,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1601669460
    },
    {
        "content": "<p>no worries</p>",
        "id": 212124737,
        "sender_full_name": "Sean",
        "timestamp": 1601670450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> did you check the vol patch if it works? i will proceed only after fixing all the bugs in there (if there are any)</p>",
        "id": 212608059,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1602099093
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> that I couldn't update the patch as I was busy with my studies. Will resume working on it after setting up my editor for BRL-CAD.</p>",
        "id": 214309145,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1603457643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Did you see any bugs with the vol patch or anything more i need to add to the patch? I don't think i missed anything.</p>",
        "id": 214430992,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1603550213
    }
]