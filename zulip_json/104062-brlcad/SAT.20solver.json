[
    {
        "content": "<p><a href=\"https://codingnest.com/modern-sat-solvers-fast-neat-underused-part-1-of-n/\" title=\"https://codingnest.com/modern-sat-solvers-fast-neat-underused-part-1-of-n/\">https://codingnest.com/modern-sat-solvers-fast-neat-underused-part-1-of-n/</a></p>",
        "id": 196242468,
        "sender_full_name": "Sean",
        "timestamp": 1588627840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Is that potentially useful for boolean expression simplification?</p>",
        "id": 196260326,
        "sender_full_name": "starseeker",
        "timestamp": 1588643051
    },
    {
        "content": "<p>oh heck no :)</p>",
        "id": 196263198,
        "sender_full_name": "Sean",
        "timestamp": 1588647395
    },
    {
        "content": "<p>in theory I'm sure one could incorporate it into some slow expression reducer, but you'd still need to encode reduction logic and null object detection.  a better fit would be a compiler expression optimization pass (which are simply graph pattern match rules).</p>",
        "id": 196263380,
        "sender_full_name": "Sean",
        "timestamp": 1588647804
    },
    {
        "content": "<p>SAT solver is needed for robust parametric constraints.  \"what must sph.V be to maintain dist(sph.V, arb8.F[3]) == sph.radius\", i.e., keep sph tangent to arb8's 3rd face.</p>",
        "id": 196263509,
        "sender_full_name": "Sean",
        "timestamp": 1588648015
    }
]