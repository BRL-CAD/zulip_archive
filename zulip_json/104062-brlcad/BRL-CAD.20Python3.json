[
    {
        "content": "<p>Hello all <br>\nIs  \"<a href=\"https://github.com/kanzure/python-brlcad\" target=\"_blank\" title=\"https://github.com/kanzure/python-brlcad\">https://github.com/kanzure/python-brlcad</a>\" avaliable with py3. Tried but returned with errors, so  I tried with 2to3 and did some changes in \"post_install.py\" but probably also ctypesgen is not available in py3 ??</p>",
        "id": 169122301,
        "sender_full_name": "scorp08",
        "timestamp": 1561631666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> I don't think anyone has tried getting it to work with py3 yet.  My guess is that it'll need to be switched to cffi or some other approach.  There is a python binding that calls mged directly and avoids ctypesgen that may work better in the meantime.</p>",
        "id": 169132303,
        "sender_full_name": "Sean",
        "timestamp": 1561640601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , what is cffi ? Did you mean <a href=\"https://github.com/nmz787/python-brlcad-tcl\" target=\"_blank\" title=\"https://github.com/nmz787/python-brlcad-tcl\">https://github.com/nmz787/python-brlcad-tcl</a> this package</p>",
        "id": 169139151,
        "sender_full_name": "scorp08",
        "timestamp": 1561645230
    },
    {
        "content": "<p>Yes, that one should still work just fine</p>",
        "id": 169147936,
        "sender_full_name": "Sean",
        "timestamp": 1561651129
    },
    {
        "content": "<p><a href=\"https://cffi.readthedocs.io/en/latest/\" target=\"_blank\" title=\"https://cffi.readthedocs.io/en/latest/\">https://cffi.readthedocs.io/en/latest/</a></p>",
        "id": 169148296,
        "sender_full_name": "Sean",
        "timestamp": 1561651381
    },
    {
        "content": "<p>I convert some issues to py3 for kanzure/python-brlcad but when it comes to  parsing, ctypesgen is not compatible and seems that development is stopped. Currently I get error as \"there is no optimize.lexer attribute\". I do not know how to rewrite brlcad-python with cffi as it uses ctypesgen from beginning ?</p>",
        "id": 169388662,
        "sender_full_name": "scorp08",
        "timestamp": 1561982268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> if I recall correctly (and it may not be), the brlcad-python project was an evolution from invoking mged directly to using ctypesgen.  towards what you're wanting to do, though, I'm not sure why it matters whether it uses ctypesgen from the beginning -- it uses it now and that's obviously a problem if you want to use python3.</p>\n<p>if you can't do the conversion to cffi, you'd either have to use the python-brlcad-tcl version that runs mged or wait indefinitely for someone to work on py3 support or use python2.7.  fixing ctypesgen is no small task as it worked by directly outputting python code, which needs to be generated differently for py3.</p>",
        "id": 169485381,
        "sender_full_name": "Sean",
        "timestamp": 1562077619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Thanks. How can I do conversion ? At leat once the starting point will be identified, rest will come through more easily.</p>",
        "id": 169592578,
        "sender_full_name": "scorp08",
        "timestamp": 1562179782
    },
    {
        "content": "<p>You'd need to read up on ctypesgen</p>",
        "id": 169667530,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1562269003
    },
    {
        "content": "<p>There are some hits here for \".lexer\" <a href=\"https://github.com/davidjamesca/ctypesgen/pull/55/files?diff=split\" target=\"_blank\" title=\"https://github.com/davidjamesca/ctypesgen/pull/55/files?diff=split\">https://github.com/davidjamesca/ctypesgen/pull/55/files?diff=split</a></p>",
        "id": 169667883,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1562269540
    },
    {
        "content": "<p>\"Merge in various changes from kanzure and olsonse\"</p>",
        "id": 169667949,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1562269635
    },
    {
        "content": "<p>Looks like these haven't been merged in and released, so you probably could try grabbing the unreleased code and running with that</p>",
        "id": 169667959,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1562269666
    },
    {
        "content": "<p>There's also SWIG, but I think kanzure had some thoughts on why that would be harder to use</p>",
        "id": 169668080,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1562269850
    },
    {
        "content": "<p><a href=\"http://www.swig.org/Doc1.3/Python.html#Python_python3support\" target=\"_blank\" title=\"http://www.swig.org/Doc1.3/Python.html#Python_python3support\">http://www.swig.org/Doc1.3/Python.html#Python_python3support</a></p>",
        "id": 169668108,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1562269920
    },
    {
        "content": "<p>Although in swig's defense, it would have survived all py2 to py3 changes unlike ctypesgen ;)</p>\n<p>I think the concerns he had with swig were that it would pass through the C api and not be as clean as the wrapped version from ctypesgen.  I'd think it's be possible to wrap the output from swig just as neatly though, at least as neatly as the ctypesgen wrap.</p>",
        "id": 169742732,
        "sender_full_name": "Sean",
        "timestamp": 1562371394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223864\">@Nathan McCorkle</span> , <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  , I installed another repo of ctypesgen which is compatible with py3. Currently doing some conversion of brlcad-python to py3. Do I need to go for another dep. like ctypesgen or continue with it   ?? What do you think ?</p>",
        "id": 170537062,
        "sender_full_name": "scorp08",
        "timestamp": 1562762114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> I don’t think so but I guess you’ll find out :). Have to just look through the imports and try it.  Keep the updates coming!</p>",
        "id": 170544337,
        "sender_full_name": "Sean",
        "timestamp": 1562767675
    },
    {
        "content": "<p>I'm not sure, I never got kanzure's library to work even with Python2, or maybe it lacked hooks for the features I wanted to use. It was a lot less work to think about just wrapping command-line stuff with Python than all the work you're doing! I will gladly check your work as you progress though!! Let me know where your code lives and I'll grab your branch.</p>",
        "id": 170557752,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1562777263
    },
    {
        "content": "<p>For writing a custom GUI for building 3D models, the command-line stuff I did is actually too slow, so I'm definitely interested.</p>",
        "id": 170557848,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1562777323
    },
    {
        "content": "<p>We were just looking at mged's command-line performance a while back and noticed some massive slowness and room for optimization.  Curious though what specifically you saw that was slow, whether it was the same issue or something else.</p>",
        "id": 170600472,
        "sender_full_name": "Sean",
        "timestamp": 1562818649
    },
    {
        "content": "<p>Frankly, I think the wrapped approach is still going to be about 1/10th the effort of any binary method.  Of course, it'll b about a 1/10th performance tradeoff no matter what just from binary startup time, but still should be fast enough for 90% of cases.  If we fixed the slowness we found, it'd probably be 98% of cases.</p>",
        "id": 170600771,
        "sender_full_name": "Sean",
        "timestamp": 1562819060
    },
    {
        "content": "<p>I manage to install to py3 but when I run  an example below,  returned with pointer error.  Some help need related with brlcad.wdb<br>\nfrom brlcad.vmath import Transform<br>\nfrom brlcad.wdb import WDB<br>\nfrom brlcad import primitives</p>\n<p>if __name__ == \"__main__\":<br>\n    with WDB(\"test_wdb.g\", \"Test BRLCAD DB file\") as brl_db:<br>\n        brl_db.sphere(<br>\n            \"sph1.s\",<br>\n            center=(1, 2, 3),<br>\n            radius=0.75<br>\n        )</p>",
        "id": 170630218,
        "sender_full_name": "scorp08",
        "timestamp": 1562850137
    },
    {
        "content": "<p>If you want , I can create a repo and you can edit the code</p>",
        "id": 170630354,
        "sender_full_name": "scorp08",
        "timestamp": 1562850225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> yeah throw it on github/etc and I'll give it a try.</p>",
        "id": 170657438,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1562868526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I can't remember what I was trying to do, but it was pretty dumb... Something like using nirt to export an image (or maybe mged has a function like that, it's been a while and I haven't checked my local code), then taking that image (JPG/PNG/BMP) and displayed it in a Python GUI image-frame. Then if the user clicked and dragged, it would adjust the rotation, re-request an image to be exported from BRLCAD, then re-display. Super dumb, but quite low effort exerted. I think I was getting like 1FPS.</p>",
        "id": 170657760,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1562868726
    },
    {
        "content": "<p>Ooooh, haha .. so basically using nirt to render an image??  Yeah.. that's crazy :)</p>",
        "id": 170673909,
        "sender_full_name": "Sean",
        "timestamp": 1562880226
    },
    {
        "content": "<p>Nowadays I m on a long road, I'll  try to upload and focus on nextweek.  Examples in brlcad-python git is working in my py3 but could not run rt_shoot inside the librt...</p>",
        "id": 170795635,
        "sender_full_name": "scorp08",
        "timestamp": 1563034302
    },
    {
        "content": "<p>Are there any doc. for tcl bindings for qt (it seems that there is an example for treewidget) but could not find any project related with qt framework of brl_cad</p>",
        "id": 170975304,
        "sender_full_name": "scorp08",
        "timestamp": 1563275462
    },
    {
        "content": "<blockquote>\n<p>Nowadays I m on a long road, I'll  try to upload and focus on nextweek.  Examples in brlcad-python git is working in my py3 but could not run rt_shoot inside the librt...</p>\n</blockquote>\n<p>Any progress <span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> ?</p>",
        "id": 171262933,
        "sender_full_name": "Sean",
        "timestamp": 1563547216
    },
    {
        "content": "<blockquote>\n<p>Are there any doc. for tcl bindings for qt (it seems that there is an example for treewidget) but could not find any project related with qt framework of brl_cad</p>\n</blockquote>\n<p>I assume you meant Tk bindings, and the answer is no.  Regardless, we have no intention of sticking with Tk.  Qt GUI can/should be pure Qt goodness.</p>",
        "id": 171263159,
        "sender_full_name": "Sean",
        "timestamp": 1563547388
    },
    {
        "content": "<p>Tcl will likely linger for a while longer but even that is getting pushed into the foreground as just one of several scripting interface possibilities, out of libraries and application infrastructure.</p>",
        "id": 171263247,
        "sender_full_name": "Sean",
        "timestamp": 1563547455
    },
    {
        "content": "<p>Hello <br>\nHow brl-cad display 3d .g files in screen. I was searching to implement it to pyqt with opengl. Also checked this repo <a href=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/rt%5E3/trunk/src/QtGUI/\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/rt%5E3/trunk/src/QtGUI/\">https://sourceforge.net/p/brlcad/code/HEAD/tree/rt%5E3/trunk/src/QtGUI/</a> but no tool to show in screen</p>",
        "id": 171924204,
        "sender_full_name": "scorp08",
        "timestamp": 1564385066
    },
    {
        "content": "<p>yeah I also tried to get that QtGUI to compile but don't believe I was able to... my memory on that effort is fuzzy, but I think it boils down to the documentation for that code not being too great, and the makefiles for the whole BRLCAD build not being kept syncronized to allow building that GUI... but I could be wrong, I think it was like a year ago, or more, that I tried.</p>",
        "id": 172016817,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1564475528
    },
    {
        "content": "<p>Did you ever get a chance to commit/upload your Python3 progress? I have a very simple Python GUI to show 3D .g files in, but it is VERY slow... I wonder if your code would give my GUI any reasonable speed-up</p>",
        "id": 172016849,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1564475592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> any writeup on how to compile that QT GUI?</p>",
        "id": 172016949,
        "sender_full_name": "Nathan McCorkle",
        "timestamp": 1564475684
    },
    {
        "content": "<ul>\n<li>Compile and install BRL-CAD as usual</li>\n<li>Configure rt^3, check with the CMake GUI that<ul>\n<li>The BRL-CAD directories and libraries and</li>\n<li>The Qt stuff are correct</li>\n</ul>\n</li>\n<li>Build the QtGUI target in rt^3, e.g. with <code>make QtGUI</code></li>\n</ul>",
        "id": 172038702,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1564494334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223864\">@Nathan McCorkle</span>  I'll try to upload today though there is a problem. When _bindings folder is generated, binders opens dll files in the libraries with ctypes. Some of dll's depends each other so setup.py need to see \\bin folder otherwise as in my setup , it will return error  \"no module found\".  Is it done with os.chdir or any other better way ?</p>",
        "id": 172194968,
        "sender_full_name": "scorp08",
        "timestamp": 1564640337
    },
    {
        "content": "<p>Hello All<br>\nMy repo is ready for py3 in here( <a href=\"https://github.com/scorp08/python-brlcad\" target=\"_blank\" title=\"https://github.com/scorp08/python-brlcad\">https://github.com/scorp08/python-brlcad</a>). Some small arrangements may be neccessary  in ctypesgen side. I created a pull request in olsense's repo. If you install  my repo, you may need to apply those changes. Before install you can do neccessary work in .cfg file to arrange path locations of brl-cad and mingw</p>",
        "id": 172443788,
        "sender_full_name": "scorp08",
        "timestamp": 1564914019
    },
    {
        "content": "<p>If there is a stuff to be added, please pull :)</p>",
        "id": 172443794,
        "sender_full_name": "scorp08",
        "timestamp": 1564914060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> , <span class=\"user-mention\" data-user-id=\"223864\">@Nathan McCorkle</span>  Which repo is more usefull for the GUI : g3d or QtGUI , are they independent from each other ? maybe I will convert to PyQt ,use opengl etc.</p>",
        "id": 172481767,
        "sender_full_name": "scorp08",
        "timestamp": 1564986303
    },
    {
        "content": "<p>Are there a CAD kernel used in  BRL-CAD (parasolid etc. ) ? Also are there a step to .g converter or a source code to open step file in database ?</p>",
        "id": 172503376,
        "sender_full_name": "scorp08",
        "timestamp": 1565010990
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> , <span class=\"user-mention silent\" data-user-id=\"223864\">Nathan McCorkle</span>  Which repo is more usefull for the GUI : g3d or QtGUI , are they independent from each other ? maybe I will convert to PyQt ,use opengl etc.</p>\n</blockquote>\n<p>I can't say much about g3d, but, QtGUI can be used as inspiration for the creation of an own Qt based BRL-CAD GUI. They are independent from each other.</p>",
        "id": 172529678,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1565032361
    },
    {
        "content": "<blockquote>\n<p>Are there a CAD kernel used in  BRL-CAD (parasolid etc. ) ? Also are there a step to .g converter or a source code to open step file in database ?</p>\n</blockquote>\n<p>BRL-CAD has its own CAD kernel, which is mainly the librt. There exists even a C++ interface for it.</p>\n<p>And, yes there is a step-g converter, which is open source.</p>",
        "id": 172529925,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1565032575
    },
    {
        "content": "<p>Is interface open-source ?</p>",
        "id": 172561929,
        "sender_full_name": "scorp08",
        "timestamp": 1565070094
    },
    {
        "content": "<p>Do we talk about the same software suite? Which content of the BRL-CAD repository is not open source?</p>",
        "id": 172563917,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1565073132
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Are there a CAD kernel used in  BRL-CAD (parasolid etc. ) ? Also are there a step to .g converter or a source code to open step file in database ?</p>\n</blockquote>\n<p>BRL-CAD has its own CAD kernel, which is mainly the librt. There exists even a C++ interface for it.</p>\n<p>And, yes there is a step-g converter, which is open source.</p>\n</blockquote>\n<p>I meant the interface for librt</p>",
        "id": 172579900,
        "sender_full_name": "scorp08",
        "timestamp": 1565090992
    },
    {
        "content": "<p>Sure, it is in the BRL-CAD repository, in the rt^3 branch. It's called coreinterface there.</p>\n<p>In principle it's the same as the brlcad.dll (SDK download: <a href=\"https://sourceforge.net/projects/brlcad/files/BRL-CAD%20Runtime%20Libraries/7.26.0/\" target=\"_blank\" title=\"https://sourceforge.net/projects/brlcad/files/BRL-CAD%20Runtime%20Libraries/7.26.0/\">https://sourceforge.net/projects/brlcad/files/BRL-CAD%20Runtime%20Libraries/7.26.0/</a>, sources are in the main branch misc/win32-msvc/Dll directory (uses the stuff in rt^3 too), see also <a href=\"https://brlcad.org/wiki/BRL-CAD%27s_core_C%2B%2B_interface\" target=\"_blank\" title=\"https://brlcad.org/wiki/BRL-CAD%27s_core_C%2B%2B_interface\">https://brlcad.org/wiki/BRL-CAD%27s_core_C%2B%2B_interface</a>)</p>",
        "id": 172583848,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1565095037
    },
    {
        "content": "<p>The rt^3 QtGUI with the brlcad.dll as back-end: <a href=\"https://github.com/drossberg/BrlCadQtGUI\" target=\"_blank\" title=\"https://github.com/drossberg/BrlCadQtGUI\">https://github.com/drossberg/BrlCadQtGUI</a></p>",
        "id": 172584056,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1565095238
    },
    {
        "content": "<p>Ctypesgen contains an UNCHECKED function in <a href=\"https://github.com/olsonse/ctypesgen/blob/master/ctypesgen/printer_python/preamble/3_2.py\" target=\"_blank\" title=\"https://github.com/olsonse/ctypesgen/blob/master/ctypesgen/printer_python/preamble/3_2.py\">https://github.com/olsonse/ctypesgen/blob/master/ctypesgen/printer_python/preamble/3_2.py</a> which cause callbacks of Cfunctypes to return void. Seems that need to put an __type__.encode() but why in the first place do we need it, do you think ?</p>",
        "id": 172657789,
        "sender_full_name": "scorp08",
        "timestamp": 1565165113
    },
    {
        "content": "<p>can  libwdb  be a kernel too ? or only librt ?</p>",
        "id": 172741098,
        "sender_full_name": "scorp08",
        "timestamp": 1565244634
    },
    {
        "content": "<p>After using step-g converter , raytrace worked a bit slow in resulting files.So are there any development in converter or is it neccessary to add some stuff ? What do you think ?</p>",
        "id": 172745412,
        "sender_full_name": "scorp08",
        "timestamp": 1565250584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  When  step-g convert Step Structures to brep structures, does resulting .g contains meshes or nurbs ? Does it contains brl-cad primitives too ?</p>",
        "id": 172912387,
        "sender_full_name": "scorp08",
        "timestamp": 1565419375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> it imports brep nurbs</p>",
        "id": 172938809,
        "sender_full_name": "Sean",
        "timestamp": 1565468395
    },
    {
        "content": "<p>It’d be nice to expand support to meshes, but they are rarely seen with real models</p>",
        "id": 172938874,
        "sender_full_name": "Sean",
        "timestamp": 1565468475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  is there a neccessity to modify step-g (increase performance, increase raytrace speed etc) ? is there a project idea?</p>",
        "id": 173479110,
        "sender_full_name": "scorp08",
        "timestamp": 1566120139
    },
    {
        "content": "<p>What kind of method is used raytrace for nurbs ? Are there a possible faster approach ? Maybe need to check articles etc.</p>",
        "id": 173764124,
        "sender_full_name": "scorp08",
        "timestamp": 1566362241
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>  is there a neccessity to modify step-g (increase performance, increase raytrace speed etc) ? is there a project idea?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> \"neccessity\"?  well that certainly depends on what one's requirements are.  it imports ap203 (v1) nurbs models just fine.  it doesn't import meshes, doesn't import surface-only model, doesn't handle ap203v2 or ap214 or ap242.  those are all features that would be GREAT to have and would make for good project ideas, any of them.</p>",
        "id": 173814293,
        "sender_full_name": "Sean",
        "timestamp": 1566407919
    },
    {
        "content": "<p>the performance of step-g is typically inconsequential, people would wait hours if they knew it <em>always</em> worked and could trust everything got imported.</p>",
        "id": 173814341,
        "sender_full_name": "Sean",
        "timestamp": 1566407961
    },
    {
        "content": "<p>converters don't do ray tracing, so do you mean ray tracing of NURBS?  that is absolutely a grand project idea.</p>",
        "id": 173814421,
        "sender_full_name": "Sean",
        "timestamp": 1566408007
    },
    {
        "content": "<p>raytracing nurbs is a super complicated topic, but there is definitely room for improvement in our current implementation.  our implementation is based loosely on a 2006 paper on Interactive ray tracing of NURBS.  However, we build surface tree's that are unnecessarily deep and it would probably benefit greatly from dynamic surface trees, building them on the fly during ray tracing.  it would also benefit greatly from simple memory coherency optimization, e.g., to evaluate bundles of rays at a time instead of individually as nurbs structures are memory-intensive.</p>",
        "id": 173814654,
        "sender_full_name": "Sean",
        "timestamp": 1566408192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.7500&amp;rep=rep1&amp;type=pdf\" target=\"_blank\" title=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.7500&amp;rep=rep1&amp;type=pdf\">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.7500&amp;rep=rep1&amp;type=pdf</a> this paper ?</p>",
        "id": 173947477,
        "sender_full_name": "scorp08",
        "timestamp": 1566544028
    },
    {
        "content": "<p>Yes, that's the one!  We didn't get to the coherent data packing technique they're using, but the general idea of directly evaluating the NURBS surfaces (as opposed to the historic method of subdividing into Bezier or B-Spline patches or polygonal meshes), is essentially the method we're using.</p>",
        "id": 173952243,
        "sender_full_name": "Sean",
        "timestamp": 1566549924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Thnks, is brlcad 7.24 using it ? I checked the rt_shootray in  librt/shoot.c but could not find a connection between that paper ?</p>",
        "id": 173963925,
        "sender_full_name": "scorp08",
        "timestamp": 1566562660
    },
    {
        "content": "<p>Yes it is.  You'd have to follow much deeper to actual NURBS logic, which resides in src/librt/primitives/brep</p>",
        "id": 173972770,
        "sender_full_name": "Sean",
        "timestamp": 1566570311
    },
    {
        "content": "<p>is rt_brep_shot used when shoot to brep ? I thought that theres only one single shoot function which is rt_shootray ?</p>",
        "id": 174071990,
        "sender_full_name": "scorp08",
        "timestamp": 1566716100
    },
    {
        "content": "<p>But, how does rt_shootray know how to ray-trace the primitives? You may have noticed stp-&gt;st_meth-&gt;ft_shot() in rt_shootray()'s source code. This is a function pointer which points to the primitive specific ray-trace algorithms. Look at it in a debugger.</p>",
        "id": 174090983,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1566750872
    },
    {
        "content": "<p>I would like to  divide regions of e.g parasolid file in another CAD software, give names those regions and after convert to .g file via converters, see regions and same names. Is it possible. I tried UG but after converting, got all regions as \"all\" one single entity in archer</p>",
        "id": 174123588,
        "sender_full_name": "scorp08",
        "timestamp": 1566807912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> you can think of the rt_*_shot() functions as a basic ray-primitive intersection test which does not typically involve scene traversal, whereas rt_shootray() does</p>",
        "id": 174162874,
        "sender_full_name": "Sean",
        "timestamp": 1566842360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> what does \"l all\" show?  Geometry is typically a hierarchy.  If you created multiple regions, then they will typically import as multiple regions but then a group is usually still created that combines everything together.  The individual regions are still there though.</p>",
        "id": 174163077,
        "sender_full_name": "Sean",
        "timestamp": 1566842506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Does brlcad has still fastest raytrace kernel ? Can it be powered with NVIDIA OptiX?</p>",
        "id": 174173790,
        "sender_full_name": "scorp08",
        "timestamp": 1566850966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> that has become a heavily loaded question -- it very much depends what you are comparing, what is valued, and what is supported in a given ray tracing kernel to be able to talk about it's performance.  BRL-CAD does have the fastest solid ray tracing with a substantial investment in verification and validation (i.e., it's \"more correct\" than most with regards to edge case behavior).</p>",
        "id": 174176634,
        "sender_full_name": "Sean",
        "timestamp": 1566853413
    },
    {
        "content": "<p>there are faster ray tracing kernels for specific types of geometry (e.g., triangle-only ray tracing) or first-hit ray tracing, but they typically don't have verification and validation and if you need solidity, they can be non-starters</p>",
        "id": 174176787,
        "sender_full_name": "Sean",
        "timestamp": 1566853533
    },
    {
        "content": "<p>We have an experimental OpenCL pipeline that will utilize GPU cores, but it has remained experimental because most real models our main customers ray trace do not come close to fitting on a video card.</p>",
        "id": 174176919,
        "sender_full_name": "Sean",
        "timestamp": 1566853638
    },
    {
        "content": "<p>It remains an interesting and desirable area of research, particularly for NURBS ray tracing.  Our NURBS ray tracing implementation is unoptimized, too, so even basic work there would be a huge benefit (orders of magnitude).</p>",
        "id": 174177037,
        "sender_full_name": "Sean",
        "timestamp": 1566853721
    },
    {
        "content": "<p>Does brlcad use BSP trees ? or octree ?</p>",
        "id": 174338508,
        "sender_full_name": "scorp08",
        "timestamp": 1566976353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  converted a parasolid file containing multiple bodies to stl in nx then convert it to .g with stl-g.exe. but  parasolid-stl conversion in nx created one solid body so after stl-g, it is showing only one region as normally</p>",
        "id": 174340671,
        "sender_full_name": "scorp08",
        "timestamp": 1566978742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  considering for example two   huge (limits up to 14 m) geometries from stl to .g  (12 MB size) and one is modeled with primitives (2 MB), is it possible to  obtain same rt_shootray performance if shoot to different locations and a lot of times  in resulting .g models??</p>",
        "id": 174341780,
        "sender_full_name": "scorp08",
        "timestamp": 1566979873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> Eh... STL only supports one object per file.  So whatever you exported got combined into one entity before it ever got to BRL-CAD.</p>",
        "id": 174342997,
        "sender_full_name": "Sean",
        "timestamp": 1566981154
    },
    {
        "content": "<p>You should really avoid STL if at all possible.  It's a terribly limited and typically lossy format.</p>",
        "id": 174343036,
        "sender_full_name": "Sean",
        "timestamp": 1566981227
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>  considering for example two   huge (limits up to 14 m) geometries from stl to .g  (12 MB size) and one is modeled with primitives (2 MB), is it possible to  obtain same rt_shootray performance if shoot to different locations and a lot of times  in resulting .g models??</p>\n</blockquote>\n<p>Primitives will typically out-perform triangles when your mesh density is approximately pixel-sized or smaller.   You typically have to tessellate to sub-pixel (1M+ triangles) to get something with curvature equivalence (at least for any reasonable spectral / shading comparison).</p>",
        "id": 174343255,
        "sender_full_name": "Sean",
        "timestamp": 1566981472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  if we compare nurbs(powered with gpu support) vs primitives raytrace, can it be possible to reach to primitive shoot performance ??</p>",
        "id": 174385919,
        "sender_full_name": "scorp08",
        "timestamp": 1567014620
    },
    {
        "content": "<p>It depends.  Are the primitives also GPU-accelerated?  Does the model fit on a GPU?  Are there more primitives and/or Boolean operations than there are NURBS control points? ... :)</p>",
        "id": 174389406,
        "sender_full_name": "Sean",
        "timestamp": 1567017357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  <a href=\"https://brlcad.org/wiki/OpenCL_GPGPU_Brep_Raytracing\" target=\"_blank\" title=\"https://brlcad.org/wiki/OpenCL_GPGPU_Brep_Raytracing\">https://brlcad.org/wiki/OpenCL_GPGPU_Brep_Raytracing</a> here is said that there needs to be conversion of object oriented C to strict ANSI C (C99- strict) for opencl . Why strict is neccessary ??</p>",
        "id": 174426130,
        "sender_full_name": "scorp08",
        "timestamp": 1567057943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> I think that statement is out-of-date and was written well before we had a preliminary pipeline.  The conversion that refers to is that the existing library uses a lot of function callbacks, which you can't do on the GPU.  The simple workaround was to just call the appropriate OpenCL callback explicitly, I believe.  Either way, it wasn't as complex as originally envisioned (or at least, it's all relative).</p>",
        "id": 174578099,
        "sender_full_name": "Sean",
        "timestamp": 1567195338
    },
    {
        "content": "<p>OH, sorry, I misread -- that's specifically about converting BREP objects to OpenCL.  Yes!  That must be converted to C.  I don't think the \"strict\" part is actually necessary in a language-sense.  I believe it's referring to the source code itself, that you don't have objects in OpenCL, only functions.  So if you're going to convert, you need functions to convert.</p>",
        "id": 174578291,
        "sender_full_name": "Sean",
        "timestamp": 1567195495
    },
    {
        "content": "<p>Still, more than half the code is already C.  It's the OpenNURBS portions (which are all C++) that would need to be extracted to be accelerated appropriately.</p>",
        "id": 174578337,
        "sender_full_name": "Sean",
        "timestamp": 1567195549
    },
    {
        "content": "<p>That's a half-dozen or so functions.</p>",
        "id": 174578390,
        "sender_full_name": "Sean",
        "timestamp": 1567195566
    },
    {
        "content": "<p>thnks for answers. I had convert parasolid to step then step to .g but some curves (due to complexity ) could not be seen in .g model and shootray was much more slower than the model that I created with primitives. That's why I thught to include a gpu support to see if there are speed ups. I have some basic knowledge about raytracing, nurbs  and  openCL. Could you recommend a source to study ??</p>",
        "id": 174862868,
        "sender_full_name": "scorp08",
        "timestamp": 1567587141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> yes primitives will almost always be faster because they use less memory and are really fast to intersect.  their downside is modeling time and usability, not performance.</p>",
        "id": 174982617,
        "sender_full_name": "Sean",
        "timestamp": 1567695830
    },
    {
        "content": "<p>there are massive potential speed ups for nurbs with both coherency optimization (shooting sets of rays instead of individually) as well as gpu or simd optimization.  it would be approximately 10x faster each, about 100x faster overall with both.  the same however can also be said of the primitives -- the same optimizations would also make them 100x faster.</p>",
        "id": 174982797,
        "sender_full_name": "Sean",
        "timestamp": 1567695959
    }
]