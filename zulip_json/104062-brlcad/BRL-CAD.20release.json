[
    {
        "content": "<p>I want to make sure that the brlcad.dll works with the next release (7.30.8). What's the best branch to test it? The code seems to go from <strong>trunk</strong> to <strong>RELEASE</strong> to <strong>STABLE</strong> to <strong>tags</strong>. I.e., RELEASE or STABLE would be a good candidate, or?</p>",
        "id": 195803775,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588229812
    },
    {
        "content": "<p>Right now, I'd go with RELEASE</p>",
        "id": 195832057,
        "sender_full_name": "starseeker",
        "timestamp": 1588250051
    },
    {
        "content": "<p>I think I'm synced to stable, but would need to double check - you may want to wait until we decide what to do about the iges-g  OSX bug report in case that requires code changes prior to release.</p>",
        "id": 195832205,
        "sender_full_name": "starseeker",
        "timestamp": 1588250158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Quickhull.hpp is one of the files behind the bot chull command.  A quick Linux test seems to work fine, but Windows is the one I'd want to check for that sort of change - IIRC it was the most work to get going originally.  I'll see if I'm in a building state with trunk on Windows...</p>",
        "id": 195832546,
        "sender_full_name": "starseeker",
        "timestamp": 1588250314
    },
    {
        "content": "<p>Seems to be OK on Windows.</p>",
        "id": 195842602,
        "sender_full_name": "starseeker",
        "timestamp": 1588255250
    },
    {
        "content": "<p>Okay, thanks, will test RELEASE then.</p>",
        "id": 195854881,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588259968
    },
    {
        "content": "<p>Hmm, RELEASE doesn't contain the off_t for Windows fixes. I can't build the 32 bit version with Visual Studio.</p>",
        "id": 196198086,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588606553
    },
    {
        "content": "<p>Another issue is the zlib in openNURBS: openNURBS-static is linked with zlib, i.e. the shared library version of it. This is not optimal for the brlcad.dll. I think, a static library shouldn't be linked with something else. This has to be done by the linker of the binary using the static library.<br>\n(I'm not sure, will test what happens.)</p>",
        "id": 196199678,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588607200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  I did some  updates to RELEASE today - do they help?   (not sure yet what to do about openNURBS, but I did notice the off_t wasn't in there so I've tried to backport it.)</p>",
        "id": 196259664,
        "sender_full_name": "starseeker",
        "timestamp": 1588642234
    },
    {
        "content": "<p>Unfortunately, it still doesn't work. E.g., src/libbu/vls.c doesn't compile.<br>\nI could find differences in include/config_win.h.in, include/bu/glob.h, and include/bu/vls.h which could be of relevance, but replacing them didn't fixed it. I wasn't able to find the difference between revision 75083b(my reference) which breaks the build yet.</p>\n<p>BTW, don't take care of the \"zlib in openNURBS\" thing. I can easily fix it for my purpose, and if it works I can regularly commit it to the trunk.</p>",
        "id": 196312206,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588687712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> I think I may have had to start from a clean build directory.</p>",
        "id": 196330514,
        "sender_full_name": "starseeker",
        "timestamp": 1588695533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> are you working with RELEASE or trunk?</p>",
        "id": 196330581,
        "sender_full_name": "starseeker",
        "timestamp": 1588695570
    },
    {
        "content": "<p>RELEASE is the one I thought I got working yesterday with the off_t updates...</p>",
        "id": 196330629,
        "sender_full_name": "starseeker",
        "timestamp": 1588695597
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> are you working with RELEASE or trunk?</p>\n</blockquote>\n<p>I did the tests with RELEASE, but compared them with a revision from the trunk where I know it works.</p>",
        "id": 196334248,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588697367
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> I think I may have had to start from a clean build directory.</p>\n</blockquote>\n<p>From which revision did you forked the RELEASE? The last one before the TCL upgrades?</p>\n<p>Maybe, you can choose a revision from the trunk for the fork, and I test this revision in advance if it works for me.</p>",
        "id": 196334628,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588697538
    },
    {
        "content": "<p>RELEASE was forked a long time back - we periodically merge from trunk.  The last big merge was well before the Tcl upgrade.</p>",
        "id": 196341421,
        "sender_full_name": "starseeker",
        "timestamp": 1588700699
    },
    {
        "content": "<p>Can you tell me what build error you were seeing with a vanilla RELEASE checkout that's current as of this morning?  Most likely culprit is something to do with the regex.h header...</p>",
        "id": 196341650,
        "sender_full_name": "starseeker",
        "timestamp": 1588700798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  I think I got past the libbu issue - let me know if that does it for you</p>",
        "id": 196354275,
        "sender_full_name": "starseeker",
        "timestamp": 1588706687
    },
    {
        "content": "<p>RELEASE compiles now with VS2019, both 32 and 64 bit.</p>",
        "id": 196605090,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588755484
    },
    {
        "content": "<p>Excellent, thanks!  Everything look like it is working OK?</p>",
        "id": 196630297,
        "sender_full_name": "starseeker",
        "timestamp": 1588770074
    },
    {
        "content": "<p>Until now: Yes.<br>\nI haven't done much tests yet, but the BrlCadViewer seems to work, at least.</p>",
        "id": 196631043,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588770408
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 196631145,
        "sender_full_name": "starseeker",
        "timestamp": 1588770462
    },
    {
        "content": "<p>Thanks! :)</p>",
        "id": 196631400,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588770560
    },
    {
        "content": "<p>np - thank you for catching it before we released!  trunk is still shaking down from a lot of changes, so I'd like 7.30.8 to be working as widely as possible while we work through the updates.</p>",
        "id": 196632168,
        "sender_full_name": "starseeker",
        "timestamp": 1588770884
    },
    {
        "content": "<p>This time I want to build a new brlcad.dll from the release. We found some bugs in the old one (from 2016?) and I would like to have an official new one.</p>",
        "id": 196650962,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588778686
    },
    {
        "content": "<p>very good - let me know if you have any trouble getting the dll to build from RELEASE branch.  I'm not ready to tag yet anyway, so there's still time to address any issues.</p>",
        "id": 196653752,
        "sender_full_name": "starseeker",
        "timestamp": 1588779852
    },
    {
        "content": "<p>For awareness, we're working on release testing for our next 7.42.0 release now.  This is a pretty big one with the new BoT ray tracing speed enhancements and support for concave arb8.  As such, big or risky commits should be kept to a minimum or put in branches until after release is tagged.  Anything big and we have to restart cross platform and integration testing.</p>\n<p>That said, if anyone is able and willing -- this release could use some additional hands-on testing.  Please report any anomalies, bombs, crashers, etc, especially anything in mged, rt* tools, gqa, any raytrace behaviors on bot or arbs, etc.  Even better if you can help fix anything you find, but the testing is worthwhile regardless.  I've found a fixed a number over the past few days just doing basic actions, so every little bit will help.</p>",
        "id": 532829939,
        "sender_full_name": "Sean",
        "timestamp": 1754367003
    },
    {
        "content": "<p>Far as I know, we're just about ready to release -- does anyone have any release blockers to put forward or has anyone encountered any unexpected failures?</p>",
        "id": 533845564,
        "sender_full_name": "Sean",
        "timestamp": 1754936682
    },
    {
        "content": "<p>MS Visual Studio complains about the <code>_Thread_local</code> in src/librt/primitives/bot/bot.c. <code>thread_local</code> doesn't work either, even if it's contained in the documentation. But, <code>__declspec(thread)</code> does.</p>\n<p>In addition, <strong>fuzz_shootray_test</strong> and <strong>fuzz_ged_test</strong> cannot be build. There is no <code>/fsanitze=fuzzer</code> linker option.</p>\n<p>However, I can live with these issues and hope to get the current compiler version soon.</p>",
        "id": 534191365,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1755077262
    },
    {
        "content": "<p>BTW, I was successful in compiling a MOOSE based brlcad.dll with only OS-dependencies, i.e. static C runtime linking. Its size is only 6.5 MB. Maybe, I'll prepare a release based on version 7.42.0.</p>",
        "id": 534441788,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1755163504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Which version of Visual Studio are you building with?</p>",
        "id": 534458478,
        "sender_full_name": "starseeker",
        "timestamp": 1755170403
    },
    {
        "content": "<p>We didn't see any issues with _Thread_local in our testing, which included Visual Studio 2022, so I'm a little curious.</p>",
        "id": 534458651,
        "sender_full_name": "starseeker",
        "timestamp": 1755170471
    },
    {
        "content": "<p>I'm using Visual Studio 16 (2019). Some of the more modern features (which may include C++11) may be not be supported by it.</p>",
        "id": 534459269,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1755170719
    },
    {
        "content": "<p>If you add this right before the _Thread_local usage, does it work?  </p>\n<div class=\"codehilite\"><pre><span></span><code>#if defined(HAVE_WINDOWS_H) &amp;&amp; !defined(_Thread_local)\n#  define _Thread_local __declspec(thread)\n#endif\n</code></pre></div>",
        "id": 534459323,
        "sender_full_name": "starseeker",
        "timestamp": 1755170736
    },
    {
        "content": "<p>Ah, yeah - that would explain it.  I'm more surprised the fuzzer tests tried to build at all - our tests for the compiler options must need tweaking.</p>",
        "id": 534459494,
        "sender_full_name": "starseeker",
        "timestamp": 1755170801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/channel/104062-brlcad/topic/BRL-CAD.20release/near/534459323\">said</a>:</p>\n<blockquote>\n<p>If you add this right before the _Thread_local usage, does it work?  </p>\n<p><div class=\"codehilite\"><pre><span></span><code>#if defined(HAVE_WINDOWS_H) &amp;&amp; !defined(_Thread_local)\n#  define _Thread_local __declspec(thread)\n#endif\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It works for MSVC 2019.</p>",
        "id": 534471481,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1755174111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Would it be worth a block in common.h to ensure _Thread_local is always defined?</p>",
        "id": 534526650,
        "sender_full_name": "starseeker",
        "timestamp": 1755191586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> that can't hurt.  We don't need to bend over backwards for 2019, but if it's still just a couple minor easy things like that, certainly worth it.</p>",
        "id": 534680710,
        "sender_full_name": "Sean",
        "timestamp": 1755275568
    },
    {
        "content": "<p>I've noticed the fuzzer issue -- that's been an issue in the windows warning logs for a couple years.  the test for the fuzzer flag passes despite it not working.  it emits an annoying warning.</p>",
        "id": 534680890,
        "sender_full_name": "Sean",
        "timestamp": 1755275648
    },
    {
        "content": "<p>I tried to quell/fix it a while back but cmake was fighting me on it.</p>",
        "id": 534680928,
        "sender_full_name": "Sean",
        "timestamp": 1755275669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/channel/104062-brlcad/topic/BRL-CAD.20release/near/532829939\">said</a>:</p>\n<blockquote>\n<p>For awareness, we're working on release testing for our next 7.42.0 release now.  This is a pretty big one with the new BoT ray tracing speed enhancements and support for concave arb8.  As such, big or risky commits should be kept to a minimum or put in branches until after release is tagged.  Anything big and we have to restart cross platform and integration testing.<br>\n...</p>\n</blockquote>\n<p>For anyone not paying attention, release 7.42.0 was posted (thanks to <span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span>) earlier this week.  On to the next one!</p>",
        "id": 534681487,
        "sender_full_name": "Sean",
        "timestamp": 1755275948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> So I don't get yelled at again - is this overkill?  </p>\n<div class=\"codehilite\"><pre><span></span><code>/* Make sure _Thread_local is defined.  Note that if __declspec(thread) or\n * __thread  are used, they will only work for &quot;plain old data&quot; types\n * with trivial constructors/destructors. */\n# if !defined(_Thread_local)\n#   if defined(__cplusplus)\n#     if __cplusplus &gt;= 201103L  // C++11 has thread_local keyword\n#       define _Thread_local thread_local\n#     elif defined(HAVE_WINDOWS_H)\n#       define _Thread_local __declspec(thread)\n#     elif defined(__GNUC__) || defined(__clang__)\n#       define _Thread_local __thread\n#     endif\n#   else\n#     if defined(__STDC_VERSION__) &amp;&amp; __STDC_VERSION__ &gt;= 202311L\n#       define _Thread_local thread_local // C23: thread_local is the standard keyword\n#     elif defined(HAVE_WINDOWS_H)\n#       define _Thread_local __declspec(thread)\n#     elif defined(__GNUC__) || defined(__clang__)\n#       define _Thread_local __thread\n#     endif\n#   endif\n# endif\n</code></pre></div>",
        "id": 534732798,
        "sender_full_name": "starseeker",
        "timestamp": 1755312002
    },
    {
        "content": "<p>I'm sorry <span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> I didn't mean anything to come across as yelling, just code health / maintenance commentary.</p>\n<p>Assuming it works, I think the code block you have there looks good!</p>\n<p>For the comment, I'd suggest tightening that up to not explain C/C++, but rather the implication.  It's a platform toggle so __declspec() and __thread ARE used, not \"if\"...  Maybe:</p>\n<p>/* make sure we have local threading, only to be used on C \"POD\" types */</p>",
        "id": 534738765,
        "sender_full_name": "Sean",
        "timestamp": 1755320473
    },
    {
        "content": "<p>Might be good to introduce a THREADLOCAL and use that (similar to EXTERNVARINT, NORETURN, etc) given _Thread_local is actually deprecated... (it's thread_local to sync with C++)</p>",
        "id": 534738930,
        "sender_full_name": "Sean",
        "timestamp": 1755320697
    },
    {
        "content": "<p>THREADLOCAL sounds good - is \"POD\" common enough shorthand that we can assume it is universally understood?  Just for myself, I had to ask GPT to clarify what it stood for - it's new to me.</p>",
        "id": 534760961,
        "sender_full_name": "starseeker",
        "timestamp": 1755348907
    }
]