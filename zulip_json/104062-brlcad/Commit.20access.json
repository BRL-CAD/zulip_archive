[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"106398\">@Cezar</span> you now have commit rights to the repository.</p>",
        "id": 127828925,
        "sender_full_name": "Sean",
        "timestamp": 1528569160
    },
    {
        "content": "<p>Thank you for all your efforts thus far.  With this access, you are formally welcomed to the development team with all the rights and responsibilities that are entailed.  Please (re-)read the section in the HACKING file about commit rights.</p>\n<p>The gist is to do your best, leave things better than you found them, and help fix anything you break. ;)</p>",
        "id": 127828976,
        "sender_full_name": "Sean",
        "timestamp": 1528569261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> you now have commit rights to the repository.</p>\n<p>You've done a great job working with your mentor on patch iterations and it'll be great to see that process streamlined now that you can work incrementally directly on the code you're working with.</p>\n<p>As I said, please read the HACKING file section about developers with commit rights, particularly your responsibilities and expectations.</p>",
        "id": 127829028,
        "sender_full_name": "Sean",
        "timestamp": 1528569411
    },
    {
        "content": "<p>wow thank you :)<br>\nwill read the commit rights section in HACKING file.</p>",
        "id": 127829132,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528569685
    },
    {
        "content": "<p>thank <em>you</em> for all you've done.  you've earned it, so keep up the good work.</p>",
        "id": 127829176,
        "sender_full_name": "Sean",
        "timestamp": 1528569749
    },
    {
        "content": "<p>don't hesitate to ask if you have any questions</p>",
        "id": 127829185,
        "sender_full_name": "Sean",
        "timestamp": 1528569785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> and <span class=\"user-mention\" data-user-id=\"106398\">@Cezar</span> please perform a simple test commit to the repository, to make sure I've set up everything on my end and you're good to go on your end</p>",
        "id": 127829354,
        "sender_full_name": "Sean",
        "timestamp": 1528570153
    },
    {
        "content": "<p>clean up a comment, fix a typo, indent a file, etc ... some improvement and try to commit</p>",
        "id": 127829406,
        "sender_full_name": "Sean",
        "timestamp": 1528570219
    },
    {
        "content": "<p>hmm okay will find something small to fix</p>",
        "id": 127829460,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528570357
    },
    {
        "content": "<p>okay I am gonna fix my name in authors file, is that fine?</p>",
        "id": 127829787,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528571142
    },
    {
        "content": "<p>ah, yes please!<br>\nsorry about that.  I see the mistake now.</p>",
        "id": 127829833,
        "sender_full_name": "Sean",
        "timestamp": 1528571203
    },
    {
        "content": "<p>It worked yay!</p>",
        "id": 127829947,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528571493
    },
    {
        "content": "<p>woot, that worked :)</p>",
        "id": 127829948,
        "sender_full_name": "Sean",
        "timestamp": 1528571496
    },
    {
        "content": "<p>so once you read hacking, you should be good to go</p>",
        "id": 127829987,
        "sender_full_name": "Sean",
        "timestamp": 1528571525
    },
    {
        "content": "<p>you cannot commit too frequently, so don't worry about committing 200 times a day if you're so inclined.  just make sure your commits make sense, don't knowingly break things, and that you have good commit messages that say what the code change does not (like why or summarizing points)</p>",
        "id": 127829994,
        "sender_full_name": "Sean",
        "timestamp": 1528571598
    },
    {
        "content": "<p>getting that \"With great powers, comes great responsibility\" vibe..</p>\n<blockquote>\n<p>have good commit messages that say what the code change does not (like why or summarizing points)</p>\n</blockquote>\n<p>you said \"not  (like why or summarizing points)\".  So the commit messages must be short?</p>",
        "id": 127830103,
        "sender_full_name": "Saran Narayan",
        "timestamp": 1528571842
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"109608\">@Saran Narayan</span> and <span class=\"user-mention\" data-user-id=\"106398\">@Cezar</span> please perform a simple test commit to the repository, to make sure I've set up everything on my end and you're good to go on your end</p>\n</blockquote>\n<p>done, it works</p>",
        "id": 127830917,
        "sender_full_name": "Cezar",
        "timestamp": 1528573512
    },
    {
        "content": "<p>excellent <span class=\"user-mention\" data-user-id=\"106398\">@Cezar</span> ... note that is a user-visible change given you measured performance and observed a significant improvement (10%) that we can likely expect to see broadly -- that means you can add a line to the NEWS file as well.</p>",
        "id": 127831088,
        "sender_full_name": "Sean",
        "timestamp": 1528573811
    },
    {
        "content": "<p>i've also started reading HACKING again. i'm wondering if <code>sh/indent.sh</code> is made obsolete by <code>sh/ws.sh</code>? or does indent make some other changes?</p>",
        "id": 127831098,
        "sender_full_name": "Cezar",
        "timestamp": 1528573877
    },
    {
        "content": "<p>i'll edit NEWS as well, but i'll try to do so via ssh</p>",
        "id": 127831151,
        "sender_full_name": "Cezar",
        "timestamp": 1528573945
    },
    {
        "content": "<p>i tried checking out via ssh a few days ago and got some errors</p>",
        "id": 127831154,
        "sender_full_name": "Cezar",
        "timestamp": 1528573960
    },
    {
        "content": "<p>ok, it's checking out now. that should make committing easier. i'm also curious about code reviews from now on. do i create a ticket and then commit myself when everything is fine, or do i just commit my changes and if any problem arises, fix on top of that?</p>",
        "id": 127831271,
        "sender_full_name": "Cezar",
        "timestamp": 1528574209
    },
    {
        "content": "<p>those scripts do slightly different things and are soon to be out-of-date so I wouldn't worry about it too much</p>",
        "id": 127831709,
        "sender_full_name": "Sean",
        "timestamp": 1528575191
    },
    {
        "content": "<blockquote>\n<p>ok, it's checking out now. that should make committing easier. i'm also curious about code reviews from now on. do i create a ticket and then commit myself when everything is fine, or do i just commit my changes and if any problem arises, fix on top of that?</p>\n</blockquote>\n<p>the latter!  no more tickets.  you're entrusted as part of the team now, and we're set up reactive instead of preventive.  that means committing and reacting to feedback is expected.</p>",
        "id": 127831803,
        "sender_full_name": "Sean",
        "timestamp": 1528575373
    },
    {
        "content": "<p>ok, i updated NEWS as well, and committing via ssh works properly here</p>",
        "id": 127831900,
        "sender_full_name": "Cezar",
        "timestamp": 1528575611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> you now have direct commit access to the repository.  Please test commit to the repository to make sure everything is set up correctly and feel free to commit at will (frequently).  ;)</p>",
        "id": 129751701,
        "sender_full_name": "Sean",
        "timestamp": 1531750119
    },
    {
        "content": "<p>you can read the section in the top-level HACKING file if you have any doubts about what you can/cannot do, or ask if needed, but thank you for all your work thus far!</p>",
        "id": 129751733,
        "sender_full_name": "Sean",
        "timestamp": 1531750169
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  .  But I'm unable to commit! \"authorization error E170001 \" .</p>",
        "id": 129768474,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531766803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> what is your checkout?</p>",
        "id": 129769385,
        "sender_full_name": "Sean",
        "timestamp": 1531767781
    },
    {
        "content": "<p>you (obviously?) need to supply your sf username and password either on first commit or on checkout, depending on whether you have an https or svn+ssh checkout</p>",
        "id": 129769500,
        "sender_full_name": "Sean",
        "timestamp": 1531767914
    },
    {
        "content": "<p>if you don't have one of those two, you will need to get a new checkout</p>",
        "id": 129769506,
        "sender_full_name": "Sean",
        "timestamp": 1531767932
    },
    {
        "content": "<p>Yup, I've got neither of the two, I'll have to checkout again</p>",
        "id": 129770731,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531769291
    },
    {
        "content": "<p>No offenses, but git is better :P</p>",
        "id": 129773210,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531771890
    },
    {
        "content": "<blockquote>\n<p>No offenses, but git is better :P</p>\n</blockquote>\n<p>no offense taken, I use both :)</p>",
        "id": 129782586,
        "sender_full_name": "Sean",
        "timestamp": 1531784512
    },
    {
        "content": "<p>nearly identical in basic usage.  svn is actually fewer steps and simpler in many respects (e.g., a svn commit == git commit+push)</p>",
        "id": 129782851,
        "sender_full_name": "Sean",
        "timestamp": 1531784834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> this may help, shows what the git commands are in svn</p>",
        "id": 129783177,
        "sender_full_name": "Sean",
        "timestamp": 1531785337
    },
    {
        "content": "<p><a href=\"https://git-scm.com/course/svn.html\" target=\"_blank\" title=\"https://git-scm.com/course/svn.html\">https://git-scm.com/course/svn.html</a></p>",
        "id": 129783182,
        "sender_full_name": "Sean",
        "timestamp": 1531785340
    },
    {
        "content": "<p>or more concisely: <a href=\"https://www.perforce.com/blog/list-of-equivalent-commands-in-git-mercurial-and-svn\" target=\"_blank\" title=\"https://www.perforce.com/blog/list-of-equivalent-commands-in-git-mercurial-and-svn\">https://www.perforce.com/blog/list-of-equivalent-commands-in-git-mercurial-and-svn</a></p>",
        "id": 129783241,
        "sender_full_name": "Sean",
        "timestamp": 1531785394
    },
    {
        "content": "<blockquote>\n<p>nearly identical in basic usage.  svn is actually fewer steps and simpler in many respects (e.g., a svn commit == git commit+push)</p>\n</blockquote>\n<p>True dat ! Best part .</p>",
        "id": 129799830,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1531814276
    },
    {
        "content": "<p>i think git is faster when doing things like <code>log</code>, and doesn't require an internet connection (committing some changes also doesn't require internet). i know the reason, but the end result is still this. i think the speeds when checking out code are also faster, but i might've got the wrong impression or might be sourceforge's fault</p>",
        "id": 129810845,
        "sender_full_name": "Cezar",
        "timestamp": 1531831839
    },
    {
        "content": "<p>svn doesn't seem to have something like <code>git add -i</code>, and i think it's useful when making unrelated changes to the same file, or if you want to exclude some whitespace changes in a commit</p>",
        "id": 129810920,
        "sender_full_name": "Cezar",
        "timestamp": 1531831948
    },
    {
        "content": "<blockquote>\n<p>No offenses, but git is better :P</p>\n</blockquote>\n<p>No offenses, but svn is better ;)</p>\n<p>The big issue with git is that you have to take care for at least two databases: The local one on your computer and a distant one on a server (supposing you want to contribute to someones project or publish your own stuff). This isn't trivial. When <span class=\"user-mention\" data-user-id=\"106398\">@Cezar</span> writes that 'log' is faster then he could made a mistake here, because he looked only at his private database but not at the one on the server (which could have new commits). There are pros and cons of database duplication.</p>\n<p>And what disqualifies git entirely is that there is no good GUI for it.</p>",
        "id": 129884701,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1531934698
    },
    {
        "content": "<blockquote>\n<p>The big issue with git is that you have to take care for at least two databases</p>\n</blockquote>\n<p>i'm not familiar with the problem here. i don't really think you take care of two databases. the contributor gets the source, makes his changes, sends them upstream somehow (in the case of github, via pull requests, but there are other mechanisms). the maintainer merges the changes and solves conflicts, if they arise. i'm not seeing how someone has to take care of many databases. i suppose you have to fetch changes from upstream, but it's the same with svn</p>\n<blockquote>\n<p>And what disqualifies git entirely is that there is no good GUI for it.</p>\n</blockquote>\n<p>fair point. do you mean tortoise svn? i don't have experience with git guis, but have you looked at git-tower?</p>",
        "id": 129899742,
        "sender_full_name": "Cezar",
        "timestamp": 1531953223
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>The big issue with git is that you have to take care for at least two databases</p>\n</blockquote>\n<p>i'm not familiar with the problem here. i don't really think you take care of two databases. the contributor gets the source, makes his changes, sends them upstream somehow (in the case of github, via pull requests, but there are other mechanisms). the maintainer merges the changes and solves conflicts, if they arise. i'm not seeing how someone has to take care of many databases. i suppose you have to fetch changes from upstream, but it's the same with svn</p>\n</blockquote>\n<p>Cloning a git repository means to copy its database. I.e., if you clone a git repository from (e.g.) github on your PC at home you copy its database to your computer. This enables you to view the history, make commits, etc. offline. I.e., at least two databases: The projects repository at the internet and the one on your computer.<br>\nAnd, you have to know that you must push the changes to the projects git repository to publish them. A <em>green</em> status in git means that all changes are committed locally, but the system itself doesn't remind you to publish your changes to the projects main repository.</p>\n<p>On the other hand in subversion, you have to commit your changes to the server to get the <em>green</em> status, i.e. the system insists in publishing them. It's a client-server-system: The repository is hosted on a server in the internet and you have only a client program on your computer. For every real action (getting the history, commit changes, etc.) it has to contact the server. But the system can remind you if you get out of sync.</p>\n<p>As I said, there are pros and cons.</p>\n<blockquote>\n<blockquote>\n<p>And what disqualifies git entirely is that there is no good GUI for it.</p>\n</blockquote>\n<p>fair point. do you mean tortoise svn? i don't have experience with git guis, but have you looked at git-tower?</p>\n</blockquote>\n<p>Not necessarily TortoiseSVN (which is good), the old integration in KDE was good too. The git integration in KDE is very rudimentary, and TortoiseGIT can't be installed as easily as TortoiseSVN and you need to be a git expert to know what the menu options really mean.</p>\n<p>Git Tower seems to be closed source.</p>",
        "id": 129943142,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1532019663
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>No offenses, but git is better :P</p>\n</blockquote>\n<p>No offenses, but svn is better ;)</p>\n<p>The big issue with git is that you have to take care for at least two databases: The local one on your computer and a distant one on a server (supposing you want to contribute to someones project or publish your own stuff). </p>\n</blockquote>\n<p>Working on two databases ensures that there is no single point of failure. Everyone has a backup of the project data. Imagine the svn server suffering from a kind of corruption and the last backup was quite a time ago. It'll take a lot of time to get the project timeline back on track.</p>",
        "id": 129972862,
        "sender_full_name": "Shubham Rathore",
        "timestamp": 1532057818
    },
    {
        "content": "<blockquote>\n<p>svn doesn't seem to have something like <code>git add -i</code>, and i think it's useful when making unrelated changes to the same file, or if you want to exclude some whitespace changes in a commit</p>\n</blockquote>\n<p>It doesn't have interactive staging because there's no need to stage.  In a way, it avoids that step as a matter of efficiency, limitation, principle, or whatever perspective one chooses to value.</p>",
        "id": 130079418,
        "sender_full_name": "Sean",
        "timestamp": 1532227950
    },
    {
        "content": "<p>Logging taking longer is entirely a function of having the repo live on a remote server.  If the server is local, there isn't a difference.  Remote git cloning is typically no faster or slower (at least not in a significant way) than svn.</p>",
        "id": 130079470,
        "sender_full_name": "Sean",
        "timestamp": 1532228083
    },
    {
        "content": "<blockquote>\n<p>Logging taking longer is entirely a function of having the repo live on a remote server.  If the server is local, there isn't a difference.  Remote git cloning is typically no faster or slower (at least not in a significant way) than svn.</p>\n</blockquote>\n<p>i do understand the reason, but it doesn't change the end result (slower operations when needing to reach the server)</p>",
        "id": 130113595,
        "sender_full_name": "Cezar",
        "timestamp": 1532291580
    },
    {
        "content": "<p>i suppose i still don't understand why git's model is problematic. i understand how they're different, but i don't see why one is better than the other</p>",
        "id": 130113724,
        "sender_full_name": "Cezar",
        "timestamp": 1532291735
    },
    {
        "content": "<blockquote>\n<p>i suppose i still don't understand why git's model is problematic. i understand how they're different, but i don't see why one is better than the other</p>\n</blockquote>\n<p>Both can be problematic or no problem whatsoever.  It depends on many factors including how many developers, what kind of development workflows are in place, how software assurance is asserted in the project, whether that's even something the developer(s) think about, whether there's social interaction among developers, how frequent they interact, ...</p>",
        "id": 130162284,
        "sender_full_name": "Sean",
        "timestamp": 1532367444
    },
    {
        "content": "<p>there are clear cases where git (or more specifically distributed VCS or a VCS with offline commit capability) is superior -- e.g., if a team's developers are frequently disconnected from the internet, you really want offline commit or fast local branching (or both).  if you don't have a team and are coding by yourself, it's also clearly superior to have all the repo right at your fingertips (but then I would have put the server at my fingertips even in a centralized VCS, so it's moot performance-wise).</p>",
        "id": 130162796,
        "sender_full_name": "Sean",
        "timestamp": 1532367963
    },
    {
        "content": "<p>the differences and considerations grow as you introduce interactions and developers</p>",
        "id": 130162816,
        "sender_full_name": "Sean",
        "timestamp": 1532367983
    },
    {
        "content": "<p>if nothing is done until it's pushed to a central repository, then is should be obvious how a centralized vcs would be more efficient at doing this</p>",
        "id": 130162860,
        "sender_full_name": "Sean",
        "timestamp": 1532368031
    },
    {
        "content": "<p>if that change must be communicated to a team of others so that everyone knows what is going on, then you really want commits to be small and succinct -- as readable and quickly reviewable as possible</p>",
        "id": 130162961,
        "sender_full_name": "Sean",
        "timestamp": 1532368113
    },
    {
        "content": "<p>communicating to a team in the 5-25 range, DVCS can be incredibly harmful as the local commit capability tends to lead towards larger feature-based changes (e.g., GitFlow model) that are typically no longer reviewed at a source code level. they also tend to come in much bigger dumps, also practically impossible to review unless you have 100's of developers and/or that's your full time job (e.g., the Linux kernel model)</p>",
        "id": 130163093,
        "sender_full_name": "Sean",
        "timestamp": 1532368239
    }
]