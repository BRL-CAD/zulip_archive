[
    {
        "content": "<p>import  IGES  or STEP<br>\nerror！！！</p>",
        "id": 518921704,
        "sender_full_name": "claymonkey",
        "timestamp": 1747574467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"782450\">@claymonkey</span> iges import is tricky as you have to know and specify the type, and even then it can have problems if the data is not clean -- there are lots of iges exporters that export junk.  </p>\n<p>with step import, the most common cause is trying to import something that is not ap203e1 -- that's all that's presently supported.  some like ap214 or e2 are also common.</p>",
        "id": 518989530,
        "sender_full_name": "Sean",
        "timestamp": 1747627631
    },
    {
        "content": "<p>I tried to use the reading method of OpenCaseCAD to parse IGEs. However, it was very troublesome to convert all faces into NURBSface+NURBScurve logic. Especially when I wanted to translate the type into other BREPS models, the speed was very unsatisfactory. This reminded me of the BREPS structure in the current software, but errors frequently occurred when I tried to import it.</p>",
        "id": 520672759,
        "sender_full_name": "claymonkey",
        "timestamp": 1748353435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"782450\">@claymonkey</span> what is your use case, end goal?</p>",
        "id": 521350136,
        "sender_full_name": "Sean",
        "timestamp": 1748629507
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 521495475,
        "sender_full_name": "claymonkey",
        "timestamp": 1748744229
    },
    {
        "content": "<p>Try to parse the CAD file by yourself and convert it into a creatable BREP type.</p>",
        "id": 521495515,
        "sender_full_name": "claymonkey",
        "timestamp": 1748744271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"782450\">@claymonkey</span> so just for the technical challenge?  or some other purpose? parsing and converting from iges/step to some brep in-memory structure is not exactly an end-use case..  </p>\n<p>If you're working with BRL-CAD, the 3dm-g is by far the best brep import method that imports faithfully &amp; natively using OpenNURBS.  Next best is step-g if it's an ap203e1 file.  The iges-g importer hasn't been tested or used in production use for nearly a decade, but it has extensive code for multiple import methods and encoding types (including automatic re-encoding of bspline to NURBS) but also less reliable if there are any errors in the geometry.</p>",
        "id": 521505821,
        "sender_full_name": "Sean",
        "timestamp": 1748751757
    },
    {
        "content": "<p>Because I found that the Brep type of openNurbs is quite similar to that of opencascad, when some programs do not support certain operations, I thought of using the underlying feedback information to create corresponding ones, hoping that other open-source methods can handle them more precisely.</p>",
        "id": 521527716,
        "sender_full_name": "claymonkey",
        "timestamp": 1748766915
    },
    {
        "content": "<p>It is indeed similar, but not 1-1 identical if memory serves.</p>",
        "id": 521556957,
        "sender_full_name": "Sean",
        "timestamp": 1748786285
    },
    {
        "content": "<p>so are you looking to bridge geometry from some application built on opencascade into brl-cad, to some operation that brl-cad handles better, and then convert it back?</p>",
        "id": 521557028,
        "sender_full_name": "Sean",
        "timestamp": 1748786347
    },
    {
        "content": "<p>Yes, if multiple software functions are combined, then only common cad types can be used for conversion. After all, brep will not be exactly the same</p>",
        "id": 521557467,
        "sender_full_name": "claymonkey",
        "timestamp": 1748786620
    },
    {
        "content": "<p>that would certainly be feasible for brep and/or polygonal types I'd think</p>",
        "id": 521557568,
        "sender_full_name": "Sean",
        "timestamp": 1748786668
    },
    {
        "content": "<p>problematic encodings are typically:  implicits, csg booleans, volumetric/voxel data, level sets, subdivision surfaces, t-splines, medial axis, signed distance fields, and parametric ops like sweep/loft/extrude</p>",
        "id": 521557893,
        "sender_full_name": "Sean",
        "timestamp": 1748786875
    },
    {
        "content": "<p>brep is more amenable, includes triangles, polygons, bezier patches, b-spline patches, and nurbs surfaces</p>",
        "id": 521558037,
        "sender_full_name": "Sean",
        "timestamp": 1748786956
    },
    {
        "content": "<p>Perhaps FACE can be parsed as a combination of the basic NurbsSurface and CurvesToTrimed<br>\n. Then perhaps in any logic, there will be corresponding creation methods.</p>",
        "id": 521558374,
        "sender_full_name": "claymonkey",
        "timestamp": 1748787178
    },
    {
        "content": "<p>There was some work done a while back on opennurbs -&gt; opencascade, IIRC - I think it was this?  <a href=\"https://www.cnblogs.com/opencascade/p/opennurbs2opencascade.html\">https://www.cnblogs.com/opencascade/p/opennurbs2opencascade.html</a></p>",
        "id": 521616069,
        "sender_full_name": "starseeker",
        "timestamp": 1748822052
    },
    {
        "content": "<p>I recall hunting around a while back because going to/from opennurbs and opencascade data types would be a  keystone of a converter of .g geometry to/from FreeCAD</p>",
        "id": 521616154,
        "sender_full_name": "starseeker",
        "timestamp": 1748822128
    },
    {
        "content": "<p>It would be really awesome if we had two way communication with FreeCAD, but my recollection is that the problem is fairly involved - NURBS BRep objects have a LOT of subtypes, and there are subtleties that need to be taken into account.</p>",
        "id": 521616276,
        "sender_full_name": "starseeker",
        "timestamp": 1748822215
    }
]