[
    {
        "content": "<p>I went through GSoC project plans of 2018,’19,’20<br>\nSo these were the projects I found most interesting :</p>",
        "id": 225348245,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1612554928
    },
    {
        "content": "<p>1)Improving ray tracing looked very interesting as it involved a lot of algorithms and increasing efficiency sort of thing, but it was marked hard on github, so I had second thoughts on this.</p>",
        "id": 225348259,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1612554939
    },
    {
        "content": "<p>2) Expanding on Rishabh’s work for other primitives, and I’ll also get to learn OpenCL for this. I’m expecting it to be easier as similar work has already been done.</p>",
        "id": 225348270,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1612554945
    },
    {
        "content": "<p>3)Adding annotation, GSoC ‘19, this also looked very useful to expand upon. I was thinking if we could add automatic dimensioning, like instead of selecting 2 points and then getting a dimension, if we directly select a circle and its radius is dimensioned (more params could be given to position better), etc</p>",
        "id": 225348280,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1612554950
    },
    {
        "content": "<p>I haven't researched too deeply about them, but these were the ones that looked best to me at first glance</p>",
        "id": 225348436,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1612555015
    },
    {
        "content": "<p>I would love to hear your comments and which would be best suited to work upon</p>",
        "id": 225348481,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1612555037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> those are all interesting project ideas.  You'll just want to make sure you scope your proposal appropriately.  If you've not done performance profiling and/or ray tracing before, I wouldn't recommend #1; if you've not done OpenCL or Cuda before, I wouldn't be too excited about you doing #2 either at least until/unless I saw a useful patch from you involving OpenCL.  The timeframe of GSoC is such that there's not going to be much time to learn -- so you should propose something that you have skills for already.  That way, the time you spent learning is on learning BRL-CAD's code.  No matter which you intend to propose, you should be prepared to submit a patch specifically related to that topic (it can be minor or not, but it should be related).</p>",
        "id": 225559860,
        "sender_full_name": "Sean",
        "timestamp": 1612797981
    },
    {
        "content": "<p>Okay got it.<br>\nSo could you suggest me some bug for raytracing or related to openCL?</p>",
        "id": 225586691,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1612808780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> You'll first want to compile with OpenCL enabled and with OpenCL disabled, so you can compare the two side-by-side.  See CMake for the flag on turning opencl on.  After compiling, run rt with the -z option on to do an opencl render.</p>",
        "id": 225796981,
        "sender_full_name": "Sean",
        "timestamp": 1612936117
    },
    {
        "content": "<p>There's a number of potential opencl issues you could tackle, but getting set up and showing basic competency first is important.  Next, you could tackle something related to either of the two OpenCL tasks listed in the top-level TODO file (search for \"OpenCL\").</p>",
        "id": 225797084,
        "sender_full_name": "Sean",
        "timestamp": 1612936295
    },
    {
        "content": "<p>For gsoc application purposes, the second one (clFFT) is probably more achievable as it's more isolated and easier to explain, but anything you can do related to the first one (boolean weaving) is more important even if it doesn't involve OpenCL (e.g., write an isolated unit test for it).</p>",
        "id": 225797288,
        "sender_full_name": "Sean",
        "timestamp": 1612936555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/225796981\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> You'll first want to compile with OpenCL enabled and with OpenCL disabled, so you can compare the two side-by-side.  See CMake for the flag on turning opencl on.  After compiling, run rt with the -z option on to do an opencl render.</p>\n</blockquote>\n<p>Okay I will start with this</p>",
        "id": 225797567,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1612936880
    },
    {
        "content": "<p>I installed OpenCL using <code>apt install ocl-icd-opencl-dev</code> and also downloaded the Nvidia SDK <br>\nNext I did to <code>cmake .. -DBRLCAD_BUNDLED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DBRLCAD_ENABLE_OPENCL=ON </code><br>\nThis gave<br>\n-- Could not find OpenCl (missing: PENCL_ROOT_DIR OPENCL_INCLUDE_DIRS OPENCL_VERSION)<br>\nI tinkered a lot to find out where I had to specify them<br>\nBut I couldn't get what to do, so could you tell me how to proceed?</p>",
        "id": 226041389,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613070349
    },
    {
        "content": "<p>If anyone is free could they guide me on compiling with OpenCL enabled</p>",
        "id": 226297227,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613298211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> make sure you delete your CMakeCache.txt file after running apt install, so it doesn't use a cached result when looking for whether it's available.</p>",
        "id": 226772274,
        "sender_full_name": "Sean",
        "timestamp": 1613631951
    },
    {
        "content": "<h1>While locating the root directory, the module will try to detect OpenCL</h1>\n<h1>implementations provided by AMD's Accelerated Parallel Processing SDK,</h1>\n<h1>NVIDIA's GPU Computing Toolkit and Intel's OpenCL SDK by examining the</h1>\n<h1>AMDAPPSDKROOT, CUDA_PATH and INTELOCLSDKROOT environment variables,</h1>\n<h1>respectively.</h1>",
        "id": 226772374,
        "sender_full_name": "Sean",
        "timestamp": 1613632062
    },
    {
        "content": "<p>So it sounds like you need to set CUDA_PATH if you intend to use Nvidia's opencl toolkit</p>",
        "id": 226772436,
        "sender_full_name": "Sean",
        "timestamp": 1613632105
    },
    {
        "content": "<p>alternatively you can set OPENCL_ROOT_DIR and OPENCL_INCLUDE_DIRS and OPENCL_VERSION directly, but you shouldn't need to.</p>",
        "id": 226772470,
        "sender_full_name": "Sean",
        "timestamp": 1613632170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/226772374\">said</a>:</p>\n<blockquote>\n<h1>While locating the root directory, the module will try to detect OpenCL</h1>\n<h1>implementations provided by AMD's Accelerated Parallel Processing SDK,</h1>\n<h1>NVIDIA's GPU Computing Toolkit and Intel's OpenCL SDK by examining the</h1>\n<h1>AMDAPPSDKROOT, CUDA_PATH and INTELOCLSDKROOT environment variables,</h1>\n<h1>respectively.</h1>\n</blockquote>\n<p>So I installed Intel's OpenCL SDK and did set INTELOCSDKROOT to the correct folder</p>",
        "id": 226773374,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613633104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/226772274\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> make sure you delete your CMakeCache.txt file after running apt install, so it doesn't use a cached result when looking for whether it's available.</p>\n</blockquote>\n<p>Even did this</p>",
        "id": 226773485,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613633199
    },
    {
        "content": "<p>But still it says<br>\n-- Could NOT find OpenCL (missing: OPENCL_ROOT_DIR OPENCL_INCLUDE_DIRS OPENCL_VERSION)</p>",
        "id": 226773582,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613633286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/226773374\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/226772374\">said</a>:</p>\n<blockquote>\n<h1>While locating the root directory, the module will try to detect OpenCL</h1>\n<h1>implementations provided by AMD's Accelerated Parallel Processing SDK,</h1>\n<h1>NVIDIA's GPU Computing Toolkit and Intel's OpenCL SDK by examining the</h1>\n<h1>AMDAPPSDKROOT, CUDA_PATH and INTELOCLSDKROOT environment variables,</h1>\n<h1>respectively.</h1>\n</blockquote>\n<p>So I installed Intel's OpenCL SDK and did set INTELOCSDKROOT to the correct folder</p>\n</blockquote>\n<p>Okay..... I made a typo here, INTELOCSDKROOT ,missed the 'L' that's why it wasn't recognizing OpenCL all this while</p>",
        "id": 226774015,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613633744
    },
    {
        "content": "<p>Its working now</p>",
        "id": 226774045,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613633763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/225796981\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> You'll first want to compile with OpenCL enabled and with OpenCL disabled, so you can compare the two side-by-side.  See CMake for the flag on turning opencl on.  After compiling, run rt with the -z option on to do an opencl render.</p>\n</blockquote>\n<p>Done :)</p>",
        "id": 226790988,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613644221
    },
    {
        "content": "<p>Woohoo!  So next see if you can observe the performance difference on a specific object.  Pick any of the primitives in src/librt/primitives/OBJdirs that have an opencl  implementation, create one (or lots of that type) in mged, then ray trace it with ocl and without (helps to keep two compiles on hand) using \"time rt\" outside of mged.</p>",
        "id": 226931836,
        "sender_full_name": "Sean",
        "timestamp": 1613722430
    },
    {
        "content": "<p>you'll want a render that takes at least a few seconds to complete, which you can achieve by adding the -H flag (e.g., -H10 will increase work by 10x, -H100 by 100x) or -s flag (makes a bigger image, e.g., -s10000 for a 10000x10000 image).</p>",
        "id": 226932243,
        "sender_full_name": "Sean",
        "timestamp": 1613722739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> once you have that demonstrated, the next step would be to focus on related coding.  If you're set on submitting OpenCL for gsoc, I suggest focusing on learning about boolean weaving -- rt_boolweave() and rt_boolfinal() being critical functions.  I'd suggest trying to write a tiny little main() program that calls either function.  Try to the bare minimum to set up proper inputs, call the function, and show that it did something.  A simplistic unit test of sorts.</p>",
        "id": 226933473,
        "sender_full_name": "Sean",
        "timestamp": 1613723578
    },
    {
        "content": "<p>Okay will start working on this <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 226935911,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613725186
    },
    {
        "content": "<p>When I tried to run time rt -z 1 sphere.g sph1.s<br>\nit gave me an error, failed to set OpenCL kernel arguments<br>\nI'm attaching the terminal output and the log it generated.<br>\n<a href=\"/user_uploads/1549/SRyAGNj6NQjCgIBbYtwvDLwM/output.txt\">output.txt</a> <br>\n<a href=\"/user_uploads/1549/G011czkVksoa_rc5PIYm2v3F/rt-22345-bomb.log\">rt-22345-bomb.log</a></p>",
        "id": 227016020,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613763173
    },
    {
        "content": "<p>I tried applying this patch - <a href=\"https://sourceforge.net/p/brlcad/patches/551/\">https://sourceforge.net/p/brlcad/patches/551/</a><br>\nbut it doesn't seem to solve the problem</p>",
        "id": 227021816,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613765677
    },
    {
        "content": "<p>The patch dint get applied properly before, problem solved</p>",
        "id": 227025067,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613767289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/226931836\">said</a>:</p>\n<blockquote>\n<p>Woohoo!  So next see if you can observe the performance difference on a specific object. </p>\n</blockquote>\n<p>I tried it for a sphere with -H1000, the OpenCL enabled compilation did it in 15s wile the other one took 24s. So I think I can consider this done :)</p>",
        "id": 227027223,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613768284
    },
    {
        "content": "<p>Excellent <span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> .  I mean, that's not a huge performance gain oddly enough, but good to see different numbers.  Have you ever run a profile before? It would be informative to know where the time was spent for both of those.  If you're on Windows, would be good to set up Intel VTune.  If you're on Linux, Perf is really easy to set up.  On Mac, Instruments is king.</p>",
        "id": 227036715,
        "sender_full_name": "Sean",
        "timestamp": 1613772520
    },
    {
        "content": "<p>See if you can figure out what top ten functions they're spending their time in for ocl vs non-ocl runs.</p>",
        "id": 227036927,
        "sender_full_name": "Sean",
        "timestamp": 1613772587
    },
    {
        "content": "<p>No, I haven't run a profile before. I setup perf and got the top CPU consuming functions<br>\nwith ocl: <a href=\"/user_uploads/1549/IJjduodLYFoXJRuWhjT8nsZt/with_ocl.png\">with_ocl.png</a><br>\nwithout ocl: <a href=\"/user_uploads/1549/bjlq3rAVCOwqlpU-06hXzgnO/without_ocl.png\">without_ocl.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/IJjduodLYFoXJRuWhjT8nsZt/with_ocl.png\" title=\"with_ocl.png\"><img src=\"/user_uploads/1549/IJjduodLYFoXJRuWhjT8nsZt/with_ocl.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/1549/bjlq3rAVCOwqlpU-06hXzgnO/without_ocl.png\" title=\"without_ocl.png\"><img src=\"/user_uploads/1549/bjlq3rAVCOwqlpU-06hXzgnO/without_ocl.png\"></a></div>",
        "id": 227088307,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613823841
    },
    {
        "content": "<p>nifty! (it might also be interesting to see how -J impacts performance differences?). Does RoCM's cuda backend change openCL's place in the world?</p>",
        "id": 227104261,
        "sender_full_name": "Erik",
        "timestamp": 1613840793
    },
    {
        "content": "<p>That's a good thing to check - <span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> see what performance looks like with rt -P1 for ocl vs non.  That requests a single CPU core.  Also notice in that non-opencl profile rt_boolweave() and rt_boolfinal() ... that's the two functions mentioned earlier.</p>",
        "id": 227111449,
        "sender_full_name": "Sean",
        "timestamp": 1613848438
    },
    {
        "content": "<p>I tried to observe the differences with the previous values, when applying  the -J and -P 1 flags separately , with  -J CPU usage went up in both cases but while using the -P 1 flag I did not observe any major change in values</p>",
        "id": 227187419,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613934520
    },
    {
        "content": "<p>Meanwhile, I generated the executable for rtexample.c, but when I try to run it using ./rtexample, it says:<br>\n<code>error while loading shared libraries: libbu.so.20: cannot open shared file: No such file or directory</code></p>",
        "id": 227192174,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613939547
    },
    {
        "content": "<p>The directory I linked while compiling does have the libbu.so.20 file</p>",
        "id": 227192253,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1613939629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/227192174\">said</a>:</p>\n<blockquote>\n<p>Meanwhile, I generated the executable for rtexample.c, but when I try to run it using ./rtexample, it says:<br>\n<code>error while loading shared libraries: libbu.so.20: cannot open shared file: No such file or directory</code></p>\n</blockquote>\n<p>I solved this. I had to to put an env variable to the dir i had linked</p>",
        "id": 227313753,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614018337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/226933473\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> once you have that demonstrated, the next step would be to focus on related coding.  If you're set on submitting OpenCL for gsoc, I suggest focusing on learning about boolean weaving -- rt_boolweave() and rt_boolfinal() being critical functions.  I'd suggest trying to write a tiny little main() program that calls either function.  Try to the bare minimum to set up proper inputs, call the function, and show that it did something.  A simplistic unit test of sorts.</p>\n</blockquote>\n<p>I understood how rtexample.c works more or less. I will start working on this.</p>",
        "id": 227315491,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614019046
    },
    {
        "content": "<p>Is there some place where I get previous year GSoC proposals that were accepted/rejected?</p>",
        "id": 227833543,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614285029
    },
    {
        "content": "<p>Did you had a look at <a href=\"https://brlcad.org/wiki/Google_Summer_of_Code\">https://brlcad.org/wiki/Google_Summer_of_Code</a> ? Some of the abstracts are still accessible.</p>",
        "id": 227920060,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1614342364
    },
    {
        "content": "<p>Yeah I did<br>\nMost of the  devlogs and project plans are accessible but abstracts aren't</p>",
        "id": 227950213,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614356112
    },
    {
        "content": "<p>And the project plans looked very brief</p>",
        "id": 227950227,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614356117
    },
    {
        "content": "<p>Maybe, this is a better one: <a href=\"https://brlcad.org/wiki/User:Clouddrift/GSoC2014\">https://brlcad.org/wiki/User:Clouddrift/GSoC2014</a></p>\n<p>For the BRL-CAD project I can assure you that we will ask for more details if they are missing. I.e., you won't fail because of a too brief first version of your proposal, provided that it shows a honest intent. However, the final version should address all our requests ;)</p>",
        "id": 227961939,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1614360797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> We're also totally cool with this being a collaborative process if you want to start on a proposal and share progress as you go along  for awareness/feedback.  It doesn't/shouldn't be a \"throw it over the wall\" when you think you're done.  Happy to discuss it with you and help you figure out how to scope it appropriately.</p>",
        "id": 227974260,
        "sender_full_name": "Sean",
        "timestamp": 1614365681
    },
    {
        "content": "<p>Thank you!<br>\nI was planning on starting with the proposal parallelly as I explore the code base. I'll start once my exams get done on Monday. <br>\nBtw is there some quick way to find out what all primitives have successfully been parallelized using OpenCL?</p>",
        "id": 227974876,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614365904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/226933473\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> once you have that demonstrated, the next step would be to focus on related coding.  If you're set on submitting OpenCL for gsoc, I suggest focusing on learning about boolean weaving -- rt_boolweave() and rt_boolfinal() being critical functions.  I'd suggest trying to write a tiny little main() program that calls either function.  Try to the bare minimum to set up proper inputs, call the function, and show that it did something.  A simplistic unit test of sorts.</p>\n</blockquote>\n<p>I have made a small program that calls rt_boolweave() with minimum inputs. <a href=\"/user_uploads/1549/jxIOQCVPH6_ewSLnvwrpz5Li/hello_boolweave.c\">hello_boolweave.c</a></p>",
        "id": 227980420,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614368190
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/EXqZelqUKqEiOBadg4N0a9V0/hello_boolweave_output.png\">hello_boolweave_output.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/EXqZelqUKqEiOBadg4N0a9V0/hello_boolweave_output.png\" title=\"hello_boolweave_output.png\"><img src=\"/user_uploads/1549/EXqZelqUKqEiOBadg4N0a9V0/hello_boolweave_output.png\"></a></div>",
        "id": 227980748,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614368310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/227974876\">said</a>:</p>\n<blockquote>\n<p>Btw is there some quick way to find out what all primitives have successfully been parallelized using OpenCL?</p>\n</blockquote>\n<p>Sure, you can just run: grep -r *.cl .</p>\n<p>That'll report all the opencl files in the source tree.</p>",
        "id": 227982777,
        "sender_full_name": "Sean",
        "timestamp": 1614369140
    },
    {
        "content": "<p>the primitives are in subdirs under src/librt/primitives, so that'll be all the current committed ones.  There are a couple more sitting in pending patches I believe.</p>",
        "id": 227982868,
        "sender_full_name": "Sean",
        "timestamp": 1614369188
    },
    {
        "content": "<p>Cool progress on rt_boolweave() .. you may be the first to actually write a standalone that directly calls it, even if it's not yet doing anything useful.  Do you think you can whittle that down to what is strictly necessary?  More than half that code is for calling rt_shootray() which you don't / won't need to do.</p>",
        "id": 227983746,
        "sender_full_name": "Sean",
        "timestamp": 1614369542
    },
    {
        "content": "<p>Sure, will do</p>",
        "id": 227983848,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614369578
    },
    {
        "content": "<p>Should I remove the checks also like RT_CK_AP?</p>",
        "id": 227984554,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614369834
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/4rjk-P7d67Z9OPBKaP4VrKtS/hello_boolweave.c\">hello_boolweave.c</a>  Removed everything that I felt unnecessary and commented the checks.</p>",
        "id": 227987398,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614370943
    },
    {
        "content": "<p>I think more than half of what is still in there is unnecessary...  you're not ray tracing.</p>",
        "id": 227991087,
        "sender_full_name": "Sean",
        "timestamp": 1614372397
    },
    {
        "content": "<p>How does rt_boolweave() use the application struct?  You'll need to read the implementation to see how/where it's used.  Depending how it's used, it may just be for book-keeping and can be empty.</p>",
        "id": 227991221,
        "sender_full_name": "Sean",
        "timestamp": 1614372461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/227984554\">said</a>:</p>\n<blockquote>\n<p>Should I remove the checks also like RT_CK_AP?</p>\n</blockquote>\n<p>So to answer this it's the same for removing any other lines.  What's that line doing and how does it pertain to rt_boolweave()?  If you don't know, then the next step will be to find it's implementation (or ask).</p>",
        "id": 227991751,
        "sender_full_name": "Sean",
        "timestamp": 1614372630
    },
    {
        "content": "<p>All the <em>_CK_</em>() and <em>_CHECK_</em>() macros do simple validity testing to make sure that memory didn't get corrupted and/or that structures passed from elsewhere were initialized correctly.</p>",
        "id": 227991804,
        "sender_full_name": "Sean",
        "timestamp": 1614372646
    },
    {
        "content": "<p>In this case, that 'ap' application struct is being created and initialized by you, so there's no point in calling CHECK/CK on it as there's no potential for corruption, just maybe a mistake in initialization like if you forgot to call RT_APPLICATION_INIT().</p>",
        "id": 227992020,
        "sender_full_name": "Sean",
        "timestamp": 1614372726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/227992020\">said</a>:</p>\n<blockquote>\n<p>In this case, that 'ap' application struct is being created and initialized by you, so there's no point in calling CHECK/CK on it as there's no potential for corruption, just maybe a mistake in initialization like if you forgot to call RT_APPLICATION_INIT().</p>\n</blockquote>\n<p>Yeah I knew this, just wanted to confirm</p>",
        "id": 227992137,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614372791
    },
    {
        "content": "<p>if it's not needed, then it boils down to somelike like...</p>\n<div class=\"codehilite\" data-code-language=\"BBCode\"><pre><span></span><code>int main(int argc, char **argv) {\n    struct seg waiting_segs;\n    struct seg finished_segs;\n\n    BU_LIST_INIT(&amp;waiting_segs.l);\n    BU_LIST_INIT(&amp;finished_segs.l);\n\n    /* Weave these segments into partition list */\n    (void)rt_boolweave(&amp;finished_segs, &amp;waiting_segs, NULL, NULL);\n\n    return 0;\n}\n</code></pre></div>",
        "id": 227992536,
        "sender_full_name": "Sean",
        "timestamp": 1614372938
    },
    {
        "content": "<p>But then that still doesn't do anything useful.</p>",
        "id": 227992585,
        "sender_full_name": "Sean",
        "timestamp": 1614372955
    },
    {
        "content": "<p>So the trick is figuring out what those params mean, which are needed, how to set up the inputs (segs especially) manually, etc</p>",
        "id": 227992804,
        "sender_full_name": "Sean",
        "timestamp": 1614373033
    },
    {
        "content": "<p>Reduced the example even more... I don't know if it really needs a pointer to the initial partition.</p>",
        "id": 227992911,
        "sender_full_name": "Sean",
        "timestamp": 1614373085
    },
    {
        "content": "<p>I mean notionally, do you understand what the function is supposed to do?</p>",
        "id": 227992963,
        "sender_full_name": "Sean",
        "timestamp": 1614373109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/227992963\">said</a>:</p>\n<blockquote>\n<p>I mean notionally, do you understand what the function is supposed to do?</p>\n</blockquote>\n<p>Yeah I know the basics, you had explained it to me earlier</p>",
        "id": 227993163,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614373205
    },
    {
        "content": "<p>Well here's a quick recap anyways.. :)  Say you have this expression \"A u B\" where we're combining two objects with a union operation.  Imagine we shot a ray through that scene.  The ray is going to hit A and B, say that looks something like this:  </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>______________\n|            |\n|  A   |-----|--------\n|      |     |       |\n-------|------   B   |\n       |             |\n       ---------------\n</code></pre></div>",
        "id": 227993779,
        "sender_full_name": "Sean",
        "timestamp": 1614373445
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>     ______________\n     |            |\nray  |  A   |-----|--------\n---&gt; |      |     |       |\n     -------|------   B   |\n            |             |\n            ---------------\n\n  results in two segments:\n\n     |----A.seg1--|\n            |----B.seg1---|\n</code></pre></div>",
        "id": 227994067,
        "sender_full_name": "Sean",
        "timestamp": 1614373588
    },
    {
        "content": "<p>So given a union, the boolean weaving is going to end up with:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>     |------weaved.seg----|\n</code></pre></div>",
        "id": 227994146,
        "sender_full_name": "Sean",
        "timestamp": 1614373640
    },
    {
        "content": "<p>In creating a unit test, you aren't going to shoot a ray, you don't have geometry.  You're starting at \"results in two segments\" where all you have is a list of partitions and segments, and they're literally just sets of numbers.</p>",
        "id": 227994408,
        "sender_full_name": "Sean",
        "timestamp": 1614373780
    },
    {
        "content": "<p>I suggest trying to describe that exact scenario for starters.  One segment going from 0.0 to 10.0, another going from 5.0 to 15.0, and try to weave them into a 0.0 to 15.0 segment.</p>",
        "id": 227994593,
        "sender_full_name": "Sean",
        "timestamp": 1614373863
    },
    {
        "content": "<p>Okay, will start working on it</p>",
        "id": 227994699,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614373914
    },
    {
        "content": "<p>If you get it right, then you should be able to change  one line that makes it do a subtraction to weave to a 0.0 to 5.0 segment (A-B) or 10.0 to 15.0 segment (B-A), or an intersection that gives a 5.0 to 10.0 segment.</p>",
        "id": 227994880,
        "sender_full_name": "Sean",
        "timestamp": 1614373986
    },
    {
        "content": "<p>Now big caveat is I don't remember the exact interplay between rt_boolweave() and rt_boolfinal()... one or the other might be responsible for parts of the boolean eval.</p>",
        "id": 227995068,
        "sender_full_name": "Sean",
        "timestamp": 1614374058
    },
    {
        "content": "<p>I will look into it<br>\nAlso, Thank you  so much for taking out time to guide me <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 227995763,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614374371
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/jYeADD3T4OX388jcsG7hlOGI/hello_boolweave_final.c\">hello_boolweave_final.c</a> <br>\nThis is the least code that is required afaik, I tried to compile without one line at a time, and removing even 1 line gave a seg fault. I got <code>ERROR: NULL struct partition list head pointer</code>  if I passed a NULL pointer in place of the initial part.</p>",
        "id": 228121368,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614508034
    },
    {
        "content": "<p>Maybe the initialization of rtip can be done in a better way but I couldn't figure out one.</p>",
        "id": 228121442,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614508095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/227994593\">said</a>:</p>\n<blockquote>\n<p>I suggest trying to describe that exact scenario for starters.  One segment going from 0.0 to 10.0, another going from 5.0 to 15.0, and try to weave them into a 0.0 to 15.0 segment.</p>\n</blockquote>\n<p>Ill work on this now</p>",
        "id": 228121480,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614508184
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    struct seg s1;\n    BU_LIST_INIT(&amp;s1.l);\n    s1.seg_in.hit_dist =5;\n    s1.seg_out.hit_dist =15;\n    (s1.seg_in.hit_rayp) = (s1.seg_out.hit_rayp) = &amp;(ap.a_ray);\n    BU_LIST_INSERT(&amp;waiting_segs.l, &amp;s1.l);\n</code></pre></div>\n<p>I have tried to initialize a seg like this, but when I run the program, RT_CK_SEG inside boolweave gives an error as follow:<br>\n<code>ERROR: bad pointer 0x7ffde9fe2fa0: s/b struct seg(x98bcdef1), was bu_list(x1016580), file /home/vikram/brlcad/src/librt/bool.c, line 174</code><br>\nCould someone tell me how to solve this?</p>",
        "id": 228154249,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614543727
    },
    {
        "content": "<p>I assume this initialization is done by <code>stp-&gt;st_meth-&gt;ft_shot</code> in shootray, but imnt able to find the code of ft_shot</p>",
        "id": 228154305,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614543787
    },
    {
        "content": "<p>Attaching the entire program just in case <a href=\"/user_uploads/1549/ScP5IyYRwdHQBl5Gtf7hJxwu/UBC.c\">UBC.c</a></p>",
        "id": 228154387,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614543857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> what's triggering that ERROR is the BU_LIST_INIT.  Librt uses an old-school C technique called aliasing in the libbu containers.  What you're missing is something like BU_LIST_MAGIC_SET(&amp;s1.l, RT_SEG_MAGIC); before you do BU_LIST_INSERT.</p>",
        "id": 228261615,
        "sender_full_name": "Sean",
        "timestamp": 1614616584
    },
    {
        "content": "<p>db_alloc.c is where that initialization happens during regular ray tracing.. search for RT_SEG_MAGIC to see where.</p>",
        "id": 228261742,
        "sender_full_name": "Sean",
        "timestamp": 1614616629
    },
    {
        "content": "<p>it's set directly there, but basically the same as the BU_LIST_MAGIC_SET call.</p>",
        "id": 228261814,
        "sender_full_name": "Sean",
        "timestamp": 1614616653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/228261615\">said</a>:</p>\n<blockquote>\n<p>What you're missing is something like BU_LIST_MAGIC_SET(&amp;s1.l, RT_SEG_MAGIC); before you do BU_LIST_INSERT.</p>\n</blockquote>\n<p>Ohhhh! I knew I had to set the magic variable for seg but did not find a macro for it, I searched for RT_SEG_MAGIC and similar macros.<br>\nGot it now</p>",
        "id": 228261959,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614616694
    },
    {
        "content": "<p>note that you don't need an application struct either potentially ... at least the seg doesn't need it.  It has a ray field but I dont know if boolweave uses/checks it.</p>",
        "id": 228264868,
        "sender_full_name": "Sean",
        "timestamp": 1614617713
    },
    {
        "content": "<p>If it does check/use it, then you can create a struct ray on the stack and set that instead of &amp;(ap.a_ray), which is just a pointer to a ray struct.</p>",
        "id": 228265049,
        "sender_full_name": "Sean",
        "timestamp": 1614617768
    },
    {
        "content": "<p>yeah it does check <code>ap-&gt;a_rt_i</code>, so ap is required for that</p>",
        "id": 228265058,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614617772
    },
    {
        "content": "<p>do you know why?</p>",
        "id": 228265125,
        "sender_full_name": "Sean",
        "timestamp": 1614617789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/228265049\">said</a>:</p>\n<blockquote>\n<p>If it does check/use it, then you can create a struct ray on the stack and set that instead of &amp;(ap.a_ray), which is just a pointer to a ray struct.</p>\n</blockquote>\n<p>Okayy</p>",
        "id": 228265163,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614617795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/228265125\">said</a>:</p>\n<blockquote>\n<p>do you know why?</p>\n</blockquote>\n<p>Dont know rn, but I could try finding out</p>",
        "id": 228265292,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614617816
    },
    {
        "content": "<p>Superficially checking the code, ap-&gt;a_rt_i is assigned to rtip and that is used at a lot of places</p>",
        "id": 228265875,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614617910
    },
    {
        "content": "<p>I see, it uses the app struct to get at the cpu resources for memory pooled allocations...</p>",
        "id": 228266042,
        "sender_full_name": "Sean",
        "timestamp": 1614617964
    },
    {
        "content": "<p>rtip isn't actually used</p>",
        "id": 228266081,
        "sender_full_name": "Sean",
        "timestamp": 1614617979
    },
    {
        "content": "<p>well, so it's technically used but not in significant logic</p>",
        "id": 228266297,
        "sender_full_name": "Sean",
        "timestamp": 1614618030
    },
    {
        "content": "<p>the tolerance is pulled from there, the number of solids<br>\nsome debugging</p>",
        "id": 228266354,
        "sender_full_name": "Sean",
        "timestamp": 1614618044
    },
    {
        "content": "<p>but, for example, it's passed to GET_PT_INIT() and that macro does diddly squat nothing with it</p>",
        "id": 228266459,
        "sender_full_name": "Sean",
        "timestamp": 1614618074
    },
    {
        "content": "<p>a vestige from long ago</p>",
        "id": 228266490,
        "sender_full_name": "Sean",
        "timestamp": 1614618084
    },
    {
        "content": "<p>so that's important from a testing perspective.  the resource structure is the only thing significant in there and it isn't necessary.  that's an optimization for memory management.</p>",
        "id": 228266679,
        "sender_full_name": "Sean",
        "timestamp": 1614618138
    },
    {
        "content": "<p>I mean the code currently requires it so in setting up a rt_boolweave() unit test, you'll have to provide it or modify the implementation</p>",
        "id": 228266752,
        "sender_full_name": "Sean",
        "timestamp": 1614618168
    },
    {
        "content": "<p>but for an openCL version, which is what we'd want to end up with, it's not necessary at all since opencl would be handling memory differently</p>",
        "id": 228266862,
        "sender_full_name": "Sean",
        "timestamp": 1614618206
    },
    {
        "content": "<p>Okay</p>",
        "id": 228267290,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614618360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/228266752\">said</a>:</p>\n<blockquote>\n<p>I mean the code currently requires it so in setting up a rt_boolweave() unit test, you'll have to provide it or modify the implementation</p>\n</blockquote>\n<p>So for now, I will just provide it to boolweave</p>",
        "id": 228268213,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614618694
    },
    {
        "content": "<p>You'll still want to provide as minimal as possible.  Like try passing an rtip that is not really initialized, only has rti_tol.dist set.</p>",
        "id": 228270714,
        "sender_full_name": "Sean",
        "timestamp": 1614619627
    },
    {
        "content": "<p>Okay, first I will make it functional then, I will reduce the inputs</p>",
        "id": 228270836,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614619674
    },
    {
        "content": "<p>similarly application struct that just has the rtip set to that dummy rtip and resources</p>",
        "id": 228270981,
        "sender_full_name": "Sean",
        "timestamp": 1614619710
    },
    {
        "content": "<p>In bool.c, <code>rt_pr_seg()</code> is called which requires  <code>segp-&gt;seg_stp-&gt;st_bit</code> &amp; <code>segp-&gt;seg_stp-&gt;st_dp-&gt;d_namep</code> to be printed. I set <code>segp-&gt;seg_stp</code> (which is a soltab pointer ) to NULL but the prog. throws a seg fault when run. How can I bypass this without actually setting <code>segp-&gt;seg_stp</code> ? or am I doing smthng wrong?</p>",
        "id": 228289299,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614626088
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/eulxbzKm1ePOrIE_4Re4X-IV/UBC.c\">UBC.c</a></p>",
        "id": 228289397,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614626120
    },
    {
        "content": "<p>it dereferences seg_stp to st_bit and st_dp... so it will need a valid \"soltab\" struct if rt_pr_seg() is called, which is a structure for a solid primitive object (e.g., an 'ell' ellipsoid or a 'tor' torus).</p>",
        "id": 228360848,
        "sender_full_name": "Sean",
        "timestamp": 1614666903
    },
    {
        "content": "<p>that said, I only see rt_pr_seg() in a debug printing block in rt_boolweave(), which shouldn't be getting called.  are you sure it's crashing there?  I suspect it's crashing elsewhere.</p>",
        "id": 228360897,
        "sender_full_name": "Sean",
        "timestamp": 1614666954
    },
    {
        "content": "<p><span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> My bad, I had changed the code before so that it prints the debug block, Ill try without that</p>",
        "id": 228361120,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614667104
    },
    {
        "content": "<p>Slightly unrelated but....<br>\nWhat does stp-&gt;st_meth-&gt;ft_shot() do? , I tried a grep in src but couldnt find the function</p>",
        "id": 228366716,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614670935
    },
    {
        "content": "<p>Or you could just tell me where the code for ft_shot lives</p>",
        "id": 228367257,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614671291
    },
    {
        "content": "<p>That is a function pointer.  It's set in src/librt/primitives/table.cpp</p>",
        "id": 228368160,
        "sender_full_name": "Sean",
        "timestamp": 1614671855
    },
    {
        "content": "<p>function pointers are somewhat advanced concepts, but you can think of it as just a pointer to another function.</p>",
        "id": 228368258,
        "sender_full_name": "Sean",
        "timestamp": 1614671899
    },
    {
        "content": "<p>so I could have a function like int foo() {printf(\"hello\");}</p>",
        "id": 228368295,
        "sender_full_name": "Sean",
        "timestamp": 1614671932
    },
    {
        "content": "<p>and I can create a variable like (int)(*bar)() = foo;</p>",
        "id": 228368359,
        "sender_full_name": "Sean",
        "timestamp": 1614671978
    },
    {
        "content": "<p>and with that, I can now call bar() .. and it'll invoke foo()</p>",
        "id": 228368379,
        "sender_full_name": "Sean",
        "timestamp": 1614671993
    },
    {
        "content": "<p>so ft_shot() is set to a different function for each object type, so for example there is ft_shot == rt_ell_shot which is defined in src/librt/primitives/ell/ell.c <br>\nso when I call ft_shot() it calls that rt_ell_shot() function if it was an ell object</p>",
        "id": 228368614,
        "sender_full_name": "Sean",
        "timestamp": 1614672093
    },
    {
        "content": "<p>Got it</p>",
        "id": 228368639,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614672116
    },
    {
        "content": "<p>that table.cpp file is basically a big massive listing of functions that are getting set to function pointers</p>",
        "id": 228368742,
        "sender_full_name": "Sean",
        "timestamp": 1614672159
    },
    {
        "content": "<p>as a simple way of registering what callback to call when a given entity id is encountered</p>",
        "id": 228368761,
        "sender_full_name": "Sean",
        "timestamp": 1614672179
    },
    {
        "content": "<p>where is BoT on the opencl agenda? \"advanced topic\"?</p>",
        "id": 228416262,
        "sender_full_name": "Erik",
        "timestamp": 1614694691
    },
    {
        "content": "<p>haven't prioritized any of the primitives yet because there's a few bits of the pipeline (boolean weaving) that still need to be done first.</p>\n<p>I would probably put nurbs before bot myself, but anything getting converted is good.  we still have to sort out how to manage keeping multiple copies of implementation, or how to eliminate down to one.</p>",
        "id": 228424538,
        "sender_full_name": "Sean",
        "timestamp": 1614697542
    },
    {
        "content": "<p>Just asking, can I reimplement an already converted primitive as well?</p>",
        "id": 228438614,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614702158
    },
    {
        "content": "<p>I think you'd have to make a fairly compelling argument?</p>",
        "id": 228439358,
        "sender_full_name": "Erik",
        "timestamp": 1614702442
    },
    {
        "content": "<p>Ohh okay</p>",
        "id": 228439840,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614702617
    },
    {
        "content": "<p>Along with the unit test for boolweave could I work on something else parallelly, I want to take a break from that code :P</p>",
        "id": 228532235,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614744380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> haha, yeah, no I completely understand.  That's some really tough code.  Note you don't have to feel compelled to propose that task if there's another that ends up being more interesting.  Other projects that are also interesting are Qt GUI coding, Appleseed render integration, and support for annotations+labels+dimensions.</p>",
        "id": 228538838,
        "sender_full_name": "Sean",
        "timestamp": 1614748974
    },
    {
        "content": "<p>you could try a task for one of them to see if they're more appealing, or I could just throw a task your way and you could see how you manage.  for example, we've had a user ask for an option to the dbconcat command (which lets you merge geometry files together) to not use a prefix or a suffix during import, but to instead have a flag that overwrites existing objects.  implementation is entirely in src/libged/concat/concat.cpp</p>",
        "id": 228539627,
        "sender_full_name": "Sean",
        "timestamp": 1614749620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/228538838\">said</a>:</p>\n<blockquote>\n<p>That's some really tough code.  </p>\n</blockquote>\n<p>I feel better <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 228548094,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614756437
    },
    {
        "content": "<p>This is quite interesting actually, but surely I would like to try out the other tasks as well, Though I feel working on the GUi is very important Im somehow not drawn to it that much, I would like to try a task for appleseed or annotation, which one is easier?</p>",
        "id": 228548281,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614756580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/228539627\">said</a>:</p>\n<blockquote>\n<p>you could try a task for one of them to see if they're more appealing, or I could just throw a task your way and you could see how you manage.  for example, we've had a user ask for an option to the dbconcat command (which lets you merge geometry files together) to not use a prefix or a suffix during import, but to instead have a flag that overwrites existing objects.  implementation is entirely in src/libged/concat/concat.cpp</p>\n</blockquote>\n<p>Interesting, let me go through concat.cpp and let you know if I find it enthusing......Also does it help me go forward in GSoC prep because that's the main priority for now :P</p>",
        "id": 228548577,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614756763
    },
    {
        "content": "<p>Annotation is probably easier overall and is completely unrelated to the performance work.  appleseed is related in that it involves shooting rays at geometry, but is definitely a lot more involved concepts to understand and an entirely separate API involved (appleseed's).</p>",
        "id": 228605768,
        "sender_full_name": "Sean",
        "timestamp": 1614783549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/228548577\">said</a>:</p>\n<blockquote>\n<p>Interesting, let me go through concat.cpp and let you know if I find it enthusing......Also does it help me go forward in GSoC prep because that's the main priority for now :P</p>\n</blockquote>\n<p>I'm not sure what you mean by prep ... working on code and demonstrating you can be productive is the best prep you can do for gsoc.</p>",
        "id": 228606111,
        "sender_full_name": "Sean",
        "timestamp": 1614783652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/228606111\">said</a>:</p>\n<blockquote>\n<p>working on code and demonstrating you can be productive is the best prep you can do for gsoc.</p>\n</blockquote>\n<p>Okay</p>",
        "id": 228632315,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614792590
    },
    {
        "content": "<p>I checked out the code in concat.cpp and I feel this task is doable.</p>",
        "id": 228632457,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614792629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> it should just take you an hour or two but feel free to ask questions about our API for the bits you can't decipher what's going on.  There's a manual page for the command (run \"man dbconcat\" in mged or archer) to understand what the command does, but it basically lets you import another .g into the currently open .g.  Presently, it has options to apply a suffix or prefix when the object being imported already exists.  The goal is an option that overwrites the existing option. </p>\n<p>Alternative patch needed on that same command is a dry run option that doesn't actually import anything, but says what it would do without the dry run option (i.e., import as-is, import with prefix/suffix, overwrite, skip, etc).</p>",
        "id": 228727243,
        "sender_full_name": "Sean",
        "timestamp": 1614841917
    },
    {
        "content": "<p>I understood most of the code, I have an exam today so haven't really worked on it yet. Yeah, I will surely ask if I get stuck</p>",
        "id": 228727784,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614842329
    },
    {
        "content": "<p>Another fun little project that might be of interest is writing a procedural geometry generator (i.e., a little app) that makes a shaderball.  You'd probably have to model one by hand first, then figure out how to repeat the modeling instructions in C/C++, letting the caller specify the shader and shader options from what's available.</p>",
        "id": 228728423,
        "sender_full_name": "Sean",
        "timestamp": 1614842865
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 228728730,
        "sender_full_name": "Thusal Ranawaka",
        "timestamp": 1614843101
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 228728743,
        "sender_full_name": "Thusal Ranawaka",
        "timestamp": 1614843114
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 228728746,
        "sender_full_name": "Thusal Ranawaka",
        "timestamp": 1614843121
    },
    {
        "content": "<p>Heh, oops, that wasn't meant for you, <span class=\"user-mention\" data-user-id=\"253014\">@Thusal Ranawaka</span> sorry about that. haha</p>",
        "id": 228729105,
        "sender_full_name": "Sean",
        "timestamp": 1614843350
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228729192,
        "sender_full_name": "Thusal Ranawaka",
        "timestamp": 1614843411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276372\">@Rishabh Suthar</span> Hey bud, you around?  There's a potential GSoC student (<span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span>) possibly interested in picking up where you left off.  Any chance you can share/post your proposal?  The wiki only has your log and a now dead link to the abstract on Google's site (they clear the data every year).</p>",
        "id": 228729308,
        "sender_full_name": "Sean",
        "timestamp": 1614843491
    },
    {
        "content": "<p>Am I restricted to use any letters for the flag? Could I assign \"-o\" for override?</p>",
        "id": 228829560,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614884158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  So I have a plan to do this but it involves putting a function call, that accomplishes the override, inside <code>get_new_name()</code> would that be okay?<br>\nOr is it compulsory that the <code>get_new_name()</code> is restricted to giving a new name , because then it would make it harder for me to implement</p>",
        "id": 228849248,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614891570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> that's a big \"it depends\".  I would say that \"get_new_name() has a very specific implication and you should not violate that if it's not going to get a new name.  That said, there's no problem renaming that function to \"get_import_name()\" or even simply \"get_name()\" or something similar that encompasses the logic for determining the name of the object.</p>",
        "id": 228884404,
        "sender_full_name": "Sean",
        "timestamp": 1614909502
    },
    {
        "content": "<p>As for letters, -o is pretty universally 'output' so I wouldn't choose that first.</p>",
        "id": 228884915,
        "sender_full_name": "Sean",
        "timestamp": 1614909868
    },
    {
        "content": "<p>The cp command has relevant options (-n and -i and -f)  so you could pattern after that, like making default to be overwrite, but then have a -n option to not overwrite.  Either way, it's a little tricky because it should definitely not write some objects and then halt mid import.</p>",
        "id": 228885144,
        "sender_full_name": "Sean",
        "timestamp": 1614910041
    },
    {
        "content": "<p>A -r replace flag could work.</p>",
        "id": 228885349,
        "sender_full_name": "Sean",
        "timestamp": 1614910189
    },
    {
        "content": "<p>When I'm overriding the object present in the file (which we are concat-ing to), I should kill the object right?</p>",
        "id": 228930524,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614939908
    },
    {
        "content": "<p>And to kill an object can I call ged_kill or some other already written function to do it, or should I write the code to kill the object?</p>",
        "id": 228930747,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1614939993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> I believe you can just export it an it'll overwrite the object.</p>",
        "id": 229024399,
        "sender_full_name": "Sean",
        "timestamp": 1614978223
    },
    {
        "content": "<p>but you'll want to test that theory<br>\nif that doesn't work or if it creates a duplicate and there's not a way aroun dit, you'll need to add the new object with a temp name, move old object to a temp name, rename the new object to the old object name, and THEN kill the old object.</p>",
        "id": 229024635,
        "sender_full_name": "Sean",
        "timestamp": 1614978320
    },
    {
        "content": "<p>Okay got that<br>\nIm going on a 2 day trip, will continue working on it from monday (for me)</p>",
        "id": 229062357,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615003891
    },
    {
        "content": "<p>cool, have a good trip!  be careful of busses ;)</p>",
        "id": 229117653,
        "sender_full_name": "Sean",
        "timestamp": 1615054670
    },
    {
        "content": "<p>Im back :)</p>",
        "id": 229350943,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615228629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/229024399\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> I believe you can just export it an it'll overwrite the object.</p>\n</blockquote>\n<p>How do i do this?</p>",
        "id": 229350962,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615228639
    },
    {
        "content": "<p>Im not very clear on how to export</p>",
        "id": 229350983,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615228650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> grep -r _export src/libged</p>",
        "id": 229377334,
        "sender_full_name": "Sean",
        "timestamp": 1615238957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/229024399\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> I believe you can just export it an it'll overwrite the object.</p>\n</blockquote>\n<p>Nope, this is not the case, when I export it with the same name db_dircheck adds a prefix and exports it</p>",
        "id": 229434912,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615276036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/229024635\">said</a>:</p>\n<blockquote>\n<p>but you'll want to test that theory<br>\nif that doesn't work or if it creates a duplicate and there's not a way aroun dit, you'll need to add the new object with a temp name, move old object to a temp name, rename the new object to the old object name, and THEN kill the old object.</p>\n</blockquote>\n<p>Just a doubt, why cant I kill the old object first and then directly add the new object?</p>",
        "id": 229435075,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615276140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/228930747\">said</a>:</p>\n<blockquote>\n<p>And to kill an object can I call ged_kill or some other already written function to do it, or should I write the code to kill the object?</p>\n</blockquote>\n<p>Any hints on this please</p>",
        "id": 229517990,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615311232
    },
    {
        "content": "<p>If there is already a function which removes an object, you should use it. Maybe, not ged_kill() but the functions used there, like db_delete() and db_dirdelete().</p>\n<p>However, I'm not sure if it is necessary to explicitly remove the object, wdb_export() seems to make this job implicitly. I created a database test.g with an arb8 test.s. Then, I run the following program on it:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;brlcad/Database/FileDatabase.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;brlcad/Database/Sphere.h&gt;</span><span class=\"cp\"></span>\n\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span>\n<span class=\"p\">(</span>\n    <span class=\"kt\">int</span>   <span class=\"n\">argc</span><span class=\"p\">,</span>\n    <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[]</span>\n<span class=\"p\">){</span>\n    <span class=\"kt\">int</span>                  <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">BRLCAD</span><span class=\"o\">::</span><span class=\"n\">FileDatabase</span> <span class=\"n\">database</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">database</span><span class=\"p\">.</span><span class=\"n\">Load</span><span class=\"p\">(</span><span class=\"s\">\"test.g\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"n\">BRLCAD</span><span class=\"o\">::</span><span class=\"n\">Sphere</span> <span class=\"n\">sphere</span><span class=\"p\">;</span>\n\n        <span class=\"n\">sphere</span><span class=\"p\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"s\">\"test.s\"</span><span class=\"p\">);</span>\n        <span class=\"n\">database</span><span class=\"p\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Could not load file: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This doesn't mean that you have to use the C++ interface, but the method used there using wdb_export() could eventually do the job. You could write a program to test this out.</p>",
        "id": 229528334,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615314631
    },
    {
        "content": "<p>Feels done, tried with few basic examples</p>",
        "id": 229718518,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615401341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> the issue with just killing and adding is leaving the tree irrecoverably corrupted if the task is interrupted (whether a bug or an abort signal or power loss, etc)</p>",
        "id": 229719050,
        "sender_full_name": "Sean",
        "timestamp": 1615401534
    },
    {
        "content": "<p>Okay</p>",
        "id": 229719131,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615401563
    },
    {
        "content": "<p>I did both db_delete() and db_dirdelete()</p>",
        "id": 229719163,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615401577
    },
    {
        "content": "<p>Just saying</p>",
        "id": 229719176,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615401584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/229024635\">said</a>:</p>\n<blockquote>\n<p>but you'll want to test that theory<br>\nif that doesn't work or if it creates a duplicate and there's not a way aroun dit, you'll need to add the new object with a temp name, move old object to a temp name, rename the new object to the old object name, and THEN kill the old object.</p>\n</blockquote>\n<p>Will do this</p>",
        "id": 229719314,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615401628
    },
    {
        "content": "<blockquote>\n<p>This doesn't mean that you have to use the C++ interface, but the method used there using wdb_export() could eventually do the job. You could write a program to test this out.</p>\n</blockquote>\n<p>This is something we really need to figure out.  I'd love to use the C++ interface, but this is a libged function we're talking about.  Seems like we'd be introducing a potential cyclic dependency, or at least a deferred one (e.g., can't build some libged plugins until a second pass later).</p>",
        "id": 229719615,
        "sender_full_name": "Sean",
        "timestamp": 1615401732
    },
    {
        "content": "<p>Also is it compulsory to do it in the order you have mentioned, like first if I rename the old object, add the new one with the correct name and then delete the old object. Does this work?</p>",
        "id": 229719710,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615401778
    },
    {
        "content": "<p>We could maybe pull MOOSE in as a sub-project repository on 'brlcad' checkout and have it trigger after core libs, treating it like a 3rd party dependency...</p>",
        "id": 229719794,
        "sender_full_name": "Sean",
        "timestamp": 1615401816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/229719710\">said</a>:</p>\n<blockquote>\n<p>Also is it compulsory to do it in the order you have mentioned, like first if I rename the old object, add the new one with the correct name and then delete the old object. Does this work?</p>\n</blockquote>\n<p>Yeah, that should work well enough for single object operations I think.</p>",
        "id": 229720000,
        "sender_full_name": "Sean",
        "timestamp": 1615401902
    },
    {
        "content": "<p>what we really need is a transaction system where instead of doing the work, it just records a transcript of what is going to happen, then a second pass iterates over the transcript to do it all in a temp working space, and swaps the trees if it completely worked.</p>",
        "id": 229720265,
        "sender_full_name": "Sean",
        "timestamp": 1615401994
    },
    {
        "content": "<p>that way, if there's a failure in processing or an I/O error or other interruption, we don't end up with corruption and it's either all there or none of it is there.</p>",
        "id": 229720389,
        "sender_full_name": "Sean",
        "timestamp": 1615402030
    },
    {
        "content": "<p>could then have an incremental option to apply objects or changes one at a time instead of transactionally if there were some reason for doing so.</p>",
        "id": 229720445,
        "sender_full_name": "Sean",
        "timestamp": 1615402057
    },
    {
        "content": "<p>Yeah, I get your point</p>",
        "id": 229720573,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615402100
    },
    {
        "content": "<p>Sounds a little complex to implement but doable, is this something I should work upon next or do I go back to boolweave/ smthng more related to the OpenCL project?</p>",
        "id": 229721028,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615402275
    },
    {
        "content": "<p>working on libged is a completely different scope, would be a different project altogether -- and a good one</p>",
        "id": 229721324,
        "sender_full_name": "Sean",
        "timestamp": 1615402379
    },
    {
        "content": "<p>Is there a project on libged, I seem to have missed it in the ideas/past projects?</p>",
        "id": 229721441,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615402421
    },
    {
        "content": "<p>Working on this is quite interesting as well</p>",
        "id": 229721546,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615402451
    },
    {
        "content": "<p>no, libged is central to our core development that it's actively changing.  it's the most frequently edited place in the code right now.</p>",
        "id": 229721642,
        "sender_full_name": "Sean",
        "timestamp": 1615402487
    },
    {
        "content": "<p>that's part why there's not a specific write-up for it, the other is that it begs for a good bit of understanding of the other libs, or at least of modern design patterns</p>",
        "id": 229721753,
        "sender_full_name": "Sean",
        "timestamp": 1615402527
    },
    {
        "content": "<p>see src/libged/README (particularly the TODO lines) and src/libged/TODO for some ideas that have been written down on what is needed next</p>",
        "id": 229721816,
        "sender_full_name": "Sean",
        "timestamp": 1615402551
    },
    {
        "content": "<p>Okay, So I could make a proposal combining few important TODO issues and tackle them as part of my GSoC project?</p>",
        "id": 229722069,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615402646
    },
    {
        "content": "<p>You most certainly could.</p>",
        "id": 229722849,
        "sender_full_name": "Sean",
        "timestamp": 1615402908
    },
    {
        "content": "<p>you'll have to learn which are 'next' and demonstrate familiarity</p>",
        "id": 229722925,
        "sender_full_name": "Sean",
        "timestamp": 1615402925
    },
    {
        "content": "<p>Ohkay, this one feels more in-sight rather than the OpenCL project.</p>",
        "id": 229723380,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615403067
    },
    {
        "content": "<p>I will try to finish the basic override command for dbconcat and look into other TODO issues. Maybe I could propose the transcript + second tree for GSoC as one of the tasks that I will do</p>",
        "id": 229723391,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615403074
    },
    {
        "content": "<p>the two biggest needs for libged are proper plugin version management and transactions, with the latter arguably being more important.  We really need to be able to run a command, interrupt it with a ctrl-C, and not have bad things happen.</p>",
        "id": 229726491,
        "sender_full_name": "Sean",
        "timestamp": 1615404164
    },
    {
        "content": "<p>The ability to interrupt commands in mged and archer become additional challenges.</p>",
        "id": 229726495,
        "sender_full_name": "Sean",
        "timestamp": 1615404168
    },
    {
        "content": "<p>Dont know what plugins in BRLCAD are as of now, but yeah I surely could add the transactions feature to a some cmds during GSoC :)</p>",
        "id": 229727133,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615404395
    },
    {
        "content": "<p>libged commands are intended to be plugins.  that's the approach we came up with for them to be fully interruptible, synchronous or asynchronous, and protect the main process from crashes/bugs</p>",
        "id": 229739352,
        "sender_full_name": "Sean",
        "timestamp": 1615408557
    },
    {
        "content": "<p>it also lets us support commands that link against GPL functionality without creating a derivative work if we get to on-demand downloading/updating of plugins</p>",
        "id": 229739587,
        "sender_full_name": "Sean",
        "timestamp": 1615408623
    },
    {
        "content": "<p>but most important is simply the ability to ctrl-C a command and 1) have it stop the command and 2) have it not corrupt the db or leave trash</p>",
        "id": 229739732,
        "sender_full_name": "Sean",
        "timestamp": 1615408679
    },
    {
        "content": "<p>will mged no longer have valid sigint behaviors, just 'pass through if running subcmd'?</p>",
        "id": 229761041,
        "sender_full_name": "Erik",
        "timestamp": 1615416356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> what do you mean?  wtf is a \"valid\" behavior? heh.  mged already does some fairly complicated handling of SIGINT..</p>",
        "id": 229761979,
        "sender_full_name": "Sean",
        "timestamp": 1615416787
    },
    {
        "content": "<p>I think sigint is typically ignored presently while a command is running.  If of course would be better if sigint stopped the command.</p>",
        "id": 229762056,
        "sender_full_name": "Sean",
        "timestamp": 1615416828
    },
    {
        "content": "<p>no idea :D thinking vim and emacs have some mgmt of sigint for subprocs, should probably not be too far off from them? <em>shrug</em> I'm just makin' noise <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 229762389,
        "sender_full_name": "Erik",
        "timestamp": 1615416994
    },
    {
        "content": "<p>For the temporary names that I will be assigning to the old objects, is there some convention that I will have to follow , if not i was thinking of going with asdfgh_(number)</p>",
        "id": 229897030,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615485729
    },
    {
        "content": "<p>Done :)</p>",
        "id": 229900841,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615487215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/229897030\">said</a>:</p>\n<blockquote>\n<p>For the temporary names that I will be assigning to the old objects, is there some convention that I will have to follow , if not i was thinking of going with asdfgh_(number)</p>\n</blockquote>\n<p>If this needs to be changed can be done within a min<br>\nAlso I have tested with a basic example as of now</p>",
        "id": 229900970,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615487265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/229897030\">said</a>:</p>\n<blockquote>\n<p>For the temporary names that I will be assigning to the old objects, is there some convention that I will have to follow , if not i was thinking of going with asdfgh_(number)</p>\n</blockquote>\n<p>There isn't anything consistent but there are a number of commands that do something similar to pick a temporary name.  Some are as simple (and weak) as adding .tmp suffix.  Others had a prefix like ___analyze_cmd_intersect_tmp_obj__ ... if you recursively search on tmpnam in src/libged, you'll find those and others.</p>",
        "id": 229981717,
        "sender_full_name": "Sean",
        "timestamp": 1615529402
    },
    {
        "content": "<p>I suggest using something meaningful, descriptive, and unlikely to ever be pre-existing.  Even better if you test for pre-existing before doing work.  You will want to add some sanity checks at least, like to make sure that the tmp object doesn't already exist, testing that the write succeeded, etc.</p>",
        "id": 229982243,
        "sender_full_name": "Sean",
        "timestamp": 1615529719
    },
    {
        "content": "<p>If you really want to make it robust, you can call bu_uuid_create() to create a v4 SHA.  That hash string will be random and effectively unique.  could couple it within a prefix like you were thinking, like __dbconcat_SHA__.</p>",
        "id": 229984128,
        "sender_full_name": "Sean",
        "timestamp": 1615531185
    },
    {
        "content": "<p>Thinking about this, if I generate random names for temp objects , I will have to store them as I am deleting them at the end after adding all new objects,  I feel the best approach would be to go with <code>__dbconcat_temp_object_no_01__</code>, while adding a check that the name isnt presen't in the database already  since there is barely any chance of a name being given as follows</p>",
        "id": 230227736,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615716042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> should I create a patch?</p>",
        "id": 230261997,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615749617
    },
    {
        "content": "<p>Next could I work on the <code>TODO: automatic help flag recognition</code> ?</p>",
        "id": 230292738,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615781334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> whenever you completed implementing, testing, and documenting (if relevant) a change, a patch should be created.  In fact, you can create a patch at intermediate steps as well, just be sure to make it clear that it's a work-in-progress and that you'll be submitting an update.</p>",
        "id": 230410148,
        "sender_full_name": "Sean",
        "timestamp": 1615838947
    },
    {
        "content": "<p>Creating the patch rn<br>\nSo what could i work on next?</p>",
        "id": 230456343,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615866624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> you could prove that your flag works</p>",
        "id": 230456400,
        "sender_full_name": "Sean",
        "timestamp": 1615866711
    },
    {
        "content": "<p>Okay<br>\nI'll send screenshots of the tests that I did</p>",
        "id": 230456468,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615866766
    },
    {
        "content": "<p>screenshot would be great to see, but I mean you could create a unit/integration test for it that demonstrates it working as it should.  the dbupgrade command is in production use, so we'll need to be really sure it does what it's supposed to and doesn't do what it's not supposed to, particularly when inputs are error conditions.</p>",
        "id": 230456498,
        "sender_full_name": "Sean",
        "timestamp": 1615866839
    },
    {
        "content": "<p>example test #1 might be to create a db1.g with object A and db2.g with object B, then dbconcat db2.g into db1.g; should result in db1.g containing an A and a B object.  second time might be objects A, B in db1.g and repeat the same concat; should result in db1.g still containing A and B, but B from db2.g should have replaced db1's B.</p>",
        "id": 230456679,
        "sender_full_name": "Sean",
        "timestamp": 1615867022
    },
    {
        "content": "<p>there are a variety of different types of tests you could implement, but here's an example you could follow easily enough: src/libged/tests/test_tops.c</p>",
        "id": 230456766,
        "sender_full_name": "Sean",
        "timestamp": 1615867124
    },
    {
        "content": "<p>if that's too hard but you know how to write a shell script, you could demonstrate it working that way instead</p>",
        "id": 230456788,
        "sender_full_name": "Sean",
        "timestamp": 1615867186
    },
    {
        "content": "<p>Let me see test_tops.c if I feel its too hard, I can write a shell script</p>",
        "id": 230456944,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615867273
    },
    {
        "content": "<p>a relevant shell script example is in regress/bots/bots.sh</p>",
        "id": 230457031,
        "sender_full_name": "Sean",
        "timestamp": 1615867364
    },
    {
        "content": "<p>Created a patch for now</p>",
        "id": 230457234,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615867605
    },
    {
        "content": "<p>Will test and post updates here</p>",
        "id": 230457243,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615867619
    },
    {
        "content": "<p>ultimately, you want to show how dbconcat behaves with and without the flag as well as without and with name collisions.  includes a simple example like the B into A example as well as A into A and a multi-object partial merging like A/B/C into C'/D'/E' -- does it end up with ABCD'E'?</p>",
        "id": 230457405,
        "sender_full_name": "Sean",
        "timestamp": 1615867797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230457234\">said</a>:</p>\n<blockquote>\n<p>Created a patch for now</p>\n</blockquote>\n<p>That's great.  I'll see if I can get you some feedback on it here soon.</p>",
        "id": 230457475,
        "sender_full_name": "Sean",
        "timestamp": 1615867840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230457405\">said</a>:</p>\n<blockquote>\n<p>ultimately, you want to show how dbconcat behaves with and without the flag as well as without and with name collisions.  includes a simple example like the B into A example as well as A into A and a multi-object partial merging like A/B/C into C'/D'/E' -- does it end up with ABCD'E'?</p>\n</blockquote>\n<p>Yeah I have tested all these manually</p>",
        "id": 230457481,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615867847
    },
    {
        "content": "<p>More advanced testing would be to combine flags and make sure behavior is correct, like adding a prefix and overwriting.</p>",
        "id": 230457575,
        "sender_full_name": "Sean",
        "timestamp": 1615867959
    },
    {
        "content": "<p>like if db1.g has preA and db2 has A and you import with overwrite and prefix 'pre', does it end up with db2's A named as preA?</p>",
        "id": 230457612,
        "sender_full_name": "Sean",
        "timestamp": 1615868016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230457612\">said</a>:</p>\n<blockquote>\n<p>like if db1.g has preA and db2 has A and you import with overwrite and prefix 'pre', does it end up with db2's A named as preA?</p>\n</blockquote>\n<p>I did not do it this way, you can either add a suffix, prefix or override according to my implementation</p>",
        "id": 230457906,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615868327
    },
    {
        "content": "<p>When you use the override flag, it override anything that has the same name, all the prefix suffix code is skipped</p>",
        "id": 230457926,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615868363
    },
    {
        "content": "<p>&lt;deleted&gt;</p>",
        "id": 230457983,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615868420
    },
    {
        "content": "<p>Maybe as the next step (later on), I could make the flag overwrite only objects that are specified after the flag</p>",
        "id": 230458045,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615868494
    },
    {
        "content": "<p>Sure, whatever the behavior is defined to be -- the point was just to make sure it's tested.  So if someone tries to add a prefix and overwrite, I would expect it to abort and not modify the database since it'd be bad arguments.</p>",
        "id": 230531076,
        "sender_full_name": "Sean",
        "timestamp": 1615907906
    },
    {
        "content": "<p>I understood how they have written tests but how do i run that specific test?</p>",
        "id": 230545888,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615912179
    },
    {
        "content": "<p>In the test script there is a line <br>\n<code>  MGED =\"`ensearch mged`\"   </code><br>\nWhat is ensearch here?</p>",
        "id": 230646937,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615965135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I have written a script where a rhc is overwritten by a sphere. Initally I tried to get the height of the cylinder and then the radius of the same object after dbconcat. So if we get the radius successfully it means the test has passed. Is this a valid test?<br>\n<a href=\"/user_uploads/1549/_nkrcTanoH6Jej2elA4SoMMX/dbupgrade_test.sh\">dbupgrade_test.sh</a></p>",
        "id": 230653770,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615969190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230457405\">said</a>:</p>\n<blockquote>\n<p>A/B/C into C'/D'/E' -- does it end up with ABCD'E'?</p>\n</blockquote>\n<p>Implemeted this example as a test in the following file: <a href=\"/user_uploads/1549/7CICFNsZ-FLapYbEviJUmSuR/dbupgrade_test_2.sh\">dbupgrade_test_2.sh</a></p>",
        "id": 230665626,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1615975573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> see regress/library.sh ... ensearch() is basically a helper function that finds the path to mged, looking in the expected build/install locations.</p>",
        "id": 230811199,
        "sender_full_name": "Sean",
        "timestamp": 1616040365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230665626\">said</a>:</p>\n<blockquote>\n<p>Implemeted this example as a test in the following file: <a href=\"/user_uploads/1549/7CICFNsZ-FLapYbEviJUmSuR/dbupgrade_test_2.sh\">dbupgrade_test_2.sh</a></p>\n</blockquote>\n<p>These look really good!  If you can clean them up a bit (e.g., file header is still <a href=\"http://bot.sh\">bot.sh</a>) and make them a proper patch in regress/libged/dbconcat or similar subdirectory so they actually run, we could hook this all together. </p>\n<p>Can you think of any other useful cases or conditions to test?</p>",
        "id": 230811865,
        "sender_full_name": "Sean",
        "timestamp": 1616041007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230811865\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230665626\">said</a>:</p>\n<blockquote>\n<p>Implemeted this example as a test in the following file: <a href=\"/user_uploads/1549/7CICFNsZ-FLapYbEviJUmSuR/dbupgrade_test_2.sh\">dbupgrade_test_2.sh</a></p>\n</blockquote>\n<p>If you can clean them up a bit (e.g., file header is still <a href=\"http://bot.sh\">bot.sh</a>) </p>\n</blockquote>\n<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Will do right away</p>",
        "id": 230813952,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616043419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230811865\">said</a>:</p>\n<blockquote>\n<p>Can you think of any other useful cases or conditions to test?</p>\n</blockquote>\n<p>One where the -r flag is used but none of the names match<br>\nOther than this i cant think of anything specific to the -r flag</p>",
        "id": 230814042,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616043538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230811865\">said</a>:</p>\n<blockquote>\n<p>regress/libged/dbconcat</p>\n</blockquote>\n<p>There isnt a libged directory in regress, So should i create one or just directly put it in regress?</p>",
        "id": 230814623,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616044188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230814623\">said</a>:</p>\n<blockquote>\n<p>There isnt a libged directory in regress, So should i create one or just directly put it in regress?</p>\n</blockquote>\n<p>If you were motivated to convert them into C/C++, they really belong in src/libged/tests ... that would ensure the test runs continuously on Windows too.  As shell scripts, though, they belong in regress and should be in a subdir somewhere meaningful since there are 2+ of them.</p>",
        "id": 230921548,
        "sender_full_name": "Sean",
        "timestamp": 1616094533
    },
    {
        "content": "<p>One more option could be to merge them into 1  shell script</p>",
        "id": 230921847,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616094663
    },
    {
        "content": "<p>I could convert them into C/C++ but I couldn't understand how to run the specific test</p>",
        "id": 230922396,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616094918
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>morrison@agua .build % ctest -R ged_test_tops_moss\nTest project /Users/morrison/brlcad.RELEASE/.build\n    Start 874: ged_test_tops_moss\n1/1 Test #874: ged_test_tops_moss ...............   Passed    0.30 sec\n\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) =   0.40 sec\n</code></pre></div>",
        "id": 230923725,
        "sender_full_name": "Sean",
        "timestamp": 1616095539
    },
    {
        "content": "<p>ged_test_tops_moss is declared in src/libged/tests/CMakeLists.txt</p>",
        "id": 230923749,
        "sender_full_name": "Sean",
        "timestamp": 1616095556
    },
    {
        "content": "<p>it creates the test binary and defines a test target -- that's all that's needed</p>",
        "id": 230923814,
        "sender_full_name": "Sean",
        "timestamp": 1616095576
    },
    {
        "content": "<p>lots of other examples in other src/lib*/tests/CMakeLists.txt directory unit tests</p>",
        "id": 230923886,
        "sender_full_name": "Sean",
        "timestamp": 1616095621
    },
    {
        "content": "<p>Will try to implement the test in C/C++</p>",
        "id": 230925721,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616096410
    },
    {
        "content": "<p>And what could I work on next?</p>",
        "id": 230925762,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616096424
    },
    {
        "content": "<p>Opened a patch for now with both tests merged into 1 script</p>",
        "id": 230933457,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616099841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> there are limitless possibilities.  if you ask me, I'll keep testing your abilities with incrementally more difficult challenges.  So far you're doing great ;)</p>",
        "id": 230971530,
        "sender_full_name": "Sean",
        "timestamp": 1616125364
    },
    {
        "content": "<p>you could try your hand at something fun and creative -- like creating a model of something (beginner: via mged, advanced: via code)</p>",
        "id": 230971655,
        "sender_full_name": "Sean",
        "timestamp": 1616125465
    },
    {
        "content": "<p>or you could see how you do at a technical task like debugging any of the BUGS file issues.  here's a recent relatively tractable one: <br>\n\"running rt -C255/0/0 -o file.pix ... does not result in the background color getting used.  It does work with -F file.pix, going through libfb instead of libicv\"</p>",
        "id": 230971717,
        "sender_full_name": "Sean",
        "timestamp": 1616125523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230971717\">said</a>:</p>\n<blockquote>\n<p>or you could see how you do at a technical task like debugging any of the BUGS file issues.  here's a recent relatively tractable one: <br>\n\"running rt -C255/0/0 -o file.pix ... does not result in the background color getting used.  It does work with -F file.pix, going through libfb instead of libicv\"</p>\n</blockquote>\n<p>Sure I could work on this, but I am thinking of writing a proposal for libged so shud I focus more on coding related to libged as I'll also gain experience to write my proposal?</p>",
        "id": 230972531,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616126254
    },
    {
        "content": "<p>Coz as of now I feel a that I dont have all the  knowledge required to write a good proposal for libged</p>",
        "id": 230972839,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616126483
    },
    {
        "content": "<p>And regarding that I also wanted to ask if I could propose any of these ideas for GSoC:<br>\n1) Transaction for dbupgrade<br>\n2) Implementing the undo command at least for 1 time from present state<br>\n3) Implement the help flag for all major commands<br>\n4) Implement the array command - its like a command for creating patterns right?</p>\n<p>If there are more important tasks in libged which are doable within the GSoC timeline please do suggest</p>",
        "id": 230973243,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616126879
    },
    {
        "content": "<p>As demonstrated by your recent patch work, I'm sure you will be able to write a good proposal regardless.</p>",
        "id": 230984725,
        "sender_full_name": "Sean",
        "timestamp": 1616138531
    },
    {
        "content": "<p>That said, you could certainly propose any of those for GSoC or a combination of them (as a couple aren't that complicated).</p>",
        "id": 230984761,
        "sender_full_name": "Sean",
        "timestamp": 1616138590
    },
    {
        "content": "<p>Yeah i was planning for a combination of any 2 or 3</p>",
        "id": 230984792,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616138639
    },
    {
        "content": "<p>With regard to libged priorities, interruptibility and undo are near the top.  Transactions are closely related to both and may be required to implement them properly.</p>",
        "id": 230984857,
        "sender_full_name": "Sean",
        "timestamp": 1616138676
    },
    {
        "content": "<p>There are certainly shorter-term solutions to undo that are possible without transactions that might be worth implementing.</p>",
        "id": 230984942,
        "sender_full_name": "Sean",
        "timestamp": 1616138760
    },
    {
        "content": "<p>I also had this doubt, when applying transactions will it be 1 implementation for all commands or for every command it will have to be done separately?</p>",
        "id": 230985105,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616138909
    },
    {
        "content": "<p>I think that's a big \"it depends\"</p>",
        "id": 230985269,
        "sender_full_name": "Sean",
        "timestamp": 1616139061
    },
    {
        "content": "<p>ideally 1 implementation of course</p>",
        "id": 230985279,
        "sender_full_name": "Sean",
        "timestamp": 1616139068
    },
    {
        "content": "<p>but it's entirely likely that all commands will have to be adapted or updated</p>",
        "id": 230985299,
        "sender_full_name": "Sean",
        "timestamp": 1616139092
    },
    {
        "content": "<p>I was thinking maybe at the function call level, we make the transaction, where every cmd entered first affects a copy of the db and then the db is just replaced. By that the code for the cmds never has to get affected</p>",
        "id": 230985450,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616139216
    },
    {
        "content": "<p>so for example, the cp command that copies an object.  it reads an object, it writes an object.  instead, it may need to generate read/write _events_ and let a general parent routine do the actual read/write.</p>",
        "id": 230985564,
        "sender_full_name": "Sean",
        "timestamp": 1616139266
    },
    {
        "content": "<p>perhaps a 'copy' event instead of read/write, there is some design discovery needed</p>",
        "id": 230985623,
        "sender_full_name": "Sean",
        "timestamp": 1616139335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230985450\">said</a>:</p>\n<blockquote>\n<p>I was thinking maybe at the function call level, we make the transaction, where every cmd entered first affects a copy of the db and then the db is just replaced. By that the code for the cmds never has to get affected</p>\n</blockquote>\n<p>that's a good approach and I've had similar thoughts .. BUT</p>",
        "id": 230985699,
        "sender_full_name": "Sean",
        "timestamp": 1616139389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230985564\">said</a>:</p>\n<blockquote>\n<p>it may need to generate read/write _events_ and let a general parent routine do the actual read/write.</p>\n</blockquote>\n<p>Dint get u from here. Maybe ill have to surf through the code to understand properly</p>",
        "id": 230985726,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616139415
    },
    {
        "content": "<p>you have to know / keep in mind that a database can be 10GB in size.  single objects can be several GB, and it needs to take that constraint into consideration without introducing non-interactive pauses.</p>",
        "id": 230985759,
        "sender_full_name": "Sean",
        "timestamp": 1616139463
    },
    {
        "content": "<p>there's nothing to surf through the code to understand really.. think about it like the unix cp command</p>",
        "id": 230985823,
        "sender_full_name": "Sean",
        "timestamp": 1616139493
    },
    {
        "content": "<p>when you copy a file, say you 'cp a b' ... it obviously opens a, reads it, opens b, writes it, yes?</p>",
        "id": 230985851,
        "sender_full_name": "Sean",
        "timestamp": 1616139521
    },
    {
        "content": "<p>Yeah</p>",
        "id": 230985856,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616139528
    },
    {
        "content": "<p>well say we wanted to make 100% sure that neither a nor b are ever corrupted, even if the power plug was pulled out randomly</p>",
        "id": 230985954,
        "sender_full_name": "Sean",
        "timestamp": 1616139608
    },
    {
        "content": "<p>for the most part, the operating system and sometimes the file system can help, but assume they didn't...</p>",
        "id": 230986007,
        "sender_full_name": "Sean",
        "timestamp": 1616139661
    },
    {
        "content": "<p>what would you do to ensure that the operation is always error-free</p>",
        "id": 230986036,
        "sender_full_name": "Sean",
        "timestamp": 1616139709
    },
    {
        "content": "<p>you would probably implement a system like what some file systems use, a transaction log -- where you'd modify cp to create a read event and a write event.  the events are written to a ledger, then actually performed, then the ledger is updated.</p>",
        "id": 230986161,
        "sender_full_name": "Sean",
        "timestamp": 1616139839
    },
    {
        "content": "<p>Hmm yeah</p>",
        "id": 230986223,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616139868
    },
    {
        "content": "<p>that way if anything ever goes wrong (say cp crashes or you lose power), you can look at the ledger and fix it automatically (for example) or undo the partial changes etc</p>",
        "id": 230986265,
        "sender_full_name": "Sean",
        "timestamp": 1616139903
    },
    {
        "content": "<p>cp is overly simple of course, but the concept extends to much more complicated and longer-running commands or compound commands (commands that call many other commands)</p>",
        "id": 230986315,
        "sender_full_name": "Sean",
        "timestamp": 1616139947
    },
    {
        "content": "<p>But undoing might not be possible by retracing steps back for many commands right?</p>",
        "id": 230986556,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616140122
    },
    {
        "content": "<p>It's worth mentioning that there is an alternative to event-based transactions.  We could create an in-memory copy of the .g file, let commands work on it directly so we don't have to modify their code, and then write out the in-memory objects that changed to the on-disk database.</p>",
        "id": 230986566,
        "sender_full_name": "Sean",
        "timestamp": 1616140135
    },
    {
        "content": "<p>Lets say db -r was half way done, even if we know that overwritten objects cant be restored right?</p>",
        "id": 230986588,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616140156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230986566\">said</a>:</p>\n<blockquote>\n<p>It's worth mentioning that there is an alternative to event-based transactions.  We could create an in-memory copy of the .g file, let commands work on it directly so we don't have to modify their code, and then write out the in-memory objects that changed to the on-disk database.</p>\n</blockquote>\n<p>This was what I was thinking, as undoing complex cmds by retracing steps back is very tough</p>",
        "id": 230986614,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616140190
    },
    {
        "content": "<p>I wouldn't mix undo and transactions.. they're different concepts.</p>",
        "id": 230986617,
        "sender_full_name": "Sean",
        "timestamp": 1616140193
    },
    {
        "content": "<p>Okay</p>",
        "id": 230986660,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616140209
    },
    {
        "content": "<p>if a transaction doesn't complete, that's not something a user would \"undo\".  the transaction system can and should automatically ensure that either the whole transaction was successful or none of it was.</p>",
        "id": 230986692,
        "sender_full_name": "Sean",
        "timestamp": 1616140245
    },
    {
        "content": "<p>Got it<br>\nMy thoughts got intertwined between undo and transactions for a min</p>",
        "id": 230986789,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616140324
    },
    {
        "content": "<p>transactions will likely either need to use the two-file approach (inefficient, slow, but very easy to implement) or a ledger approach (efficient, fast, but a little harder to implement)</p>",
        "id": 230986860,
        "sender_full_name": "Sean",
        "timestamp": 1616140416
    },
    {
        "content": "<p>now once a transaction or command completes, that is something that we'll want to be able to undo.  that can be achieved by keeping copies of objects in an undo cache.</p>",
        "id": 230986954,
        "sender_full_name": "Sean",
        "timestamp": 1616140489
    },
    {
        "content": "<p>and an undo ledger</p>",
        "id": 230986978,
        "sender_full_name": "Sean",
        "timestamp": 1616140514
    },
    {
        "content": "<p>Yeah, we could undo simple commands by retracing steps back but for complex cmds it would be better to use an undo cache</p>",
        "id": 230987064,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616140582
    },
    {
        "content": "<p>yes that's where a ledger is critical because only operations that change object internals would need to be saved as copies.  the rest could just save the event like \"a was renamed to b\" and \"applied matrix to c\"</p>",
        "id": 230988052,
        "sender_full_name": "Sean",
        "timestamp": 1616141410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/230971717\">said</a>:</p>\n<blockquote>\n<p>\"running rt -C255/0/0 -o file.pix ... does not result in the background color getting used.  It does work with -F file.pix, going through libfb instead of libicv\"</p>\n</blockquote>\n<p>I'll start working on this and parallelly make my proposal, I shud be able  to make a first draft by Sun night</p>",
        "id": 230993706,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616145092
    },
    {
        "content": "<p>I tried <code>rt -C255/0/0  -o file.pix</code> and <code>rt -C255/0/0  -F file2.pix</code> then converted both files to png using the pic-png command<br>\nI see that both of them have the right background. Am I missing something here?</p>",
        "id": 231132450,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616229507
    },
    {
        "content": "<p>s/ledger/journal/g if ya'll want to stick with the 'normal' words :)<br>\nI have vague recollection of a couple \"special\" input colors that were treated unusually... very well may be misrecollection :) 'color keyed' states... (hopefully removed, may still be lingering bits, if I'm not off in the weeds?)</p>",
        "id": 231144860,
        "sender_full_name": "Erik",
        "timestamp": 1616245069
    },
    {
        "content": "<p>Pardon me, but I didn't get what you are saying.  What/Where is <code>s/ledger/journal/g</code> and where can I find the <code>color keyed</code> states</p>",
        "id": 231155382,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616257048
    },
    {
        "content": "<p>Hello everyone!<br>\nI'm interested in Computer graphics, and familiar with Three.js ,WebGL, and Javascript,<br>\nI had the pleasure to create these projects <a href=\"https://drive.google.com/drive/folders/1HfHAKOdryzF5XSM4wupNh8IC-2FczkJN\">https://drive.google.com/drive/folders/1HfHAKOdryzF5XSM4wupNh8IC-2FczkJN</a><br>\nand I am looking to do more by contributing on the OGV project <a href=\"https://github.com/opencax/GSoC/issues/26\">https://github.com/opencax/GSoC/issues/26</a></p>",
        "id": 231163129,
        "sender_full_name": "Mahmoud Hammad",
        "timestamp": 1616265219
    },
    {
        "content": "<p>I found that the last commit on the OGV project was 2 years ago!, so Please let me know if this project has a priority on GSoC21</p>",
        "id": 231163467,
        "sender_full_name": "Mahmoud Hammad",
        "timestamp": 1616265531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231155382\">said</a>:</p>\n<blockquote>\n<p>Pardon me, but I didn't get what you are saying.  What/Where is <code>s/ledger/journal/g</code> and where can I find the <code>color keyed</code> states</p>\n</blockquote>\n<p>Nevermind the \"What/Where is s/../../g\" , havent seen that notation before . Now I know its find and replace <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 231163822,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616265937
    },
    {
        "content": "<p>For making my proposal I wanted to know how the calls are made from us typing the command in mged till the whatever command 's code is executed. Could someone guide me regarding this or point me to some documentation</p>",
        "id": 231377031,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616443934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231132450\">said</a>:</p>\n<blockquote>\n<p>I tried <code>rt -C255/0/0  -o file.pix</code> and <code>rt -C255/0/0  -F file2.pix</code> then converted both files to png using the pic-png command<br>\nI see that both of them have the right background. Am I missing something here?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> you're not missing anything.  You say those  both result in a red background?</p>",
        "id": 231537120,
        "sender_full_name": "Sean",
        "timestamp": 1616530800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"103542\">Erik</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231144860\">said</a>:</p>\n<blockquote>\n<p>s/ledger/journal/g if ya'll want to stick with the 'normal' words :)</p>\n</blockquote>\n<p>Pfffft.  Normalshmormal.</p>",
        "id": 231537262,
        "sender_full_name": "Sean",
        "timestamp": 1616530841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399243\">Mahmoud Hammad</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231163467\">said</a>:</p>\n<blockquote>\n<p>I found that the last commit on the OGV project was 2 years ago!, so Please let me know if this project has a priority on GSoC21</p>\n</blockquote>\n<p>Hello <span class=\"user-mention\" data-user-id=\"399243\">@Mahmoud Hammad</span>.  OGV and related projects like the Benchmark Database and Materials Database are always excellent projects to propose for someone excited by them and willing to take them to their next level.</p>",
        "id": 231537467,
        "sender_full_name": "Sean",
        "timestamp": 1616530918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231537120\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> you're not missing anything.  You say those  both result in a red background?</p>\n</blockquote>\n<p>yeah , both of them are in red backgrounf</p>",
        "id": 231537671,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616530996
    },
    {
        "content": "<p>So either the bug is platform or compilation-specific or got fixed at some point...</p>",
        "id": 231537904,
        "sender_full_name": "Sean",
        "timestamp": 1616531093
    },
    {
        "content": "<p>I'll see if I can reproduce it.</p>",
        "id": 231537930,
        "sender_full_name": "Sean",
        "timestamp": 1616531104
    },
    {
        "content": "<p>Okay</p>",
        "id": 231537959,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616531115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231377031\">said</a>:</p>\n<blockquote>\n<p>For making my proposal I wanted to know how the calls are made from us typing the command in mged till the whatever command 's code is executed. Could someone guide me regarding this or point me to some documentation</p>\n</blockquote>\n<p>Any ping on this plz</p>",
        "id": 231541769,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616532715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> that is a bit hard to follow, so no worries.  how calls are made is typically as follows...</p>",
        "id": 231572684,
        "sender_full_name": "Sean",
        "timestamp": 1616552243
    },
    {
        "content": "<p>in main() in src/mged/mged.c you'll see mged_setup() is called,<br>\nand in there cmd_setup() is called,<br>\nand in there you'll see iterates over an mged_cmdtab table.<br>\nthat table is the mapping of a command's name (e.g., 'ls') and its function (e.g., ged_ls)</p>",
        "id": 231572884,
        "sender_full_name": "Sean",
        "timestamp": 1616552407
    },
    {
        "content": "<p>those strings are actually registered with a Tcl interpreter and then cause the function to be automatically called whenever the command's name is provided for evaluation.</p>",
        "id": 231572967,
        "sender_full_name": "Sean",
        "timestamp": 1616552479
    },
    {
        "content": "<p>once that happens, nearly the rest of the magic is handled automatically by Tcl.  we display a prompt (e.g., \"mged&gt; \") and when a user types anything and hits enter, that string is passed to tcl for evaluation (Tcl_Eval()) which causes it to call the function that was registered.</p>",
        "id": 231573211,
        "sender_full_name": "Sean",
        "timestamp": 1616552663
    },
    {
        "content": "<p>So if I was applying a transaction based on 2 file system, I would add 1 more link in this chain right? Where instead of directly calling ged_cmd, I would add a transaction function which would create a parallel db, apply changes to that(in which it calls ged_cmd) and then finally change pointer (and free old db).</p>",
        "id": 231581993,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616559404
    },
    {
        "content": "<p>Hmmm</p>",
        "id": 231583172,
        "sender_full_name": "Sean",
        "timestamp": 1616560688
    },
    {
        "content": "<p>Im just naming a possibility here, could be done in other ways too ofc</p>",
        "id": 231583196,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616560732
    },
    {
        "content": "<p>you're not far off, I just had to refresh my memory on the code</p>",
        "id": 231583363,
        "sender_full_name": "Sean",
        "timestamp": 1616560936
    },
    {
        "content": "<p>if you look in setup.c, notice there are three things listed: the name of the command, a wrapper function, and the callback</p>",
        "id": 231583384,
        "sender_full_name": "Sean",
        "timestamp": 1616560972
    },
    {
        "content": "<p>that second wrapper value a function that is called when the name of the command is encountered, and it's what calls the callback</p>",
        "id": 231583450,
        "sender_full_name": "Sean",
        "timestamp": 1616561049
    },
    {
        "content": "<p>Okay</p>",
        "id": 231583587,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616561191
    },
    {
        "content": "<p>a simple one to understand is the cmd_ged_edit_wrapper() function that only the \"clone\" command apparently calls.  looking at that cmd_ged_edit_erapper() function, it invokes ged_clone (via ctp-&gt;ged_func()), and as long as there wasn't an error or request for help, it draws the cloned object.</p>",
        "id": 231583592,
        "sender_full_name": "Sean",
        "timestamp": 1616561205
    },
    {
        "content": "<p>nearly all functions go through cmd_ged_plain_wrapper() which calls the ged function, handles if MORE arguments are needed, and redraws anything on the command line.  seems pretty redundant with cmd_ged_edit_wrapper()..</p>",
        "id": 231583724,
        "sender_full_name": "Sean",
        "timestamp": 1616561390
    },
    {
        "content": "<p>Hmmm so I could add a link from setup.c to the transaction mechanism, that way I wont have to deal with things in between setup.c and MGED</p>",
        "id": 231583891,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616561553
    },
    {
        "content": "<p>There's many possibilities.  I mean the current state of the code is a work in progress.  If you dig in deeper you'll see that there are two command tables, one using a newer style with a few entries and the older one using the big cmdtab.</p>",
        "id": 231583991,
        "sender_full_name": "Sean",
        "timestamp": 1616561696
    },
    {
        "content": "<p>The goal is to eventually just have something like ged_exec() that does it instead of having the application have a big list of commands and functions.</p>",
        "id": 231584035,
        "sender_full_name": "Sean",
        "timestamp": 1616561748
    },
    {
        "content": "<p>In that scenario, it makes sense for ged_exec() to essentially do all the wrapper setup/teardown necessary</p>",
        "id": 231584082,
        "sender_full_name": "Sean",
        "timestamp": 1616561778
    },
    {
        "content": "<p>Yeah</p>",
        "id": 231584094,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616561788
    },
    {
        "content": "<p>that could be step 1 for a libged gsoc proposal, spend a week migrating the command table from src/mged to src/libged with a ged_exec call, then step 2 could be to eliminate / consolidate the various command table wrappers into just one wrapper, then step 3 demonstrate a working transaction demo outside of libged (just a test.c test case), then step 4 implement a manual transaction command, and step 5 integrate transactions into ged_exec</p>",
        "id": 231584504,
        "sender_full_name": "Sean",
        "timestamp": 1616562196
    },
    {
        "content": "<p>Also if I plan to implement both UNDO and transactions will that be too much to aim for during GSoC, considering the reduced timeframe from prev GSoCs?</p>",
        "id": 231584752,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616562485
    },
    {
        "content": "<p>I would just plan it out as starting with one and transitioning into the other</p>",
        "id": 231586289,
        "sender_full_name": "Sean",
        "timestamp": 1616564153
    },
    {
        "content": "<p>Okay</p>",
        "id": 231586450,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616564290
    },
    {
        "content": "<p>But can both of them be done within GSoC?</p>",
        "id": 231586462,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616564307
    },
    {
        "content": "<p>or is it a risky proposition</p>",
        "id": 231586470,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616564333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231586462\">said</a>:</p>\n<blockquote>\n<p>But can both of them be done within GSoC?</p>\n</blockquote>\n<p>This isn't something I can answer because it mostly depends on your skill level, available time, ability to stay focused on the task, your ability navigating existing code, etc.</p>",
        "id": 231586554,
        "sender_full_name": "Sean",
        "timestamp": 1616564419
    },
    {
        "content": "<p>complexity-wise, it's entirely doable.  I'd estimate it taking one of the experienced core devs 2-3 weeks for both so yeah, that is likely very appropriate for gsoc in general.</p>",
        "id": 231586597,
        "sender_full_name": "Sean",
        "timestamp": 1616564467
    },
    {
        "content": "<p>Fine then I'll include both of them in my proposal</p>",
        "id": 231586718,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616564603
    },
    {
        "content": "<p>I got one more doubt as I was researching about how transactions are implemented in different systems, I found this in the journal/ledger based file system wikipedia page,  The statement was made in context to deleting a file in linux and power failure during the process. \"After a crash, recovery simply involves reading the journal from the file system and replaying changes from this journal until the file system is consistent again.\" , So i found it too simple that will just replaying  instructions of the prev cmd stop the db from being corrupted. <br>\nRef:<a href=\"https://en.wikipedia.org/wiki/Journaling_file_system#Rationale\">https://en.wikipedia.org/wiki/Journaling_file_system#Rationale</a></p>",
        "id": 231586953,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616564868
    },
    {
        "content": "<p>For the UNDO command, I was thinking about an implementation where we store all commands applied on the file and when we undo, just rebuild the file from scratch applying all cmds given from the beginning excluding the number of undo specified, like if we implement the cmd as: undo &lt;no of steps to go back&gt; , we just pop the cmds from the applied_cmds stack and put them in the redo_cmd stack.</p>",
        "id": 231697848,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616615436
    },
    {
        "content": "<p>I wanted to check the viability of this method in terms of time complexity, so I first checked the primitives in tank_car.g which was around 500 primitives. I wrote a script to create 500 primitives in a file, the script took just 0.5 sec to run and all 500 primitives were created.</p>",
        "id": 231697871,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616615447
    },
    {
        "content": "<p>So this looked like a viable approach to implement the undo command (I could surely be wrong in saying its viable).</p>",
        "id": 231697897,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616615462
    },
    {
        "content": "<p>To further test viability could anyone suggest me commands that affect the db (unlike an rt, stat, summary ) and are very complex (in terms of time )to run.</p>",
        "id": 231697910,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616615470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231697871\">said</a>:</p>\n<blockquote>\n<p>I wanted to check the viability of this method in terms of time complexity, so I first checked the primitives in tank_car.g which was around 500 primitives. I wrote a script to create 500 primitives in a file, the script took just 0.5 sec to run and all 500 primitives were created.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> excellent question, but it's not really viable.  Not that our simple example geometry files are just that ... simple examples.  Real .g files in common use can be 1-10GB with 50,000 objects in them.</p>",
        "id": 231746802,
        "sender_full_name": "Sean",
        "timestamp": 1616646943
    },
    {
        "content": "<p>So I think you're on the right track, but I think undo can actually be quite simple.</p>",
        "id": 231746921,
        "sender_full_name": "Sean",
        "timestamp": 1616647080
    },
    {
        "content": "<p>I feel it is quite simple for commands that don't have data being removed, like a rename or addition of a new object</p>",
        "id": 231746991,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616647142
    },
    {
        "content": "<p>There's two possible approaches.  One very simple method is to simply keep the last N undo states in the .g file as hidden objects.</p>",
        "id": 231747012,
        "sender_full_name": "Sean",
        "timestamp": 1616647181
    },
    {
        "content": "<p>But if a kill command is used or a dbconcat -r , then to recover data with an undo we will have to store data</p>",
        "id": 231747017,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616647197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231747012\">said</a>:</p>\n<blockquote>\n<p>There's two possible approaches.  One very simple method is to simply keep the last N undo states in the .g file as hidden objects.</p>\n</blockquote>\n<p>Nice idea</p>",
        "id": 231747068,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616647218
    },
    {
        "content": "<p>That way, for example, if you deleted an object A, you might copy it to ._A;1 and then delete A.  To undo, you'd rename it back, delete ._A;1 (and possibly create another hidden object like ._A;2 that would let you undo the undo)</p>",
        "id": 231747536,
        "sender_full_name": "Sean",
        "timestamp": 1616647707
    },
    {
        "content": "<p>Ideally, it's some convention that lets you represent an undo chain (like what emacs and other programs do so you can undo and redo infinitely).</p>",
        "id": 231747695,
        "sender_full_name": "Sean",
        "timestamp": 1616647890
    },
    {
        "content": "<p>here's an textual description of that process: <a href=\"https://stackoverflow.com/questions/3527142/how-do-you-redo-changes-after-undo-with-emacs\">https://stackoverflow.com/questions/3527142/how-do-you-redo-changes-after-undo-with-emacs</a></p>",
        "id": 231747799,
        "sender_full_name": "Sean",
        "timestamp": 1616648012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231747799\">said</a>:</p>\n<blockquote>\n<p>here's an textual description of that process: <a href=\"https://stackoverflow.com/questions/3527142/how-do-you-redo-changes-after-undo-with-emacs\">https://stackoverflow.com/questions/3527142/how-do-you-redo-changes-after-undo-with-emacs</a></p>\n</blockquote>\n<p>Yeah I read this</p>",
        "id": 231747894,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616648105
    },
    {
        "content": "<p>But some actions aren't specific to an object like a dbconcat, there the code will have to be modified to give details to the undo stack</p>",
        "id": 231748095,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616648298
    },
    {
        "content": "<p>Im aware of only dbconcat for now, but there might be others</p>",
        "id": 231748102,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616648314
    },
    {
        "content": "<p>Which might delay the implementation of the undo, if we were to store previous versions of objects and not the entire db</p>",
        "id": 231748129,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616648371
    },
    {
        "content": "<p>relevant background: <a href=\"https://www.gnu.org/software/emacs/manual/html_node/emacs/Undo.html\">https://www.gnu.org/software/emacs/manual/html_node/emacs/Undo.html</a></p>",
        "id": 231748131,
        "sender_full_name": "Sean",
        "timestamp": 1616648373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231748095\">said</a>:</p>\n<blockquote>\n<p>But some actions aren't specific to an object like a dbconcat, there the code will have to be modified to give details to the undo stack</p>\n</blockquote>\n<p>There's a whole bunch of commands that act on multiple objects, so yes -- they'll have to be dealt with too, but they're essentially the same.</p>",
        "id": 231748273,
        "sender_full_name": "Sean",
        "timestamp": 1616648458
    },
    {
        "content": "<p>maybe I run \"kill *\"</p>",
        "id": 231748306,
        "sender_full_name": "Sean",
        "timestamp": 1616648511
    },
    {
        "content": "<p>a single undo should restore them all...</p>",
        "id": 231748350,
        "sender_full_name": "Sean",
        "timestamp": 1616648525
    },
    {
        "content": "<p>Yep</p>",
        "id": 231748362,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616648546
    },
    {
        "content": "<p>How about this idea where we take some N and store the entire db before N steps, and then the N commands that had followed. Thus we will need to apply only N steps before we access any of the previous states</p>",
        "id": 231748460,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616648650
    },
    {
        "content": "<p>N could be some 50-100</p>",
        "id": 231748471,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616648661
    },
    {
        "content": "<p>After every additional step, we update the copy of the db by applying the last cmd in the stack</p>",
        "id": 231748483,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616648699
    },
    {
        "content": "<p>the way I've had in mind for libged is very much related to transactions but doesn't require transactions.  that is, we could modify all commands to generate events instead of actually modifying the database, so \"rm *\" will generate a set of DELETE events, for example, or dbconcat will generate a set of WRITE or REPLACE events.</p>",
        "id": 231748505,
        "sender_full_name": "Sean",
        "timestamp": 1616648712
    },
    {
        "content": "<p>Okay, now I get what you meant by events, I hadnt understood fully what u meant the last time you had mentioned it</p>",
        "id": 231748587,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616648774
    },
    {
        "content": "<p>inside the invoking parent wrapper (e.g., ged_exec()), it calls the command like ged_rm, gets back the set of DELETE events, then the wrapper does the work to \"cp obj1 ._obj1;1\" and \"cp obj2 ._obj2;1\" and record the undo entry for rm in the undo ledger/journal/transcript.</p>",
        "id": 231748719,
        "sender_full_name": "Sean",
        "timestamp": 1616648918
    },
    {
        "content": "<p>and then actually deletes obj1 obj2 etc</p>",
        "id": 231748730,
        "sender_full_name": "Sean",
        "timestamp": 1616648939
    },
    {
        "content": "<p>Notice that this is essentially the \"partial checkpoint\" method described using both command pattern and memento pattern.</p>",
        "id": 231749060,
        "sender_full_name": "Sean",
        "timestamp": 1616649391
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Undo\">https://en.wikipedia.org/wiki/Undo</a></p>",
        "id": 231749065,
        "sender_full_name": "Sean",
        "timestamp": 1616649395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231749065\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Undo\">https://en.wikipedia.org/wiki/Undo</a></p>\n</blockquote>\n<p>Ive done my basic research <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 231749155,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616649513
    },
    {
        "content": "<p>That all said -- I started off saying there are two possible approaches.  Two more easily implemented approaches, that is.  The other method is a form of full checkpoint.</p>",
        "id": 231749156,
        "sender_full_name": "Sean",
        "timestamp": 1616649514
    },
    {
        "content": "<p>Yeah, but the partial checkpoint is even better right? and the implementations are not too far off either acc to me</p>",
        "id": 231749298,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616649688
    },
    {
        "content": "<p>yes and no, there are complexity considerations</p>",
        "id": 231749312,
        "sender_full_name": "Sean",
        "timestamp": 1616649720
    },
    {
        "content": "<p>Instead of modifying all commands to generate events and making a wrapper do all the work to act intelligently given a set of events, we could implement a completely agnostic system that is very simple.</p>",
        "id": 231749353,
        "sender_full_name": "Sean",
        "timestamp": 1616649732
    },
    {
        "content": "<p>for example (and this is JUST an example of a possible implementation)...</p>",
        "id": 231749365,
        "sender_full_name": "Sean",
        "timestamp": 1616649745
    },
    {
        "content": "<p>we could let a command (e.g., rm *) operate on the .g, and then check it into a repo.  then another command (e.g., dbconcat file2.g) operates, check it into a repo, etc.  Then an undo is requested, we restore a previous repo state, check it into the repo, and so on.</p>",
        "id": 231749471,
        "sender_full_name": "Sean",
        "timestamp": 1616649881
    },
    {
        "content": "<p>Like saving a version for every command right?</p>",
        "id": 231749495,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616649917
    },
    {
        "content": "<p>right, you'd probably use something like <a href=\"https://libgit2.org\">https://libgit2.org</a></p>",
        "id": 231749511,
        "sender_full_name": "Sean",
        "timestamp": 1616649928
    },
    {
        "content": "<p>Wont this be very bad for space complexity to even consider, especially if files are 10gb or more</p>",
        "id": 231749682,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616650085
    },
    {
        "content": "<p>this is very simple to implement.  the downsides are it will unlikely be anywhere near as fast as the partial approach with events, but the simplicity is hard to argue against as it's command-agnostic and will not be susceptible to bugs, oversight, changes over time.  For example, say someone makes the \"rt\" command start writing a counter into the .g file ... which would be very easy to overlook and not undo.</p>",
        "id": 231749824,
        "sender_full_name": "Sean",
        "timestamp": 1616650241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231749682\">said</a>:</p>\n<blockquote>\n<p>Wont this be very bad for space complexity to even consider, especially if files are 10gb or more</p>\n</blockquote>\n<p>No, not necessarily.  It actually could end up taking up less space under some conditions.</p>",
        "id": 231749921,
        "sender_full_name": "Sean",
        "timestamp": 1616650325
    },
    {
        "content": "<p>So you are suggesting like how patches are created in svn, where we just store changes in the file at a very low level?s</p>",
        "id": 231749945,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616650370
    },
    {
        "content": "<p>the first method (\"partial\" linear undo with events)  for example, we might do \"cp A ._A;1\" because the color changed.  if A is a really big object, that'd be terribly wasteful to copy it like that.  the second method (\"full\" checkpoint undo), it's up to the VCS to figure out what changed and only save those changes.  In the case of something like libgit2, it's only going to save the bytes around what changed even for binary blobs.  If A's a big object and we only change the 3 color bytes, it's only going to track that a small block of the file changed (maybe writing 256 bytes).</p>",
        "id": 231750226,
        "sender_full_name": "Sean",
        "timestamp": 1616650628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231749945\">said</a>:</p>\n<blockquote>\n<p>So you are suggesting like how patches are created in svn, where we just store changes in the file at a very low level?s</p>\n</blockquote>\n<p>yes, in fact libsvn is another viable option</p>",
        "id": 231750260,
        "sender_full_name": "Sean",
        "timestamp": 1616650667
    },
    {
        "content": "<p>I also thought about this approach but haven't started reading about it. I'll read about this method as well</p>",
        "id": 231750330,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616650722
    },
    {
        "content": "<p>There's two ways to use a version-control-system (VCS) like libgit2 or libsvn.  One would be to simply use them as a temporary undo mechanism in a temporary scratch space whenever a .g is opened for write access, deleting the repo when the app quits.</p>\n<p>Another would be to fundamentally change our database I/O layer (i.e., rel6 .g files) where we'd write out a .g as 1 file per object as an actual .git initialized repository, with every change checked in and preserved.</p>",
        "id": 231750840,
        "sender_full_name": "Sean",
        "timestamp": 1616651275
    },
    {
        "content": "<p>The latter is probably ideal, but HIGH risk, so it's not really a good candidate for GSoC at this time.</p>",
        "id": 231750934,
        "sender_full_name": "Sean",
        "timestamp": 1616651386
    },
    {
        "content": "<p>so I think it still boils down to either partial+events or full+libgit2 in a temp space.</p>",
        "id": 231751160,
        "sender_full_name": "Sean",
        "timestamp": 1616651606
    },
    {
        "content": "<p>Yeah</p>",
        "id": 231751296,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616651698
    },
    {
        "content": "<p>I'm a little pro-partial+events</p>",
        "id": 231751425,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616651845
    },
    {
        "content": "<p>Because I think there is a big learning curve for the second approach, and implementation might have to deal with mged backend rather than the way we write a file</p>",
        "id": 231751481,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616651887
    },
    {
        "content": "<p>A question... I'm not sure how well git or svn backends would do compacting (say) a large BoT with one vertex changed.  It would be worth doing some testing creating minor variations on large meshes and checking them in to see what happens...  based on the repo conversion I'd expect libgit2 to do a bit better than svn, but either way I think it's worth checking practically.</p>",
        "id": 231781239,
        "sender_full_name": "starseeker",
        "timestamp": 1616670348
    },
    {
        "content": "<p>\"lfs\" exists for dealing with large files, but it's a headache all it's own</p>",
        "id": 231809298,
        "sender_full_name": "Erik",
        "timestamp": 1616682156
    },
    {
        "content": "<p><a href=\"https://github.com/mendsley/bsdiff\">https://github.com/mendsley/bsdiff</a> I think is used for lots of binary diffing applications - might be interesting to see what could be done with it to adapt to .g object diffing, if libgit2 doesn't do well out of the box...</p>",
        "id": 231831075,
        "sender_full_name": "starseeker",
        "timestamp": 1616689086
    },
    {
        "content": "<p>I should probably point out this  work in case it's of use in this context:  <a href=\"https://github.com/BRL-CAD/geomcore/tree/main/src/libgvm\">https://github.com/BRL-CAD/geomcore/tree/main/src/libgvm</a></p>",
        "id": 231848712,
        "sender_full_name": "starseeker",
        "timestamp": 1616695437
    },
    {
        "content": "<p>Could you give me a brief on what this is? Is it a new geom editor being developed?</p>",
        "id": 231849212,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616695609
    },
    {
        "content": "<p>To be more specific, will I be working on this if I am to implement the UNDO command</p>",
        "id": 231849338,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616695666
    },
    {
        "content": "<p>geomcore is some old work primarily focused on a \"geometry service\" that would expose database contents over the network.  As part of that work, some early work was done on an API for \"versioning\" geometry by breaking it up into individual objects and checking them into a VCS backend.</p>",
        "id": 231849438,
        "sender_full_name": "starseeker",
        "timestamp": 1616695691
    },
    {
        "content": "<p>IIRC, I got it as far as being able to read in havoc.g from the examples, check all the objects into the SVN database, and then reconstitute the .g file from the SVN history as a \".g\" checkout, but it's been a long time now...</p>",
        "id": 231849586,
        "sender_full_name": "starseeker",
        "timestamp": 1616695745
    },
    {
        "content": "<p>Thanks to Sean there was some thought given to making the API modular to different VCS backends, but I only ever experimented with SVN.  Today I'd prefer to try libgit2...</p>",
        "id": 231849674,
        "sender_full_name": "starseeker",
        "timestamp": 1616695786
    },
    {
        "content": "<p>My vague memory was that the checking process, at least, was quite slow with SVN.</p>",
        "id": 231849785,
        "sender_full_name": "starseeker",
        "timestamp": 1616695817
    },
    {
        "content": "<p>Ohkay</p>",
        "id": 231850209,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616695981
    },
    {
        "content": "<p>I don't know if it would be useful for what you've been discussing or not - Sean may have a better sense - but it's what I think of right off anytime discussion of version control backends for geometry comes up.</p>",
        "id": 231850854,
        "sender_full_name": "starseeker",
        "timestamp": 1616696211
    },
    {
        "content": "<p>Yeah I think it will be useful if I go ahead on making a VCS for the undo mechanism</p>",
        "id": 231851067,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616696291
    },
    {
        "content": "<p>But I wont be implementing a VCS for files though, that is too complex for GSoC</p>",
        "id": 231851258,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616696367
    },
    {
        "content": "<p>OK, I got the gvmtest app running.  Ha! One minor compile fix, but looks as if it still works.</p>",
        "id": 231852503,
        "sender_full_name": "starseeker",
        "timestamp": 1616696876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> The libgvm work may well be relevant to both... If you're going to establish a temporary repository for UNDO operations, you'd in principle be doing a variation of what gvmtest is doing - takeing an existing .g file, writing out the individual objects into the VCS, and then at need pulling out old versions into the \"working\" .g file.</p>",
        "id": 231853127,
        "sender_full_name": "starseeker",
        "timestamp": 1616697101
    },
    {
        "content": "<p>Yeah that could surely be done, I was expecting to work with it at the binary level though, since you have already made some progress on it, I will go through libgvm and then reconsider, because right now I \"feel\" implementing a VCS might be difficult for me <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 231854040,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616697397
    },
    {
        "content": "<p>You mean keeping entire copies of the .g file?</p>",
        "id": 231855770,
        "sender_full_name": "starseeker",
        "timestamp": 1616698101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231750226\">said</a>:</p>\n<blockquote>\n<p>the second method (\"full\" checkpoint undo), it's up to the VCS to figure out what changed and only save those changes.  In the case of something like libgit2, it's only going to save the bytes around what changed even for binary blobs.  If A's a big object and we only change the 3 color bytes, it's only going to track that a small block of the file changed (maybe writing 256 bytes).</p>\n</blockquote>\n<p>Like this</p>",
        "id": 231855978,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616698195
    },
    {
        "content": "<p>Oh, OK, so feed the whole .g to libgit2 and let it figure out what the diff is?</p>",
        "id": 231856107,
        "sender_full_name": "starseeker",
        "timestamp": 1616698234
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 231856126,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616698242
    },
    {
        "content": "<p>/me winces a little - I'd for sure test that to verify Git does something smart.  Grab a big mesh online, alter a couple vertices with Meshlab, then check both versions of the mesh into a Git repo and see how big it ends up being.</p>",
        "id": 231856261,
        "sender_full_name": "starseeker",
        "timestamp": 1616698304
    },
    {
        "content": "<p>True that at times it might be large but wont it always be smaller than storing a copy of the whole .g file?</p>",
        "id": 231856478,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616698392
    },
    {
        "content": "<p>Yes, but for lots of edits on large meshes it may still quickly reach impractical sizes.</p>",
        "id": 231856576,
        "sender_full_name": "starseeker",
        "timestamp": 1616698436
    },
    {
        "content": "<p>Got your point</p>",
        "id": 231856684,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616698461
    },
    {
        "content": "<p>It may still be worthwhile, but if that's the behavior we would need to guard against the VCS repo getting too big</p>",
        "id": 231856704,
        "sender_full_name": "starseeker",
        "timestamp": 1616698467
    },
    {
        "content": "<p>I.e. throwing away the older history when we start approaching some size limit</p>",
        "id": 231856772,
        "sender_full_name": "starseeker",
        "timestamp": 1616698488
    },
    {
        "content": "<p>We will be saving a the same no of diffs as we need to go back and that could add up to be impractcal</p>",
        "id": 231856828,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616698508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231856772\">said</a>:</p>\n<blockquote>\n<p>I.e. throwing away the older history when we start approaching some size limit</p>\n</blockquote>\n<p>Yeah</p>",
        "id": 231856885,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616698525
    },
    {
        "content": "<p>If the diffs are small we'd be in good shape, but that's only practical if Git can figure out the small delta between similar binary objects.  That's what I'm not sure of.</p>",
        "id": 231856936,
        "sender_full_name": "starseeker",
        "timestamp": 1616698551
    },
    {
        "content": "<p>We could let the user set this space as well, so that they can adjust themselves the no of undos they want vs space consumed</p>",
        "id": 231857049,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616698581
    },
    {
        "content": "<p>/me nods</p>",
        "id": 231857070,
        "sender_full_name": "starseeker",
        "timestamp": 1616698590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231856936\">said</a>:</p>\n<blockquote>\n<p>If the diffs are small we'd be in good shape, but that's only practical if Git can figure out the small delta between similar binary objects.  That's what I'm not sure of.</p>\n</blockquote>\n<p>Let me try this out</p>",
        "id": 231857417,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616698712
    },
    {
        "content": "<p>I uploaded a .g file to github 2.85 KiB, <br>\nFirst I added a rhc to it and then pushed again, this led to writing 104 bytes<br>\nNext I changed the colour of an object, this led to writing 160 bytes</p>",
        "id": 231860880,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616700029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> this looks good right?</p>",
        "id": 231861462,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616700193
    },
    {
        "content": "<p>Well, what is needed is to change the same object and see if the written delta is smaller than the object size</p>",
        "id": 231861571,
        "sender_full_name": "starseeker",
        "timestamp": 1616700248
    },
    {
        "content": "<p>Yeah thats what i did in the second step</p>",
        "id": 231861618,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616700277
    },
    {
        "content": "<p>160 bytes &lt; 2.85 KiB</p>",
        "id": 231861640,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616700294
    },
    {
        "content": "<p>Well, that's not a geometry change though - that's an attribute change.</p>",
        "id": 231861761,
        "sender_full_name": "starseeker",
        "timestamp": 1616700316
    },
    {
        "content": "<p>That's why I suggested editing a mesh.</p>",
        "id": 231861823,
        "sender_full_name": "starseeker",
        "timestamp": 1616700329
    },
    {
        "content": "<p>Like a change in length?</p>",
        "id": 231861845,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616700343
    },
    {
        "content": "<p>Let me do that</p>",
        "id": 231861859,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616700351
    },
    {
        "content": "<p>moving a couple vertices would be ideal</p>",
        "id": 231861873,
        "sender_full_name": "starseeker",
        "timestamp": 1616700360
    },
    {
        "content": "<p>tiny change to a large mesh</p>",
        "id": 231861926,
        "sender_full_name": "starseeker",
        "timestamp": 1616700372
    },
    {
        "content": "<p>Are you familiar with meshlab?</p>",
        "id": 231861965,
        "sender_full_name": "starseeker",
        "timestamp": 1616700389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231861965\">said</a>:</p>\n<blockquote>\n<p>Are you familiar with meshlab?</p>\n</blockquote>\n<p>ummm no</p>",
        "id": 231861978,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616700401
    },
    {
        "content": "<p>OK, one sec.</p>",
        "id": 231863108,
        "sender_full_name": "starseeker",
        "timestamp": 1616700769
    },
    {
        "content": "<p><a href=\"https://brlcad.org/~starseeker/bunny_0.g\">https://brlcad.org/~starseeker/bunny_0.g</a> and <a href=\"https://brlcad.org/~starseeker/bunny_1.g\">https://brlcad.org/~starseeker/bunny_1.g</a>  are two versions of the Stanford bunny.  If you save those two, first _0 and then _1, what happens?</p>",
        "id": 231863828,
        "sender_full_name": "starseeker",
        "timestamp": 1616701080
    },
    {
        "content": "<p>Yea let me check</p>",
        "id": 231863896,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616701102
    },
    {
        "content": "<p>So adding the bunny wrote 1.58 MB and after overwriting bunny0 with bunny1 and then pushing it wrote an additional 8.49KB</p>",
        "id": 231864510,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616701381
    },
    {
        "content": "<p>I think these values are not correct..... 1 sec</p>",
        "id": 231864733,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616701470
    },
    {
        "content": "<p>So when i did git push it said: writing 832.11 KiB<br>\nafter overwriting it and then pushing, it said writing 385.18 KiB</p>",
        "id": 231864919,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616701541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231864919\">said</a>:</p>\n<blockquote>\n<p>So when i did git push it said: writing 832.11 KiB<br>\nafter overwriting it and then pushing, it said writing 385.18 KiB</p>\n</blockquote>\n<p>This is in the terminal</p>",
        "id": 231865004,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616701563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231864510\">said</a>:</p>\n<blockquote>\n<p>So adding the bunny wrote 1.58 MB and after overwriting bunny0 with bunny1 and then pushing it wrote an additional 8.49KB</p>\n</blockquote>\n<p>This is actually increase in file size</p>",
        "id": 231865051,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616701579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231864919\">said</a>:</p>\n<blockquote>\n<p>So when i did git push it said: writing 832.11 KiB<br>\nafter overwriting it and then pushing, it said writing 385.18 KiB</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> So what do you think?</p>",
        "id": 231865254,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616701663
    },
    {
        "content": "<p>OK, not too bad.</p>",
        "id": 231865343,
        "sender_full_name": "starseeker",
        "timestamp": 1616701689
    },
    {
        "content": "<p>It didn't double in size, at least</p>",
        "id": 231865394,
        "sender_full_name": "starseeker",
        "timestamp": 1616701708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231865394\">said</a>:</p>\n<blockquote>\n<p>It didn't double in size, at least</p>\n</blockquote>\n<p>Yeah</p>",
        "id": 231865416,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616701718
    },
    {
        "content": "<p>Yeah, the xdelta3 size is on that order - 349K.  bsdiff gets it down to 219K.</p>",
        "id": 231866893,
        "sender_full_name": "starseeker",
        "timestamp": 1616702396
    },
    {
        "content": "<p>Ideally what we'll be able to set up is something that uses the default VCS backend for most deltas, but will let us specialize as we start to refine some specific operations (rotate, translate and scale will have large data deltas when applied to meshes, but can in principle be versioned with reverse-edit operations applied to the \"working\" mesh, for example.  That's a lot of complexity though, and not something to introduce at the beginning.)</p>",
        "id": 231867593,
        "sender_full_name": "starseeker",
        "timestamp": 1616702668
    },
    {
        "content": "<p>Though Im clear on the concept, I still feel that I lack the knowledge of the codebase to implement a VCS into it :(<br>\nI think should take a deep dive into the code and think of ways to implement it</p>",
        "id": 231868788,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616703139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231856772\">said</a>:</p>\n<blockquote>\n<p>I.e. throwing away the older history when we start approaching some size limit</p>\n</blockquote>\n<p>This.  I think that'll be necessary no matter what approach is taken with undo.  We're at a point where we need to know how full the disks are getting.</p>",
        "id": 231886663,
        "sender_full_name": "Sean",
        "timestamp": 1616711575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231856936\">said</a>:</p>\n<blockquote>\n<p>If the diffs are small we'd be in good shape, but that's only practical if Git can figure out the small delta between similar binary objects.  That's what I'm not sure of.</p>\n</blockquote>\n<p>Since we're talking about undo, I think we can proceed with an assumption that undo information disappears when the database is closed.  Undo is the priority, not maintaining a full edit history, so we could simply plan to let it go or utilize an in-memory database and keep track of memory that way.</p>",
        "id": 231887014,
        "sender_full_name": "Sean",
        "timestamp": 1616711741
    },
    {
        "content": "<p>The big decision that needs to happen first is partial+events or full/agnostic as they are dramatically different approaches and impact on existing commands.</p>",
        "id": 231887228,
        "sender_full_name": "Sean",
        "timestamp": 1616711869
    },
    {
        "content": "<p>I'd suggest we (i.e., <span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> ) either plan to just use libgvm/libgit2 completely as-is and let it be whatever it is for a preliminary cut at full/agnostic, so we can then focus on the undo/redo side of things in the GUI; or we (i.e., <span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> ) plan to make commands report events, have a main processor that handles all events consistently, and focus on migrating commands.  Both ways have merit and tradeoffs.</p>\n<p>Partial+events will almost certainly be an undo/redo system that is more performant, efficient, reversible, and simple to implement well enough, but entails editing all commands (so only able to undo migrated commands) and requires designing+implementing the event handlers.  It's not hard and is 100% in our control complexity-wise, but requires a lot of code change.</p>\n<p>Full/agnostic will almost certainly result in an undo/redo system more quickly, robustly, reversibly, and works with any command, but it will be FAR less efficient and involves a new external dep that can derail focus and otherwise represents unknown risk.  It's almost certainly less code, though, so it would be overall less risk if libgvm/libgit2 behave.</p>",
        "id": 231890282,
        "sender_full_name": "Sean",
        "timestamp": 1616713592
    },
    {
        "content": "<p>I think they're both viable and good approaches for different reasons.  If you were experienced in either, that would probably lean me towards one or the other but you're not so it could be a wash risk-wise.  <span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> do you understand the tradeoffs?  What are your thoughts?  Which do you feel you understand the most?  What don't you feel you understand?</p>",
        "id": 231890569,
        "sender_full_name": "Sean",
        "timestamp": 1616713763
    },
    {
        "content": "<p>Those answers would be good to put into your proposal ;)</p>",
        "id": 231890579,
        "sender_full_name": "Sean",
        "timestamp": 1616713774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231890282\">said</a>:</p>\n<blockquote>\n<p>Partial+events  . . . . , but entails editing all commands (so only able to undo migrated commands) and requires designing+implementing the event handlers.  It's not hard and is 100% in our control complexity-wise, but requires a lot of code change.</p>\n</blockquote>\n<p>Cant we directly store the command instead of generating events and then storing them?</p>",
        "id": 231919523,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616738877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231890569\">said</a>:</p>\n<blockquote>\n<p>do you understand the tradeoffs? What are your thoughts?</p>\n</blockquote>\n<p>Yeah I understand the tradeoffs between both the methods. In theory, I understand both methods well and also feel the VCS method is better in terms of features as it can handle all commands and works independently of commands, so will be easier in the future also if some newer/unique cmds come up.</p>",
        "id": 231919813,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616739189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231890569\">said</a>:</p>\n<blockquote>\n<p>Which do you feel you understand the most?  What don't you feel you understand?</p>\n</blockquote>\n<p>As I said, in theory both look fine to me. But implementation wise maybe I'll have to learn more if the VCS method is applied, and I'm fine actually with spending as much time as needed to learn (even pre-GSoC).  The part that I don't understand (which I eventually should understand is) how these methods translate to code,<br>\nI'm more clear on the implementation of the partial+events, as I have some experience with that part of the code, So we could just kill * of the present db, copy the partial into the db and then apply commands, in the undo list, on it</p>",
        "id": 231920144,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616739572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231890569\">said</a>:</p>\n<blockquote>\n<p>If you were experienced in either, that would probably lean me towards one or the other but you're not so it could be a wash risk-wise. </p>\n</blockquote>\n<p>The partial+events doesnt require any experience right? Its pretty simple imo<br>\nWhereas ill have to learn how to implement a VCS in the other method (which i 'm actually fine doing, just that it might have to more uncertainity)</p>",
        "id": 231920361,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616739800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231919523\">said</a>:</p>\n<blockquote>\n<p>Cant we directly store the command instead of generating events and then storing them?</p>\n</blockquote>\n<p>I'm not sure what you mean.  What I'm calling an \"event\" is sort of the lowest level database-changing commands possible that are invertible without any special knowledge.  For example, a \"DELETE\" event that removes an object, or a \"CREATE\" event that adds an object to the database.  You can undo a CREATE by deleting the object.  You can undo a DELETE by restoring the object from a cached backup.  They require no knowledge of our primitive types, no knowledge of object internals, and could even be used to handle a higher level events like a \"RENAME\" (CREATE+DELETE) or a \"MODIFY\" (DELETE+CREATE).</p>",
        "id": 232005223,
        "sender_full_name": "Sean",
        "timestamp": 1616780269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231920144\">said</a>:</p>\n<blockquote>\n<p>As I said, in theory both look fine to me. But implementation wise maybe I'll have to learn more if the VCS method is applied</p>\n</blockquote>\n<p>Probably about the same.  You'll learn more about libgvm or libgit2 and less about libged with one and a lot more about libged and commands in the other.</p>\n<blockquote>\n<p>The part that I don't understand (which I eventually should understand is) how these methods translate to code,</p>\n</blockquote>\n<p>That's a good observation.  Maybe it would help to see if you can write a simple main.c that adds, deletes, and undeletes a sphere with both methods.  With the partial/libged method, you'd probably make your program call ged_make(), then copy the object to another in-memory backup on delete, then copy it back to undo.  With libgvm or libgit, you'll call ged_make() and check it into the vcs, delete it with ged_kill() and check that into the vcs, then restore it from the vcs to undo.</p>\n<p>Both programs would probably be 20 lines or so and be a really good way to understand the lowest level implications.</p>",
        "id": 232006278,
        "sender_full_name": "Sean",
        "timestamp": 1616780731
    },
    {
        "content": "<p>We could probably use that harness to see what some really big edit implications look like performance-wise.</p>",
        "id": 232006333,
        "sender_full_name": "Sean",
        "timestamp": 1616780759
    },
    {
        "content": "<p>Regarding the events, maybe I have misunderstood the partial + events method<br>\nSo what I understand is, we store a copy of the db before N commands, and when we want to do an undo, we apply N-1 commands on the copy of the db we have stored and by overwriting that on the resent state we bring it to the undone state</p>",
        "id": 232006858,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616781002
    },
    {
        "content": "<p>So in my method we just store the commands <br>\nlike make rhc rhc, kill example, etc etc and rerun hem when necessary</p>",
        "id": 232007000,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616781055
    },
    {
        "content": "<p>So what I understand by events is that we break down commands, as you have mentioned above, RENAME = CREATE + DELETE<br>\nBut why r they necessary if we directly store the high level command and then execute it<br>\neg : storing  ( dbconcat ex1.g ) would be easier than storing ( create obj1 , create obj2 etc )</p>",
        "id": 232007725,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616781380
    },
    {
        "content": "<p>I think the counter argument is that, just taking the case of dbconcat only, the ex1.g might not exist by the time we are undoing</p>",
        "id": 232013448,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616784019
    },
    {
        "content": "<p>But generating events will be required for such few commands right, like a make, kill, rename, etc need not be split into events....... So just creating events for few cmds might suffice, right?</p>",
        "id": 232013680,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1616784128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> That's not the idea of partial undo.  What you describe is a \"rerun\" approach, which I don't think will scale well for our use case.</p>",
        "id": 232213810,
        "sender_full_name": "Sean",
        "timestamp": 1616988689
    },
    {
        "content": "<p>Rerun is briefly described with full and partial at <a href=\"https://en.wikipedia.org/wiki/Undo\">https://en.wikipedia.org/wiki/Undo</a></p>",
        "id": 232213862,
        "sender_full_name": "Sean",
        "timestamp": 1616988731
    },
    {
        "content": "<p>With partial, you're basically storing (partial) state as commands are run so we have whatever information is required to restore the previous state.  Those most simple form of this is to keep a copy of any objects that are changed or deleted.  Since we can undo objects added by simply deleting them, we don't need to do anything special other than keep track of them.</p>",
        "id": 232214136,
        "sender_full_name": "Sean",
        "timestamp": 1616989005
    },
    {
        "content": "<p>Note that there's LOTS of ways to implement this sort of undo.  For example, here's a really simple setup where (for example) we decide to store our backups in the same .g file using  a simple numeric suffix that denotes what change.  For example, db.g might have in it:  objA objB objC objA;1 objA;2 objA;3 objB;2 objC;4</p>\n<p>The current state is three objects: objA objB objC</p>",
        "id": 232214531,
        "sender_full_name": "Sean",
        "timestamp": 1616989533
    },
    {
        "content": "<p>The most recent change was some edit to objC.  When the change was made to objC, we save the previous state is in objC;4 .. so undoing the command is a simple to replace objC with objC;4</p>",
        "id": 232214760,
        "sender_full_name": "Sean",
        "timestamp": 1616989743
    },
    {
        "content": "<p>The next undo restores objA to a previous state (via objA;3).  </p>\n<p>The one after that was a simultaneous change to objA and objB, so we restore both from objA;2 and objB;2</p>",
        "id": 232214898,
        "sender_full_name": "Sean",
        "timestamp": 1616989911
    },
    {
        "content": "<p>Hopefully you get the gist.  That example is intentionally simple, but hopefully you can see how that's easily extended to keep track of added/removed objects or could use a different naming convention, and/or could be stored in a different file (e.g., .db.g~)  or no file at all (e.g., just keep them in memory).</p>",
        "id": 232215038,
        "sender_full_name": "Sean",
        "timestamp": 1616990072
    },
    {
        "content": "<p>It'd be really simple to implement  something preliminary like this in under a week, and it'd be easy to optimize (e.g., instead of storing an entire backup of an object, maybe we only really need to store a matrix or an attribute change or handle certain events special (e.g., object additions/deletions).</p>",
        "id": 232215134,
        "sender_full_name": "Sean",
        "timestamp": 1616990212
    },
    {
        "content": "<p>Yeah I understood, but wont this take up a lot of space, we might end up storing (no of UNDOs possible)*(size of db)<br>\nSo we deal with this by putting some limit to storage for UNDO?</p>",
        "id": 232246276,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617013391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/232006278\">said</a>:</p>\n<blockquote>\n<p>That's a good observation.  Maybe it would help to see if you can write a simple main.c that adds, deletes, and undeletes a sphere with both methods.  With the partial/libged method, you'd probably make your program call ged_make(), then copy the object to another in-memory backup on delete, then copy it back to undo.  With libgvm or libgit, you'll call ged_make() and check it into the vcs, delete it with ged_kill() and check that into the vcs, then restore it from the vcs to undo.</p>\n<p>Both programs would probably be 20 lines or so and be a really good way to understand the lowest level implications.</p>\n</blockquote>\n<p>I'll try writing this program</p>",
        "id": 232304186,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617038737
    },
    {
        "content": "<p>Do I make this program inside libged or a separate file like I had done for the boolweave unit test?</p>",
        "id": 232319250,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617044850
    },
    {
        "content": "<p>I think a separate standalone file is best.  This isn't likely code that would be kept as-is very long, it's to understand the implications and make a decision.</p>",
        "id": 232319775,
        "sender_full_name": "Sean",
        "timestamp": 1617045067
    },
    {
        "content": "<p>like my assumption that it's about 20 lines.. if it ends up being dramatically less or more work, that would be important to know.  And if/once it's working, we can use it to do a couple tests.  If one takes &lt;1sec and the other 100sec to do the same work, that would be pretty guiding (I don't expect that to be the case, more like 100ms vs 200ms).</p>",
        "id": 232320187,
        "sender_full_name": "Sean",
        "timestamp": 1617045257
    },
    {
        "content": "<p>Okay, will make a standalone file</p>",
        "id": 232323305,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617046559
    },
    {
        "content": "<p>If i have to call ged_make(), I'll have to pass a struct ged *gedp, but how do I initialize it if its not coming via mged</p>",
        "id": 232323541,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617046636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> see src/libged/tests/test_tops.c for an example.  You either call ged_open() which returns a gedp, or you call GED_INIT() directly if you want to open it yourself.</p>",
        "id": 232371755,
        "sender_full_name": "Sean",
        "timestamp": 1617077952
    },
    {
        "content": "<p>Thanks, will look into it</p>",
        "id": 232371772,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617077982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  My proposal is partially done, should I still go ahead and upload a draft in the GSoC website?</p>",
        "id": 232405526,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617101176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/231586953\">said</a>:</p>\n<blockquote>\n<p>I got one more doubt as I was researching about how transactions are implemented in different systems, I found this in the journal/ledger based file system wikipedia page,  The statement was made in context to deleting a file in linux and power failure during the process. \"After a crash, recovery simply involves reading the journal from the file system and replaying changes from this journal until the file system is consistent again.\" , So i found it too simple that will just replaying  instructions of the prev cmd stop the db from being corrupted. <br>\nRef:<a href=\"https://en.wikipedia.org/wiki/Journaling_file_system#Rationale\">https://en.wikipedia.org/wiki/Journaling_file_system#Rationale</a></p>\n</blockquote>\n<p>ping?</p>",
        "id": 232406422,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617101790
    },
    {
        "content": "<p>pong?</p>",
        "id": 232459436,
        "sender_full_name": "Sean",
        "timestamp": 1617123279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/232405526\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>  My proposal is partially done, should I still go ahead and upload a draft in the GSoC website?</p>\n</blockquote>\n<p>Sure, upload it!</p>",
        "id": 232459464,
        "sender_full_name": "Sean",
        "timestamp": 1617123287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/232406422\">said</a>:</p>\n<blockquote>\n<p>ping?</p>\n</blockquote>\n<p>There wasn't a question in there, so I'm not sure what you're seeking input on.  Did you have a question about journaling in general?  There's some safety checks that are needed, but that is the gist of implementing safe undo.  Assume a command is going to crash mid-work.  The journal will say something like \"modify A; create B;  delete C;\" and we can verify at any point whether A was modified, B was created, and C was deleted.  If they weren't we can do them again.  If they were, we just need to update the journal.</p>",
        "id": 232460159,
        "sender_full_name": "Sean",
        "timestamp": 1617123502
    },
    {
        "content": "<p>Question was like this, if we were doing \"modify A\" and system crashed while the process was running</p>",
        "id": 232460550,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617123626
    },
    {
        "content": "<p>which might corrupt the db<br>\nSo will rerunning \"modify A\" rectify the db?</p>",
        "id": 232460694,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617123671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/232460550\">said</a>:</p>\n<blockquote>\n<p>Question was like this, if we were doing \"modify A\" and system crashed while the process was running</p>\n</blockquote>\n<p>I forgot to ask it in the prev msg <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 232463395,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617124712
    },
    {
        "content": "<p>I have shared a draft of my proposal.<br>\nIts 70% done I would say</p>",
        "id": 232477889,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617130438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/232460694\">said</a>:</p>\n<blockquote>\n<p>which might corrupt the db<br>\nSo will rerunning \"modify A\" rectify the db?</p>\n</blockquote>\n<p>In general, it depends on the lowest level write operations and how they're implemented.  That said, librt does go to lengths to minimize potential situations. Should a write be interrupted, the effect should only affect the partially written object, not corrupt the entire file.</p>",
        "id": 232482984,
        "sender_full_name": "Sean",
        "timestamp": 1617132359
    },
    {
        "content": "<p>so the fix would be to write over the partially written object again, picking up where it left off</p>",
        "id": 232483074,
        "sender_full_name": "Sean",
        "timestamp": 1617132383
    },
    {
        "content": "<p>But will that be possible to note down in the ledger, as that will be generating a very big file imo?</p>",
        "id": 232483253,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617132457
    },
    {
        "content": "<p>that = different checkpoints in an event, so that we can know where we left it</p>",
        "id": 232483370,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617132501
    },
    {
        "content": "<p>This is not something exhaustively tested, but in practice has been very robust to production use and crashes.  The database i/o layer first finds a section of the file that will fit the object being written/updated.  Then it fully prepares the object being written in memory first, then it writes it out as 1 write operation, then is fflushes the file to make the operating system ensure everything is written to disk.</p>",
        "id": 232483384,
        "sender_full_name": "Sean",
        "timestamp": 1617132506
    },
    {
        "content": "<p>the only thing in the ledger is what's currently changing</p>",
        "id": 232483428,
        "sender_full_name": "Sean",
        "timestamp": 1617132529
    },
    {
        "content": "<p>it's not a full history, it's just what's happening right now that hasn't been applied yet.  the actual undo data is in a separate space (e.g., another .g in memory)</p>",
        "id": 232483595,
        "sender_full_name": "Sean",
        "timestamp": 1617132602
    },
    {
        "content": "<p>Yeah, I wasnt talking abt that either<br>\nI was talking about if we could/would note down all minor steps being done under 1 event, but yeah now im clear that we will just store the thing thats being modified</p>",
        "id": 232483852,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617132694
    },
    {
        "content": "<p>I think you'd note down all the events in a given transaction, then do them, then make sure they were all done.</p>",
        "id": 232484162,
        "sender_full_name": "Sean",
        "timestamp": 1617132803
    },
    {
        "content": "<p>so not necessarily just what's being modified, but also what's being created or killed</p>",
        "id": 232484277,
        "sender_full_name": "Sean",
        "timestamp": 1617132847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/232483595\">said</a>:</p>\n<blockquote>\n<p>it's not a full history, it's just what's happening right now that hasn't been applied yet.  the actual undo data is in a separate space (e.g., another .g in memory)</p>\n</blockquote>\n<p>I guess I should clarify, because we're mixing journaling with undo... in that case the journal/ledger will either have a full history or you'll keep an integrity journal and separately keep an undo ledger.</p>",
        "id": 232484707,
        "sender_full_name": "Sean",
        "timestamp": 1617133039
    },
    {
        "content": "<p>because there's two things we're talking about -- one is ensuring the .g is consistent -- that a command was either fully, partially, or not completed.  for that, a journal of the current transaction is all that's required.  You write what you're going to do, you do it to the .g, then you remove it from the journal.  So if at any point the journal is non-empty, we know something is either in-progress or was interrupted/crashed/aborted/etc.</p>",
        "id": 232485138,
        "sender_full_name": "Sean",
        "timestamp": 1617133230
    },
    {
        "content": "<p>in order to undo transactions and commands, we need a ledger of what changes were made, which is a little different.  for that, a simple convention in a working space with copies of the data in its previous state should be enough.</p>",
        "id": 232485631,
        "sender_full_name": "Sean",
        "timestamp": 1617133456
    },
    {
        "content": "<p>Got it</p>",
        "id": 232487999,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617134427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/232477889\">said</a>:</p>\n<blockquote>\n<p>I have shared a draft of my proposal.<br>\nIts 70% done I would say</p>\n</blockquote>\n<p>Do review if you find time</p>",
        "id": 232490641,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617135411
    },
    {
        "content": "<p>Hi, I have some experience with C/C++. Is it too late to work on the annotation support project?</p>",
        "id": 232584782,
        "sender_full_name": "Sutirtha Bhattacharyya",
        "timestamp": 1617195227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"401976\">@Sutirtha Bhattacharyya</span> it's only too late after the deadline passes.  The challenge for you will be putting in adequate time and effort to demonstrate your coding ability.  You need to submit a productively useful change to BRL-CAD's code.  That typically can be done in less than a day, but it depends on your ability to read existing code and ask productive questions (i.e., don't ask questions that are easily discovered on your own, ask questions that help you understand and be productive).</p>",
        "id": 232605908,
        "sender_full_name": "Sean",
        "timestamp": 1617202607
    },
    {
        "content": "<p>Okay. I will try my best!</p>",
        "id": 232607478,
        "sender_full_name": "Sutirtha Bhattacharyya",
        "timestamp": 1617203165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> In the simple main.c that I'm writing should I write the backup objects in another file or putting it in the same db works?</p>",
        "id": 232651084,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617219085
    },
    {
        "content": "<p>Also shud I create a separate topic for my project idea (undo + transactions), so that this topic remains for people who want to introduce themselves</p>",
        "id": 232651775,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617219343
    },
    {
        "content": "<p>When we do it for real, we'll probably want to put them in a separate space, a separate in-mem database.  For this, though, I think the same db should give a close enough indication of the implications and performance.</p>",
        "id": 232657977,
        "sender_full_name": "Sean",
        "timestamp": 1617221749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/232651775\">said</a>:</p>\n<blockquote>\n<p>Also shud I create a separate topic for my project idea (undo + transactions), so that this topic remains for people who want to introduce themselves</p>\n</blockquote>\n<p>The title should be what you want it to be, what you think makes the most sense, and shoudl include what you want to do first and foremost -- it's your proposal.  From there, we can discuss changes if needed.  Our project ideas are just that -- ideas.  They're not a menu of options, just starting points for others to create proposals.</p>",
        "id": 232658485,
        "sender_full_name": "Sean",
        "timestamp": 1617221979
    },
    {
        "content": "<p><span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span> Ummmm..... by topic in my previous msg I had meant topic (thread) in zulip</p>",
        "id": 232659107,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617222237
    },
    {
        "content": "<p>I felt that many people discussing things parallelly in the same thread/topic might get clumsy<br>\nSo I was talking about creating a new thread/topic in zulip, so that people could introduce themselves in the \"GSoC ideas\" topic and discussion specific to my proposal could be in a separate newly created topic</p>",
        "id": 232659564,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617222421
    },
    {
        "content": "<p>I have written a main.c, similar to test_tops.c, but when I compile and run it, it doesnt work<br>\nI tried printing dbp-&gt;ged_result_str, It prints unknown command: make</p>",
        "id": 232706280,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617254866
    },
    {
        "content": "<p>I tried to run the exectuable of test_tops.c, even that prints unknown command: tops</p>",
        "id": 232706340,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617254913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> how are you compiling and running?  I suspect it has to do with the dynamic libged plugin loading</p>",
        "id": 232706450,
        "sender_full_name": "Sean",
        "timestamp": 1617255015
    },
    {
        "content": "<p>I wrote the file in libged/tests</p>",
        "id": 232706475,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617255033
    },
    {
        "content": "<p>added a line in the Cmakelists.txt</p>",
        "id": 232706484,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617255045
    },
    {
        "content": "<p>k, that's good -- and running it?</p>",
        "id": 232706495,
        "sender_full_name": "Sean",
        "timestamp": 1617255061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/232706484\">said</a>:</p>\n<blockquote>\n<p>added a line in the Cmakelists.txt</p>\n</blockquote>\n<p>BRLCAD_ADDEXEC(ged_test_undo test_undo.c libged TEST)</p>",
        "id": 232706518,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617255083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/232706495\">said</a>:</p>\n<blockquote>\n<p>k, that's good -- and running it?</p>\n</blockquote>\n<p>Ya, its running</p>",
        "id": 232706525,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617255092
    },
    {
        "content": "<p>It prints all the bu_log() statements</p>",
        "id": 232706539,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617255107
    },
    {
        "content": "<p>Doesnt throw any error either</p>",
        "id": 232706549,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617255118
    },
    {
        "content": "<p>Just that the ged_make or ged_kill isnt working and the file Im modifying remains the same</p>",
        "id": 232706610,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617255144
    },
    {
        "content": "<p>No, I mean how are you running it.</p>",
        "id": 232706634,
        "sender_full_name": "Sean",
        "timestamp": 1617255174
    },
    {
        "content": "<p>what did you type to run your program</p>",
        "id": 232706677,
        "sender_full_name": "Sean",
        "timestamp": 1617255213
    },
    {
        "content": "<p>./test_undo empty.g</p>",
        "id": 232706745,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617255249
    },
    {
        "content": "<p>that's why</p>",
        "id": 232706751,
        "sender_full_name": "Sean",
        "timestamp": 1617255254
    },
    {
        "content": "<p>check this: </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>morrison@agua .build % ./src/libged/tests/ged_test_tops share/db/moss.g\nall.g\n\nmorrison@agua .build % cd src/libged\nmorrison@agua libged % ./tests/ged_test_tops ../../share/db/moss.g\nunknown command: tops\n</code></pre></div>",
        "id": 232706767,
        "sender_full_name": "Sean",
        "timestamp": 1617255271
    },
    {
        "content": "<p>it loads the plugins dynamically and since you are running from an uninstalled state, it doesn't know where to find them unless you're at the top of the build directory.</p>",
        "id": 232706818,
        "sender_full_name": "Sean",
        "timestamp": 1617255323
    },
    {
        "content": "<p>something that can be fixed, but is a current limitation</p>",
        "id": 232706843,
        "sender_full_name": "Sean",
        "timestamp": 1617255356
    },
    {
        "content": "<p>Cool, Thank you</p>",
        "id": 232706927,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617255423
    },
    {
        "content": "<p>I have implemented the create and delete and then backup (by hardcoding it for now), got the basic libgit2 cmds running within the code, learning the libgit2 API to implement the undo using VCS</p>",
        "id": 232793718,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617297878
    },
    {
        "content": "<p>I'm a little busy with clg work and also I'm encountering a lot of errors in the libgit2 part<br>\nWill try to have a working version asap</p>",
        "id": 233023134,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617474455
    },
    {
        "content": "<p>If possible can any of the mentor(s) review the draft of my proposal and suggest changes or additions, so that I will have time to work on them before i make the final draft</p>",
        "id": 233023208,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617474508
    },
    {
        "content": "<p>I have successfully made 2 files: one which is a hardcoded implementation of the \"partial + events \" method and the other is an implementation which uses libgit2 to revert back to the undone state</p>",
        "id": 233062911,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617520614
    },
    {
        "content": "<p>I will create a patch on this in sometime</p>",
        "id": 233063113,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617520888
    },
    {
        "content": "<p>Created the patch, it has 2 files in libged/tests/ . They work fine except that ged_summary doesn't give the right output after reverting back using libgit2. The killed object does get recovered when I open with mged and check. but ged_summary doesn't reflect that there is an object while running the code</p>",
        "id": 233072379,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617532870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> any ideas on how I can proceed further?</p>",
        "id": 233072385,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617532889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> You've done great thus far.  I'll update on the patches soon, but feel free to see if you can figure out what's going on with killed objects.  Note that depending on how you add/delete objects, you will need to rebuild the geometry directory.  That's especially true for altering the .g from outside librt, like you're doing with libgit2 (that's one of the downsides, have to fully rebuild because you don't know what changed).</p>",
        "id": 233218522,
        "sender_full_name": "Sean",
        "timestamp": 1617651279
    },
    {
        "content": "<p>Yeah, dint know there was a rebuild<br>\nI was thinking of closing and reopining the db and then doing ged_summary<br>\nBut this week has been quite loaded in terms of academics so couldn't work much</p>",
        "id": 233219112,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617651604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I would really appreciate it if you just skimmed through my proposal and tell me what all I could/should add to my proposal</p>",
        "id": 233219252,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617651673
    },
    {
        "content": "<p>Rn I don't have any code snippets/pseudo code in the proposal, it is necessary to put them or only the theory is sufficient?</p>",
        "id": 233219319,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617651722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> I'm done commenting.  Your draft is very good.  The biggest critique I have is that the timeline is very aggressive, maybe unrealistic.   There's many things that could end up taking a week or two to figure out, and priority should be on completing undo/redo robustly and (adequately) performant first and foremost (my opinion) before, for example, tackling transactions or anything else really.  That's really the essential feature from a user perspective that it may be best to just focus on it.</p>",
        "id": 233268700,
        "sender_full_name": "Sean",
        "timestamp": 1617687185
    },
    {
        "content": "<p>I think your analysis of all the various options is good.   Your patches are on-point as well.   A couple decisions would need to be made before GSoC begins so there's less/no discovery in the shortened timeframe.</p>",
        "id": 233268830,
        "sender_full_name": "Sean",
        "timestamp": 1617687310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/233219319\">said</a>:</p>\n<blockquote>\n<p>Rn I don't have any code snippets/pseudo code in the proposal, it is necessary to put them or only the theory is sufficient?</p>\n</blockquote>\n<p>The theory and links are sufficient.  It would be good to expand on the recommended plan and reasons for it.  From my  perspective, I think the main decision needed is whether to go with the libgit2 approach or not and having a good rationale for why (or why not), what the implication trade-off considerations were, etc.</p>",
        "id": 233268973,
        "sender_full_name": "Sean",
        "timestamp": 1617687456
    },
    {
        "content": "<p>If you eliminate transactions from the plan and focus entirely on undo, it would be good to see an updated timeline.  Keep in mind a potential new undo command (perhaps with a -r redo option), documentation (e.g., doc/docbook/system/mann/undo.xml and potentially other docs), behavioral/usability testing (important commands to consider include facetize, search -exec, dbconcat, dbupgrade, edit, and clone commands),  and performance/robustness testing.</p>",
        "id": 233269436,
        "sender_full_name": "Sean",
        "timestamp": 1617687943
    },
    {
        "content": "<p>Sure, I will make an updated time line only for UNDO</p>",
        "id": 233282328,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617697066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/233268973\">said</a>:</p>\n<blockquote>\n<p>From my  perspective, I think the main decision needed is whether to go with the libgit2 approach or not and having a good rationale for why (or why not), what the implication trade-off considerations were, etc.</p>\n</blockquote>\n<p>So I'll try to compare time and space complexity for both methods using some heavy database</p>",
        "id": 233390905,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617743549
    },
    {
        "content": "<p>Is the havoc.g (589 kB) big enough to use for comparing both methods for deletion and re-addition(undo)?<br>\nOr should I generate something bigger?</p>",
        "id": 233540045,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617820570
    },
    {
        "content": "<p>Greetings, I'm Amanjot Singh from India. I've been practicing front-end web development for 3 years. I'm a Btech student in 3rd-year Computer Science and also completed a 3-year diploma in Computer Science and Engineering. I also have 9 months of in-field job experience with the role of a frontend developer. I'm interested to contribute to open source during GSoC this year. I hope I'll get a cool and awesome experience here :)</p>",
        "id": 233652311,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1617888718
    },
    {
        "content": "<p>You could try this one: <a href=\"https://brlcad.org/~sean/tmp/hairball.g\">https://brlcad.org/~sean/tmp/hairball.g</a><br>\n<a href=\"#narrow/stream/104062-general/topic/guidance.20for.20the.20first.20contribution/near/214412419\">https://brlcad.zulipchat.com/#narrow/stream/104062-general/topic/guidance.20for.20the.20first.20contribution/near/214412419</a></p>",
        "id": 233668322,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1617894140
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"403746\">@Amanjot Singh</span>, which project ideas sound most interesting for you?</p>",
        "id": 233669042,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1617894257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/233669042\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"403746\">Amanjot Singh</span>, which project ideas sound most interesting for you?</p>\n</blockquote>\n<p>Hey, I've found the task Online Geometry Viewer most interesting and best suitable for me.</p>",
        "id": 233681269,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1617898054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/233390905\">said</a>:</p>\n<blockquote>\n<p>So I'll try to compare time and space complexity for both methods using some heavy database</p>\n</blockquote>\n<p>I used hairball.g (139MB), tried to delete the whole object and then recover it using both methods:</p>",
        "id": 233713315,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617909705
    },
    {
        "content": "<p>Using the partial+events method, where I stored a recovery copy of the object and used that to recover the deleted object, the file was 277MB when the recovery object was present</p>",
        "id": 233713333,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617909717
    },
    {
        "content": "<p>In the method using libgit2, the .git folder was 127.3MB and add that to the 139MB of the database, it becomes  266.3MB</p>",
        "id": 233713336,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617909720
    },
    {
        "content": "<p>Here the libgit2 approach saves 11MB which is about 8% of space compared to the initial database, which is pretty significant in my opinion</p>",
        "id": 233714351,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617910178
    },
    {
        "content": "<p>I tried to rename the hairball object using <code>mv</code> cmd and used libgit2 to bring it back to the original state, in this case the .git folder occupies 63.7 MB</p>",
        "id": 233716574,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617911139
    },
    {
        "content": "<p>/me idly wonders what git would do if we b64 encoded the .g files, the way we do for 3dm breps when we walk them through g2asc/asc2g - wonder if something that is nominally a text file might be easier for git to intelligently diff...</p>",
        "id": 233751119,
        "sender_full_name": "starseeker",
        "timestamp": 1617928302
    },
    {
        "content": "<p>Hey Mentors and fellow participants. I want to clear a doubt. Is there any specific template for the proposal to apply in BRL-CAD or we should write it completely in our own way?</p>",
        "id": 233804257,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1617967165
    },
    {
        "content": "<p>There is no template, but <a href=\"https://brlcad.org/wiki/Summer_of_Code/Application_Guidelines\">guidelines</a>. Have a look at our general <a href=\"https://brlcad.org/wiki/Google_Summer_of_Code\">GSoC page</a> and the <a href=\"https://brlcad.org/wiki/Summer_of_Code/Checklist\">CHECKLIST</a> too.</p>",
        "id": 233827105,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1617977373
    },
    {
        "content": "<p>Thanks Daniel</p>",
        "id": 233829306,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1617978181
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span>  or <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <br>\nCould you tell me what deliverables I could mention in my proposal?<br>\nI was considering the following as checkpoints:</p>\n<ol>\n<li>A dummy UNDO command which just prints a line</li>\n<li>Storing a backup file/adding backup objects after every change</li>\n<li>Linking the backup to the UNDO command and basic testing<br>\nDo these look fine as deliverables, if not could you give me some direction</li>\n</ol>",
        "id": 233864009,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1617990624
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> had mentioned that the timeline is too aggressive, should I still have the implementation of transactions as part of my GSoC proposal, as I might not have sufficient time to fully implement it</p>",
        "id": 233939547,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618044759
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> <span class=\"user-mention\" data-user-id=\"103585\">@Panda (Gauravjeet Singh)</span> I was thinking of sending some patches before I draft my proposal. I looked at this issue <a href=\"https://github.com/BRL-CAD/OGV-meteor/issues/63\">https://github.com/BRL-CAD/OGV-meteor/issues/63</a> that says there is no message if upload fails for some reason. I tried uploading a png file so that I can see if it gives an error or not and it gave me an error. Can you please explain a little bit for what reason it may give an error so that I can reproduce the issue and try fixing that.</p>",
        "id": 234016480,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1618117559
    },
    {
        "content": "<p>One more question, this is one of the checklist tasks provided for GSoC 2021. Am I I allowed sending fixes for the issues that are in the checklist?</p>",
        "id": 234016544,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1618117604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/233713333\">said</a>:</p>\n<blockquote>\n<p>Using the partial+events method, where I stored a recovery copy of the object and used that to recover the deleted object, the file was 277MB when the recovery object was present</p>\n</blockquote>\n<p>Just a word of caution here -- .g files don't typically reclaim killed space until new objects are added.  That means there is some dead some, i.e., phantom size, represented there that is an optimization but not actual utilization.  It's a slow filesystem operation to shrink a file, so it doesn't do that unless explicitly requested.</p>",
        "id": 234105560,
        "sender_full_name": "Sean",
        "timestamp": 1618205706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/233714351\">said</a>:</p>\n<blockquote>\n<p>Here the libgit2 approach saves 11MB which is about 8% of space compared to the initial database, which is pretty significant in my opinion</p>\n</blockquote>\n<p>Even if the partial approach retained two copies (e.g., the edit case), that size difference is pretty negligible.  Time is the more interesting factor -- how long did the two methods take?  How does it scale with 10 hairballs being edited?  that's likely a usability-impacting factor.</p>",
        "id": 234105800,
        "sender_full_name": "Sean",
        "timestamp": 1618205945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/233751119\">said</a>:</p>\n<blockquote>\n<p>/me idly wonders what git would do if we b64 encoded the .g files, the way we do for 3dm breps when we walk them through g2asc/asc2g - wonder if something that is nominally a text file might be easier for git to intelligently diff...</p>\n</blockquote>\n<p>The main/only benefit of using something like libgit2 would be agnostic simplicity and speed of implementation.  If we have to layer in any complexity, that would pretty much eliminates the feature point in my view.  Keeping in mind that this is for an undo/redo system too.  It needs to be as simple as possible, reliable and performant first and foremost.  Memory/space utilization is not a deciding feature as it's all temp state.</p>",
        "id": 234106452,
        "sender_full_name": "Sean",
        "timestamp": 1618206491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/233864009\">said</a>:</p>\n<blockquote>\n<p>Hey <span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span>  or <span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <br>\nCould you tell me what deliverables I could mention in my proposal?<br>\nI was considering the following as checkpoints:</p>\n<ol>\n<li>A dummy UNDO command which just prints a line</li>\n<li>Storing a backup file/adding backup objects after every change</li>\n<li>Linking the backup to the UNDO command and basic testing<br>\nDo these look fine as deliverables, if not could you give me some direction</li>\n</ol>\n</blockquote>\n<p>They look fine.  It's more important that you just set checkpoints than what the checkpoints are.  Personally, I would make them user-centric like a completely designed undo command (from a usage perspective) where all behavior is defined and documented, but nothing implemented.  Then single undo/redo fully implemented and demonstrated via command.  Then fully integrated into GUI (mged and/or archer) and display manager keybindings.  Then multi-undo/redo fully implemented/demonstrated/integrated.  Something like that.</p>",
        "id": 234106852,
        "sender_full_name": "Sean",
        "timestamp": 1618206853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"403746\">Amanjot Singh</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234016544\">said</a>:</p>\n<blockquote>\n<p>One more question, this is one of the checklist tasks provided for GSoC 2021. Am I I allowed sending fixes for the issues that are in the checklist?</p>\n</blockquote>\n<p>Of course.  You can submit any fix/improvement for any issue (in any code/language/repo for BRL-CAD).   It helps if it's related to your proposal, but not necessary.  For OGV, it relies heavily on backend processing by other BRL-CAD tools, so they are heavily related too.</p>",
        "id": 234107139,
        "sender_full_name": "Sean",
        "timestamp": 1618207100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234105560\">said</a>:</p>\n<blockquote>\n<p>Just a word of caution here -- .g files don't typically reclaim killed space until new objects are added.  That means there is some dead some, i.e., phantom size, represented there that is an optimization but not actual utilization.  It's a slow filesystem operation to shrink a file, so it doesn't do that unless explicitly requested.</p>\n</blockquote>\n<p>I deleted the objected and then recovered it back again, so will that still have phantom size<br>\nbecause I added back the same object (which will have the same size as the deleted object)</p>",
        "id": 234108288,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618208074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234105800\">said</a>:</p>\n<blockquote>\n<p>Even if the partial approach retained two copies (e.g., the edit case), that size difference is pretty negligible.  Time is the more interesting factor -- how long did the two methods take?  How does it scale with 10 hairballs being edited?  that's likely a usability-impacting factor.</p>\n</blockquote>\n<p>Haven't checked the time factor yet, let me check right now</p>",
        "id": 234108314,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618208113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234106852\">said</a>:</p>\n<blockquote>\n<p>They look fine.  It's more important that you just set checkpoints than what the checkpoints are.  Personally, I would make them user-centric like a completely designed undo command (from a usage perspective) where all behavior is defined and documented, but nothing implemented.  Then single undo/redo fully implemented and demonstrated via command.  Then fully integrated into GUI (mged and/or archer) and display manager keybindings.  Then multi-undo/redo fully implemented/demonstrated/integrated.  Something like that.</p>\n</blockquote>\n<p>Sure, will update my proposal by tonight keeping these n mind</p>",
        "id": 234108477,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618208254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/233939547\">said</a>:</p>\n<blockquote>\n<p>As <span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> had mentioned that the timeline is too aggressive, should I still have the implementation of transactions as part of my GSoC proposal, as I might not have sufficient time to fully implement it</p>\n</blockquote>\n<p>So should I completely shift focus to UNDO and remove the transactions part from my proposal as I might not find time to implement it?</p>",
        "id": 234110831,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618210031
    },
    {
        "content": "<p>Time taken for following in libgit2 method: (haven't divided by CLOCK_CYCLES)<br>\nIntialize repo: 4,524,677<br>\nopen db and make object: 193,198<br>\ncommit: 4,446,718<br>\ndelete: 81<br>\nRevert back to prev commit: 4,450,182</p>",
        "id": 234115037,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618212463
    },
    {
        "content": "<p>Time taken for following in partial :<br>\nOpen and add: 193,797<br>\nKill and add recovery ibject: 187,787<br>\nRecover: 195,973</p>",
        "id": 234115160,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618212558
    },
    {
        "content": "<p>These times are for a single hairball</p>",
        "id": 234115182,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618212582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234107139\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"403746\">Amanjot Singh</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234016544\">said</a>:</p>\n<blockquote>\n<p>One more question, this is one of the checklist tasks provided for GSoC 2021. Am I I allowed sending fixes for the issues that are in the checklist?</p>\n</blockquote>\n<p>Of course.  You can submit any fix/improvement for any issue (in any code/language/repo for BRL-CAD).   It helps if it's related to your proposal, but not necessary.  For OGV, it relies heavily on backend processing by other BRL-CAD tools, so they are heavily related too.</p>\n</blockquote>\n<p>Thanks for clearing out <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span></p>",
        "id": 234139632,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1618225595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234108288\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234105560\">said</a>:<br>\nI deleted the objected and then recovered it back again, so will that still have phantom size<br>\nbecause I added back the same object (which will have the same size as the deleted object)</p>\n</blockquote>\n<p>What I would expect to happen is 100 MB object in a file.g gets modified/deleted (i.e., moved to a undo_cache.g), so file.g is at 0MB+100MB (data+padding) for a total of 100MB file size.  The undo_cache.g is a 100MB+0MB=100MB file.  Then you undo.</p>\n<p>In that case, file.g either changes to 100MB+0MB (data+padding)  or doubles to 100MB+100MB (data+padding)=200MB file size depending on the nature of the edit, and the undo_cache.g is 0MB+100MB (data+padding) in size.</p>",
        "id": 234161768,
        "sender_full_name": "Sean",
        "timestamp": 1618235560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234110831\">said</a>:</p>\n<blockquote>\n<p>So should I completely shift focus to UNDO and remove the transactions part from my proposal as I might not find time to implement it?</p>\n</blockquote>\n<p>I think so.  I mean it's still part of undo in a way, like if someone runs the \"clone\" command, I expect undo to completely revert the clone, not just the last object copied, but transactions aren't strictly necessary -- it's just one way that can be achieved.</p>",
        "id": 234162530,
        "sender_full_name": "Sean",
        "timestamp": 1618235789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234115182\">said</a>:</p>\n<blockquote>\n<p>These times are for a single hairball</p>\n</blockquote>\n<p>Now that's very informative.  What are those rates in MB/sec ?</p>",
        "id": 234162840,
        "sender_full_name": "Sean",
        "timestamp": 1618235899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234162530\">said</a>:</p>\n<blockquote>\n<p>I think so.  I mean it's still part of undo in a way, like if someone runs the \"clone\" command, I expect undo to completely revert the clone, not just the last object copied, but transactions aren't strictly necessary -- it's just one way that can be achieved.</p>\n</blockquote>\n<p>Regarding this, if I go with the libgit2 approach that will be completely different from transactions, right?</p>",
        "id": 234184278,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618242929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234162840\">said</a>:</p>\n<blockquote>\n<p>Now that's very informative.  What are those rates in MB/sec ?</p>\n</blockquote>\n<p>These are in clock ticks ( values returned by <code>clock()</code> in C)</p>",
        "id": 234186688,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618243845
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"103555\">@Shubham Rathore</span> <span class=\"user-mention\" data-user-id=\"103585\">@Panda (Gauravjeet Singh)</span> <span class=\"user-mention\" data-user-id=\"210402\">@Harmanpreet Singh</span> I've drafted the proposal to the GSoC website. Can you please check? I'll send the final proposal tomorrow 2PM IST.</p>",
        "id": 234188406,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1618244580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234162530\">said</a>:</p>\n<blockquote>\n<p>I think so.  I mean it's still part of undo in a way, like if someone runs the \"clone\" command, I expect undo to completely revert the clone, not just the last object copied, but transactions aren't strictly necessary -- it's just one way that can be achieved.</p>\n</blockquote>\n<p>I'll put the theory that I have for the transactions at the end as part of an appendix</p>",
        "id": 234210537,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618253367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234115160\">said</a>:</p>\n<blockquote>\n<p>Time taken for following in partial :<br>\nOpen and add: 193,797<br>\nKill and add recovery ibject: 187,787<br>\nRecover: 195,973</p>\n</blockquote>\n<p>Right now the recovery object is made in the same file, even if it is made in a separate file and then accessed I don't think there will be a huge change in time</p>",
        "id": 234211700,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618253873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> any changes I might need to do to the proposal based on the above results or any more tests to do before proposal submission?</p>",
        "id": 234218876,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618256855
    },
    {
        "content": "<p>I have submitted a final draft as of now<br>\nI have changed the timeline, made changes based on your previous comments, added a comparison between both methods in terms of space (as of now, will add the time comparisons ), and added basic implementation details in the appendix</p>",
        "id": 234229071,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618261093
    },
    {
        "content": "<p>Please review if you find time</p>",
        "id": 234229140,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618261126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234184278\">said</a>:</p>\n<blockquote>\n<p>Regarding this, if I go with the libgit2 approach that will be completely different from transactions, right?</p>\n</blockquote>\n<p>Depends what you mean.  It's SUPER SIMPLE to implement transactions using the libgit2 approach because you can simply note the start and check-in at the end of each transaction.  So undoing a transaction is simply rolling back to a previous commit.  Even if you have recursive transactions within transactions, it just works because it keeps track the full state change automatically.</p>",
        "id": 234261980,
        "sender_full_name": "Sean",
        "timestamp": 1618283646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"403746\">Amanjot Singh</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234188406\">said</a>:</p>\n<blockquote>\n<p>Hey <span class=\"user-mention silent\" data-user-id=\"103555\">Shubham Rathore</span> <span class=\"user-mention silent\" data-user-id=\"103585\">Panda (Gauravjeet Singh)</span> <span class=\"user-mention silent\" data-user-id=\"210402\">Harmanpreet Singh</span> I've drafted the proposal to the GSoC website. Can you please check? I'll send the final proposal tomorrow 2PM IST.</p>\n</blockquote>\n<p>Excellent <span class=\"user-mention\" data-user-id=\"403746\">@Amanjot Singh</span>.  Make sure you don't wait until the last couple hours.  Submit early if you can.</p>",
        "id": 234262002,
        "sender_full_name": "Sean",
        "timestamp": 1618283698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234186688\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234162840\">said</a>:</p>\n<blockquote>\n<p>Now that's very informative.  What are those rates in MB/sec ?</p>\n</blockquote>\n<p>These are in clock ticks ( values returned by <code>clock()</code> in C)</p>\n</blockquote>\n<p>I realized that -- was asking you to do the math ;)  also, to look at rate, not just time since the dominant factor right now is almost certainly I/O and the quantity of data being read/written to disk.</p>",
        "id": 234262051,
        "sender_full_name": "Sean",
        "timestamp": 1618283749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234211700\">said</a>:</p>\n<blockquote>\n<p>Right now the recovery object is made in the same file, even if it is made in a separate file and then accessed I don't think there will be a huge change in time</p>\n</blockquote>\n<p>I agree -- even more important, though, is that we have an in-memory-only database concept that is relevant here as it would avoid the disk entirely.  There I suspect would be the fastest option by quite a huge amount.</p>",
        "id": 234262141,
        "sender_full_name": "Sean",
        "timestamp": 1618283840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234229140\">said</a>:</p>\n<blockquote>\n<p>Please review if you find time</p>\n</blockquote>\n<p>At this point, we're in details that are subject to change.  For application purposes, you've done well.</p>",
        "id": 234262211,
        "sender_full_name": "Sean",
        "timestamp": 1618283890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234262051\">said</a>:</p>\n<blockquote>\n<p>I realized that -- was asking you to do the math ;)  also, to look at rate, not just time since the dominant factor right now is almost certainly I/O and the quantity of data being read/written to disk.</p>\n</blockquote>\n<p>Is there some function to get the rate, or should i do it manually?</p>",
        "id": 234262894,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618284511
    },
    {
        "content": "<p>Because you had mentioned about padding size, I might not be able to calculate exactly how much memory is being written after each change</p>",
        "id": 234262937,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618284588
    },
    {
        "content": "<p>No you just calculate it.</p>",
        "id": 234263396,
        "sender_full_name": "Sean",
        "timestamp": 1618284895
    },
    {
        "content": "<p>I mean just looking quickly, if we disregard open and add actvity, it took approx 188+196=384k clock cycles to do+undo which is conveniently 384ms or 0.384 sec.  I think you said hairball is nominally 139MB of data, so the do+undo rate is 362MB/sec.</p>",
        "id": 234263730,
        "sender_full_name": "Sean",
        "timestamp": 1618285316
    },
    {
        "content": "<p>The libgit2 method took 8.896 sec, so it's effective rate was 15.6MB/sec</p>",
        "id": 234263839,
        "sender_full_name": "Sean",
        "timestamp": 1618285433
    },
    {
        "content": "<p>Right.</p>",
        "id": 234263917,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618285504
    },
    {
        "content": "<p>which at a glance, doesn't seem right .. that's a LOT of time for a file-based activity.  you sure there's not a mistake in there?</p>",
        "id": 234263922,
        "sender_full_name": "Sean",
        "timestamp": 1618285506
    },
    {
        "content": "<p>basically 4 sec to check-in</p>",
        "id": 234263934,
        "sender_full_name": "Sean",
        "timestamp": 1618285523
    },
    {
        "content": "<p>Yeah does seem like a lot of time</p>",
        "id": 234263953,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618285541
    },
    {
        "content": "<p>I would expect it to be more, but that's 23x more.  I would have thought 2-10x more likely.</p>",
        "id": 234264079,
        "sender_full_name": "Sean",
        "timestamp": 1618285649
    },
    {
        "content": "<p>Yes, I also realized that the git method was taking too much time</p>",
        "id": 234264173,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618285705
    },
    {
        "content": "<p>Just as I would expect in-mem to take 0.15-0.04 sec or 2x-10x faster than that 368MB/sec rate.</p>",
        "id": 234264197,
        "sender_full_name": "Sean",
        "timestamp": 1618285747
    },
    {
        "content": "<p>Maybe theres some redundant code in the git method, like I'm creating a tree for every commit (which I wasn't very sure on if it was required or not)</p>",
        "id": 234264201,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618285764
    },
    {
        "content": "<p>Well that can be something to figure out later/next.  Will have to look more closely at your harness code that's pending review.</p>",
        "id": 234264263,
        "sender_full_name": "Sean",
        "timestamp": 1618285820
    },
    {
        "content": "<p>Since that's really the deciding factor of whehter libgit2's overhead slowness is worth it to get transactions for free.</p>",
        "id": 234264291,
        "sender_full_name": "Sean",
        "timestamp": 1618285855
    },
    {
        "content": "<p>8 sec would be a non-starter if that's real, but I suspect it's not.</p>",
        "id": 234264309,
        "sender_full_name": "Sean",
        "timestamp": 1618285881
    },
    {
        "content": "<p>if it went from .3s to .5s or similar, then libgit2 might be compelling, though it's more likely going to be competing with 0.1s vs 0.5s</p>",
        "id": 234264400,
        "sender_full_name": "Sean",
        "timestamp": 1618285980
    },
    {
        "content": "<p>So I have submitted my final draft again with a few minor changes<br>\nAnd I don't plan on making any further changes</p>",
        "id": 234266322,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618287751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234262002\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"403746\">Amanjot Singh</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234188406\">said</a>:</p>\n<blockquote>\n<p>Hey <span class=\"user-mention silent\" data-user-id=\"103555\">Shubham Rathore</span> <span class=\"user-mention silent\" data-user-id=\"103585\">Panda (Gauravjeet Singh)</span> <span class=\"user-mention silent\" data-user-id=\"210402\">Harmanpreet Singh</span> I've drafted the proposal to the GSoC website. Can you please check? I'll send the final proposal tomorrow 2PM IST.</p>\n</blockquote>\n<p>Excellent <span class=\"user-mention silent\" data-user-id=\"403746\">Amanjot Singh</span>.  Make sure you don't wait until the last couple hours.  Submit early if you can.</p>\n</blockquote>\n<p>Okay <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I don't have a plan to make any change I can submit this right now as well. Do you think I should make any changes?</p>",
        "id": 234268387,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1618289701
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> . i went through project ideas and last year projects and i wanted to contribute to appleseed project. i cloned it from github and getting to read the sourcecode. but i guess i am a bit late and should submit my draft first. how do you propose i make my timeline?</p>",
        "id": 234273880,
        "sender_full_name": "shubham shah",
        "timestamp": 1618294681
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I've submitted my final proposal. I'm also going to send some patches to the application today.</p>",
        "id": 234283527,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1618300469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400104\">shubham shah</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234273880\">said</a>:</p>\n<blockquote>\n<p>hey <span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> . i went through project ideas and last year projects and i wanted to contribute to appleseed project. i cloned it from github and getting to read the sourcecode. but i guess i am a bit late and should submit my draft first. how do you propose i make my timeline?</p>\n</blockquote>\n<p>That's great, look forward to reading your proposal as that's a very important project for us.  The deadline is four hours away, though, so best of luck to you.  You'll not only need to write and submit your proposal by the deadline, but you will need to submit some code improvement (a patch or pull request) before the end of the week as well.</p>",
        "id": 234330447,
        "sender_full_name": "Sean",
        "timestamp": 1618322544
    },
    {
        "content": "<p>@sean i went through tasks of appleseed project, i dont understand much about multithreading support and not able to figure out my timeline around that</p>",
        "id": 234330488,
        "sender_full_name": "shubham shah",
        "timestamp": 1618322558
    },
    {
        "content": "<p>If you don't understand multithreading, then you probably shouldn't be discussing it in your proposal.  There's not much time during this year's GSoC to learn and explore.  That needed to happen the past 2-3 months.</p>",
        "id": 234330901,
        "sender_full_name": "Sean",
        "timestamp": 1618322716
    },
    {
        "content": "<p>It'll be enough work to propose improvements and projects using techniques and technology you do understand.</p>",
        "id": 234330983,
        "sender_full_name": "Sean",
        "timestamp": 1618322742
    },
    {
        "content": "<p>I have my end-semester exams starting soon, So won't be able to contribute much till they end on May 2. I will regularly check zulip though and if there is anything to be done before the community bonding period I will work on it from May 2 -17.</p>",
        "id": 234440080,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618375064
    },
    {
        "content": "<p>Also, It has been a wonderful journey till now in BRL-CAD and I would like to thank the whole community for guiding me from the beginning and being so welcoming. Hope to get selected for GSoC '21 and contributing a lot more in the future.</p>",
        "id": 234440123,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1618375087
    },
    {
        "content": "<p>Hey there <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>, I was preparing for my exams. Would that be okay if I send the fix by the end of Sunday?</p>",
        "id": 234861559,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1618582967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"403746\">Amanjot Singh</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234861559\">said</a>:</p>\n<blockquote>\n<p>Hey there <span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>, I was preparing for my exams. Would that be okay if I send the fix by the end of Sunday?</p>\n</blockquote>\n<p>That's certainly your choice and leaves no time for interaction, no time to help you navigate the code, but yes -- that is technically okay.</p>",
        "id": 234873255,
        "sender_full_name": "Sean",
        "timestamp": 1618586699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234440080\">said</a>:</p>\n<blockquote>\n<p>I have my end-semester exams starting soon, So won't be able to contribute much till they end on May 2. I will regularly check zulip though and if there is anything to be done before the community bonding period I will work on it from May 2 -17.</p>\n</blockquote>\n<p>Thanks for the update <span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span>  not a problem.</p>",
        "id": 234873741,
        "sender_full_name": "Sean",
        "timestamp": 1618586884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234873255\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"403746\">Amanjot Singh</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234861559\">said</a>:</p>\n<blockquote>\n<p>Hey there <span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>, I was preparing for my exams. Would that be okay if I send the fix by the end of Sunday?</p>\n</blockquote>\n<p>That's certainly your choice and leaves no time for interaction, no time to help you navigate the code, but yes -- that is technically okay.</p>\n</blockquote>\n<p>Thanks for the reply <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> . I've sent a code improvement and surely will send more this weekend. I hope I'm not bothering you with the updates. Have a great day <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 234964298,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1618640227
    },
    {
        "content": "<p><a href=\"https://github.com/BRL-CAD/OGV-meteor/pull/101\">https://github.com/BRL-CAD/OGV-meteor/pull/101</a> here is the link of PR in case required</p>",
        "id": 234964549,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1618640501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/227111449\">said</a>:</p>\n<blockquote>\n<p>That's a good thing to check - <span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> see what performance looks like with rt -P1 for ocl vs non.  That requests a single CPU core.  Also notice in that non-opencl profile rt_boolweave() and rt_boolfinal() ... that's the two functions mentioned earlier.</p>\n</blockquote>\n<p>I was wondering  if I build librt and other dlls with openCL enabled,  after call rt_shootray with ocl supported primitives does it make difference vs non ocl dlls ?</p>",
        "id": 234978428,
        "sender_full_name": "scorp08",
        "timestamp": 1618655178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> Yes, it can make a huge difference, but that's definitely a work in progress.  Some primitives are 10-20x faster, some are about the same, some aren't implemented.  There's a report on the wiki that talks about the performance implications.</p>\n<p>One test case was havoc, if I recall correctly, that went from taking about 1-10 seconds to shoot 1M rays to taking less than a second.  It didn't have boolean weaving yet, though, when that study was conducted, so that's easily 25% of the time.</p>",
        "id": 235207392,
        "sender_full_name": "Sean",
        "timestamp": 1618848771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/235207392\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"228172\">scorp08</span> Yes, it can make a huge difference, but that's definitely a work in progress.  Some primitives are 10-20x faster, some are about the same, some aren't implemented.  There's a report on the wiki that talks about the performance implications.</p>\n<p>One test case was havoc, if I recall correctly, that went from taking about 1-10 seconds to shoot 1M rays to taking less than a second.  It didn't have boolean weaving yet, though, when that study was conducted, so that's easily 25% of the time.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  oh great, the working primitives are  the ones in <a href=\"http://common.cl\">common.cl</a>?</p>",
        "id": 235571283,
        "sender_full_name": "scorp08",
        "timestamp": 1619034935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228172\">scorp08</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/235571283\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>  oh great, the working primitives are  the ones in <a href=\"http://common.cl\">common.cl</a>?</p>\n</blockquote>\n<p>Yes, I believe so.  There may be patches for a couple more pending review too.</p>",
        "id": 235782983,
        "sender_full_name": "Sean",
        "timestamp": 1619150137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/235782983\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"228172\">scorp08</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/235571283\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>  oh great, the working primitives are  the ones in <a href=\"http://common.cl\">common.cl</a>?</p>\n</blockquote>\n<p>Yes, I believe so.  There may be patches for a couple more pending review too.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I installed intel sdk , env variables are set but cmake-gui did not show any flag about openCL?</p>",
        "id": 235788706,
        "sender_full_name": "scorp08",
        "timestamp": 1619155247
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 235790892,
        "sender_full_name": "scorp08",
        "timestamp": 1619157345
    },
    {
        "content": "<p>disabled mark_as_advanced and done , cmake seems sometimes very complicated to me <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 235790972,
        "sender_full_name": "scorp08",
        "timestamp": 1619157407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I failed to run rt with opencl. It throws nothing(works without opencl). Which projects do I need to compile for enable opencl ?</p>",
        "id": 235809967,
        "sender_full_name": "scorp08",
        "timestamp": 1619169028
    },
    {
        "content": "<p>I guess you are on windows, in linux you are supposed to add the <code>-DBRLCAD_ENABLE_OPENCL=ON</code> if that helps</p>",
        "id": 235810202,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1619169148
    },
    {
        "content": "<p>When you run the Cmake command it shows whether OpenCL is found or not</p>",
        "id": 235810242,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1619169171
    },
    {
        "content": "<p>If it doesnt find OpenCL and you try running rt -z, it just works like the normal rt (without any involvement of OpenCL )</p>",
        "id": 235810313,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1619169215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/235810202\">said</a>:</p>\n<blockquote>\n<p>I guess you are on windows, in linux you are supposed to add the <code>-DBRLCAD_ENABLE_OPENCL=ON</code> if that helps</p>\n</blockquote>\n<p>I already generated projects with opencl enabled but with rt -z 1 it print out \"compiling opencl programs\"  and no nothing. I think I need to compile some projects in brlcad.sln but I do not know which (compiled all shared libs)</p>",
        "id": 235817230,
        "sender_full_name": "scorp08",
        "timestamp": 1619173041
    },
    {
        "content": "<p>Compile the ALL_BUILD target... that should be everything.</p>",
        "id": 235877119,
        "sender_full_name": "Sean",
        "timestamp": 1619198316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/235877119\">said</a>:</p>\n<blockquote>\n<p>Compile the ALL_BUILD target... that should be everything.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  no luck, still \"compiling opencl programs\" and doing nothing and finish.</p>",
        "id": 235941581,
        "sender_full_name": "scorp08",
        "timestamp": 1619239703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228172\">scorp08</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/235941581\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/235877119\">said</a>:</p>\n<blockquote>\n<p>Compile the ALL_BUILD target... that should be everything.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>  no luck, still \"compiling opencl programs\" and doing nothing and finish.</p>\n</blockquote>\n<p>It is \"__stdio_common_vsprintf \" from stdio.h - access violation. I had compiled some libraries with different SDK version because of Tcl/tk  latest supported version.</p>",
        "id": 235943206,
        "sender_full_name": "scorp08",
        "timestamp": 1619241574
    },
    {
        "content": "<p>You're definitely in advanced territory there <span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> .. I think you need to first confirm that opencl has been enabled.  What's the entire output from running cmake?  You'll have to copy-paste the log from the cmake transcript / log window into a text file.</p>",
        "id": 236281006,
        "sender_full_name": "Sean",
        "timestamp": 1619496735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/236281006\">said</a>:</p>\n<blockquote>\n<p>You're definitely in advanced territory there <span class=\"user-mention silent\" data-user-id=\"228172\">scorp08</span> .. I think you need to first confirm that opencl has been enabled.  What's the entire output from running cmake?  You'll have to copy-paste the log from the cmake transcript / log window into a text file.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  yeah, USE_OPENCL seems enabled after cmake builds. also selected BRLCAD_ENABLE_OPENCL  before generate. I 'll try with different SDK version but could not do with cmake, altough set (CMAKE_SYSTEM_VERSION 10.0 \"10.0.15063.0 \" CACHE STRING INTERNAL FORCE)  and #set(CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION \"10.0.15063.0 \").  I do not know which libraries are  need to be changed from VS. Maybe librt dependencies?</p>",
        "id": 236346838,
        "sender_full_name": "scorp08",
        "timestamp": 1619533822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  debugged. It seems that bu_brlcad_root returning null from  clt_init() . I think need to define a BRLCAD_ROOT env. variable. After all the messy search of SDK version change within cmake here the BRLCAD_ROOT <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> . I thought that It already defined after cmake generations but seems did not why?</p>",
        "id": 236392407,
        "sender_full_name": "scorp08",
        "timestamp": 1619550698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228172\">scorp08</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/236392407\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>  debugged. It seems that bu_brlcad_root returning null from  clt_init() . I think need to define a BRLCAD_ROOT env. variable. After all the messy search of SDK version change within cmake here the BRLCAD_ROOT <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> . I thought that It already defined after cmake generations but seems did not why?</p>\n</blockquote>\n<p>I solved include app.h to get correct bu_brlcad_root. But clt_get_program returning error(igc64.dll ). I have laptop with 2 graphic cards .  What am I missing ?</p>",
        "id": 236977268,
        "sender_full_name": "scorp08",
        "timestamp": 1619882907
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <br>\nMy exams are done, I have a few project submissions and presentations to give till May 10 but nothing too hectic. I can start working on comparing both methods and ideas on how to implement them</p>",
        "id": 237044516,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1619952472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> what all you're saying isn't making a whole lot of sense to me, lots of missing information.  There's a couple things you can try.</p>",
        "id": 237438097,
        "sender_full_name": "Sean",
        "timestamp": 1620187933
    },
    {
        "content": "<p>First thing to check/try if you're seeing odd bu_brlcad_root behavior is to make sure that you compile and install so that resources are where they're expected, i.e., don't try running from the build directory.</p>",
        "id": 237438608,
        "sender_full_name": "Sean",
        "timestamp": 1620188438
    },
    {
        "content": "<p>Assuming that doesn't fix everything, next I'd suggest you delete your cmake cache, and run cmake again -- and then post a log of the entire output.  There is a lot of relevant info on whether opencl was detected properly or not in the output.  Would also help to post the CMakeOutput.txt and CMakeError.txt log files.</p>",
        "id": 237438658,
        "sender_full_name": "Sean",
        "timestamp": 1620188472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353338\">Vikram Atreya</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/237044516\">said</a>:</p>\n<blockquote>\n<p>Hey <span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <br>\nMy exams are done, I have a few project submissions and presentations to give till May 10 but nothing too hectic. I can start working on comparing both methods and ideas on how to implement them</p>\n</blockquote>\n<p>That sounds excellent.  Congratulations on finishing your exams!</p>",
        "id": 237438675,
        "sender_full_name": "Sean",
        "timestamp": 1620188508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> you should also start a new thread to discuss opencl instead of posting to the gsoc ideas thread. ;)</p>",
        "id": 237438734,
        "sender_full_name": "Sean",
        "timestamp": 1620188540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/234264263\">said</a>:</p>\n<blockquote>\n<p>Well that can be something to figure out later/next.  Will have to look more closely at your harness code that's pending review.</p>\n</blockquote>\n<p>Could you take a look when you are free, so that I can get some leads on how to proceed next</p>",
        "id": 237526608,
        "sender_full_name": "Vikram Atreya",
        "timestamp": 1620232660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353338\">@Vikram Atreya</span> absolutely can and will.. the trouble is getting to that free time.  I get little pockets, but they're more breaks from handling other urgent deadlines!  I've had too much going on for a few months now, need to make some commitment adjustments.</p>",
        "id": 237529766,
        "sender_full_name": "Sean",
        "timestamp": 1620233916
    },
    {
        "content": "<p>I am excited to express my interest in participating in the Google Summer of Code program as a mentee with BRL-CAD. After reviewing your project ideas, I am particularly interested in proposing a project that would greatly benefit many developers.</p>\n<p>As we all know, reviewing code is one of the most important parts of the development cycle, and saving time in this process can greatly help developers. With this in mind, I propose to develop a GitHub pull request code reviewer that provides helpful code reviews on the changes made in a pull request. This tool will streamline the code review process, making it faster and more reliable for developers.</p>\n<p>I am confident that this project aligns with the goals and objectives of BRL-CAD, and I have relevant experience in [mention your relevant experience] that makes me well-suited for the project. I am excited to apply my skills to this project and contribute to BRL-CAD's mission.</p>\n<p>Thank you for your consideration, and I look forward to the opportunity to work with BRL-CAD as a mentee this summer.</p>\n<p>Sincerely,<br>\nAjay Pal</p>",
        "id": 345030436,
        "sender_full_name": "Ajay Pal",
        "timestamp": 1679982206
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"603973\">@Ajay Pal</span> and welcome!</p>\n<p>You're definitely seem to be considering a different type of project.  Why is that project interesting to you?  What's the motivation for wanting to develop something new over tools like ReviewBoard, Gerritt, Phabricator, etc.?</p>\n<p>Also, you claim this project would align with goals and objectives of BRL-CAD -- how so?</p>",
        "id": 345034486,
        "sender_full_name": "Sean",
        "timestamp": 1679983838
    },
    {
        "content": "<p>Also, you didn't \"[mention your relevant experience]\".</p>",
        "id": 345034513,
        "sender_full_name": "Sean",
        "timestamp": 1679983852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GSoC.20ideas/near/345034486\">said</a>:</p>\n<blockquote>\n<p>Hello <span class=\"user-mention silent\" data-user-id=\"603973\">Ajay Pal</span> and welcome!</p>\n<p>You're definitely seem to be considering a different type of project.  Why is that project interesting to you?  What's the motivation for wanting to develop something new over tools like ReviewBoard, Gerritt, Phabricator, etc.?</p>\n<p>Also, you claim this project would align with goals and objectives of BRL-CAD -- how so?</p>\n</blockquote>\n<p>Hello!<br>\nI am Ajay Pal, 4th  year (2023 batch) 𝐂𝐨𝐦𝐩𝐮𝐭𝐞𝐫 𝐄𝐧𝐠𝐢𝐧𝐞𝐞𝐫𝐢𝐧𝐠 student from Delhi Technological University(𝐃𝐓𝐔) formerly 𝐃𝐂𝐄 (CGPA:9.24).<br>\nI have 𝐢𝐧𝐭𝐞𝐫𝐧𝐞𝐝 at 𝐓𝐰𝐢𝐭𝐭𝐞𝐫 𝐂𝐨𝐦𝐦𝐮𝐧𝐢𝐜𝐚𝐭𝐢𝐨𝐧 𝐈𝐧𝐝𝐢𝐚 𝐏𝐯𝐭. 𝐋𝐭𝐝. in ETL and Workflow Tools (𝐄𝐖𝐓) team and delivered the Airflow Business Metric dashboard to various internal customers, which is needed for maximal adoption of Airflow at Twitter. I have also interned at 91Squarefeet (YC W22) where I have set up services that are needed for development and contributed to the portfolio project i.e rbdash. I have led many teams to 𝐇𝐚𝐜𝐤𝐚𝐭𝐡𝐨𝐧 and have also won 𝐈𝐍𝐍𝐎𝐕𝐀𝐓𝐄𝐍𝐒𝐔𝐓` 21. I have Solved 850+ 𝐃𝐒𝐀 𝐩𝐫𝐨𝐛𝐥𝐞𝐦𝐬( Leetcode + HackerRank + Code Studio).<br>\nI am proficient in 𝐩𝐫𝐨𝐛𝐥𝐞𝐦 𝐬𝐨𝐥𝐯𝐢𝐧𝐠 and 𝐝𝐞𝐯𝐞𝐥𝐨𝐩𝐦𝐞𝐧𝐭.</p>\n<p>This project is interesting to me because while doing internships and participating in open source community I have found out that a lot of org lack this kind of integration. I can see that it will help a lot of developers in their review cycle as most of the review would be provided by bots according to some preset rules which can be easily modified according to user needs. <br>\nThe example you have given of review platforms is to make the review process easy in some ways but they don't give a review by themselves.<br>\nHence I believe this can increase the efficiency of any org.</p>",
        "id": 345036255,
        "sender_full_name": "Ajay Pal",
        "timestamp": 1679984505
    },
    {
        "content": "<p>Honestly you’re being way too generic and vague.  You’re making a claim that a tool would be helpful and is so widespread needed, yet don’t really explain what or how it will help (other than saying that it will).  I also don’t see anything specific about BRL-CAD in what you are wanting to propose.  How exactly will this help our code and community?  Not general notions. Please elaborate if you can, otherwise my inclination is this would be better fit in a tooling community (eg gitlab).</p>",
        "id": 345038533,
        "sender_full_name": "Sean",
        "timestamp": 1679985271
    },
    {
        "content": "<p>Hello. I am computer science student from Delft University of Technology and I am quite interested in the neural tracing project affiliated of GSOC 2024? I have project experiences with both neural network, which is a competition, and projects with top design companies in China. I have got full marks in my Computer Graphics course</p>",
        "id": 426811446,
        "sender_full_name": "Zhejia Hu",
        "timestamp": 1710532124
    },
    {
        "content": "<p>If you need more information on me, feel free to private message me and I will send you the CV and I am also happy to discuss with you the contents of the paper.</p>",
        "id": 426833652,
        "sender_full_name": "Zhejia Hu",
        "timestamp": 1710542705
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"701501\">@Zhejia Hu</span> and welcome.  Sounds like your experience with NNets and CG could be a benefit to this project.  You'll need to research it enough to make a compelling proposal as that's obviously not an easy topic.  We will definitely need to learn more about you, and see how you work and interact.  The CV can go with your proposal submission, but it's only a piece.  What's more important is demonstrating your coding skills on our codebase in some meaningful manner. Towards that, we recommend compiling, installing, and running BRL-CAD from a github cloned checkout, and checking over prior work (AMD's paper and our previous work).</p>",
        "id": 426893462,
        "sender_full_name": "Sean",
        "timestamp": 1710597703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-brlcad/topic/GSoC.20ideas/near/426893462\">said</a>:</p>\n<blockquote>\n<p>Hello <span class=\"user-mention silent\" data-user-id=\"701501\">Zhejia Hu</span> and welcome.  Sounds like your experience with NNets and CG could be a benefit to this project.  You'll need to research it enough to make a compelling proposal as that's obviously not an easy topic.  We will definitely need to learn more about you, and see how you work and interact.  The CV can go with your proposal submission, but it's only a piece.  What's more important is demonstrating your coding skills on our codebase in some meaningful manner. Towards that, we recommend compiling, installing, and running BRL-CAD from a github cloned checkout, and checking over prior work (AMD's paper and our previous work).</p>\n</blockquote>\n<p>Thank you very much for the reply. May I reconfirm the deadline of application, submitting the proposal, and especially interacting in some manner with the codebase is the same as the deadline provided on the GSOC website: Tuesday, April 2, 2024 18:00 UTC? If so, then I would begin to prepare and look into the code. Thank you very much for the instruction.</p>",
        "id": 427186651,
        "sender_full_name": "Zhejia Hu",
        "timestamp": 1710700068
    },
    {
        "content": "<p>Hi There! I'm a computer science student interested in graphics. I have experience in web application development, OpenGL, and GLSL. Also, I used to be a heavy user of CAD, 3D software, etc. I'm really excited about this year's GSoC topics but a bit overwhelmed by their broadness. Would you give me some suggestions on how to start? Thanks!</p>",
        "id": 427750152,
        "sender_full_name": "Danni W",
        "timestamp": 1710862125
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"702098\">@Danni W</span>, welcome!</p>\n<p>You should start with <a href=\"https://github.com/BRL-CAD/brlcad/releases\">installing BRL-CAD</a> and going through the <a href=\"https://brlcad.org/w/images/c/cf/Introduction_to_MGED.pdf\">tutorial</a>. The following depends on your interests and where you see your strengths (e.g., which programming languages you like).</p>",
        "id": 427769064,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1710866966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"701501\">@Zhejia Hu</span> that submission deadline is a FIRM deadline meaning there are absolutely no exceptions no matter the reason.  I suggest submitting several days before the deadline if you can, and then make updates.  Any pull requests or other code submissions should be made by that time as well, but there is a little flexibility for that if something is prepared and/or submitted afterwards.  Just be aware that we will be reviewing applications after the deadline and may rank proposals at any point (and if there's not a code submission at that time, the application will be disqualified).</p>",
        "id": 429115158,
        "sender_full_name": "Sean",
        "timestamp": 1711227638
    },
    {
        "content": "<p>For anyone still working on a coding change, there's a bunch of new GCC14 static analyzer checks that you could try going through on the codebase.  Could see if you can find/fix any issues by enabling the -fanalyzer check (using latest gcc14): <br>\n<a href=\"https://developers.redhat.com/articles/2024/04/03/improvements-static-analysis-gcc-14-compiler#try_it_out_\">https://developers.redhat.com/articles/2024/04/03/improvements-static-analysis-gcc-14-compiler#try_it_out_</a></p>",
        "id": 430996640,
        "sender_full_name": "Sean",
        "timestamp": 1712148862
    },
    {
        "content": "<p>Other really easy tasks including adding support for arbitrary units to the g-obj or gcv converters, fixing \"killtree /\" bug in mged, add openmesh as a gcv plugin, make src/util/terrain.c output a binunif in the .g instead of an external file, convert teapot to brep/opennurbs instead of bspline, function that converts a non-planar arb8 into brep/opennurbs, implement a function that returns top-level objects, make g-obj export colors, add support for importing ply-g point clouds, import xyz files (gcv), etc.  </p>\n<p>Basically anything conversion-related is always a good starting point since it avoids having to navigate GUI, build,  and dependency issues.  Any <a href=\"https://github.com/BRL-CAD/brlcad/blob/main/BUGS\">BUGS</a> or <a href=\"https://github.com/BRL-CAD/brlcad/blob/main/TODO\">TODO</a> or <a href=\"https://github.com/BRL-CAD/brlcad/issues\">Issue</a> is fair game, though.</p>",
        "id": 431121516,
        "sender_full_name": "Sean",
        "timestamp": 1712158583
    },
    {
        "content": "<p>Daniel makes a good point -- it's good if you can align a coding change with your proposal.  Barring that, any BRL-CAD coding change is better than no coding change.  Sharing code you implemented on your own is not terribly helpful as it's more about demonstrating your ability to communicate, interact, and navigate existing code.</p>",
        "id": 431419139,
        "sender_full_name": "Sean",
        "timestamp": 1712273363
    }
]