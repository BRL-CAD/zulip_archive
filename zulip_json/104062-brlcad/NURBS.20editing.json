[
    {
        "content": "<p>I am doing research on project NURBS Editing Support in BRL-CAD</p>",
        "id": 342213083,
        "sender_full_name": "Neeraj Sharma",
        "timestamp": 1678939989
    },
    {
        "content": "<p>okay, so for that you don't really need to install anything, you just need to compile.  the tools exist in the build tree and can be run from there on the command line</p>",
        "id": 342213117,
        "sender_full_name": "Sean",
        "timestamp": 1678940033
    },
    {
        "content": "<p>the primary GUIs of the main repo are called MGED and Archer in src/mged and src/archer respectively.  there's also other experimental GUI work in src/qged and in another separate repository called arbalest</p>",
        "id": 342213207,
        "sender_full_name": "Sean",
        "timestamp": 1678940102
    },
    {
        "content": "<p>nurbs logic is in src/libbrep and src/other/ext/openNURBS, and all editing commands are in src/libged</p>",
        "id": 342213243,
        "sender_full_name": "Sean",
        "timestamp": 1678940139
    },
    {
        "content": "<p>yes I go through it</p>",
        "id": 342213249,
        "sender_full_name": "Neeraj Sharma",
        "timestamp": 1678940147
    },
    {
        "content": "<p>so for that project, you have to understand the code well enough to figure out a propopsal</p>",
        "id": 342213317,
        "sender_full_name": "Sean",
        "timestamp": 1678940166
    },
    {
        "content": "<p>ok first I will go through the code</p>",
        "id": 342213370,
        "sender_full_name": "Neeraj Sharma",
        "timestamp": 1678940205
    },
    {
        "content": "<p>but the general idea expected would probably be to first create basic editing commands (CLI) in src/libged which becomes command-line commands in mged and archer</p>",
        "id": 342213372,
        "sender_full_name": "Sean",
        "timestamp": 1678940207
    },
    {
        "content": "<p>then if you got that working, the next step would be to figure out what GUI to integrate that with, whether mged or archer or qged or arbalest</p>",
        "id": 342213399,
        "sender_full_name": "Sean",
        "timestamp": 1678940232
    },
    {
        "content": "<p>sir , figure out a whole code , that is hard for me</p>",
        "id": 342219784,
        "sender_full_name": "Neeraj Sharma",
        "timestamp": 1678945331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/Compiling.20BRL-CAD/near/342213243\">said</a>:</p>\n<blockquote>\n<p>nurbs logic is in src/libbrep and src/other/ext/openNURBS, and all editing commands are in src/libged</p>\n</blockquote>\n<p>Are you looking here for code, right? <span class=\"user-mention\" data-user-id=\"598883\">@Neeraj Sharma</span></p>",
        "id": 342220973,
        "sender_full_name": "Himanshu",
        "timestamp": 1678946131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252475\">Himanshu Sekhar Nayak</span> <a href=\"#narrow/stream/104062-general/topic/Compiling.20BRL-CAD/near/342220973\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/Compiling.20BRL-CAD/near/342213243\">said</a>:</p>\n<blockquote>\n<p>nurbs logic is in src/libbrep and src/other/ext/openNURBS, and all editing commands are in src/libged</p>\n</blockquote>\n<p>Are you looking here for code, right? <span class=\"user-mention silent\" data-user-id=\"598883\">Neeraj Sharma</span></p>\n</blockquote>\n<p>yes  sir</p>",
        "id": 342221145,
        "sender_full_name": "Neeraj Sharma",
        "timestamp": 1678946254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598883\">Neeraj Sharma</span> <a href=\"#narrow/stream/104062-general/topic/Compiling.20BRL-CAD/near/342221145\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252475\">Himanshu Sekhar Nayak</span> <a href=\"#narrow/stream/104062-general/topic/Compiling.20BRL-CAD/near/342220973\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/Compiling.20BRL-CAD/near/342213243\">said</a>:</p>\n<blockquote>\n<p>nurbs logic is in src/libbrep and src/other/ext/openNURBS, and all editing commands are in src/libged</p>\n</blockquote>\n<p>Are you looking here for code, right? <span class=\"user-mention silent\" data-user-id=\"598883\">Neeraj Sharma</span></p>\n</blockquote>\n<p>yes  sir</p>\n</blockquote>\n<p>so any other option for familiar with the NUBRS base code</p>",
        "id": 342251599,
        "sender_full_name": "Neeraj Sharma",
        "timestamp": 1678957960
    },
    {
        "content": "<p>There's not a better option than reading the code as that is the latest status of the implementation, but there are certainly books and websites that explain what NURBS are and how to work with them.  There IS a NURBS development guide in BRL-CAD, but that's not particularly relevant for editing -- still you can see it in doc/docbook/devguides/bool_eval_development.xml</p>",
        "id": 342392629,
        "sender_full_name": "Sean",
        "timestamp": 1678991165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/Compiling.20BRL-CAD/near/342392629\">said</a>:</p>\n<blockquote>\n<p>There's not a better option than reading the code as that is the latest status of the implementation, but there are certainly books and websites that explain what NURBS are and how to work with them.  There IS a NURBS development guide in BRL-CAD, but that's not particularly relevant for editing -- still you can see it in doc/docbook/devguides/bool_eval_development.xml</p>\n</blockquote>\n<p>can you exactly share location ,where the base code of implementing of NURBS</p>",
        "id": 342501183,
        "sender_full_name": "Neeraj Sharma",
        "timestamp": 1679043331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598883\">Neeraj Sharma</span> <a href=\"#narrow/stream/104062-general/topic/Compiling.20BRL-CAD/near/342501183\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/Compiling.20BRL-CAD/near/342392629\">said</a>:</p>\n<blockquote>\n<p>There's not a better option than reading the code as that is the latest status of the implementation, but there are certainly books and websites that explain what NURBS are and how to work with them.  There IS a NURBS development guide in BRL-CAD, but that's not particularly relevant for editing -- still you can see it in doc/docbook/devguides/bool_eval_development.xml</p>\n</blockquote>\n<p>can you exactly share location ,where the base code of implementing of NURBS</p>\n</blockquote>\n<ul>\n<li>NURBS curve: src/other/openNURBS/opennurbs_nurbscurve.cpp</li>\n<li>NURBS surface: src/other/openNURBS/opennurbs_nurbssurface.cpp<br>\nIf you want to understand every aspect of  NURBS, <em>the NURBS book</em> is a good choice, but it has too much content... I suggest you can read other blogs as a beginning. You can follow this route:</li>\n</ul>\n<ol>\n<li>learn curves: <code>bezier curve</code> -&gt; <code>B-Spline curve</code> -&gt; <code>rational B-Spline curve</code></li>\n<li>learn surface: <code>bezier surface</code> -&gt; <code>B-Spline surface</code> -&gt; <code>rational B-Spline surface</code><br>\nI think as long as you are familar with \"tensor product\" \"control points\" \"knot vector\" \"homogeneous coordinates\", you get the basics of NURBS. One week is enough to achieve it and shorter if you have a foundation. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></li>\n</ol>",
        "id": 342703601,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679111131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598883\">Neeraj Sharma</span> <a href=\"#narrow/stream/104062-general/topic/Compiling.20BRL-CAD/near/342501183\">said</a>:</p>\n<blockquote>\n<p>can you exactly share location ,where the base code of implementing of NURBS</p>\n</blockquote>\n<p>The location information was already provided earlier the first time you asked where -- it's a lot of code spanning multiple directories and those directories were itemized.  Honestly if that wasn't enough information, then you may be attempting to propose a topic far too complex for your abilities.  NURBS is an advanced topic.  I would suggest focusing on a different project proposal that is a bit easier to navigate.</p>",
        "id": 342704397,
        "sender_full_name": "Sean",
        "timestamp": 1679111950
    },
    {
        "content": "<p>17 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"104062\" href=\"/#narrow/stream/104062-general/topic/Compiling.20BRL-CAD\">#general &gt; Compiling BRL-CAD</a> by <span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>.</p>",
        "id": 342704523,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679112037
    },
    {
        "content": "<p>I also moved this topic thread since you had hijacked the thread about compiling BRL-CAD with unrelated discussion about NURBS.  Both remain accessible.</p>",
        "id": 342704565,
        "sender_full_name": "Sean",
        "timestamp": 1679112080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/342704397\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"598883\">Neeraj Sharma</span> <a href=\"#narrow/stream/104062-general/topic/Compiling.20BRL-CAD/near/342501183\">said</a>:</p>\n<blockquote>\n<p>can you exactly share location ,where the base code of implementing of NURBS</p>\n</blockquote>\n<p>The location information was already provided earlier the first time you asked where -- it's a lot of code spanning multiple directories and those directories were itemized.  Honestly if that wasn't enough information, then you may be attempting to propose a topic far too complex for your abilities.  NURBS is an advanced topic.  I would suggest focusing on a different project proposal that is a bit easier to navigate.</p>\n</blockquote>\n<p>BRLCAD issue section contain the project list or there another list of projects <br>\n can you tell me easier project or all project list those are mentioned in GSOC'23</p>",
        "id": 342705530,
        "sender_full_name": "Neeraj Sharma",
        "timestamp": 1679112953
    },
    {
        "content": "<p>All the project ideas have a difficulty rating.</p>",
        "id": 342705814,
        "sender_full_name": "Sean",
        "timestamp": 1679113215
    },
    {
        "content": "<p>They're all listed at <a href=\"https://github.com/opencax/GSoC/issues?q=is%3Aopen+sort%3Aupdated-desc+label%3A%22GSoC+2023%22+label%3A%22Project%3A+BRL-CAD%22\">https://github.com/opencax/GSoC/issues?q=is%3Aopen+sort%3Aupdated-desc+label%3A%22GSoC+2023%22+label%3A%22Project%3A+BRL-CAD%22</a></p>",
        "id": 342705837,
        "sender_full_name": "Sean",
        "timestamp": 1679113250
    },
    {
        "content": "<p>We're an umbrella org, so each project has a separate list: <a href=\"https://opencax.github.io\">https://opencax.github.io</a></p>",
        "id": 342705892,
        "sender_full_name": "Sean",
        "timestamp": 1679113284
    },
    {
        "content": "<p>I'm wondering how do we use NURBS editing operations? I have not find how to create a NURBS curve or surface directly in mged or archer. I see we can get the NURBS form of some primitives. Do we need additional cmd to create and modify NURBS directly?<br>\nI noticed some CAD software have a unique tool for creating NURBS.<br>\n<a href=\"/user_uploads/1549/fsSb3yUGq6bDzbU01SfeT2qd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/fsSb3yUGq6bDzbU01SfeT2qd/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/fsSb3yUGq6bDzbU01SfeT2qd/image.png\"></a></div>",
        "id": 343073829,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679307270
    },
    {
        "content": "<p>I don't understand what \"wrapping the openNURBS library by a scripting language\" means here <a href=\"https://github.com/opencax/GSoC/issues/32\">NURBS Editing Support in BRL-CAD</a>. Are commands of <a href=\"https://brlcad.org/wiki/MGED_Commands\">mged command</a> form suffice? Or do we need to wrap it for other purposes?</p>",
        "id": 343076203,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679307841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"491779\">GregoryLi</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/343073829\">said</a>:</p>\n<blockquote>\n<p>I have not find how to create a NURBS curve or surface directly in mged or archer.</p>\n</blockquote>\n<p>That's the point: There is no such functionality. The only way to create (openNURBS) NURBS, is by importing Rhino files as BLOBs.</p>",
        "id": 343194518,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1679336242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"491779\">GregoryLi</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/343076203\">said</a>:</p>\n<blockquote>\n<p>I don't understand what \"wrapping the openNURBS library by a scripting language\" means here <a href=\"https://github.com/opencax/GSoC/issues/32\">NURBS Editing Support in BRL-CAD</a>. Are commands of <a href=\"https://brlcad.org/wiki/MGED_Commands\">mged command</a> form suffice? Or do we need to wrap it for other purposes?</p>\n</blockquote>\n<p>The mged commands trigger functions in libged, which call functions in other libraries. So, the \"other purposes\" could do something similar than the function in libged. I.e., it would be sufficient to implement it up to the libged TCL hooks.</p>\n<p>BTW, the main primitive creation command is <a href=\"https://brlcad.org/wiki/MGED_CMD_in\"><code>in</code></a>, implemented in src/libged/typein/typein.c.</p>",
        "id": 343196867,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1679336903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/343194518\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"491779\">GregoryLi</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/343073829\">said</a>:</p>\n<blockquote>\n<p>I have not find how to create a NURBS curve or surface directly in mged or archer.</p>\n</blockquote>\n<p>That's the point: There is no such functionality. The only way to create (openNURBS) NURBS, is by importing Rhino files as BLOBs.</p>\n</blockquote>\n<p>OK, I think <strong>create NURBS curve &amp; surface using mged command</strong> is be a good target to start with.</p>",
        "id": 343257698,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679361950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"491779\">@GregoryLi</span>  Nearly all of BRL-CAD's non-NURBS implicit solids (e.g., ell, torus, arb8, tgc, etc) have function implementations that express them in NURBS form (like in your screenshot they show torus and some other starter shapes in addition to curve and surface creation).  It's the rt_<em>_brep() callback which you can see in all the src/librt/primitives/</em>/*.cpp subdir files.  As mentioned, conversion is one current way to get NURBS brep entities, but also a way is the mged \"brep\" command.  That converts an existing solid into a brep solid.</p>",
        "id": 343279452,
        "sender_full_name": "Sean",
        "timestamp": 1679377734
    },
    {
        "content": "<p>That said, you're on the right track thinking about how to create them first.  That's why I mentioned src/proc-db/brep_simple.cpp and friends where you can see examples how they're created in code, one curve, edge, trim, and surface at a time.</p>",
        "id": 343279848,
        "sender_full_name": "Sean",
        "timestamp": 1679377964
    },
    {
        "content": "<p>I created one cylindrical side in proc-db.<br>\n<a href=\"/user_uploads/1549/OETF3zwLfWkrLqn3QHs9QGSZ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/OETF3zwLfWkrLqn3QHs9QGSZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/OETF3zwLfWkrLqn3QHs9QGSZ/image.png\"></a></div>",
        "id": 343816981,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679538390
    },
    {
        "content": "<p>I noticed we have <strong>bspline_brep.cpp</strong> in <strong>librt/primitives/bspline</strong>, but it seems we have no corresponding option of <code>in</code> command. Maybe we should call the function through <code>in</code> command to create NURBS?</p>",
        "id": 343817322,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679538735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"491779\">@GregoryLi</span> Note that there are two boundary representation implementations in librt.  One is  the 'bspline' entity and the other is the 'brep' entity.  What you're looking at there is the older bspline which implements boundaries  by defining  bspline patches.  It works, but it's a slow 1980's approach and yes it also lacks an 'in' interface.  The 'brep' entity (see src/librt/primitives/brep and src/other/ext/openNURBS) is the modern approach.</p>",
        "id": 343879488,
        "sender_full_name": "Sean",
        "timestamp": 1679555335
    },
    {
        "content": "<p>There's very likely code and algorithms in 'bspline' that should/could be migrated to 'brep', particularly for boolean evaluation, but the datastructures are different so any utilization will require some work.</p>",
        "id": 343879832,
        "sender_full_name": "Sean",
        "timestamp": 1679555398
    },
    {
        "content": "<p>Yeah, I'm trying to generate the 'brep' form NURBS surface. I think the difference is that 'brep' form need to create vertex, curve, edge, trim compared to 'bspline' form. Am I right?</p>",
        "id": 343952863,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679572406
    },
    {
        "content": "<p>Besides, I find one possible problem... If a 'brep' object have a edge which is a loop in Cartesian space but not a loop topologically, the 'brep' is not valid(b-&gt;IsValid()=false). And the code belongs to  openNURBS. Just like the cylindrical side. <br>\n<a href=\"/user_uploads/1549/1J9FJrFs477N4Ajo-DWi-xgw/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/1J9FJrFs477N4Ajo-DWi-xgw/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/1J9FJrFs477N4Ajo-DWi-xgw/image.png\"></a></div>",
        "id": 343954119,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679572742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"491779\">GregoryLi</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/343952863\">said</a>:</p>\n<blockquote>\n<p>Yeah, I'm trying to generate the 'brep' form NURBS surface. I think the difference is that 'brep' form need to create vertex, curve, edge, trim compared to 'bspline' form. Am I right?</p>\n</blockquote>\n<p>Well the API is different because 'brep' uses the openNURBS API.  They both create parametric surfaces that are stitched together with vertices, curves, and edges.  'bspline' doesn't to trimming curves whereas 'brep' does use trimming curves is probably the biggest practical difference in construction.</p>",
        "id": 344017500,
        "sender_full_name": "Sean",
        "timestamp": 1679585668
    },
    {
        "content": "<p>somewhere in the code is a function that converts a bspline to a brep.  I think that might even be what I did to fix ray tracing for bspline.  The only reason the bspline code is still there is for reading/writing old .g files with them and as a reference if there are functions in there that might be useful for migrating to 'brep'</p>",
        "id": 344018090,
        "sender_full_name": "Sean",
        "timestamp": 1679585790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"491779\">GregoryLi</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/343954119\">said</a>:</p>\n<blockquote>\n<p>Besides, I find one possible problem... If a 'brep' object have a edge which is a loop in Cartesian space but not a loop topologically, the 'brep' is not valid(b-&gt;IsValid()=false). And the code belongs to  openNURBS. Just like the cylindrical side. <br>\n<a href=\"/user_uploads/1549/1J9FJrFs477N4Ajo-DWi-xgw/image.png\">image.png</a></p>\n</blockquote>\n<p>Yes the topological structure of brep can be valid/invalid and really unrelated to the geometric structure.  It's our job to make sure they match and form a valid definition.</p>\n<p>Your cylinder is a valid surface but is not a valid brep because it doesn't enclose a volume.</p>",
        "id": 344019173,
        "sender_full_name": "Sean",
        "timestamp": 1679586014
    },
    {
        "content": "<p>Thanks! Very detailed and interesting distinction.</p>",
        "id": 344134427,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679620405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I'm wondering if we wrap nurbs in <code>brep</code> format, what format should users edit them in?</p>\n<p>For example, One user want to 'attach' two spline curves. So he/she should have two curve in brep format like <code>curve1.brep</code> and <code>curve2.brep</code>, then run mged command like <code>attach curve1.brep curve2.brep [other parameters]</code>. BRL-CAD core will check if <code>curve1.brep</code> and <code>curve2.brep</code> each owns a single curve. If not, the operation is illegal. Otherwise BRL-CAD core will perform attach operation. Am I right?</p>",
        "id": 344411528,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679718998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"491779\">@GregoryLi</span> you might have some misunderstanding.  You're not \"wrapping\" nurbs in brep format.  nurbs are defined using a boundary representation format so for all intents and purposes nurbs==brep.  I also don't think it would make any sense to put curves into separate breps if the point is to join them.   What you'd probably do is create a brep, add a curve to it, add another curve to it, join them.</p>",
        "id": 344412980,
        "sender_full_name": "Sean",
        "timestamp": 1679719986
    },
    {
        "content": "<p>Did you read the the src/proc-db/brep_simple.cpp ?</p>",
        "id": 344413038,
        "sender_full_name": "Sean",
        "timestamp": 1679720026
    },
    {
        "content": "<p>Run that and look at the model it produces in mged.  Now imagine wanting to edit it in mged to move a vertex.  What would that command look like.  That's a first step.</p>",
        "id": 344413130,
        "sender_full_name": "Sean",
        "timestamp": 1679720072
    },
    {
        "content": "<p>Once you can move a vertex, then try moving an edge.  After you can move a vertex and an edge, now what about moving a face.  Figure out what that looks like from an editing perspective.  Once you can move those pieces around, what about deleting a vertex, or deleting an edge, or even deleting a face?  What about adding a vertex in the middle of an edge?  What about the middle of a face?  And so on... that's the general idea for building up a command that will let you do all of that in a user-friendly way.</p>",
        "id": 344413442,
        "sender_full_name": "Sean",
        "timestamp": 1679720298
    },
    {
        "content": "<p>Once you can do all that, how about generating that same brep_simple object on the command line.. figure out what that looks like.</p>",
        "id": 344413671,
        "sender_full_name": "Sean",
        "timestamp": 1679720455
    },
    {
        "content": "<p>At that point, you'll need to figure out how to deal with trimming curves, control points, and knot values too.</p>",
        "id": 344413715,
        "sender_full_name": "Sean",
        "timestamp": 1679720506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/344413130\">said</a>:</p>\n<blockquote>\n<p>Run that and look at the model it produces in mged.  Now imagine wanting to edit it in mged to move a vertex.  What would that command look like.  That's a first step.</p>\n</blockquote>\n<p>Yeah, I can imagine that. So what we want to do is editing nurbs that belongs to brep, not separate nurbs?</p>",
        "id": 344415294,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679721420
    },
    {
        "content": "<p>there are no separate nurbs... brep==nurbs</p>",
        "id": 344494786,
        "sender_full_name": "Sean",
        "timestamp": 1679752916
    },
    {
        "content": "<p>they're one in the same.  so if we have a brep, we want to edit the \"brep nurbs\" structures it contains.  we need the ability to add those structures to an empty or existing brep too (so we can manually create things like brep_simple does, but as a user).</p>",
        "id": 344495210,
        "sender_full_name": "Sean",
        "timestamp": 1679753019
    },
    {
        "content": "<p>As far as my understanding from openNURBS, one brep contains curves, surfaces(geometry) and vertexes, edges, trims, loops, faces(topology) info, where curves and surfaces may be NURBS. So maybe a more precise description would be there is no separate NURBS, they shall be geometries of brep?</p>",
        "id": 344833251,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679916001
    },
    {
        "content": "<p>I want to understand how to use NURBS editing operations from user perspective. <br>\nFor operation like \"move a vertex\":</p>\n<ol>\n<li>users may select the vertex to be moved though command <code>brep *.brep plot  V *</code> or other operation</li>\n<li>run command(to be developed) like <code>MoveVertex [brep name] [vertexid] [position to be moved]</code></li>\n</ol>",
        "id": 344834897,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679916491
    },
    {
        "content": "<p>For operation like \"create and attach two spline curve\":</p>\n<ol>\n<li>users may create one empty brep object</li>\n<li>run command(to be developed) like <code>AddCurve [brep_name] [curve info]</code> twice to add two spline curve into the brep object.</li>\n<li>run command(to be developed) like <code>AttachSpline [brep name] [curveid_1] [curveid_2]</code> to attach the two spline</li>\n</ol>",
        "id": 344836262,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679916854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  I looked though the structure of brep and how to create a brep object. And I'm trying to figure out how users use the NURBS editing.  I checked blender and some other softwares and libs. I think our operating logic is different from theirs. They are editing one separate NURBS curve/surface directly. Am I right? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 344839567,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679917741
    },
    {
        "content": "<p>I think, you are on the right way. The details depend on how the data is stored in openNURBS. Do the curves and/or points have an ID? Or just an index in an array? Etc..</p>\n<p>What I had in mind, was a command like <code>in myNurbs.s brep &lt;parameters&gt;</code>. <strong>&lt;parameters&gt;</strong> being something like <strong>\"[curve 1 info] u [curve 2 info] ...\"</strong>. I.e., the real task would be to draft a concept for <strong>[curve info]</strong> and implement it.</p>",
        "id": 344931482,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1679939305
    },
    {
        "content": "<p>The task of editing NURBS is not important at this level/stage. E.g., at the lower level, a vertex doesn't need to be movable. It would be good too, if the curve, the vertex belongs to, could be replaced by another curve (with the vertex moved).</p>",
        "id": 344932168,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1679939524
    },
    {
        "content": "<p>Then, it would be a task of the GUI, to take the original curve, move a vertex there, and replace the original curve with the changed one.</p>",
        "id": 344932426,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1679939634
    },
    {
        "content": "<p>Yeah, I think I get the point! I'm writing my proposal.</p>",
        "id": 345007595,
        "sender_full_name": "GregoryLi",
        "timestamp": 1679968545
    },
    {
        "content": "<p>..</p>",
        "id": 345025339,
        "sender_full_name": "Ajay Pal",
        "timestamp": 1679980023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"491779\">@GregoryLi</span> you're on the right track thinking about what a CLI might look like.   Editing can happen in a variety of ways as noted.  Could be a write/overwrite/delete interface like daniel mentioned where you just replace entities with different entities the have the edit.  Could propose a set of relevant subcommands to an existing command (e.g.,  \"brep translate mybrep.edge[54] 100 0 0\".  Could be something hooked into the existing 'adjust' command.  There are tradeoff considerations with all of them.  You'd probably want to budget some time to study options during the bonding phase to finalize exactly what approach will be taken, but you should understand what those options are and explain them in your proposal so you can demonstrate you've thought about this some.</p>",
        "id": 345033679,
        "sender_full_name": "Sean",
        "timestamp": 1679983547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  What's the difference between 'attach' and 'connect' two NURBS curve? I can imagine two cases:</p>\n<ol>\n<li>generate one spline curve after operation. Just like <a href=\"https://ayam.sourceforge.net/docs/ayam-4.html#concatncobj\"><code>ConcatNC</code> in Ayam</a></li>\n<li>get two spline curve share some control vertexes. This is strange..</li>\n</ol>",
        "id": 345281485,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680058346
    },
    {
        "content": "<p>The points/curves/surface only have an index in an array of brep, without a name. So it is not easy to perform nurbs editing operations for users. They should find the index by drawing and NURBS operation will change the index.</p>",
        "id": 345283306,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680059437
    },
    {
        "content": "<p>And I'm thinking about if it's proper to do NURBS operation in brep. For example, we have a cube 'brep' in brep format, and we just perform 'trim' operation on one edge curve or 'connect' two edge curve. This will make the 'brep' object irregular(mass up topology and relationship between topology and geometry entities of the cube). Shall we check if the operation is legal to keep some property of the brep valid?</p>",
        "id": 345283307,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680059439
    },
    {
        "content": "<p>I'm a bit confused about the definition and implementation of some operations.</p>",
        "id": 345316704,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680075252
    },
    {
        "content": "<ol>\n<li>the first one is 'attach' and 'connect' for NURBS curve.</li>\n</ol>",
        "id": 345317056,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680075341
    },
    {
        "content": "<ol start=\"2\">\n<li><code>projection</code> for <code>curve to surface operation</code><br>\n    Is it accessable for users? As its <a href=\"https://brlcad.org/wiki/Vector_Drawings_from_NURBS\">usage</a> tells, maybe it shall be a function in libbrep core for viewing.<br>\n    How to achieve it?  My understanding is that this function will get projection(planar spline curve format) of the selected spline curve onto a plane. We can sample points on the curve, perform raytracing to get the projection points on the plane, then fit 2D curve on the plane.</li>\n</ol>",
        "id": 345318683,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680075831
    },
    {
        "content": "<ol start=\"3\">\n<li><code>Rebuild/Simplify(remove unnecessary control points)</code> function in <code>surface operations</code><br>\n     I don't know what it refers to. Does it mean decrease order/coarsen of the surface within a tolerance value or discard the trimmed part?</li>\n</ol>",
        "id": 345320192,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680076245
    },
    {
        "content": "<ol start=\"4\">\n<li><code>Trim (evaluate to untrimmed)</code> in <code>surface operations</code><br>\n   Does it mean split surface into two spline surface or trim like <a href=\"https://ayam.sourceforge.net/docs/ayam-4.html#trimobj\">Ayam trim</a>? For the latter, I think it's not easy to implement.</li>\n</ol>",
        "id": 345321379,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680076607
    },
    {
        "content": "<p>I had hoped that you would tell me that <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span><br>\nI didn't looked at the openNURBS/brep internals yet.</p>",
        "id": 345484652,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1680114280
    },
    {
        "content": "<p>I thought we have a detailed description and goal about operations in <a href=\"https://brlcad.org/wiki/NURBS_Editing_Support\">NURBS Editing Support</a>.<span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nIt's okay if not! I think the operations may not be limited to the wiki, we need NURBS editing operations just like any other lib such as Ayam and Blender. I have describled these NURBS editing operations in detail and hope to extend the operations as one part of my proposal. My proposal will be relatively long, so I will send out the first half of it as soon as possible to discuss with you.</p>",
        "id": 345572283,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680156702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"491779\">GregoryLi</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/345316704\">said</a>:</p>\n<blockquote>\n<p>I'm a bit confused about the definition and implementation of some operations.</p>\n</blockquote>\n<p>you can certainly propose changing what was written up on the wiki.  I think it's mostly taking a very low-level approach of operations that could be performed on specified curves and surfaces, but it's certainly not the only approach possible.</p>",
        "id": 345584238,
        "sender_full_name": "Sean",
        "timestamp": 1680161013
    },
    {
        "content": "<p>I don't personally see operations #2 or #3 being important and #4 is a \"nice to have\" but not strictly necessary for editing either.</p>",
        "id": 345584642,
        "sender_full_name": "Sean",
        "timestamp": 1680161106
    },
    {
        "content": "<p>They won't/don't need to be limited to what's on the wiki.  I think that was just envisioned as a potential starting point approach.</p>",
        "id": 345584955,
        "sender_full_name": "Sean",
        "timestamp": 1680161192
    },
    {
        "content": "<p>Myself, I would approach it the way I mentioned a few days ago.  Assume you have the brep_simple object.  Now make it so you can move any of the vertices, edges, or surfaces (maintaining connectivity/topology) of that cube.  Once that's all working, and that'd likely take a month, then focus on creating that brep_simple cube on the command-line (<em>however</em> you can achieve that easily).  That'd be basic construction and another month.  With those two achieved, just about any edit operation should be possible and it stays focused on the end-user's perspective, not the data structure. </p>\n<p>Basically keep it simple.  Do the simplest things first like moving existing things around, and tackle the harder problems when nothing simpler remains.</p>",
        "id": 345586326,
        "sender_full_name": "Sean",
        "timestamp": 1680161563
    },
    {
        "content": "<p>OK, I will start with simple operations like create, move vertices as you said. Think of the wiki as a borader suggestion.</p>",
        "id": 345608106,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680167182
    },
    {
        "content": "<p>I give a detailed description about operations on wiki. I will update the wiki if my description meets our expectations about NURBS editing. <a href=\"https://drive.google.com/file/d/1mKVNlSQXQT6YlFb-OBPjw9mGGKBoPo4W/view?usp=sharing\">detailed description</a></p>",
        "id": 345608765,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680167375
    },
    {
        "content": "<p>The most important point from the task description is for me:</p>\n<blockquote>\n<p>The key-feature would be to have ged command(s) that lets you build NURBS objects from scratch. This could be done by having a declarative ASCII description of these entities and/or wrapping the openNURBS library by a scripting language.</p>\n</blockquote>\n<p>It comes from the need to convert NURBS-like entities from another program. The project, this was part of, ended however some years ago. Nevertheless, I would like to have it, in case I need it again.</p>",
        "id": 345617783,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1680169530
    },
    {
        "content": "<p>This can be read as \"<em>The key-feature would be to have a ged command that lets you build NURBS objects from scratch. This could be done by having a declarative ASCII description of these entities.</em>\" too</p>",
        "id": 345618653,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1680169740
    },
    {
        "content": "<p>I can imagine two approaches, I think these are what we want to do.</p>\n<ol>\n<li>Create a primitive and turn it into brep format. Then modify geometry(vertices,curves,surfaces) and topology(trim,edge..) Just like make changes based on the blueprint.</li>\n<li>Make an empty brep, then add geometry and topology infomation into it.</li>\n</ol>",
        "id": 345640738,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680175653
    },
    {
        "content": "<p>For #1, we have implemented the first half of it.</p>",
        "id": 345641346,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680175802
    },
    {
        "content": "<p>So in general we need to <strong>create and modify geometry and topology</strong> of a brep using command line or interface. I hope I'm right.</p>",
        "id": 345642876,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680176169
    },
    {
        "content": "<p>Yes, I think what you've described is basically edit existing brep vs create brep from scratch.  Both have strong use cases, and both are non-capabilities at the moment.  Their need is far greater than higher level operations like lofting, fillets/bevels, reparameterization, etc.</p>",
        "id": 345838361,
        "sender_full_name": "Sean",
        "timestamp": 1680238630
    },
    {
        "content": "<p>Hi, I have made a draft of my proposal. Please review my proposal <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <br>\n<a href=\"https://drive.google.com/file/d/1NUOx-cnQrl5c9-W_k8_a8bqZ7xmJxEpW/view?usp=sharing\">https://drive.google.com/file/d/1NUOx-cnQrl5c9-W_k8_a8bqZ7xmJxEpW/view?usp=sharing</a></p>",
        "id": 346094095,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680316159
    },
    {
        "content": "<p>I think \"brep editing\" is a better name than \"NURBS editing\". Brep involves geometry and topology. NURBS is a part of geometry. What do you think?</p>",
        "id": 346277141,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680398618
    },
    {
        "content": "<p>while we call the entity \"brep\" and currently only store nurbs in them, boundary representation is a broad term and can refer to polygonal meshes, NURBS, sketches (but not extrudes), and a few others.</p>",
        "id": 346297039,
        "sender_full_name": "Sean",
        "timestamp": 1680414119
    },
    {
        "content": "<p>Yeah, 'brep' is too broad for the project.</p>",
        "id": 346308606,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680420690
    },
    {
        "content": "<p>I think some plot functions are needed to help users to select control vertex etc. Just like blender draw a control vertex mesh of NURBS surface.<br>\n<a href=\"/user_uploads/1549/OEoZrI9NzCUWjVHbn0RWPXSQ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/OEoZrI9NzCUWjVHbn0RWPXSQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/OEoZrI9NzCUWjVHbn0RWPXSQ/image.png\"></a></div>",
        "id": 346309089,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680420917
    },
    {
        "content": "<p>I updated my proposal with few changes. <a href=\"https://drive.google.com/file/d/1o5IfQQSHajEZSZsXUkGBWlmw7JZtjbJO/view?usp=sharing\">https://drive.google.com/file/d/1o5IfQQSHajEZSZsXUkGBWlmw7JZtjbJO/view?usp=sharing</a></p>",
        "id": 346361522,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680442837
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/6QzFCm3tTHnjweXWrHya_6ps/image.png\">image.png</a> <a href=\"/user_uploads/1549/F9Qm2JE0hWrnHWoWAWe13JuT/image.png\">image.png</a><br>\nI can move curves through cmd now. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/6QzFCm3tTHnjweXWrHya_6ps/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/6QzFCm3tTHnjweXWrHya_6ps/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/1549/F9Qm2JE0hWrnHWoWAWe13JuT/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/F9Qm2JE0hWrnHWoWAWe13JuT/image.png\"></a></div>",
        "id": 347326770,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680767326
    },
    {
        "content": "<p>I wrote this function by imitating <code>_brep_cmd_flip</code>. When we modify a brep object, we copy a new one ande delete the old object. I feel it's strange to do it this way. Won't this reduce efficiency?</p>",
        "id": 347328600,
        "sender_full_name": "GregoryLi",
        "timestamp": 1680767926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"491779\">@GregoryLi</span> depends on the nature and size of the edit.  a very large brep with lots of data will be inefficient, but whether that matters or is even noticeable by users remains to be seen.  by doing the edit on a separate copy, that at least avoids a slew of validation code that'd be needed otherwise if/when an edit fails or cannot be applied.</p>",
        "id": 352182377,
        "sender_full_name": "Sean",
        "timestamp": 1682319991
    },
    {
        "content": "<p>worth noting that approach is also consistent with bot editing, which are typically as big or bigger than nurbs, with minimal impact.</p>",
        "id": 352182544,
        "sender_full_name": "Sean",
        "timestamp": 1682320048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"491779\">@GregoryLi</span>  Congratulations on getting selected in GSoC 2023. Looking forward to work with you <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 357043491,
        "sender_full_name": "Amanjot Singh",
        "timestamp": 1683650510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"403746\">Amanjot Singh</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/357043491\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"491779\">GregoryLi</span>  Congratulations on getting selected in GSoC 2023. Looking forward to work with you <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n</blockquote>\n<p>thanks! I'm very excited to be selected <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I will check up the checklist :)</p>",
        "id": 357122317,
        "sender_full_name": "GregoryLi",
        "timestamp": 1683676867
    },
    {
        "content": "<p>I'm trying to create an empty brep using command line, but I can't access <code>ON_brep</code> in <code>make.c</code>. I can only access <code>_on_brep_placeholder</code> in include/brep/defines.h, a placeholder when compiling with a C compiler.</p>",
        "id": 357122828,
        "sender_full_name": "GregoryLi",
        "timestamp": 1683677161
    },
    {
        "content": "<p>Now I add a <code>brep_create</code> command. I can create an empty brep using \"brep_create &lt;brep_name&gt;\". But I think a subcommad of make like \"make  &lt;brep_name&gt;  brep\" is more suitable. Can you tell me what shall I do?</p>",
        "id": 357123378,
        "sender_full_name": "GregoryLi",
        "timestamp": 1683677447
    },
    {
        "content": "<p>Did you had a look at libwdb? There is a brep.cpp with a <code>mk_brep</code> function. The low level database object creation functions should go to libwdb.</p>",
        "id": 357191264,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1683704806
    },
    {
        "content": "<p>Regarding the methodology used in make.c: Maybe, you can use the NMGs in libnmg as a kind of template. E.g., there is a function <code>nmg_mm()</code>, which creates a new empty NMG. Can you do something similar in libbrep?</p>",
        "id": 357195830,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1683705789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"491779\">GregoryLi</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/357122828\">said</a>:</p>\n<blockquote>\n<p>I'm trying to create an empty brep using command line, but I can't access <code>ON_brep</code> in <code>make.c</code>. I can only access <code>_on_brep_placeholder</code> in include/brep/defines.h, a placeholder when compiling with a C compiler.</p>\n</blockquote>\n<p>ON_brep is a C++ class, so any code that accesses, creates, inspects, or otherwise uses one needs to be from within a C++ source file.  For C files, it resolves to a pointer placeholder that you can't do anything with.</p>",
        "id": 357408871,
        "sender_full_name": "Sean",
        "timestamp": 1683754768
    },
    {
        "content": "<p>Basically, add a new c++ file, and access code through C functions if you need to bridge to an existing C file like make.c</p>",
        "id": 357409016,
        "sender_full_name": "Sean",
        "timestamp": 1683754818
    },
    {
        "content": "<p>I'm using <code>mk_brep</code> in my 'brep_create` command. I hope to call 'brep_create' command in 'make.c' using 'ged_exec()'. 'brep_create' command run but error occurs. I have checked and verified that all the parameters in 'brep_create' are correct.<br>\nLog info:</p>\n<div class=\"codehilite\"><pre><span></span><code>rt_db_cvt_to_external5(A_b):  ft_export5 failure\nrt_db_put_internal5(A_b):  export failure\n</code></pre></div>",
        "id": 357725892,
        "sender_full_name": "GregoryLi",
        "timestamp": 1683853365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/357409016\">said</a>:</p>\n<blockquote>\n<p>Basically, add a new c++ file, and access code through C functions if you need to bridge to an existing C file like make.c</p>\n</blockquote>\n<p>I'll try to make a bridge to call <code>mk_brep</code> function. Thanks!</p>",
        "id": 357726123,
        "sender_full_name": "GregoryLi",
        "timestamp": 1683853470
    },
    {
        "content": "<p>I tried two methods to call <code>mk_brep</code>, but both had problems.</p>",
        "id": 359352327,
        "sender_full_name": "GregoryLi",
        "timestamp": 1684404718
    },
    {
        "content": "<ol>\n<li>I made a command to create an empty brep object: <code>brep_create [brep_name]</code> and it works well. Then I add a subcommand in <code>make</code> like <code>make [brep_name] brep</code> to call <code>brep_create</code> command using <code>ged_exec()</code>.<br>\nWhen I run <code>make [brep_name] brep</code>, I get this error message: <code>Error: Database write failure</code>. But if I add or delete any other object, the brep object occurs, which means it's created but didn't display.<br>\nI am certain that the parameters passed in through direct calling and through invoking <code>make [brep_name]  brep</code> are the same.</li>\n</ol>",
        "id": 359353715,
        "sender_full_name": "GregoryLi",
        "timestamp": 1684405147
    },
    {
        "content": "<ol start=\"2\">\n<li>The second method is to call <code>mk_brep()</code> directly in <code>make</code>. The problem that appeared is exactly the same.</li>\n</ol>",
        "id": 359354228,
        "sender_full_name": "GregoryLi",
        "timestamp": 1684405277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <span class=\"user-mention\" data-user-id=\"403746\">@Amanjot Singh</span>  Where do you think the problem lies? Could it be due to the addition of locks or something similar in the <code>make</code> command?</p>",
        "id": 359354652,
        "sender_full_name": "GregoryLi",
        "timestamp": 1684405392
    },
    {
        "content": "<p>Can you show us your code? Do you have a github account?</p>",
        "id": 359411863,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1684419960
    },
    {
        "content": "<p>Yes, it's quite simple. <a href=\"https://github.com/GregoryLi0/brlcad/commit/97dfd3b85f1dc68a23627fdcc4ae22c67b0db7ab\">https://github.com/GregoryLi0/brlcad/commit/97dfd3b85f1dc68a23627fdcc4ae22c67b0db7ab</a></p>",
        "id": 359523874,
        "sender_full_name": "GregoryLi",
        "timestamp": 1684457855
    },
    {
        "content": "<p>For comparison, <code>brep_craete</code> command is here. <a href=\"https://github.com/BRL-CAD/brlcad/commit/4ac8818438ac0f3fbb2f830a22d89fc71ebfc093\">https://github.com/BRL-CAD/brlcad/commit/4ac8818438ac0f3fbb2f830a22d89fc71ebfc093</a></p>",
        "id": 359524388,
        "sender_full_name": "GregoryLi",
        "timestamp": 1684458284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"491779\">@GregoryLi</span> What's getting written to disk is &amp;internal, which you don't set/initialize</p>",
        "id": 359759711,
        "sender_full_name": "Sean",
        "timestamp": 1684527415
    },
    {
        "content": "<p>It's also strange to me that you'd call wdb_dbopen().. I see that hyp is also calling that, but I think that's \"a mistake\" of sorts -- someone was being lazy and I think creating a memory issue (they don't call close).</p>",
        "id": 359760179,
        "sender_full_name": "Sean",
        "timestamp": 1684527584
    },
    {
        "content": "<p>You'll want to initialize the &amp;internal like the other primitives.  The only complication you have is that you need the pointer to the brep.  I don't think you want to call mk_brep().  Probably better to make a function that returns a void* to the brep -- can make mk_brep() call that as well as in ged_make_core().</p>",
        "id": 359760700,
        "sender_full_name": "Sean",
        "timestamp": 1684527780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/359760700\">said</a>:</p>\n<blockquote>\n<p>You'll want to initialize the &amp;internal like the other primitives.  The only complication you have is that you need the pointer to the brep.  I don't think you want to call mk_brep().  Probably better to make a function that returns a void* to the brep -- can make mk_brep() call that as well as in ged_make_core().</p>\n</blockquote>\n<p>It works! Thanks <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 360451820,
        "sender_full_name": "GregoryLi",
        "timestamp": 1684827595
    },
    {
        "content": "<p>Now, I am able to create an empty BREP object and generate new curves within it. However, it should be noted that only a limited number of parameters can be configured now.</p>",
        "id": 361217065,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685077793
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/WoDCu6_0wTaR4CElRq3iUr06/2023-05-26_12-51.png\">2023-05-26_12-51.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/WoDCu6_0wTaR4CElRq3iUr06/2023-05-26_12-51.png\" title=\"2023-05-26_12-51.png\"><img src=\"/user_uploads/1549/WoDCu6_0wTaR4CElRq3iUr06/2023-05-26_12-51.png\"></a></div>",
        "id": 361217075,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685077798
    },
    {
        "content": "<p>I think users can input simple information such as the dimensions and degree of the curve using \"brep [name] create_curve [curve_info]\", while the specific information on controlling point positions could be set by other commands. You think it's a good idea?</p>",
        "id": 361217570,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685078082
    },
    {
        "content": "<p>Well, I have researched some alternative libraries... NURBS-Python, blender-python requires lots of codes to create a curve.</p>",
        "id": 361217945,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685078337
    },
    {
        "content": "<p>The Python script for creating nurbs curves in Blender is more concise.<br>\n<a href=\"/user_uploads/1549/FVSw6RR2WI8-ELxfwm7LJ63A/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/FVSw6RR2WI8-ELxfwm7LJ63A/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/FVSw6RR2WI8-ELxfwm7LJ63A/image.png\"></a></div>",
        "id": 361218204,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685078499
    },
    {
        "content": "<p>Btw, is there a plugin in VScode that can automatically format our code? The auto-formatting tool in VScode tends to mass up the existing code.</p>",
        "id": 361218499,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685078651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  Hi, I updated codes about <code>make [name] brep</code>. I created function <code>brep_create_empty_brep()</code> in libbrep to create <code>rt_brep_internal</code>.</p>",
        "id": 363422404,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685855510
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/6b4PSCfqSAcBQ4E3D1G29i1F/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/6b4PSCfqSAcBQ4E3D1G29i1F/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/6b4PSCfqSAcBQ4E3D1G29i1F/image.png\"></a></div>",
        "id": 363422407,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685855515
    },
    {
        "content": "<p>It seems to be running well.</p>",
        "id": 363422506,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685855581
    },
    {
        "content": "<p>Nice <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 363513334,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1685890086
    },
    {
        "content": "<p>Some comments regarding your code:</p>\n<ul>\n<li>You created the edit.h and edit.cpp files with copy-n-paste. There is nothing wrong with it, as long as you read carefully through them:<ul>\n<li>Adapt the header to the new purpose: File name, copyright, ...</li>\n<li>Recreate the includes, include those headers only, which are really needed.</li>\n</ul>\n</li>\n<li>In my opinion, <code>brep_create_empty_brep()</code> is an unusual long function name, for what it does. How about<ul>\n<li><code>brep_create()</code> for constructing a new rt_brep_internal?</li>\n<li><code>brep_add_~</code>, <code>brep_insert_~</code> for adding new curves, etc.?</li>\n<li><code>brep_remove_~</code> for deleting features?</li>\n<li>...</li>\n</ul>\n</li>\n</ul>",
        "id": 363516912,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1685891371
    },
    {
        "content": "<p>I'm getting a compilation warning/error:</p>\n<div class=\"codehilite\"><pre><span></span><code>/home/rossberg/Devel/BRL-CAD/brlcad.GregoryLi0/src/libged/make/make.c:75:27: error: unused variable ‘brep_ip’ [-Werror=unused-variable]\n   75 |  struct rt_brep_internal *brep_ip;\n      |                           ^~~~~~~\ncc1: all warnings being treated as errors\n</code></pre></div>",
        "id": 363539726,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1685899164
    },
    {
        "content": "<p>Thanks! I will shorten the names of these functions and fix the error.</p>",
        "id": 363589059,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685927195
    },
    {
        "content": "<p>And now I think <code>brep_create()</code> in libbrep should create an <code>ON_Brep</code> instead of <code>rt_brep_internal</code> like other primitives in <code>make.c</code>.</p>",
        "id": 363589340,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685927399
    },
    {
        "content": "<p>Does rt means ray tracing? I tracked <code>boolean</code> subcommand of <code>brep</code>, the function call stack is <code>libged/_brep_cmd_boolean() </code>→ <code>librt/rt_brep_boolean()</code> → <code>libbrep/ON_Boolean()</code>. I'm not sure why we shall go through librt..</p>",
        "id": 363680129,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685961573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  I think the brep editing operations shall be implemented in <code>libbrep</code>, and we can access them directly in <code>libged</code>?</p>",
        "id": 363680659,
        "sender_full_name": "GregoryLi",
        "timestamp": 1685961715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"491779\">GregoryLi</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/363680129\">said</a>:</p>\n<blockquote>\n<p>Does rt means ray tracing? I tracked <code>boolean</code> subcommand of <code>brep</code>, the function call stack is <code>libged/_brep_cmd_boolean() </code>→ <code>librt/rt_brep_boolean()</code> → <code>libbrep/ON_Boolean()</code>. I'm not sure why we shall go through librt..</p>\n</blockquote>\n<p><strong>rt</strong> stands for \"ray-trace\", and it is the prefix of librt's symbols. The point is that both the librt ray-tracing as well as the libged brep bool sub-command need the functionality in rt_brep_boolean(). See the comment for the include of this function in src/libged/brep/brep.c: librt may not be the final place/rt_brep_boolean not the final name of this function.</p>\n<p>However, editing the breps (NURBS) is not directly connected with ray-tracing, and the low level code should go to <code>libbrep</code>, where it can be accessed from <code>libged</code>.</p>",
        "id": 363801867,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1685987823
    },
    {
        "content": "<p>Yeah, thanks. Now the development is going well, slightly ahead of schedule.</p>",
        "id": 364172999,
        "sender_full_name": "GregoryLi",
        "timestamp": 1686118461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  Hi, I have just submitted the PR for Milestone 1 as schedule. (<a href=\"https://github.com/BRL-CAD/brlcad/pull/80\">https://github.com/BRL-CAD/brlcad/pull/80</a>). Let me know if you have any feedback, suggestions, or questions :)</p>",
        "id": 369072299,
        "sender_full_name": "GregoryLi",
        "timestamp": 1687580185
    },
    {
        "content": "<p>Actually, some of the tasks for Milestone 2 have already been completed. I'm planning to conduct further research and define the required function functionalities.</p>",
        "id": 369072489,
        "sender_full_name": "GregoryLi",
        "timestamp": 1687580316
    },
    {
        "content": "<p>Do you have some examples and/or advice about how to test the new features?</p>",
        "id": 369227863,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1687624519
    },
    {
        "content": "<p>I will write a shell script to test them, as well as change my code styles.</p>",
        "id": 369282123,
        "sender_full_name": "GregoryLi",
        "timestamp": 1687653435
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/CUHb-bcUa0ttAhHcXHtIEMGK/brep_curve_edit.sh\">brep_curve_edit.sh</a><br>\n<a href=\"/user_uploads/1549/v3eYIhN9ruBFUtr5-XktdJ3K/brep_surface_edit.sh\">brep_surface_edit.sh</a><br>\nI made two shell scripts to perfrom curves &amp; surfaces operations. You can also execute these commands step by step and monitor the changes in data using the \"brep .. info\" command. <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span></p>",
        "id": 369296468,
        "sender_full_name": "GregoryLi",
        "timestamp": 1687661535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"491779\">@GregoryLi</span>, please, consider my comment on <a href=\"https://github.com/BRL-CAD/brlcad/pull/80\">https://github.com/BRL-CAD/brlcad/pull/80</a> too.</p>",
        "id": 369464734,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1687712757
    },
    {
        "content": "<p>I see <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\n<a href=\"/user_uploads/1549/Jrxk96Fck6tTeEYK3SEu-BM8/Screenshot.png\">Screenshot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/Jrxk96Fck6tTeEYK3SEu-BM8/Screenshot.png\" title=\"Screenshot.png\"><img src=\"/user_uploads/1549/Jrxk96Fck6tTeEYK3SEu-BM8/Screenshot.png\"></a></div>",
        "id": 369474209,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1687715396
    },
    {
        "content": "<p>Yes, I'm checking and modifying my codes.</p>",
        "id": 369527417,
        "sender_full_name": "GregoryLi",
        "timestamp": 1687740557
    },
    {
        "content": "<p>Thanks, I saw your modifications. I may need however some days to review them...</p>",
        "id": 369930823,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1687848745
    },
    {
        "content": "<p>That's alright :) I'm now implementing local cubic curve interpolation, to support functions like <em>InterpCrv</em> in <em>Rhino</em>.</p>",
        "id": 369945288,
        "sender_full_name": "GregoryLi",
        "timestamp": 1687851811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"491779\">@GregoryLi</span> can you show me an example for making a brep cone?</p>",
        "id": 373792581,
        "sender_full_name": "Sean",
        "timestamp": 1688944748
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 373798002,
        "sender_full_name": "GregoryLi",
        "timestamp": 1688948756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/373792581\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"491779\">GregoryLi</span> can you show me an example for making a brep cone?</p>\n</blockquote>\n<p>I'm currently unable to create a brep cone using the mged command. While NURBS curve/surface editing operations are now supported, topology operations are not yet supported. I can make it by cpp code.</p>",
        "id": 373798128,
        "sender_full_name": "GregoryLi",
        "timestamp": 1688948801
    },
    {
        "content": "<p>The topology modification function belongs to milestone3(July 25 - August 21) in the schedule. But the current progress is about one week ahead of schedule,I plan to handle topology operations after writing the NURBS editing operation documentation.</p>",
        "id": 373799105,
        "sender_full_name": "GregoryLi",
        "timestamp": 1688949261
    },
    {
        "content": "<p>And I am also considering and looking at other software about brep operations. I think it is inappropriate to wrap all NURBS operations into mged command lines for users. Maybe the topology operations shall be implicitly included in. For example:<br>\nIf we want to make a cylinder by a circle and a line. We can run 'extrude' cmd. Topology operations are implicitly included in.</p>",
        "id": 373800592,
        "sender_full_name": "GregoryLi",
        "timestamp": 1688949896
    },
    {
        "content": "<p>Hi, I was one week away to join a meeting :) The current project schedule and timeline are aligned. I'm going to submit PR of Milestone 2 this weekend. PR 2 includes advanced NURBS geometry operations: curve/surface interpolation, create surface by tensor product and rotating a curve.</p>",
        "id": 378316182,
        "sender_full_name": "GregoryLi",
        "timestamp": 1690250004
    },
    {
        "content": "<p>There are still some issues with the last feature <strong>Surface interpolation</strong>. I want to achieve higher continuity with fewer control points following <strong>The NURBS Book</strong>. This is quite different with the already realized <strong>local curve interpolation</strong>. I do apologize for being confused by the complexity of the math formula. <span aria-label=\"face with spiral eyes\" class=\"emoji emoji-1f635-200d-1f4ab\" role=\"img\" title=\"face with spiral eyes\">:face_with_spiral_eyes:</span><br>\nI should need another two or three days to implement it and prepare PR2.</p>",
        "id": 380004176,
        "sender_full_name": "GregoryLi",
        "timestamp": 1690716414
    },
    {
        "content": "<p>This can happen that problems turn out to be harder than expected. And, NURBS have some heavy math. Therefore, thanks for letting us know. I'm optimistic that you will overcome the difficulties. A few day more doesn't matter there.</p>",
        "id": 380092452,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1690737968
    },
    {
        "content": "<p>Hi, I just submit PR of milestone 2 :).  <a href=\"https://github.com/BRL-CAD/brlcad/pull/92\">https://github.com/BRL-CAD/brlcad/pull/92</a><br>\nThere are some potential threats to the ''remove'' operation now as my comment in github PR.</p>",
        "id": 380592721,
        "sender_full_name": "GregoryLi",
        "timestamp": 1690876802
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/PspvB6vEmOgnEeQ680gHpTvi/brep_curve_edit.sh\">brep_curve_edit.sh</a><br>\n<a href=\"/user_uploads/1549/BEi7fM2kaaAlN5loZmKHVCrM/brep_surface_edit.sh\">brep_surface_edit.sh</a><br>\nHere are two shell script  to test new features of milestone 2.</p>",
        "id": 380592911,
        "sender_full_name": "GregoryLi",
        "timestamp": 1690876839
    },
    {
        "content": "<p>Hi Daniel, I'm working on the issues you pointed out. But I didn't have the environment to compile the code until the day after tomorrow. Sorry about that :(</p>",
        "id": 382689930,
        "sender_full_name": "GregoryLi",
        "timestamp": 1691424530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"491779\">GregoryLi</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/373799105\">said</a>:</p>\n<blockquote>\n<p>The topology modification function belongs to milestone3(July 25 - August 21) in the schedule. But the current progress is about one week ahead of schedule,I plan to handle topology operations after writing the NURBS editing operation documentation.</p>\n</blockquote>\n<p>How's the topology operations coming along? :)</p>",
        "id": 383776950,
        "sender_full_name": "Sean",
        "timestamp": 1691708696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I've been working with Daniel on the PR2 merge recently. It's about a week or two behind schedule.</p>",
        "id": 383957881,
        "sender_full_name": "GregoryLi",
        "timestamp": 1691759714
    },
    {
        "content": "<p>Regarding the topology operations, I was able to and plan to simply wrap topology operations into command line operations, although these commands will look very weird and require a lot of parameters.</p>",
        "id": 383958562,
        "sender_full_name": "GregoryLi",
        "timestamp": 1691759839
    },
    {
        "content": "<p>I had previously planned to make the topology operations implicit in the higher order operations. For example, having a line rotate around an axis while encapsulating the top and bottom sides and establishing topological relationships. But these operations are not very popular. So I am wrapping the basic topological operations in the command line.</p>",
        "id": 383958738,
        "sender_full_name": "GregoryLi",
        "timestamp": 1691759873
    },
    {
        "content": "<p>Yeah, I don't think you should focus on anything higher order, without something low-level in place first.  I mean a really basic goal should be creating a sphere from one surface and/or creating a tetra, box, or sphere from multiple surfaces.</p>",
        "id": 385845077,
        "sender_full_name": "Sean",
        "timestamp": 1692344419
    },
    {
        "content": "<p>Doesn't matter if it's verbose or not.   I think the subcommand structure you have is probably halfway there already.    For example, could be something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>brep mycube create\nbrep mycube create_surface -name bottom -u 1 -v 1 -control_points \"0,0,0 1,0,0 0,1,0 1,1,0\" -weights \"1 1 1 1\" -knots_u \"0 1\" -knots_v \"0 1\"\nbrep mycube create_surface -name top -u 1 -v 1 -control_points \"0,0,1 1,0,1 0,1,1 1,1,1\" -weights \"1 1 1 1\" -knots_u \"0 1\" -knots_v \"0 1\"\nbrep mycube create_surface -name left -u 1 -v 1 -control_points \"0,0,0 0,0,1 0,1,0 0,1,1\" -weights \"1 1 1 1\" -knots_u \"0 1\" -knots_v \"0 1\"\nbrep mycube create_surface -name right -u 1 -v 1 -control_points \"1,0,0 1,0,1 1,1,0 1,1,1\" -weights \"1 1 1 1\" -knots_u \"0 1\" -knots_v \"0 1\"\nbrep mycube create_surface -name front -u 1 -v 1 -control_points \"0,0,0 1,0,0 0,0,1 1,0,1\" -weights \"1 1 1 1\" -knots_u \"0 1\" -knots_v \"0 1\"\nbrep mycube create_surface -name back -u 1 -v 1 -control_points \"0,1,0 1,1,0 0,1,1 1,1,1\" -weights \"1 1 1 1\" -knots_u \"0 1\" -knots_v \"0 1\"\n\n# some command that figures out topology automatically\nbrep mycube sew_surfaces -surfaces \"bottom,top,left,right,front,back\"\n</code></pre></div>\n<p>Or  a diff entirely manual approach with indices:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>brep mycube add_point 0 0 0    # Point 0\nbrep mycube add_point 1 0 0    # Point 1\nbrep mycube add_point 0 1 0    # Point 2\nbrep mycube add_point 1 1 0    # Point 3\nbrep mycube add_point 0 0 1    # Point 4\nbrep mycube add_point 1 0 1    # Point 5\nbrep mycube add_point 0 1 1    # Point 6\nbrep mycube add_point 1 1 1    # Point 7\nbrep mycube create_edge 0 1   # Edge 0\nbrep mycube create_edge 2 3   # Edge 1\nbrep mycube create_edge 4 5   # Edge 2\nbrep mycube create_edge 6 7   # Edge 3\n...\nbrep mycube create_surface -u 1 -v 1 -points \"0,1,2,3\"  # Surface 0\nbrep mycube create_surface -u 1 -v 1 -points \"4,5,6,7\"  # Surface 1\nbrep mycube create_surface -u 1 -v 1 -points \"0,4,2,6\"  # Surface 2\nbrep mycube create_surface -u 1 -v 1 -points \"1,5,3,7\"  # Surface 3\nbrep mycube create_surface -u 1 -v 1 -points \"0,4,1,5\"  # Surface 4\nbrep mycube create_surface -u 1 -v 1 -points \"2,6,3,7\"  # Surface 5\n\nbrep mycube create_face -surface 0 -edges \"0,1,2,3\" # Face 0\nbrep mycube create_face -surface 1 -edges \"0,1,2,3\" # Face 1\nbrep mycube create_face -surface 2 -edges \"0,1,2,3\" # Face 2\nbrep mycube create_face -surface 3 -edges \"0,1,2,3\" # Face 3\nbrep mycube create_face -surface 4 -edges \"0,1,2,3\" # Face 4\nbrep mycube create_face -surface 5 -edges \"0,1,2,3\" # Face 5\n\nbrep mycube assemble -faces \"0,1,2,3,4,5\"\n</code></pre></div>",
        "id": 385855250,
        "sender_full_name": "Sean",
        "timestamp": 1692346764
    },
    {
        "content": "<p>Yeah, I can create a geometry face and indicates its topology info using <strong>mged</strong> commands just now. Although the topology commands seems not easy to use. For example, you have to type in edge ids and if they shall be flipped or not.</p>",
        "id": 385941870,
        "sender_full_name": "GregoryLi",
        "timestamp": 1692372352
    },
    {
        "content": "<p>I plan to implement geometrical and topological representation for the polyhedron within a week. And I need to rearrange the geometry and topology editing operations.</p>",
        "id": 385942439,
        "sender_full_name": "GregoryLi",
        "timestamp": 1692372550
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/7gDoPm63WG5OxDg7CbQNQe7N/image.png\">image.png</a><br>\n<a href=\"/user_uploads/1549/2tDk_lXZO3yjYay6yNxoMHeC/image.png\">image.png</a><br>\nHi, I'm able to create valid brep object though mged commands with shell scripts, and I rearranged brep editing operations into <em>geometry</em> and <em>topology</em> two parts.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/7gDoPm63WG5OxDg7CbQNQe7N/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/7gDoPm63WG5OxDg7CbQNQe7N/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/1549/2tDk_lXZO3yjYay6yNxoMHeC/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/2tDk_lXZO3yjYay6yNxoMHeC/image.png\"></a></div>",
        "id": 386890072,
        "sender_full_name": "GregoryLi",
        "timestamp": 1692802337
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/nHbi_QR-dnwtxGKU8huC3PMx/image.png\">image.png</a><br>\n<a href=\"/user_uploads/1549/2GIbnT21WPzKsFgI09rL-baj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/nHbi_QR-dnwtxGKU8huC3PMx/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/nHbi_QR-dnwtxGKU8huC3PMx/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/1549/2GIbnT21WPzKsFgI09rL-baj/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/2GIbnT21WPzKsFgI09rL-baj/image.png\"></a></div>",
        "id": 386890299,
        "sender_full_name": "GregoryLi",
        "timestamp": 1692802371
    },
    {
        "content": "<p>I'm preparing for my final submission and list possible problems and areas that need to be developed. I expect to be able to continue to contribute to this module :)</p>",
        "id": 386891401,
        "sender_full_name": "GregoryLi",
        "timestamp": 1692802586
    },
    {
        "content": "<p>Hi, I just committed my PR of milestone 3. (<a href=\"https://github.com/BRL-CAD/brlcad/pull/97\">https://github.com/BRL-CAD/brlcad/pull/97</a>)</p>",
        "id": 387080658,
        "sender_full_name": "GregoryLi",
        "timestamp": 1692885354
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/gZLHwGQpNAhYNZLnOHB2a-G4/seven_eighths_cube.sh\">seven_eighths_cube.sh</a><br>\n<a href=\"/user_uploads/1549/v1hi6VaBc9FStCYtyummAh_m/triangular_prism.sh\">triangular_prism.sh</a><br>\nThese are the shell scripts that reproduce the above test cases.</p>",
        "id": 387080899,
        "sender_full_name": "GregoryLi",
        "timestamp": 1692885418
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I'll have a look at it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 387100710,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1692889691
    },
    {
        "content": "<p>After creating faces with <code>brep brep_t topo f_create</code> I'm getting</p>\n<div class=\"codehilite\"><pre><span></span><code>face 0 is not valid, skippingface 1 is not valid, skippingface 2 is not valid, skippingface 3 is not valid, skippingface 4 is not valid, skipping\n</code></pre></div>\n<p>with <code>brep brep_t plot F</code>. Is this expected?</p>",
        "id": 387439409,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1693066237
    },
    {
        "content": "<p>A face is invalid if it does not have a valid loop. So this is expected.</p>",
        "id": 387779656,
        "sender_full_name": "GregoryLi",
        "timestamp": 1693269115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"491779\">@GregoryLi</span> so why are the loops not valid?  the count of them appears to be correct.  are they not going in the right directions?</p>",
        "id": 388024573,
        "sender_full_name": "Sean",
        "timestamp": 1693366901
    },
    {
        "content": "<p>Did you get the logs running the shell scripts?</p>",
        "id": 388025497,
        "sender_full_name": "GregoryLi",
        "timestamp": 1693367426
    },
    {
        "content": "<p>A loop is valid if the edges of the loop are connected to form a circle.</p>",
        "id": 388025605,
        "sender_full_name": "GregoryLi",
        "timestamp": 1693367500
    },
    {
        "content": "<p>That means, if we want to get a valid face, we need to:</p>\n<ol>\n<li>Create a geometry surface</li>\n<li>Create several geometry vertices on the surface</li>\n<li>Create several geometry 3D curves on the surface to connect the vertices</li>\n<li>Create several geometry 2D curves on the parameter space of the surface. The parameter curves correspond to geometric curves in 3D space.</li>\n<li>Create the topology face of the surface</li>\n<li>Create a topology loop on the face</li>\n<li>Create and add topology trims to the loop, using geometry curves and parameter curves<br>\nIf every step is correct, the face is valid.</li>\n</ol>",
        "id": 388026350,
        "sender_full_name": "GregoryLi",
        "timestamp": 1693367922
    },
    {
        "content": "<blockquote>\n<p>After creating faces with <code>brep brep_t topo f_create</code> I'm getting</p>\n<div class=\"codehilite\"><pre><span></span><code>face 0 is not valid, skippingface 1 is not valid, skippingface 2 is not valid, skippingface 3 is not valid, skippingface 4 is not valid, skipping\n</code></pre></div>\n<p>with <code>brep brep_t plot F</code>. Is this expected?</p>\n</blockquote>\n<p>I think that this operation is only up to step 5,  it hasn't created a VALID loop on the face yet</p>",
        "id": 388026545,
        "sender_full_name": "GregoryLi",
        "timestamp": 1693368024
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"491779\">@GregoryLi</span>, please add links to your pull requests to <a href=\"https://brlcad.org/wiki/User:GregoryLi/GSoC2023/DevLog\">https://brlcad.org/wiki/User:GregoryLi/GSoC2023/DevLog</a>. Otherwise, I cannot confirm that the link points to your work.</p>",
        "id": 388569710,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1693589625
    },
    {
        "content": "<p>Thanks! I have attached PR links to the DevLog, and wrote a final report <a href=\"https://brlcad.org/wiki/User:GregoryLi/GSoC2023/FinalReport\">here</a>. I will continue to refine the future expectations of brep operations.</p>",
        "id": 388637168,
        "sender_full_name": "GregoryLi",
        "timestamp": 1693622614
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>, thank you very much for your guidance! I have received the Final Evaluation. I will keep contributing to BRL-CAD <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 389069286,
        "sender_full_name": "GregoryLi",
        "timestamp": 1693872344
    },
    {
        "content": "<p>My next step is NURBS editing using surface-surface intersection. For brep entities with NURBS surfaces, manually inputting all the geometric and topologic objects is quite hard. Getting those objects through surface-surface-intersection will help a lot.</p>",
        "id": 389070049,
        "sender_full_name": "GregoryLi",
        "timestamp": 1693872768
    },
    {
        "content": "<p>The ability to create and modify NURBS makes BRL-CAD much more powerful. Therefore, thank you Gregory <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 389143875,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1693906141
    },
    {
        "content": "<p>Hi, I created lots of test shell scripts for NURBS editing. I think they can be used over time. Do you think they should be uploaded? What directory do you think they should be uploaded to? <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span></p>",
        "id": 394585163,
        "sender_full_name": "GregoryLi",
        "timestamp": 1696321856
    },
    {
        "content": "<p>By the way, I'm adding the Surface-Surface intersection function to the NURBS editing module.</p>",
        "id": 394585385,
        "sender_full_name": "GregoryLi",
        "timestamp": 1696321941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"491779\">GregoryLi</span> <a href=\"#narrow/stream/104062-general/topic/NURBS.20editing/near/394585163\">said</a>:</p>\n<blockquote>\n<p>Hi, I created lots of test shell scripts for NURBS editing. I think they can be used over time. Do you think they should be uploaded? What directory do you think they should be uploaded to? <span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> <span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span></p>\n</blockquote>\n<p>They should definitely be saved somewhere. What came into my mind is <code>src/libbrep/tests/tcl</code>. If the scripts are a good how-to for NURBS editing, <a href=\"https://brlcad.org/wiki/NURBS\">https://brlcad.org/wiki/NURBS</a> would be possible too.</p>",
        "id": 394882845,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1696439248
    },
    {
        "content": "<p>I found “brep .. intersect .. SS” crashes. the <code>dplot</code> object is nullptr while running. If you want to reproduce the problem, you can simply run:</p>\n<div class=\"codehilite\"><pre><span></span><code>make b brep\nbrep b geo c3_create\nbrep b geo c3_in 0 3 3  0 1 0  1 0 0  2 1 0\nbrep b geo c3_in 0 3 3  1 1 -1  1 1.5 0  1 1 1\nbrep b geo s_tensor 0 1\nbrep b geo s_tensor 2 1\nbrep b intersect b 0 1 SS\n</code></pre></div>",
        "id": 395649080,
        "sender_full_name": "GregoryLi",
        "timestamp": 1696841390
    },
    {
        "content": "<p>I solved it here: <a href=\"https://github.com/GregoryLi0/brlcad/commit/6705abd669be63adfddbeb61f9d32980b7f929de\">https://github.com/GregoryLi0/brlcad/commit/6705abd669be63adfddbeb61f9d32980b7f929de</a><br>\n<a href=\"/user_uploads/1549/NUBX0LOVi9eGN7w0WbR6sZk8/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/NUBX0LOVi9eGN7w0WbR6sZk8/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/NUBX0LOVi9eGN7w0WbR6sZk8/image.png\"></a></div>",
        "id": 395649407,
        "sender_full_name": "GregoryLi",
        "timestamp": 1696841509
    }
]