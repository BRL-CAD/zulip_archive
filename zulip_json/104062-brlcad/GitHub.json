[
    {
        "content": "<p>As some of you already know, we're planning on moving our main repository and operations from SourceForge to GitHub real soon now.  It's taken approximately two years (yes <em>years</em>, but worked predominantly on weekends and evenings) to get the entirety of BRL-CAD's repository converted from Subversion to Git.  This work, by Cliff Yapp, has included fairly extensive complicated mappings to preserve as much data as possible, to fix old corruption, to track changes across major disruptions, to verify and validate that everything is preserved.</p>",
        "id": 175366063,
        "sender_full_name": "Sean",
        "timestamp": 1568140771
    },
    {
        "content": "<p>As this is a big change to our development operations, this is an intentional \"open comments\" period for folks to talk, to adjust, ask questions, give feedback, get prepared, explore tutorials, etc.  The intention is to flip the switch in a few weeks.</p>",
        "id": 175366360,
        "sender_full_name": "Sean",
        "timestamp": 1568140952
    },
    {
        "content": "<p>One question that's already been a point of discussion (and some of you have already shared your views privately, thank you) is how to handle the commit e-mail associated with past commits.  If people <em>want</em> them associated with their current GitHub profile/e-mail, then we'll need to set those <em>before</em> migration is complete.  As it currently stands, everyone's commits are associated with a fictitious \"USER@sf\" e-mail.</p>",
        "id": 175366558,
        "sender_full_name": "Sean",
        "timestamp": 1568141083
    },
    {
        "content": "<p>If you'd like your commits associated with a specific name and/or address, please contact me in private or make the change yourself in misc/repoconv/account-map</p>",
        "id": 175366835,
        "sender_full_name": "Sean",
        "timestamp": 1568141248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  so I guess , It is possible to fork from brlcad git</p>",
        "id": 175418002,
        "sender_full_name": "scorp08",
        "timestamp": 1568197491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228172\">@scorp08</span> Yes, of course it will be possible.  Technically it's not hard to fork the Svn repo now, but it will become even easier.</p>",
        "id": 175462608,
        "sender_full_name": "Sean",
        "timestamp": 1568227201
    },
    {
        "content": "<p>We'll still be maintaining a central repository structure to encourage collaboration and accelerated development, but it's all good.  If people feel more empowered to work on the code in a fork than they do in a clone, I'll still be happy to see their development.  Hopefully it won't get too messy and we can actually improve coordination and make it even easier for new developers to get involved with improving the code base.</p>",
        "id": 175462705,
        "sender_full_name": "Sean",
        "timestamp": 1568227247
    },
    {
        "content": "<p>Git?</p>",
        "id": 189390574,
        "sender_full_name": "Erik",
        "timestamp": 1582983009
    },
    {
        "content": "<p>I need a couple more days to contact the last remaining committers to get their e-mails, create aliases for the handful that aren't reachable, then assume another 2 weeks for <span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> to run the reconstruction, followed by maybe 1 more week of validation and testing while uploading to GitHub, and if all goes well, we should be up and running by the end of the month!</p>",
        "id": 189392909,
        "sender_full_name": "Sean",
        "timestamp": 1582987866
    },
    {
        "content": "<p>&lt;squeaky wheel noise&gt;</p>",
        "id": 190598794,
        "sender_full_name": "starseeker",
        "timestamp": 1584194942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> status? anything anyone can do to help? do I need to swing by the farm supply store for a salt lick and a cattle prod to do the \"carrot and stick\" thing? :D</p>",
        "id": 190838466,
        "sender_full_name": "Erik",
        "timestamp": 1584447279
    },
    {
        "content": "<p>ping...</p>",
        "id": 191198599,
        "sender_full_name": "starseeker",
        "timestamp": 1584672703
    },
    {
        "content": "<p>less hearts, more answers, boy. What's the holdup? my git-fu is pretty strong these days and my drives tend to be more than 8 gigs (the drive my home server used when we did cvs-&gt;svn) these days, so I'm not complaining about repo size :D</p>",
        "id": 191419965,
        "sender_full_name": "Erik",
        "timestamp": 1584916639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span>   If you want a preview, you can take a look at <a href=\"https://github.com/starseeker/git_conv_test\" target=\"_blank\" title=\"https://github.com/starseeker/git_conv_test\">https://github.com/starseeker/git_conv_test</a> - it's about 5 months out of date now  and the non-email committer names mess with github's stat calculators, but it should be a pretty fair representation of what the conversion will end up looking like otherwise.  If you want to ,check it out to see how it behaves for you (and see if you spot anything wrong).  If you want the git notes that have the SVN numbers, you'll need to explicitly grab the notes as well with:  git fetch origin refs/notes/commits:refs/notes/commits</p>",
        "id": 191423102,
        "sender_full_name": "starseeker",
        "timestamp": 1584921861
    },
    {
        "content": "<p>The hideous conversion process is laid out in misc/repoconv/CONVERT.sh - it's about as ugly as it gets:  C++ mixed with shell scripts mixed with sed and stream of consciousness quick and dirty hackery , but it seems to (slowly) get the job done.  I'm still not very skilled with using git day-to-day, but I now know quite a bit more than I wanted to about fast import and export and friends.</p>",
        "id": 191423371,
        "sender_full_name": "starseeker",
        "timestamp": 1584922336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> he's been patiently waiting on me. I'm the holdup.  I've been confirming with every past committer since  I have contacts for nearly everyone and they've responded with a plethora of e-mails to use.  I just had a few remaining to contact which got delayed with a tasker at the office and GCI and GSoC prep and server issue and ... delays.  Now with all this ample time on hand (hah), at least time at keyboard, I've been getting through mad backloggage so we should be able to wrap this up with the final pass this week I think.</p>",
        "id": 191426718,
        "sender_full_name": "Sean",
        "timestamp": 1584928633
    },
    {
        "content": "<p>It's not a space issue, it's about having a complete history that doesn't loose anything, which <span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> has gone to exceptional lengths to preserve.  The rest is limitations of github that require real contact info if we want to have real stat preservation.</p>",
        "id": 191426774,
        "sender_full_name": "Sean",
        "timestamp": 1584928712
    },
    {
        "content": "<p>git history is rewritable. mistakes at this stage can be fixed. (rewriting git history is dangerous and expert friendly, but we're not ... committed.</p>",
        "id": 191458271,
        "sender_full_name": "Erik",
        "timestamp": 1584961642
    },
    {
        "content": "<p>good luck wrapping up the last few, if'n ya'll need git or shell help, lemme know, I've been using git almost exclusively since... hm, was it '13 that I left arl to check out the modern world? :D</p>",
        "id": 191458407,
        "sender_full_name": "Erik",
        "timestamp": 1584961718
    },
    {
        "content": "<p>We may not be committed, but once we go live with the new github repo and people start forking rewriting the full history would be highly disruptive.  On the order of what we nearly had to do with the Great SVN Duplicate Commit ID crisis a number of years back.</p>",
        "id": 191464199,
        "sender_full_name": "starseeker",
        "timestamp": 1584965655
    },
    {
        "content": "<p>The chaining of SHA1 hashes is neat for repository integrity, but it means there's no such thing as a local history change.  I spent a lot of time thrashing trying to figure out if I could splice the newer SVN conversion onto the older CVS git conversion, and it took me longer than it should have to realize that it's actually structurally impossible to do that with anything other than a full commit replay of the post-CVS commits on top of the CVS conversion (hello, rabbit hole).</p>\n<p>So since  I REALLY don't want to have to wade through all of that any more times than I need to (there are some finicky manual steps that have to get updated each time the committer emails change, not to mention the delightful experience of mucking around in the swamp mud of my conversion logic) I'm willing to wait for <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  to get it right the first time :-)</p>",
        "id": 191465063,
        "sender_full_name": "starseeker",
        "timestamp": 1584966154
    },
    {
        "content": "<p>Whadya mean \"modern\"?  We use CMake and everything these days!  We're even embracing this newfangled C++11 thing!  Now get off my lawn! :-P</p>",
        "id": 191465345,
        "sender_full_name": "starseeker",
        "timestamp": 1584966308
    },
    {
        "content": "<p>hehe, ch'know, there's a c++17 now :D</p>",
        "id": 191468284,
        "sender_full_name": "Erik",
        "timestamp": 1584968148
    },
    {
        "content": "<p>(still c++, though... swift and go are way nicer... I hear good things about rust, too)</p>",
        "id": 191468444,
        "sender_full_name": "Erik",
        "timestamp": 1584968215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> The plan right now is to also convert all the smaller project histories (including rt^3) to their own individual git repos.  Does git+github work for you for rt^3?  (We have to change the name to rt_3 - the ^ character causes some problems for git..)</p>",
        "id": 191500509,
        "sender_full_name": "starseeker",
        "timestamp": 1584981393
    },
    {
        "content": "<p>Well, sure, I didn't created this name. However, why don't we call it <strong>rt3</strong>?</p>",
        "id": 191503237,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1584982508
    },
    {
        "content": "<p>That's fine too, assuming it works for the converisons - rt_3 was just what I had put in the original svn-fast-export mapping files when I found out ^ wouldn't work.</p>",
        "id": 191511843,
        "sender_full_name": "starseeker",
        "timestamp": 1584986109
    },
    {
        "content": "<p>The \"rt-cubed\" name doesn't need to be preserved.  I would suggest renaming the repo to \"moose\" since that's the name we decided on.</p>",
        "id": 191570618,
        "sender_full_name": "Sean",
        "timestamp": 1585031535
    },
    {
        "content": "<p>or MOOSE ?</p>",
        "id": 191570627,
        "sender_full_name": "Sean",
        "timestamp": 1585031559
    },
    {
        "content": "<p>would be good to disambiguate from <a href=\"https://en.wikipedia.org/wiki/MOOSE_(software)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/MOOSE_(software)\">https://en.wikipedia.org/wiki/MOOSE_(software)</a> in some manner, maybe moose++ or just be fine with moose or ...</p>",
        "id": 191570927,
        "sender_full_name": "Sean",
        "timestamp": 1585031951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> git history is typically rewritable, but we're (thus far) using a feature of git (notes) that precludes rewriting history without rebuilding hashes.  that's because the way git notes are currently implemented, they attach to specific hashes and are not updated on history edits.  they get orphaned.  it's lame, but it's the best solution so far for attaching svn's metadata to specific commits.  open to other solutions.</p>",
        "id": 191571025,
        "sender_full_name": "Sean",
        "timestamp": 1585032107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/191570618\" title=\"#narrow/stream/104062-general/topic/GitHub/near/191570618\">said</a>:</p>\n<blockquote>\n<p>The \"rt-cubed\" name doesn't need to be preserved.  I would suggest renaming the repo to \"moose\" since that's the name we decided on.</p>\n</blockquote>\n<p>I recommend to stay with \"rt-cubed\" name for the conversion, because this branch is more of a sandbox for experimental extensions than C++ interface specific.</p>\n<p>However, I agree with you to aim for an own moose repository for the C++ interface and its belongings in the future.</p>",
        "id": 191574455,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1585035900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/191570927\" title=\"#narrow/stream/104062-general/topic/GitHub/near/191570927\">said</a>:</p>\n<blockquote>\n<p>would be good to disambiguate from <a href=\"https://en.wikipedia.org/wiki/MOOSE_(software)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/MOOSE_(software)\">https://en.wikipedia.org/wiki/MOOSE_(software)</a> in some manner, maybe moose++ or just be fine with moose or ...</p>\n</blockquote>\n<p>I would officially name it <strong>BRL-CAD MOOSE</strong> for \"BRL-CAD Modular Object Oriented Software Extension\". I.e., the MOOSE acronym makes only sense with the BRL-CAD prefix.</p>",
        "id": 191574814,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1585036291
    },
    {
        "content": "<p>software extension?  I thought we had a better backronym. ;)</p>",
        "id": 191575170,
        "sender_full_name": "Sean",
        "timestamp": 1585036662
    },
    {
        "content": "<p>Modular Object-Oriented Solidity Engine</p>",
        "id": 191575223,
        "sender_full_name": "Sean",
        "timestamp": 1585036688
    },
    {
        "content": "<p>Whatever <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span><br>\nImportant is the name MOOSE with its wonderful logo.</p>",
        "id": 191575604,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1585036962
    },
    {
        "content": "<p>so true</p>",
        "id": 191575639,
        "sender_full_name": "Sean",
        "timestamp": 1585036994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span>  about the git-notes usage - I did that so the git commit messages could exactly match their SVN counterparts, which allows for a fairly straightforward analysis to map SVN ids to older commits.</p>\n<p>For the CVS portion of the conversion (i.e. the commits put in Git straight from the cvs repo) the ordering and specifics of  the generated commits varies a bit from the cvs-&gt;svn results (which is one of the reasons I went to all this trouble - cvs-git produced better results with the very early commits).    That means the commit messages (when unique) are the best available way to find SVN id mappings to older git commits, hence I needed to keep them the same in both conversions.  (Even that isn't enough to reliably peg all cvs-&gt;git commits with SVN ids, but an upside of using notes is that if someone someday wants to do a better job of SVN id mapping than I managed they can do so without disturbing the main Git history.)</p>",
        "id": 191599326,
        "sender_full_name": "starseeker",
        "timestamp": 1585051184
    },
    {
        "content": "<p>ping...</p>",
        "id": 192377640,
        "sender_full_name": "starseeker",
        "timestamp": 1585655290
    },
    {
        "content": "<p>ping...</p>",
        "id": 193231967,
        "sender_full_name": "starseeker",
        "timestamp": 1586285801
    },
    {
        "content": "<p>does he need rebooted?</p>",
        "id": 193322594,
        "sender_full_name": "Erik",
        "timestamp": 1586353958
    },
    {
        "content": "<p>Heh - just high load compared to available bandwidth</p>",
        "id": 193366331,
        "sender_full_name": "starseeker",
        "timestamp": 1586373486
    },
    {
        "content": "<p>ping...</p>",
        "id": 193768010,
        "sender_full_name": "starseeker",
        "timestamp": 1586781789
    },
    {
        "content": "<p>traceroute?</p>",
        "id": 194512949,
        "sender_full_name": "Erik",
        "timestamp": 1587166759
    },
    {
        "content": "<p>ping...</p>",
        "id": 194612097,
        "sender_full_name": "starseeker",
        "timestamp": 1587321857
    },
    {
        "content": "<p>alaca<strong>PING</strong></p>",
        "id": 194960750,
        "sender_full_name": "Erik",
        "timestamp": 1587574821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Are we still waiting on responses?</p>",
        "id": 194980652,
        "sender_full_name": "starseeker",
        "timestamp": 1587584081
    },
    {
        "content": "<p>No, I've not had time to work on it, chasing other issues.</p>",
        "id": 194980973,
        "sender_full_name": "Sean",
        "timestamp": 1587584228
    },
    {
        "content": "<p>I need to set up aliases and update a couple things and it'll be good to go.</p>",
        "id": 194981056,
        "sender_full_name": "Sean",
        "timestamp": 1587584269
    },
    {
        "content": "<p>Ah, K.</p>",
        "id": 194981259,
        "sender_full_name": "starseeker",
        "timestamp": 1587584346
    },
    {
        "content": "<p>ping...</p>",
        "id": 195732760,
        "sender_full_name": "starseeker",
        "timestamp": 1588176216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  would it help if you sent me the updated info and I integrated it into updated author maps?  As long as those are finalized we can start the conversion without actually requiring the aliases be present on bz...</p>",
        "id": 195732978,
        "sender_full_name": "starseeker",
        "timestamp": 1588176316
    },
    {
        "content": "<p>ping...</p>",
        "id": 196061471,
        "sender_full_name": "starseeker",
        "timestamp": 1588440061
    },
    {
        "content": "<p>I'm starting to wonder if starseeker's pinger is broken</p>",
        "id": 196106312,
        "sender_full_name": "Erik",
        "timestamp": 1588517055
    },
    {
        "content": "<p>Heh, not broken, almost there<br>\nLots going on</p>",
        "id": 196106320,
        "sender_full_name": "Sean",
        "timestamp": 1588517086
    },
    {
        "content": "<p>tautological. High interest topic, so nosey noses want to know :)</p>",
        "id": 196106396,
        "sender_full_name": "Erik",
        "timestamp": 1588517168
    },
    {
        "content": "<p>Like whether everyone got their invite -- I resent it again for a third time to all, you get yours?</p>",
        "id": 196106478,
        "sender_full_name": "Sean",
        "timestamp": 1588517322
    },
    {
        "content": "<p>(burndown list? blockers we can help with? rough eta? have you sourced adequate caffeine?)</p>",
        "id": 196106482,
        "sender_full_name": "Erik",
        "timestamp": 1588517329
    },
    {
        "content": "<p>I just got a new coffee grinder, it's been amazing</p>",
        "id": 196106490,
        "sender_full_name": "Sean",
        "timestamp": 1588517350
    },
    {
        "content": "<p>yup, enrolling now</p>",
        "id": 196106495,
        "sender_full_name": "Erik",
        "timestamp": 1588517365
    },
    {
        "content": "<p>my grinder broke :( I have to drive 5 minutes to the office for real coffee</p>",
        "id": 196106503,
        "sender_full_name": "Erik",
        "timestamp": 1588517400
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/0SziSNAX_ijU6bGMMDXc9sEv/IMG_4974.JPG\" title=\"IMG_4974.JPG\">IMG_4974.JPG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/0SziSNAX_ijU6bGMMDXc9sEv/IMG_4974.JPG\" title=\"IMG_4974.JPG\"><img src=\"/user_uploads/1549/0SziSNAX_ijU6bGMMDXc9sEv/IMG_4974.JPG\"></a></div>",
        "id": 196106575,
        "sender_full_name": "Erik",
        "timestamp": 1588517488
    },
    {
        "content": "<p>hey, neato, I guess I'm a \"mentor\" now</p>",
        "id": 196106967,
        "sender_full_name": "Erik",
        "timestamp": 1588518031
    },
    {
        "content": "<p>Ah - so that's mentor invites not github invites?</p>",
        "id": 196116180,
        "sender_full_name": "starseeker",
        "timestamp": 1588530609
    },
    {
        "content": "<p>That's quite a contraption <span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> .. you got that 5+ years ago I think, right?</p>",
        "id": 196116765,
        "sender_full_name": "Sean",
        "timestamp": 1588531546
    },
    {
        "content": "<p>&lt;snort&gt; from the looks of that contraption you're lucky breakage didn't involve an explosion</p>",
        "id": 196126015,
        "sender_full_name": "starseeker",
        "timestamp": 1588544274
    },
    {
        "content": "<p>There must be quite a science to proper coffee grinding</p>",
        "id": 196126056,
        "sender_full_name": "starseeker",
        "timestamp": 1588544313
    },
    {
        "content": "<p>I have a similar expresso machine I've used for 15+ years.  Sounds like it could explode any minute, but that's just how they work.  They build up steam pressure to heat and force liquid through the grounds.  Which also means you want really fine grounds, not the same grinding used in drip coffee machines.</p>",
        "id": 196126958,
        "sender_full_name": "Sean",
        "timestamp": 1588545966
    },
    {
        "content": "<p>the work one, has two cafe grade grinders to the left of it, it's a beast (and was some of my first on the job training at this place). I'm stuck with keurig's, a moka and an old target espresso maker that gathers dust :/</p>",
        "id": 196380375,
        "sender_full_name": "Erik",
        "timestamp": 1588720812
    },
    {
        "content": "<p>github? ping?</p>",
        "id": 196380388,
        "sender_full_name": "Erik",
        "timestamp": 1588720826
    },
    {
        "content": "<p>spending all time fixing builds and debugging, want to help -- can figure out why mysqld is using so much memory, see if it can be cut in half</p>",
        "id": 196380460,
        "sender_full_name": "Sean",
        "timestamp": 1588720895
    },
    {
        "content": "<p>i'm looking at whether/how jenkin's usage can be reduced</p>",
        "id": 196380474,
        "sender_full_name": "Sean",
        "timestamp": 1588720915
    },
    {
        "content": "<p>sure, people are using databases. remove the db's and terminate access, problem solved</p>",
        "id": 196380480,
        "sender_full_name": "Erik",
        "timestamp": 1588720920
    },
    {
        "content": "<p>I mean, uh, O:-) for jenkins, you might be able to tune max vm size, but java historically has a habit of not releasing much memory, it likes to hold onto it for it's own allocator</p>",
        "id": 196380557,
        "sender_full_name": "Erik",
        "timestamp": 1588720969
    },
    {
        "content": "<p>heh, well I'm almost certain the largest offender is the wiki .. but that's a hypothesis and still doesn't mean there's not some configuration options that might reduce usage too</p>",
        "id": 196380559,
        "sender_full_name": "Sean",
        "timestamp": 1588720977
    },
    {
        "content": "<p>yeah, I know java is a notorious pig, but almost certainly can get it to use less than 6GB</p>",
        "id": 196380595,
        "sender_full_name": "Sean",
        "timestamp": 1588721015
    },
    {
        "content": "<p>mysql probably has vm tuning options, too</p>",
        "id": 196380606,
        "sender_full_name": "Erik",
        "timestamp": 1588721024
    },
    {
        "content": "<p>I suspect it's loading a lot of stuff from our side that it doesn't need to</p>",
        "id": 196380613,
        "sender_full_name": "Sean",
        "timestamp": 1588721036
    },
    {
        "content": "<p>mysql is the one that's almost certainly loaded with attack attempts</p>",
        "id": 196380661,
        "sender_full_name": "Sean",
        "timestamp": 1588721055
    },
    {
        "content": "<p>website gets hit constantly, and could just be gradual accumulation of crap</p>",
        "id": 196380702,
        "sender_full_name": "Sean",
        "timestamp": 1588721089
    },
    {
        "content": "<p>probably... could try just restarting those services and see what happens, certainly something we could tune to fix, but might be a quick bandaid^Wadhesive bandage</p>",
        "id": 196380783,
        "sender_full_name": "Erik",
        "timestamp": 1588721179
    },
    {
        "content": "<p>mysql gets restarted frequently, it's sitting around 2GB</p>",
        "id": 196380830,
        "sender_full_name": "Sean",
        "timestamp": 1588721238
    },
    {
        "content": "<p>I tuned down a couple of it's buffers, looks like it's at 1/2 vm and 1/3 res, we'll see how far it drifts up.</p>",
        "id": 196381102,
        "sender_full_name": "Erik",
        "timestamp": 1588721451
    },
    {
        "content": "<p>and/or what asplodes :D pooters are fun!</p>",
        "id": 196381147,
        "sender_full_name": "Erik",
        "timestamp": 1588721501
    },
    {
        "content": "<p>it's set to use zero swap, so it's at 50% capacity if everything goes resident</p>",
        "id": 196383791,
        "sender_full_name": "Sean",
        "timestamp": 1588723565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> If I'm still breaking the OSX build, I can shift entirely to working in branches until we finish the github migration...</p>",
        "id": 196389897,
        "sender_full_name": "starseeker",
        "timestamp": 1588730105
    },
    {
        "content": "<p>Alternately, I can put a snapshot of trunk up on my own github and see if I can figure out how to hook up the OSX CI system</p>",
        "id": 196390004,
        "sender_full_name": "starseeker",
        "timestamp": 1588730290
    },
    {
        "content": "<p>ping...</p>",
        "id": 197924505,
        "sender_full_name": "starseeker",
        "timestamp": 1589804010
    },
    {
        "content": "<p>ping...</p>",
        "id": 199047858,
        "sender_full_name": "starseeker",
        "timestamp": 1590684318
    },
    {
        "content": "<p>Eager minds want to know how close this sausage is to being made.  :)</p>",
        "id": 199306074,
        "sender_full_name": "Erik",
        "timestamp": 1590931104
    },
    {
        "content": "<p>ping...</p>",
        "id": 200746374,
        "sender_full_name": "starseeker",
        "timestamp": 1592018129
    },
    {
        "content": "<p>what is this channel for?</p>",
        "id": 200746419,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1592018167
    },
    {
        "content": "<p>discussion of an eventual transition of the BRL-CAD source repository to using the Git version control system</p>",
        "id": 200746427,
        "sender_full_name": "starseeker",
        "timestamp": 1592018208
    },
    {
        "content": "<p>you guys were talking about CI system, right?</p>",
        "id": 200746440,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1592018236
    },
    {
        "content": "<p>Continuous Integration is a separate topic</p>",
        "id": 200746443,
        "sender_full_name": "starseeker",
        "timestamp": 1592018261
    },
    {
        "content": "<p>ok</p>",
        "id": 200746444,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1592018267
    },
    {
        "content": "<p>ping...</p>",
        "id": 201662799,
        "sender_full_name": "starseeker",
        "timestamp": 1592860928
    },
    {
        "content": "<p>what resource is missing to put a bow on this? lack of Seans? we can do the star trek thing and split him into the saucer Sean section and the other Chris section, right? \"Make it so, number <span aria-label=\"poop\" class=\"emoji emoji-1f4a9\" role=\"img\" title=\"poop\">:poop:</span> \"</p>",
        "id": 202159236,
        "sender_full_name": "Erik",
        "timestamp": 1593218647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> Probably missed your window, but ... it'll be there for whenever you get back.<br>\nIt's done!</p>",
        "id": 202662507,
        "sender_full_name": "Sean",
        "timestamp": 1593678942
    },
    {
        "content": "<p>Aliases have been added and lots of confirmations and updates for others.  Apparently took some 20+ hours to finish it up.  Lots of proper e-mails in there, though, so worth it.  Lots of simple awareness too.</p>",
        "id": 202662704,
        "sender_full_name": "Sean",
        "timestamp": 1593679085
    },
    {
        "content": "<p>a bunch of folks link through an alias to a noreply@ address  in cases where I didn't have and couldn't find any contact information or if they were unreachable.</p>",
        "id": 202662806,
        "sender_full_name": "Sean",
        "timestamp": 1593679191
    },
    {
        "content": "<p>Awesome - thanks!  Will have to wait to kick off the main run, but I should be able to start on some of the preliminaries (in particular, updating the bridging commits between cvs and svn, which require manual adjustment.)</p>",
        "id": 202682701,
        "sender_full_name": "starseeker",
        "timestamp": 1593694120
    },
    {
        "content": "<p>There's still a + in front of jgrosh - is that significant?</p>",
        "id": 202682971,
        "sender_full_name": "starseeker",
        "timestamp": 1593694272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/202682971\">said</a>:</p>\n<blockquote>\n<p>There's still a + in front of jgrosh - is that significant?</p>\n</blockquote>\n<p>Oh, good catch.  Yes, significant, as it means I hadn't reconciled his yet.   Yay for book-keeping that served its purpose!  No response, so he's replaced with an alias.</p>",
        "id": 202750003,
        "sender_full_name": "Sean",
        "timestamp": 1593727835
    },
    {
        "content": "<p>At this point, any remaining uncertainty or issues I'm just replacing with <a href=\"http://brlcad.org\">brlcad.org</a> aliases.  Frankly, they could have all been replaced with <a href=\"http://brlcad.org\">brlcad.org</a> aliases and captured inside GitHub, but this way I don't have to be in the loop (as they are DNS MX records).</p>",
        "id": 202750124,
        "sender_full_name": "Sean",
        "timestamp": 1593727936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  The only other thing I noticed is the cvs_authormap has a \"jebbly\" entry for Jeffrey Liu, which wasn't in the svn map (probably my fault.)  Should that just be <a href=\"mailto:jebbly@brlcad.org\">jebbly@brlcad.org</a> ?</p>",
        "id": 202761565,
        "sender_full_name": "starseeker",
        "timestamp": 1593740213
    },
    {
        "content": "<p>Actually, per r75095 that's a recent committer?</p>",
        "id": 202762152,
        "sender_full_name": "starseeker",
        "timestamp": 1593741134
    },
    {
        "content": "<p>Presumably the same Jeffery Liu  in the chat now... I got misled by seeing the name only in the CVS authormap.</p>",
        "id": 202762169,
        "sender_full_name": "starseeker",
        "timestamp": 1593741171
    },
    {
        "content": "<p>yeah, I did not reconcile against the other file, so another good one to catch</p>",
        "id": 202763467,
        "sender_full_name": "Sean",
        "timestamp": 1593743389
    },
    {
        "content": "<p>I pulled a list of committers from the svn log and compared it to the ones in the map - I think we're good now.  I'll run a basic conversion of the CVS history and upload it to github to see what happens with the new email addresses</p>",
        "id": 202764105,
        "sender_full_name": "starseeker",
        "timestamp": 1593744366
    },
    {
        "content": "<p>If there's any problem, we should either just switch EVERYTHING to <a href=\"http://brlcad.org\">brlcad.org</a> aliases for the historic commits (to preserve the username as-is, even duplicates), or we should check out what GitLab does with the same info.</p>",
        "id": 202764446,
        "sender_full_name": "Sean",
        "timestamp": 1593744961
    },
    {
        "content": "<p>/me nods</p>",
        "id": 202764649,
        "sender_full_name": "starseeker",
        "timestamp": 1593745278
    },
    {
        "content": "<p>I got the CVS part to convert, which will hopefully be enough to tell the tale</p>",
        "id": 202764787,
        "sender_full_name": "starseeker",
        "timestamp": 1593745468
    },
    {
        "content": "<p><a href=\"https://github.com/starseeker/brlcad_cvs_git/\">https://github.com/starseeker/brlcad_cvs_git/</a></p>",
        "id": 202765288,
        "sender_full_name": "starseeker",
        "timestamp": 1593746421
    },
    {
        "content": "<p>I imagine the stats will have to crunch for a little while</p>",
        "id": 202765291,
        "sender_full_name": "starseeker",
        "timestamp": 1593746440
    },
    {
        "content": "<p>Ah.  Well, contributors so far only appear to be those tied to a github account?  <a href=\"https://github.com/starseeker/brlcad_cvs_git/graphs/contributors\">https://github.com/starseeker/brlcad_cvs_git/graphs/contributors</a></p>",
        "id": 202765374,
        "sender_full_name": "starseeker",
        "timestamp": 1593746582
    },
    {
        "content": "<p>Might be worth a support question...</p>",
        "id": 202765570,
        "sender_full_name": "starseeker",
        "timestamp": 1593746943
    },
    {
        "content": "<p>Not sure if individuals profiles will pick up retroactively on commits made before they joined github...</p>",
        "id": 202765718,
        "sender_full_name": "starseeker",
        "timestamp": 1593747157
    },
    {
        "content": "<p>Also, this being in my own personal grouping (as opposed to an org) might have some impact...</p>",
        "id": 202765792,
        "sender_full_name": "starseeker",
        "timestamp": 1593747274
    },
    {
        "content": "<p>They do, the commits go all the way back (e.g., look at John's)</p>",
        "id": 202765836,
        "sender_full_name": "Sean",
        "timestamp": 1593747337
    },
    {
        "content": "<p>We could create github accounts for all of the <a href=\"http://brlcad.org\">brlcad.org</a> aliased accounts, that way they'd at least show up.</p>",
        "id": 202765918,
        "sender_full_name": "Sean",
        "timestamp": 1593747455
    },
    {
        "content": "<p>at least for one in particular...</p>",
        "id": 202765924,
        "sender_full_name": "Sean",
        "timestamp": 1593747471
    },
    {
        "content": "<p>so... let's see.  there are 102 entries of which 88 are unique.  minus the 19 accounts it found.  minus 26 aliased.  <br>\n that leaves 43 unaccounted and unaccountable.</p>",
        "id": 202766217,
        "sender_full_name": "Sean",
        "timestamp": 1593747879
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>284281400@qq.com\nabhijit.nandy@gmail.com\nagkphysics@gmail.com\nandrecastelo@gmail.com\nanuragmurty@gmail.com\nben.e.saunders@gmail.com\nbhinesley@gmail.com\nbilmer1@comcast.net\nbrlcad@mail.lordofbikes.de\ncarl.nuzman@nokia-bell-labs.com\ncarlm0404@gmail.com\ncdueck93@gmail.com\ncezar.elnazli2@gmail.com\ncprecup@cisco.com\ndgodbey@yahoo.com\ndloman77@gmail.com\ndoug@survice.com\nebautu@gmail.com\ng.sayol@gmail.com\nindianlarry@verizon.net\njdoliner@gmail.com\nkunigami@gmail.com\nmanuel.montezelo@gmail.com\nmarcodomingues20@gmail.com\nmaths22@gmail.com\nmichael.j.gillich@gmail.com\nmireastefangabriel@gmail.com\nmohitdaga.lnmiit@gmail.com\nnreed1@umbc.edu\npopescu.andrei1991@gmail.com\nrobert.reschly@gmail.com\nsam@hocevar.net\nsharan.nyn@gmail.com\nshubhamrathore1947@gmail.com\nthedawnthomas@gmail.com\ntim@jvsw.com\ntom.browder@gmail.com\nu2isaac@gmail.com\nvladbogolin@gmail.com\nzaqcloud@hotmail.com\n</code></pre></div>",
        "id": 202766481,
        "sender_full_name": "Sean",
        "timestamp": 1593748367
    },
    {
        "content": "<p>indianlarry has an account, so could check with him to see what's up, what he set it to</p>",
        "id": 202766532,
        "sender_full_name": "Sean",
        "timestamp": 1593748458
    },
    {
        "content": "<p>several of those are surprising</p>",
        "id": 202766537,
        "sender_full_name": "Sean",
        "timestamp": 1593748477
    },
    {
        "content": "<p>question for you <span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> , looking at the docs it looks like both username and email get recorded.  are the old usernames being preserved or collapsed?  just wondering.</p>",
        "id": 202767019,
        "sender_full_name": "Sean",
        "timestamp": 1593749223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Right now they're collapsed - you would need to pull the map file to associate a sourceforge name with the github id, and for individuals with multiple svn ids I didn't preserve which commit was made with which id.  Could probably do so using the notes mechanism, now that I think about it, if that's of interest.</p>",
        "id": 202798071,
        "sender_full_name": "starseeker",
        "timestamp": 1593779000
    },
    {
        "content": "<p>Would github allow the creation of accounts by someone other than the individual in question?  My thought was to inquire if there was any way to have the contributors page report non-github contributors in some fashion...</p>",
        "id": 202798241,
        "sender_full_name": "starseeker",
        "timestamp": 1593779140
    },
    {
        "content": "<p>btw, did you switch Erik's email as a test of the alias mechanism?  He had given us another email earlier, if I'm remembering correct.y</p>",
        "id": 202798814,
        "sender_full_name": "starseeker",
        "timestamp": 1593779568
    },
    {
        "content": "<p>When I look at (say) your individual page, it's only reporting your contribution activity back to when you joined github in 2011 - it doesn't look like it's picking up on the older commits and associating them with your account</p>",
        "id": 202799165,
        "sender_full_name": "starseeker",
        "timestamp": 1593779816
    },
    {
        "content": "<p>might be another question for the github folks, if anyone has good contacts there...</p>",
        "id": 202799232,
        "sender_full_name": "starseeker",
        "timestamp": 1593779866
    },
    {
        "content": "<p>eh, I think I asked to be <a href=\"mailto:erik@brlcad.org\">erik@brlcad.org</a></p>",
        "id": 202802328,
        "sender_full_name": "Erik",
        "timestamp": 1593781972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span>   Oh, OK - good.  I couldn't remember.</p>",
        "id": 202872171,
        "sender_full_name": "starseeker",
        "timestamp": 1593866538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> What do you think?  Want to go ahead with the conversion with the email addresses as-is?  Or try to contact github to find out more?</p>",
        "id": 202872200,
        "sender_full_name": "starseeker",
        "timestamp": 1593866610
    },
    {
        "content": "<p>I'm thinking it's probably not worth it to tweak too much more, unless you want to track down the root cause of the \"surprising\" accounts that ought to show up even by github's current contributor criteria but aren't...  We can provide something like <a href=\"https://brlcad.org/~starseeker/git_stats/general.html\">https://brlcad.org/~starseeker/git_stats/general.html</a> on our own project site to document contributions with more control.</p>\n<p>Not ideal certainly - it would be nice if we could get the github site to more accurately reflect the full history - but so far I'm not having much luck trying to research whether that is doable...</p>",
        "id": 202873328,
        "sender_full_name": "starseeker",
        "timestamp": 1593868357
    },
    {
        "content": "<p>(one thought - did indianlarry commit to the repository prior to our conversion to SVN?  If he doesn't have any CVS commits he wouldn't show up in this test...)</p>",
        "id": 202873627,
        "sender_full_name": "starseeker",
        "timestamp": 1593868841
    },
    {
        "content": "<p>He had a run in the long ling ago, perhaps under rcs, roght?</p>",
        "id": 202874523,
        "sender_full_name": "Erik",
        "timestamp": 1593870390
    },
    {
        "content": "<p>Long long ago</p>",
        "id": 202874526,
        "sender_full_name": "Erik",
        "timestamp": 1593870400
    },
    {
        "content": "<p>2009 was indianlarry's earliest commit, according to the previous git conversion.</p>",
        "id": 202876499,
        "sender_full_name": "starseeker",
        "timestamp": 1593873489
    },
    {
        "content": "<p>Yep, post-dates CVS - last commit there was end of 2007.  OK, that explains it.</p>",
        "id": 202876545,
        "sender_full_name": "starseeker",
        "timestamp": 1593873564
    },
    {
        "content": "<p>Better test will be once I've got the SVN history spliced on, but that's the hard part.  Looks like it's time to update the bridge commits...</p>",
        "id": 202876614,
        "sender_full_name": "starseeker",
        "timestamp": 1593873649
    },
    {
        "content": "<p>(or more precisely, I'm out of excuses to avoid updating the bridging commits... ick.)</p>",
        "id": 202876717,
        "sender_full_name": "starseeker",
        "timestamp": 1593873818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> I think it's worth doing both - asking github if there's a way to show/list contributors that don't have a github account, just to make sure we're not doing something wrong, and proceeding ahead.</p>\n<p>The surprising accounts are probably worth looking into just to double-check that they're not a typo or dead e-mail.  There was only a couple, one that I just fixed yesterday.  some people we had gmail accounts for have switched to different gmail accounts.</p>\n<p>I think if we can account for everyone and the vast majority - say 95% - show up under the contributor list, we're good.  We may get to that percentage just by ensuring one or two accounts.</p>",
        "id": 203303841,
        "sender_full_name": "Sean",
        "timestamp": 1594232672
    },
    {
        "content": "<p><a href=\"https://github.com/starseeker/brlcad_convtest\">https://github.com/starseeker/brlcad_convtest</a> has what I'd gotten as of this morning - up to 33 github contributor links</p>",
        "id": 203314075,
        "sender_full_name": "starseeker",
        "timestamp": 1594237917
    },
    {
        "content": "<p>indianlarry is in there</p>",
        "id": 203314199,
        "sender_full_name": "starseeker",
        "timestamp": 1594237966
    },
    {
        "content": "<p>I created an account for mike, so that should get another ten thousand commits.  I'm looking through the list and going to see if any heavy contributors are missing.</p>",
        "id": 203314465,
        "sender_full_name": "Sean",
        "timestamp": 1594238089
    },
    {
        "content": "<p>I'll do another upload in the next day or two, if my laptop doesn't die</p>",
        "id": 203314748,
        "sender_full_name": "starseeker",
        "timestamp": 1594238205
    },
    {
        "content": "<p>parker has a curious commit count.. that page is showing 4431 but I'm seeing 5105 in svn, that because it's only played through 2012?</p>",
        "id": 203314837,
        "sender_full_name": "Sean",
        "timestamp": 1594238263
    },
    {
        "content": "<p>tbrowder is similar -- shows 57, but svn has 1637</p>",
        "id": 203314949,
        "sender_full_name": "Sean",
        "timestamp": 1594238305
    },
    {
        "content": "<p>Yeah, only into the 40000s on commits</p>",
        "id": 203315005,
        "sender_full_name": "starseeker",
        "timestamp": 1594238324
    },
    {
        "content": "<p>okay, maybe around the right time before browder did a lot</p>",
        "id": 203315033,
        "sender_full_name": "Sean",
        "timestamp": 1594238341
    },
    {
        "content": "<p>It'll be next week sometime before I get all the way through</p>",
        "id": 203315038,
        "sender_full_name": "starseeker",
        "timestamp": 1594238344
    },
    {
        "content": "<p>looks like we're only missing one &gt;1k commit author</p>",
        "id": 203315209,
        "sender_full_name": "Sean",
        "timestamp": 1594238408
    },
    {
        "content": "<p>why would someone have more commits in git than they had in svn?</p>",
        "id": 203315421,
        "sender_full_name": "Sean",
        "timestamp": 1594238516
    },
    {
        "content": "<p>If we're missing any from the cvs era that's a problem - newer SVN committers (post 2011) won't show yet.</p>",
        "id": 203315437,
        "sender_full_name": "starseeker",
        "timestamp": 1594238522
    },
    {
        "content": "<p>cvs -&gt; git conversion may have broken out the commits differently</p>",
        "id": 203315532,
        "sender_full_name": "starseeker",
        "timestamp": 1594238561
    },
    {
        "content": "<p>(than cvs2svn)</p>",
        "id": 203315544,
        "sender_full_name": "starseeker",
        "timestamp": 1594238566
    },
    {
        "content": "<p>Can you check gdurf?  He had 682 in svn, 710 in git.</p>",
        "id": 203315668,
        "sender_full_name": "Sean",
        "timestamp": 1594238626
    },
    {
        "content": "<p>don't know if you have an easy way to compare, I just did an svn log &gt; log and counted them up</p>",
        "id": 203315774,
        "sender_full_name": "Sean",
        "timestamp": 1594238665
    },
    {
        "content": "<p>git log --author=\"Glenn Durfee\" --pretty=oneline   - gives a quick overview of the git commits</p>\n<p>SVN is harder...</p>",
        "id": 203316191,
        "sender_full_name": "starseeker",
        "timestamp": 1594238846
    },
    {
        "content": "<p>I can already see early commits in the git history that have the same git message - that's a probable source</p>",
        "id": 203316319,
        "sender_full_name": "starseeker",
        "timestamp": 1594238909
    },
    {
        "content": "<p>Are they mistakes or denoting something like a file move?</p>",
        "id": 203316421,
        "sender_full_name": "Sean",
        "timestamp": 1594238958
    },
    {
        "content": "<p>My understanding is that cvs-fast-export had to deduce which cvs operations in different files denote \"commits\" for git, when those timestamps don't exactly line up.  The tolerance on how much the time span is allowed to vary before a new commit is declared is one of the settings that can be altered on the tool.</p>",
        "id": 203319064,
        "sender_full_name": "starseeker",
        "timestamp": 1594240380
    },
    {
        "content": "<p>I haven't tried to adjust that too much - it only impacts the CVS portion of the history.  The <a href=\"http://CONVERT.sh\">CONVERT.sh</a> script has the setup used for the initial cvs conversion, and that's quite fast if you want to do some experimentation.</p>",
        "id": 203319572,
        "sender_full_name": "starseeker",
        "timestamp": 1594240595
    },
    {
        "content": "<p>I don't want to experiment, but I would like to confirm that is exactly what's happening here, as opposed to some other unexpected behavior or a bug or bad data or ...</p>",
        "id": 203319880,
        "sender_full_name": "Sean",
        "timestamp": 1594240738
    },
    {
        "content": "<p>if you look at a couple of the duplicates, do they differ in files, timestamps separated by a few seconds, or something else?  might be concerning if they're different changes to the same files.</p>",
        "id": 203320064,
        "sender_full_name": "Sean",
        "timestamp": 1594240816
    },
    {
        "content": "<p>I see a commit 1996-03-25 16:42:45 that doesn't have a corresponding svn commit id</p>",
        "id": 203320711,
        "sender_full_name": "starseeker",
        "timestamp": 1594241141
    },
    {
        "content": "<p>That means the analysis scripts couldn't find a commit message with a close timestamp</p>",
        "id": 203320935,
        "sender_full_name": "starseeker",
        "timestamp": 1594241246
    },
    {
        "content": "<p>what's the actual content of the commit?  does the other commit with the matching log message match an svn commit it?  does it's change match the svn change? (should it)</p>",
        "id": 203321088,
        "sender_full_name": "Sean",
        "timestamp": 1594241325
    },
    {
        "content": "<p>That one doesn't have a matching message.  I'm seeing more that don't (at least 10 so far) which is a bit surprising.  There is one at 1994-12-16 15:33:48 that does have a subsequent commit with an SVN id assigned - 1994-12-16 15:38:40</p>",
        "id": 203321398,
        "sender_full_name": "starseeker",
        "timestamp": 1594241487
    },
    {
        "content": "<p>r10215 looks like it got split up into a couple commits in git, and the time ordering is slightly different.</p>",
        "id": 203324396,
        "sender_full_name": "starseeker",
        "timestamp": 1594242975
    },
    {
        "content": "<p>okay, cool ... does that fully explain it?  how much time are we talking about?  couple seconds?</p>",
        "id": 203325404,
        "sender_full_name": "Sean",
        "timestamp": 1594243468
    },
    {
        "content": "<p>looks like a few minutes</p>",
        "id": 203331112,
        "sender_full_name": "starseeker",
        "timestamp": 1594246959
    },
    {
        "content": "<p>If there's a way to get git and svn to generate identically formatted diffs, we could identify when we have actually differing commits - that would be the best/only way to get true assignment of SVN commits to exactly corresponding commits.    My estimate was that the maximal utility was to go ahead and assign the numbers based on the commit ids, since it would localize the commit to the general portion of the git history containing the corresponding changes.</p>",
        "id": 203333127,
        "sender_full_name": "starseeker",
        "timestamp": 1594248491
    },
    {
        "content": "<p>The next best thing would be to generate a list of all commits that don't have svn ids assigned and inspect what's happening around them.</p>",
        "id": 203333176,
        "sender_full_name": "starseeker",
        "timestamp": 1594248533
    },
    {
        "content": "<p>git log --notes --invert-grep --grep=\".<em>svn.</em>\"  --pretty=format:\"%h %an %ad %s\"</p>",
        "id": 203336602,
        "sender_full_name": "starseeker",
        "timestamp": 1594251153
    },
    {
        "content": "<p>gitk --notes --invert-grep --grep=\".<em>svn.</em>\"  allows for inspection in gitk</p>",
        "id": 203336760,
        "sender_full_name": "starseeker",
        "timestamp": 1594251293
    },
    {
        "content": "<p>Bah - github's web history doesn't have --follow enabled, from the looks of it - ell.c history stops at the restructure.</p>",
        "id": 203338471,
        "sender_full_name": "starseeker",
        "timestamp": 1594253034
    },
    {
        "content": "<p>Sigh... <a href=\"https://github.com/isaacs/github/issues/900\">https://github.com/isaacs/github/issues/900</a></p>",
        "id": 203339001,
        "sender_full_name": "starseeker",
        "timestamp": 1594253605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Today's upload sees Mike as a contributor:  <a href=\"https://github.com/starseeker/brlcad_convtest2/graphs/contributors\">https://github.com/starseeker/brlcad_convtest2/graphs/contributors</a></p>\n<p>Looks like github doesn't retroactively add contributors when they create accounts - yesterday's upload still doesn't show him.</p>",
        "id": 203407929,
        "sender_full_name": "starseeker",
        "timestamp": 1594311851
    },
    {
        "content": "<p>So I'll need to make sure others are created before final upload.  Good to know.  Was going to crunch the numbers, but I think carl is the only &gt;1k committer missing.  He's not likely to create a github account, so he can be switched to a <a href=\"http://brlcad.org\">brlcad.org</a> alias.</p>",
        "id": 203446780,
        "sender_full_name": "Sean",
        "timestamp": 1594332030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> looks like it will be a few more days at least to finish up the test run (in the mid 60000s range now) - I'll upload it as before once it's done so we can inspect the github integration.</p>\n<p>Seeing as we now appear to be getting very close, what's the procedure for flipping the switch from sf to github?  Lock the SVN repo as read-only, upload the github repo, and update the web page links are the obvious first steps - will we keep using the existing email lists for the time being?</p>",
        "id": 203668917,
        "sender_full_name": "starseeker",
        "timestamp": 1594601133
    },
    {
        "content": "<p>Possibly of interest:  <a href=\"https://github.com/cmungall/gosf2github\">https://github.com/cmungall/gosf2github</a></p>",
        "id": 203669230,
        "sender_full_name": "starseeker",
        "timestamp": 1594601706
    },
    {
        "content": "<p>yeah, I'd definitely like to import the feature request, support, and bug report trackers to issues,  so that's more than of interest.  I've come across a couple similar efforts to import sf data.  the one you link looks pretty good.  suggests we utilize a non-dev account, which is probably a good idea.  the patches tracker is a separate beast and will need to be dealt with differently.</p>",
        "id": 203680212,
        "sender_full_name": "Sean",
        "timestamp": 1594619301
    },
    {
        "content": "<p>would help to have a checklist on the wiki so we don't miss an action.  willing to write down what you know so we can look into ordering and making sure we got everything?  I can add my notes as well.</p>",
        "id": 203680301,
        "sender_full_name": "Sean",
        "timestamp": 1594619424
    },
    {
        "content": "<p>Made a quick start here:  <a href=\"https://brlcad.org/wiki/Github_Migration\">https://brlcad.org/wiki/Github_Migration</a></p>\n<p>I've got notes scattered around (most in misc/repoconv/NOTES) with more details.</p>",
        "id": 203710558,
        "sender_full_name": "starseeker",
        "timestamp": 1594644739
    },
    {
        "content": "<p>Cool, I'll add some of mine to it.  Awesome!  Thanks!</p>",
        "id": 203758221,
        "sender_full_name": "Sean",
        "timestamp": 1594667871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> We're still a few weeks out (at a minimum I need to re-run the conversion with the final account-map in place) but we can see the finish line now</p>",
        "id": 203870035,
        "sender_full_name": "starseeker",
        "timestamp": 1594751623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Is it worth putting out an email to the brlcad-devel list with a \"last chance\" call for any account info updates?  Or is that not needed?</p>",
        "id": 203870506,
        "sender_full_name": "starseeker",
        "timestamp": 1594751844
    },
    {
        "content": "<p>Good idea, I'll write up and send an announcement.</p>",
        "id": 203884867,
        "sender_full_name": "Sean",
        "timestamp": 1594759090
    },
    {
        "content": "<p>Test conversion complete:  <a href=\"https://github.com/starseeker/brlcad_conv3\">https://github.com/starseeker/brlcad_conv3</a> </p>\n<p>Unless there are more email changes needed, we should now be ready to begin the final conversion run.</p>",
        "id": 204121769,
        "sender_full_name": "starseeker",
        "timestamp": 1594923353
    },
    {
        "content": "<p>/me looks</p>",
        "id": 204121985,
        "sender_full_name": "Sean",
        "timestamp": 1594923472
    },
    {
        "content": "<p>Nice!  Looks like it's recognizing 55 contributors now.  Not too shabby.  Did you start that before I changed Carl's address?</p>",
        "id": 204122146,
        "sender_full_name": "Sean",
        "timestamp": 1594923552
    },
    {
        "content": "<p>Unfortunately, yes - doesn't have that change nor Ben's.  That's why I'll have to run one more time.</p>",
        "id": 204122377,
        "sender_full_name": "starseeker",
        "timestamp": 1594923668
    },
    {
        "content": "<p>Also why I was suggesting sending out the \"last chance\" email - once I kick off this time, we're locked in.</p>",
        "id": 204122424,
        "sender_full_name": "starseeker",
        "timestamp": 1594923697
    },
    {
        "content": "<p>okay, I have a couple more to make and we should be good to go</p>",
        "id": 204122461,
        "sender_full_name": "Sean",
        "timestamp": 1594923716
    },
    {
        "content": "<p>yep</p>",
        "id": 204122467,
        "sender_full_name": "Sean",
        "timestamp": 1594923720
    },
    {
        "content": "<p>I can send the email now then, unless you wanted to send it?  appreciated seeing the draft.</p>",
        "id": 204122604,
        "sender_full_name": "Sean",
        "timestamp": 1594923781
    },
    {
        "content": "<p>If that looks good I can send it - you're the better wordsmith, so I wanted you to have a crack at it</p>",
        "id": 204122661,
        "sender_full_name": "starseeker",
        "timestamp": 1594923817
    },
    {
        "content": "<p>Assuming a repeat performance, it looks like a bit shy of two weeks for the run - so  around the beginning of August we should plan to lock the SVN repository and open up the github repo.</p>",
        "id": 204122905,
        "sender_full_name": "starseeker",
        "timestamp": 1594923933
    },
    {
        "content": "<p>I'd reduce it down a bit and put the main point first, but it looks good enough as is too.</p>",
        "id": 204122909,
        "sender_full_name": "Sean",
        "timestamp": 1594923934
    },
    {
        "content": "<p>OK, go ahead and send it - makes more sense really for you to do so since you've been POC for the emails all along</p>",
        "id": 204123010,
        "sender_full_name": "starseeker",
        "timestamp": 1594923971
    },
    {
        "content": "<p>I like the automatic stale branch designation</p>",
        "id": 204123193,
        "sender_full_name": "Sean",
        "timestamp": 1594924055
    },
    {
        "content": "<p>I'm planning to start the run on the 19th, if you want a fixed deadline for the email</p>",
        "id": 204123208,
        "sender_full_name": "starseeker",
        "timestamp": 1594924065
    },
    {
        "content": "<p>We may want to adjust our tag names going forward, so the tar.gz file github generates from the tag will be more meaningful name wise - right now we get \"rel-7-30-8.tar.gz\"</p>",
        "id": 204123585,
        "sender_full_name": "starseeker",
        "timestamp": 1594924214
    },
    {
        "content": "<p>sure, I can put \"before Monday\" in the mail</p>",
        "id": 204123713,
        "sender_full_name": "Sean",
        "timestamp": 1594924287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/204123585\">said</a>:</p>\n<blockquote>\n<p>We may want to adjust our tag names going forward, so the tar.gz file github generates from the tag will be more meaningful name wise - right now we get \"rel-7-30-8.tar.gz\"</p>\n</blockquote>\n<p>I think we're good.  If anything, we could adopt Semantic Versioning (which is simply v1.2.3), but we don't fully comply so that would be a bit misleading.</p>\n<p>The tag downloads aren't necessarily meant to be release tarballs (though they obviously should be the same), or at least their convenience priority is geared to for devs on the command line, not downloaders.  Some notable examples:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/tags\">https://github.com/tensorflow/tensorflow/tags</a><br>\n<a href=\"https://github.com/torvalds/linux/tags\">https://github.com/torvalds/linux/tags</a><br>\n<a href=\"https://github.com/redis/redis/tags\">https://github.com/redis/redis/tags</a></p>",
        "id": 204124903,
        "sender_full_name": "Sean",
        "timestamp": 1594924828
    },
    {
        "content": "<p>OK, cool.  As long as nobody complains that our Github tar.gz download links aren't compliant with HACKING ;-)</p>",
        "id": 204125007,
        "sender_full_name": "starseeker",
        "timestamp": 1594924885
    },
    {
        "content": "<p>What we have is simple and self-consistent, historically accurate.</p>",
        "id": 204125010,
        "sender_full_name": "Sean",
        "timestamp": 1594924886
    },
    {
        "content": "<p>Ah, so Releases are the fancier version.  OK, that's a corner of Github I've not delved into yet</p>",
        "id": 204125158,
        "sender_full_name": "starseeker",
        "timestamp": 1594924958
    },
    {
        "content": "<p>Yeah, like I said, those won't necessarily be our source tarballs.  They'll be wherever we host our binary platform releases, since we still need those too.</p>",
        "id": 204125279,
        "sender_full_name": "Sean",
        "timestamp": 1594925034
    },
    {
        "content": "<p>Binary downloads aren't something Github supports directly -- some use the GitHubs LFS, some self-host, others still continue to use SourceForge for downloads since that's the one thing they actually are still good at.</p>",
        "id": 204125482,
        "sender_full_name": "Sean",
        "timestamp": 1594925120
    },
    {
        "content": "<p><a href=\"https://docs.github.com/en/github/administering-a-repository/managing-releases-in-a-repository\">https://docs.github.com/en/github/administering-a-repository/managing-releases-in-a-repository</a> seems to suggest you can upload binaries?</p>",
        "id": 204125535,
        "sender_full_name": "starseeker",
        "timestamp": 1594925139
    },
    {
        "content": "<p>(#7 in that list)</p>",
        "id": 204125666,
        "sender_full_name": "starseeker",
        "timestamp": 1594925181
    },
    {
        "content": "<p>Well what do you know, they added it.</p>",
        "id": 204125699,
        "sender_full_name": "Sean",
        "timestamp": 1594925207
    },
    {
        "content": "<p>heh, looks like they added it 7 years ago.  shows how closely I've been paying attention to it.</p>",
        "id": 204125883,
        "sender_full_name": "Sean",
        "timestamp": 1594925283
    },
    {
        "content": "<p>&lt;grin&gt;  I've mostly been trying to figure out the CI bits - I don't have any projects that do releases, so I hadn't noticed either</p>",
        "id": 204126251,
        "sender_full_name": "starseeker",
        "timestamp": 1594925443
    },
    {
        "content": "<p>/me doesn't speak fluent YAML yet...</p>",
        "id": 204126637,
        "sender_full_name": "starseeker",
        "timestamp": 1594925623
    },
    {
        "content": "<p>okay, so looks like we're at 89% commit coverage across those 55 accounts<br>\n63715 commits out of 71289</p>\n<p>Carl's will get us to 93%.  I think a few more will probably get us into the 95-98% ballpark.</p>",
        "id": 204128407,
        "sender_full_name": "Sean",
        "timestamp": 1594926366
    },
    {
        "content": "<p>That's a lot better than I expected, to be honest</p>",
        "id": 204128462,
        "sender_full_name": "starseeker",
        "timestamp": 1594926390
    },
    {
        "content": "<p>I just wanted to be sure we didn't miss anyone currently active on github who wanted to be correctly linked into the history</p>",
        "id": 204128549,
        "sender_full_name": "starseeker",
        "timestamp": 1594926434
    },
    {
        "content": "<p>curiously, tom browder's commits are actually the first i've noticed <em>lower</em> than his Svn count... should there be any reason for that?</p>",
        "id": 204128592,
        "sender_full_name": "Sean",
        "timestamp": 1594926460
    },
    {
        "content": "<p>Is is svn count counting any repos other than the main BRL-CAD history?</p>",
        "id": 204128688,
        "sender_full_name": "starseeker",
        "timestamp": 1594926489
    },
    {
        "content": "<p>nope, it's just an svn log dump off trunk</p>",
        "id": 204128715,
        "sender_full_name": "Sean",
        "timestamp": 1594926506
    },
    {
        "content": "<p>If it's an admin dump that'd be everything (rt^3, geomcore, etc.)</p>",
        "id": 204128770,
        "sender_full_name": "starseeker",
        "timestamp": 1594926537
    },
    {
        "content": "<p>Ah, you mean from a checkout</p>",
        "id": 204128794,
        "sender_full_name": "starseeker",
        "timestamp": 1594926549
    },
    {
        "content": "<p>one sec...</p>",
        "id": 204128810,
        "sender_full_name": "starseeker",
        "timestamp": 1594926556
    },
    {
        "content": "<p>can check on your end: svn log &gt; log &amp;&amp; grep -E '^r[[:digit:]]+[[:space:]]\\|' log | awk '{print $3}' | sort | uniq -c | sort -n<br>\ntom's showing 1637 commits.  git count is 1630.</p>",
        "id": 204128821,
        "sender_full_name": "Sean",
        "timestamp": 1594926559
    },
    {
        "content": "<p>I'm not sure what to make of this ... <a href=\"https://github.com/starseeker/brlcad_conv3/pulse\">https://github.com/starseeker/brlcad_conv3/pulse</a></p>",
        "id": 204129324,
        "sender_full_name": "Sean",
        "timestamp": 1594926779
    },
    {
        "content": "<p>oh, I get it.  That's activity in the last N days.</p>",
        "id": 204129392,
        "sender_full_name": "Sean",
        "timestamp": 1594926817
    },
    {
        "content": "<p>git log --pretty=oneline --author=\"Thomas Browder\" --branches=\"*\" |wc -l gives me a count of 1634</p>",
        "id": 204129400,
        "sender_full_name": "starseeker",
        "timestamp": 1594926821
    },
    {
        "content": "<p>Working on svn</p>",
        "id": 204129418,
        "sender_full_name": "starseeker",
        "timestamp": 1594926829
    },
    {
        "content": "<p><a href=\"https://github.com/starseeker/brlcad_conv3/graphs/contributors\">https://github.com/starseeker/brlcad_conv3/graphs/contributors</a> lists tom at 1630 .. so then there's two discrepancies</p>",
        "id": 204129610,
        "sender_full_name": "Sean",
        "timestamp": 1594926917
    },
    {
        "content": "<p>I don't know that the contributors is looking across all branches</p>",
        "id": 204129635,
        "sender_full_name": "starseeker",
        "timestamp": 1594926937
    },
    {
        "content": "<p>probably not, but seems odd that tom would commit .. 4 times to a branch</p>",
        "id": 204129683,
        "sender_full_name": "Sean",
        "timestamp": 1594926961
    },
    {
        "content": "<p>easy enough to verify</p>",
        "id": 204129753,
        "sender_full_name": "Sean",
        "timestamp": 1594926973
    },
    {
        "content": "<p>I had something in the notes for doing a deeper dive into the git history... one sec...</p>",
        "id": 204129906,
        "sender_full_name": "starseeker",
        "timestamp": 1594927057
    },
    {
        "content": "<p>When I do your svn log count on my local brlcad_repo copy I get:</p>\n<p>1988 tbrowder2</p>",
        "id": 204129991,
        "sender_full_name": "starseeker",
        "timestamp": 1594927084
    },
    {
        "content": "<p>That's across everything</p>",
        "id": 204130007,
        "sender_full_name": "starseeker",
        "timestamp": 1594927093
    },
    {
        "content": "<p>o.O</p>",
        "id": 204130017,
        "sender_full_name": "Sean",
        "timestamp": 1594927103
    },
    {
        "content": "<p>send me your log</p>",
        "id": 204130083,
        "sender_full_name": "Sean",
        "timestamp": 1594927142
    },
    {
        "content": "<p>sent</p>",
        "id": 204130474,
        "sender_full_name": "starseeker",
        "timestamp": 1594927313
    },
    {
        "content": "<p>heh, you know you can just drag n drop them into here? :)</p>",
        "id": 204130611,
        "sender_full_name": "Sean",
        "timestamp": 1594927367
    },
    {
        "content": "<p>got it</p>",
        "id": 204130622,
        "sender_full_name": "Sean",
        "timestamp": 1594927370
    },
    {
        "content": "<p>Ah, right - sorry, my reflexes still think this is a fancy version of irssi</p>",
        "id": 204130746,
        "sender_full_name": "starseeker",
        "timestamp": 1594927427
    },
    {
        "content": "<p>If I do the following script I end up with 73882 commit messages, where github (and git log itself) give only 71289 <a href=\"/user_uploads/1549/Q5OY41RkMzaW_NGZh02xvg7J/log.sh\">log.sh</a></p>",
        "id": 204131721,
        "sender_full_name": "starseeker",
        "timestamp": 1594927895
    },
    {
        "content": "<p>so he did make a lot of commits into the ova repository, so that's one difference albeit to be expected</p>",
        "id": 204131912,
        "sender_full_name": "Sean",
        "timestamp": 1594927991
    },
    {
        "content": "<p>and he did make a branch for working on binary attributes, so that's explaining the 297 additional commits.  if you ran off trunk, you would have seen 1637.</p>",
        "id": 204132457,
        "sender_full_name": "Sean",
        "timestamp": 1594928239
    },
    {
        "content": "<p>Which is also interesting in itself ... github is not counting branch commits?</p>",
        "id": 204132553,
        "sender_full_name": "Sean",
        "timestamp": 1594928282
    },
    {
        "content": "<p>yeah, says it right on the page -- Contributions to master</p>",
        "id": 204132654,
        "sender_full_name": "Sean",
        "timestamp": 1594928330
    },
    {
        "content": "<p>/me is thinking it's probably still worthwhile to have our own gitstats page...</p>",
        "id": 204132757,
        "sender_full_name": "starseeker",
        "timestamp": 1594928383
    },
    {
        "content": "<p>which reminds me</p>",
        "id": 204132765,
        "sender_full_name": "starseeker",
        "timestamp": 1594928388
    },
    {
        "content": "<p>So only the original question remains -- why his commit count is 7 commits short.</p>",
        "id": 204132979,
        "sender_full_name": "Sean",
        "timestamp": 1594928496
    },
    {
        "content": "<p>(btw, the attached script reports 1930 commits for Tom in git.)  <a href=\"/user_uploads/1549/ReZXpvag9KuIY1np3XPvOwV0/log_browder.sh\">log_browder.sh</a></p>",
        "id": 204132990,
        "sender_full_name": "starseeker",
        "timestamp": 1594928507
    },
    {
        "content": "<p>so similar question since svn is saying he had 1988</p>",
        "id": 204133182,
        "sender_full_name": "Sean",
        "timestamp": 1594928603
    },
    {
        "content": "<p>I have some C++ code in misc/repoconv (I think it's in the svn_map_commit_revs.cxx file) which could probably be repurposed to actually diff the logs, with some work - svn makes those types of comparisons very annoying...</p>",
        "id": 204133282,
        "sender_full_name": "starseeker",
        "timestamp": 1594928654
    },
    {
        "content": "<p>wouldn't be unusual except that everyone else is slightly higher in git with the fake/duplicate commits</p>",
        "id": 204133300,
        "sender_full_name": "Sean",
        "timestamp": 1594928669
    },
    {
        "content": "<p>Did he ever adjust svn ignore properties or mime types?</p>",
        "id": 204133505,
        "sender_full_name": "starseeker",
        "timestamp": 1594928772
    },
    {
        "content": "<p>Those commits didn't translate, so we may have lost a few there if he did do that and didn't do any move+change commits</p>",
        "id": 204133568,
        "sender_full_name": "starseeker",
        "timestamp": 1594928809
    },
    {
        "content": "<p>Should be able to figure this out easily by process of elimination.<br>\nI just got the repo cloned -- how do we access the svn rev?</p>",
        "id": 204133826,
        "sender_full_name": "Sean",
        "timestamp": 1594928935
    },
    {
        "content": "<p>It's in the notes.  I have a convenience script in misc/repoconv/NOTES</p>",
        "id": 204133951,
        "sender_full_name": "starseeker",
        "timestamp": 1594928989
    },
    {
        "content": "<p>if we can get a list of svn-to-sha, they can be eliminated from the svn list or sha list and vice versa .. should be just a handful remaining  in both</p>",
        "id": 204133954,
        "sender_full_name": "Sean",
        "timestamp": 1594928990
    },
    {
        "content": "<p>.gitconfig helpers section</p>",
        "id": 204134041,
        "sender_full_name": "starseeker",
        "timestamp": 1594929021
    },
    {
        "content": "<p>svnrev</p>",
        "id": 204134098,
        "sender_full_name": "starseeker",
        "timestamp": 1594929049
    },
    {
        "content": "<p>i'm okay unaliased, rather know what's going on first</p>",
        "id": 204134142,
        "sender_full_name": "Sean",
        "timestamp": 1594929066
    },
    {
        "content": "<p>got it: git log --all --pretty=format:\"%H %N\" --grep svn:revision:29886|awk '{system(\"git checkout \"$1)}'</p>",
        "id": 204134157,
        "sender_full_name": "Sean",
        "timestamp": 1594929075
    },
    {
        "content": "<p>It's probably pretty slow for scripting - I wasn't trying to performance optimize, thinking it was just for checking out one svn rev...</p>",
        "id": 204134192,
        "sender_full_name": "starseeker",
        "timestamp": 1594929099
    },
    {
        "content": "<p>Make sure you cloned the notes too, by the way, or that won't work:  git fetch origin refs/notes/commits:refs/notes/commits</p>",
        "id": 204134446,
        "sender_full_name": "starseeker",
        "timestamp": 1594929222
    },
    {
        "content": "<p>ah, was just about to say - I have no notes</p>",
        "id": 204134581,
        "sender_full_name": "Sean",
        "timestamp": 1594929274
    },
    {
        "content": "<p>is there a way to fetch all?</p>",
        "id": 204134617,
        "sender_full_name": "Sean",
        "timestamp": 1594929298
    },
    {
        "content": "<p>git clone --mirror <a href=\"https://github.com/starseeker/brlcad_conv3.git\">https://github.com/starseeker/brlcad_conv3.git</a></p>",
        "id": 204134684,
        "sender_full_name": "starseeker",
        "timestamp": 1594929344
    },
    {
        "content": "<p>I think that'll do it</p>",
        "id": 204134690,
        "sender_full_name": "starseeker",
        "timestamp": 1594929350
    },
    {
        "content": "<p>k</p>",
        "id": 204134697,
        "sender_full_name": "Sean",
        "timestamp": 1594929358
    },
    {
        "content": "<p>it drives me nuts that git won't pull the notes by default... probably another one of those decisions like not tracking file moves.</p>",
        "id": 204134785,
        "sender_full_name": "starseeker",
        "timestamp": 1594929394
    },
    {
        "content": "<p>okay, so now it's just a process of elimination</p>",
        "id": 204134807,
        "sender_full_name": "Sean",
        "timestamp": 1594929410
    },
    {
        "content": "<p>Was Tom an SVN era only committer or did he have CVS commits?  Things get a lot more wonky when we cross the CVS threshold...</p>",
        "id": 204135111,
        "sender_full_name": "starseeker",
        "timestamp": 1594929569
    },
    {
        "content": "<p>I wish bob would put at least his name on his github account - his account name by itself looks rather bleak</p>",
        "id": 204135517,
        "sender_full_name": "starseeker",
        "timestamp": 1594929764
    },
    {
        "content": "<p>this is going to take a lil while, but getting closer .. lots of curious little discrepancies to chase down</p>",
        "id": 204135991,
        "sender_full_name": "Sean",
        "timestamp": 1594930048
    },
    {
        "content": "<p>just looking at svn revisions, some clearly didn't map, so it'll be easy to find those -- I suspect they're something categoric like adding directories or moving files</p>",
        "id": 204136118,
        "sender_full_name": "Sean",
        "timestamp": 1594930099
    },
    {
        "content": "<p>or attributes like you mentioned</p>",
        "id": 204136146,
        "sender_full_name": "Sean",
        "timestamp": 1594930120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Are you checking just Tom's commits, or doing a whole-history analysis?  If the latter you'll probably see on the order of a couple thousand commits that won't line up, at a guess.</p>",
        "id": 204136374,
        "sender_full_name": "starseeker",
        "timestamp": 1594930258
    },
    {
        "content": "<p>Any git commit without a note doesn't have a matching SVN commit (or at least, an identified one) although the \"preliminary move commit\" commits arguably do map to specific revisions (I just didn't bother assigning the rev number, since the subsequent change commit is the one that should actually restore the tree to the state that matches the SVN commit.)</p>",
        "id": 204136809,
        "sender_full_name": "starseeker",
        "timestamp": 1594930473
    },
    {
        "content": "<p>heh, why would I expand scope on a specific discrepancy?  that'd be terrible way to go about v&amp;v :)</p>",
        "id": 204136967,
        "sender_full_name": "Sean",
        "timestamp": 1594930556
    },
    {
        "content": "<p>just checking tom's to understand this delta.  it's 7 commits, should be easy to isolate and understand.</p>",
        "id": 204137065,
        "sender_full_name": "Sean",
        "timestamp": 1594930587
    },
    {
        "content": "<p>Wasn't sure what you were up to - \"lots of curious little discrepancies\" sounded omnious</p>",
        "id": 204137079,
        "sender_full_name": "starseeker",
        "timestamp": 1594930595
    },
    {
        "content": "<p>At various points when debugging the conversion, I generated lists of sets of unmapped commits.  Can't say I'd look forward to it, but if you need me to I can prepare a complete list of SVN brlcad commits and the corresponding git log and produce the sets of commit deltas.</p>",
        "id": 204137309,
        "sender_full_name": "starseeker",
        "timestamp": 1594930694
    },
    {
        "content": "<p>well, in trying to pin it down, a couple more numbers aren't adding up like if I do a git log on browder and pull all that have an svn ID, I get 1626 commits on trunk, 1919 on all .. which is slightly off the 1630 on the public site and 1930 you reported via some script</p>",
        "id": 204137327,
        "sender_full_name": "Sean",
        "timestamp": 1594930703
    },
    {
        "content": "<p>If I remember correctly commits that are only locatable by tags won't show up in the default git log listings, which was the reason for that crazy script to introspect everything.</p>",
        "id": 204137430,
        "sender_full_name": "starseeker",
        "timestamp": 1594930801
    },
    {
        "content": "<p>No need, it's easy to pull the mapping with:  git log --pretty=format:\"%H %N\" | grep revision | sed 's/svn:revision://g'</p>",
        "id": 204137672,
        "sender_full_name": "Sean",
        "timestamp": 1594930920
    },
    {
        "content": "<p>can write an awk to show the gaps or just inverse grep as needed</p>",
        "id": 204137787,
        "sender_full_name": "Sean",
        "timestamp": 1594930979
    },
    {
        "content": "<p>Just FYI, now that we're really close, I'm planning on doing actual v&amp;v on the repo to sanity check everything.  I don't expect to find anything cause I know you poured heart and soul into in the previous revisions, but still better to find any problems now rather than later.</p>",
        "id": 204138271,
        "sender_full_name": "Sean",
        "timestamp": 1594931251
    },
    {
        "content": "<p>Basically just looking for any actual data loss, like commits missing that shouldn't be missing or something that's off by one or some other bug.<br>\nNothing exhaustive, nothing to hold anything up either.  Just basic comparative testing to see if we understand and expect all the differences.</p>",
        "id": 204138509,
        "sender_full_name": "Sean",
        "timestamp": 1594931368
    },
    {
        "content": "<p>tom's actually a rather convenient delta to investigate.</p>",
        "id": 204138695,
        "sender_full_name": "Sean",
        "timestamp": 1594931438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> so is the account name actually preserved anywhere?  It's okay if it's not, but I'm not seeing it and thought it was getting collapsed and preserved somewhere.</p>",
        "id": 204140091,
        "sender_full_name": "Sean",
        "timestamp": 1594932227
    },
    {
        "content": "<p>It's not, except in the account-map file.  Only other approach I can think of is to add another note line to the commits with the cvs/svn commit name, and that'd be a bit of a job to do right.</p>",
        "id": 204140226,
        "sender_full_name": "starseeker",
        "timestamp": 1594932296
    },
    {
        "content": "<p>I'm afraid to touch the main logic at this point if I don't absolutely have to, which would mean appending another not line with a post-conversion analysis.  Doable, but not trivial.</p>",
        "id": 204140294,
        "sender_full_name": "starseeker",
        "timestamp": 1594932347
    },
    {
        "content": "<p>If it's helpful, here's the list my logic generates of SVN commits that have no identifiable corresponding git commit (at least, without analyzing the contents of the diffs themselves, which I have not attempted):  <a href=\"/user_uploads/1549/OfHrj6Fng8fvrOc1O8OegL5O/svn_list.txt\">svn_list.txt</a></p>",
        "id": 204140828,
        "sender_full_name": "starseeker",
        "timestamp": 1594932578
    },
    {
        "content": "<p>hmm, interesting</p>",
        "id": 204140975,
        "sender_full_name": "Sean",
        "timestamp": 1594932639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/204140828\">said</a>:</p>\n<blockquote>\n<p>If it's helpful, here's the list my logic generates of SVN commits that have no identifiable corresponding git commit (at least, without analyzing the contents of the diffs themselves, which I have not attempted):  <a href=\"/user_uploads/1549/OfHrj6Fng8fvrOc1O8OegL5O/svn_list.txt\">svn_list.txt</a></p>\n</blockquote>\n<p>Have you gone through the list already exhaustively?  Anything unexpected?</p>",
        "id": 204142420,
        "sender_full_name": "Sean",
        "timestamp": 1594933311
    },
    {
        "content": "<p>obviously lots of categoric ones to not worry about that I'd distill to, like all the generated ones and tag commits are non-issues.</p>",
        "id": 204142612,
        "sender_full_name": "Sean",
        "timestamp": 1594933400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/204140226\">said</a>:</p>\n<blockquote>\n<p>It's not, except in the account-map file.  Only other approach I can think of is to add another note line to the commits with the cvs/svn commit name, and that'd be a bit of a job to do right.</p>\n</blockquote>\n<p>I have mixed feelings on this.  On one hand, it would be nice to preserve the actual user name recorded on that <em>specific</em> commit, but the historic merit is questionable (beyond provenance, which is already lost) and can't think of an actual use case unless mappings are wrong (which reminds me, should check the first and last author in the mapping file specifically).</p>",
        "id": 204143154,
        "sender_full_name": "Sean",
        "timestamp": 1594933663
    },
    {
        "content": "<p>It's fine without.  If you want to add it, that'd be fine too.</p>",
        "id": 204143282,
        "sender_full_name": "Sean",
        "timestamp": 1594933725
    },
    {
        "content": "<p>Not exhaustively, and that particular list is CVS era only - I'm working on a more comprehensive one.</p>",
        "id": 204144395,
        "sender_full_name": "starseeker",
        "timestamp": 1594934229
    },
    {
        "content": "<p>I'm inclined to skip it for now - since git notes can be added without impacting the main sha1 repo history, we can always go back and generate the mappings later if we discover it's worthwhile. ( I plan to put the original CVS and SVN repos up in a single archived git repository on the project, to preserve them for potential use when something comes along to dethrone git and some poor sucker gets to do this again.)</p>",
        "id": 204144650,
        "sender_full_name": "starseeker",
        "timestamp": 1594934383
    },
    {
        "content": "<p>These might be a bit more interesting - I disable the limiter and ran the check for all svn commits, as well as printing out unmapped (or at least, not uniquely mapped by commit message) git commits.<br>\n<a href=\"/user_uploads/1549/H0JqWor2bHxb2M4WMvqmWwee/svn_list.txt\">svn_list.txt</a><br>\n<a href=\"/user_uploads/1549/J-3K340mINDGpW6ROeGsICD4/git_list.txt\">git_list.txt</a></p>",
        "id": 204145801,
        "sender_full_name": "starseeker",
        "timestamp": 1594935029
    },
    {
        "content": "<p>The git version is less sophisticated - duplicate commit messages on different commits will show up - but it's a start.</p>",
        "id": 204146006,
        "sender_full_name": "starseeker",
        "timestamp": 1594935137
    },
    {
        "content": "<p>Update - better version of the git_list.txt file that also removes unique timestamp + message matches.  &lt; 2k as opposed to almost 6, and visually most of them look like cvs-fast-export breaking down commits differently:<br>\n<a href=\"/user_uploads/1549/vdLoPP75h1Sc9ekD_443cpRn/git_list.txt\">git_list.txt</a></p>",
        "id": 204146529,
        "sender_full_name": "starseeker",
        "timestamp": 1594935462
    },
    {
        "content": "<p>The branch delete commits are needed to preserve when a branch was removed in SVN, since we can't actually delete the branches in git without unreachable commits being garbage collected.</p>",
        "id": 204146674,
        "sender_full_name": "starseeker",
        "timestamp": 1594935547
    },
    {
        "content": "<p>First number in both lists is the timestamp, so they're sorted chronologically.  SVN has commit ids, and git has sha1 hashes.  Then for both commit message is shown, which usually gives a hint as to why there's no mapping in the other system.</p>",
        "id": 204148488,
        "sender_full_name": "starseeker",
        "timestamp": 1594936558
    },
    {
        "content": "<p>posted announcement to mailing lists, facebook, and twitter</p>",
        "id": 204149377,
        "sender_full_name": "Sean",
        "timestamp": 1594937138
    },
    {
        "content": "<p>git-stats looks like it's pretty much working - probably need to tweak the output some for our specific needs, but right general idea:<br>\n<a href=\"https://brlcad.org/~starseeker/git_stats/authors/best_authors.html\">https://brlcad.org/~starseeker/git_stats/authors/best_authors.html</a></p>",
        "id": 204158615,
        "sender_full_name": "starseeker",
        "timestamp": 1594944502
    },
    {
        "content": "<p>/me pushes his luck by feeding the full 70k+ commit history through the git-&gt;fossil converter... curious to see if fossil can handle this.</p>",
        "id": 204205353,
        "sender_full_name": "starseeker",
        "timestamp": 1594992463
    },
    {
        "content": "<p>of course it can, no reason it shouldn't.  he's pretty consistent in making things robust to scale.</p>\n<p>hey question on the svn revisions and git notes...</p>",
        "id": 204246173,
        "sender_full_name": "Sean",
        "timestamp": 1595012785
    },
    {
        "content": "<p>I know this is coming late and maybe we hashed it out earlier(??), but given the tooling issues, what about just stashing the cvs/svn rev info as the last line in the commit log?</p>",
        "id": 204247634,
        "sender_full_name": "Sean",
        "timestamp": 1595013538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> per your e-mail, you're also welcome to use your <a href=\"http://brlcad.org\">brlcad.org</a> alias (rossberg).. which can be pointed to anything, and can be claimed in your github account as an additional address.</p>",
        "id": 204249553,
        "sender_full_name": "Sean",
        "timestamp": 1595014800
    },
    {
        "content": "<p>Took most of a day to run, but it did work - cool!  I present BRL-CAD, in fossil:  <br>\n<a href=\"/user_uploads/1549/yARjn26O1ocX7lxpcXZwzOD8/brlcad-fossil.jpg\">brlcad-fossil.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/yARjn26O1ocX7lxpcXZwzOD8/brlcad-fossil.jpg\" title=\"brlcad-fossil.jpg\"><img src=\"/user_uploads/1549/yARjn26O1ocX7lxpcXZwzOD8/brlcad-fossil.jpg\"></a></div>",
        "id": 204252954,
        "sender_full_name": "starseeker",
        "timestamp": 1595016777
    },
    {
        "content": "<p>Theoretically possible to stash it there, but once we do we lose the trivial 1-1 commit message correspondence with the earlier repositories.  The latter is what let me generate the svn_list.txt and git_list.txt files above - I know we could work around adding the extra info, but the git notes appealed to me semantically (metadata on the commit, rather than part of the core message/data/parent relationship)</p>",
        "id": 204253265,
        "sender_full_name": "starseeker",
        "timestamp": 1595016953
    },
    {
        "content": "<p>Also, I can't incorporate it into the CVS portion of the history without trying to hack the cvs-git tool in some weird way - I'm taking their git output and assigning the notes with our ID numbers post-conversion, rather than during.</p>",
        "id": 204253382,
        "sender_full_name": "starseeker",
        "timestamp": 1595017017
    },
    {
        "content": "<p>Once they're in git, the log messages can be edited, so CVS could still be annotated too.</p>",
        "id": 204253719,
        "sender_full_name": "Sean",
        "timestamp": 1595017165
    },
    {
        "content": "<p>Editing the log messages is (I think) like editing the commit names - it will propagate invalidating the SHA1 hashes all the way up the chain.</p>",
        "id": 204253827,
        "sender_full_name": "starseeker",
        "timestamp": 1595017203
    },
    {
        "content": "<p>I get the appeal, but the downsides are starting to dominate the more I work with it.</p>",
        "id": 204253878,
        "sender_full_name": "Sean",
        "timestamp": 1595017234
    },
    {
        "content": "<p>invalidating the sha hashes was a notes issue though, wasn't it</p>",
        "id": 204253922,
        "sender_full_name": "Sean",
        "timestamp": 1595017263
    },
    {
        "content": "<p>if we're not using notes, then that's no longer an issue</p>",
        "id": 204253948,
        "sender_full_name": "Sean",
        "timestamp": 1595017279
    },
    {
        "content": "<p>Actually, when you asked the git list they gave us a theoretical way around that.</p>",
        "id": 204253987,
        "sender_full_name": "starseeker",
        "timestamp": 1595017306
    },
    {
        "content": "<p>I never tested it, but it's not a huge issue - in principle I could do a complete regeneration of all the notes information given timestamps and commit messages that match the CVS/SVN messages.</p>",
        "id": 204254093,
        "sender_full_name": "starseeker",
        "timestamp": 1595017345
    },
    {
        "content": "<p>What downsides are you encountering?</p>",
        "id": 204254248,
        "sender_full_name": "starseeker",
        "timestamp": 1595017386
    },
    {
        "content": "<p>right but that's the whole point -- it's really a half-baked feature that isn't working well.  the log message is part of the commit and the only reliable place to stash it.</p>",
        "id": 204254312,
        "sender_full_name": "Sean",
        "timestamp": 1595017418
    },
    {
        "content": "<p>I could do it for the SVN portion of the history, although there is a risk I'll break something - CVS is much harder.</p>",
        "id": 204254492,
        "sender_full_name": "starseeker",
        "timestamp": 1595017469
    },
    {
        "content": "<p>How much do you envision using that information?  I was figuring the \"svnrev\" alias for the gitconfig file would cover the most common use case - check out an svn revision - and those ids would grow steadily less relevant with time... Is the part you're not liking that you don't get the notes in a default git clone?</p>",
        "id": 204255012,
        "sender_full_name": "starseeker",
        "timestamp": 1595017701
    },
    {
        "content": "<p>Actually, doing it even with the SVN history would be a substantial effort as I look at it - over 300 commits would have be manually updated, plus the correct surgery on the C++ commit header generation code.</p>",
        "id": 204256033,
        "sender_full_name": "starseeker",
        "timestamp": 1595018169
    },
    {
        "content": "<p>well let's see.. there's:<br>\n1) people have to be told that notes exist and use a command they've probably never used before to pull them <br>\n2) additional options that must be learned to work with them (e.g., --pretty=format: %N)<br>\n3) 72354 commits to add them that show up in log, have to be ignored or scripted around<br>\n4) the restriction that if we change any historic commit, we'll need to do surgery to reattach the note<br>\n5) the general feeling that notes are half-baked and they're not prioritized to change anytime soon<br>\n6) needing to have additional customizations/macros that have to be remembered, maintained, explained<br>\n7) the fat that presents to users simply as the last line of the log, so it didn't really buy us more than logical separation<br>\n8) logical separation isn't compelling by itself as it could just as easily be stripped from logs (with less machinery than adding it)<br>\n9) the svn revs are not visible to an observer without it being explained...</p>",
        "id": 204256066,
        "sender_full_name": "Sean",
        "timestamp": 1595018202
    },
    {
        "content": "<p>I suppose #1 and #9 are related, but separate points on needing to know they exist, and needing to actively take steps to do something about it</p>",
        "id": 204256121,
        "sender_full_name": "Sean",
        "timestamp": 1595018244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Another possibility is to write a utility to take the completed conversion and construct a new repository from that, incorporating the notes as commits.</p>",
        "id": 204256145,
        "sender_full_name": "starseeker",
        "timestamp": 1595018261
    },
    {
        "content": "<p>(essentially, \"replay\" the history again, but this time from git-&gt;git rather than through all the custom insanity.)</p>",
        "id": 204256258,
        "sender_full_name": "starseeker",
        "timestamp": 1595018306
    },
    {
        "content": "<p>That's probably the most practical option by a long shot, actually, now that I think about it.</p>",
        "id": 204256301,
        "sender_full_name": "starseeker",
        "timestamp": 1595018353
    },
    {
        "content": "<p>er, incorporating the notes on the end of the commit messages rather.</p>",
        "id": 204256418,
        "sender_full_name": "starseeker",
        "timestamp": 1595018417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/204255012\">said</a>:</p>\n<blockquote>\n<p>How much do you envision using that information?  I was figuring the \"svnrev\" alias for the gitconfig file would cover the most common use case - check out an svn revision - and those ids would grow steadily less relevant with time... Is the part you're not liking that you don't get the notes in a default git clone?</p>\n</blockquote>\n<p>I actually envision using it on the regular for at least a while until references in trackers and notes and other places become less frequent..  but again, I don't need machinery to do that.  I just need it somewhere.  A file in the repo would work if the revs didn't change.  Since they do, the log becomes the next best place I think.  One can grep a log and grab a sha.</p>",
        "id": 204256421,
        "sender_full_name": "Sean",
        "timestamp": 1595018419
    },
    {
        "content": "<p>So you're wanting something robust even to a full history rewrite, if it comes to that?</p>",
        "id": 204256515,
        "sender_full_name": "starseeker",
        "timestamp": 1595018494
    },
    {
        "content": "<p>Is there value in the branch note?  aren't they on their respective branches?</p>",
        "id": 204256537,
        "sender_full_name": "Sean",
        "timestamp": 1595018505
    },
    {
        "content": "<p>Not really, git doesn't have the same notion of branch specific histories that svn does</p>",
        "id": 204256611,
        "sender_full_name": "starseeker",
        "timestamp": 1595018541
    },
    {
        "content": "<p>If you want the ability to find the commits made to a branch, and only those commits, you need the branch notes</p>",
        "id": 204256635,
        "sender_full_name": "starseeker",
        "timestamp": 1595018567
    },
    {
        "content": "<p>I think I've got a link somewhere that explains how that works - it's a low level consequence of Git's world view</p>",
        "id": 204256693,
        "sender_full_name": "starseeker",
        "timestamp": 1595018598
    },
    {
        "content": "<p>I do recall the conversation a while back<br>\nI guess I've just not needed to know that specifically</p>",
        "id": 204256736,
        "sender_full_name": "Sean",
        "timestamp": 1595018634
    },
    {
        "content": "<p>and can't it be derived?  I mean I can pull a git tree view and see all the commits on that branch</p>",
        "id": 204256884,
        "sender_full_name": "Sean",
        "timestamp": 1595018710
    },
    {
        "content": "<p>it's of course squirrelly when commits are cherry picked over, but from svn's perspective, they would have presented as being made on the branch too, <br>\nunless one peeks at the mergeinfo</p>",
        "id": 204257037,
        "sender_full_name": "Sean",
        "timestamp": 1595018797
    },
    {
        "content": "<p>You'll see the commits, but git doesn't retain the origin branch for the commit.  Once the commit is referenced by multiple branches, they're equal - there's nothing that remember what the \"first\" branch was.  It will work up to a point, but once you start merging multiple directions between branches you lose the origin information</p>",
        "id": 204257038,
        "sender_full_name": "starseeker",
        "timestamp": 1595018800
    },
    {
        "content": "<p>but... it'd be the first chronologically</p>",
        "id": 204257137,
        "sender_full_name": "Sean",
        "timestamp": 1595018864
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/4629358/show-only-history-of-one-branch-in-a-git-log\">https://stackoverflow.com/questions/4629358/show-only-history-of-one-branch-in-a-git-log</a>  discusses some of the issues</p>",
        "id": 204257300,
        "sender_full_name": "starseeker",
        "timestamp": 1595018927
    },
    {
        "content": "<p>and even then, I'm not sure what knowing the branch is going to help with.  knowing the committer, sure.  knowing when or a commit message saying why, sure.</p>",
        "id": 204257302,
        "sender_full_name": "Sean",
        "timestamp": 1595018928
    },
    {
        "content": "<p>I sometimes want it to know if a particular change took place while I was working in a topic branch, or whether the change took place in trunk.</p>",
        "id": 204257365,
        "sender_full_name": "starseeker",
        "timestamp": 1595018965
    },
    {
        "content": "<p>so that joker already does something I really despise..  --squash</p>",
        "id": 204257376,
        "sender_full_name": "Sean",
        "timestamp": 1595018973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>   If I remember correctly, you can see the issue by trying to look at the history of the bullet branch - use git's own tools, and then the method I have in the NOTES file using the branch notes.</p>",
        "id": 204257523,
        "sender_full_name": "starseeker",
        "timestamp": 1595019031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/204257365\">said</a>:</p>\n<blockquote>\n<p>I sometimes want it to know if a particular change took place while I was working in a topic branch, or whether the change took place in trunk.</p>\n</blockquote>\n<p>but that's my point, if you annotate the line and find the hash, and look at the first instance on a git tree, won't you know that?</p>",
        "id": 204257575,
        "sender_full_name": "Sean",
        "timestamp": 1595019063
    },
    {
        "content": "<p>If I'm trying to review what was done in the branch, but I've merged in trunk/master, it gets hard because suddenly a whole bunch of \"master\" commits are now part of that branches history, interwoven with the commits made on the branch</p>",
        "id": 204257617,
        "sender_full_name": "starseeker",
        "timestamp": 1595019091
    },
    {
        "content": "<p>I'd have to try that for an individual commit, but if both branches that reference the individual commit are older than the commit itself I don't think you can distinguish which one created it.</p>",
        "id": 204257758,
        "sender_full_name": "starseeker",
        "timestamp": 1595019169
    },
    {
        "content": "<p>Another concrete case - if I want to look at the original development of the CMake build system in the cmake branch,  in SVN I can log just in that branch and not see any trunk commits that happened while that branch was live.  In Git, once I merged the cmake branch back into master, suddenly all the master commits that took place while the cmake branch was live are effectively part of the history of both branches.</p>",
        "id": 204257976,
        "sender_full_name": "starseeker",
        "timestamp": 1595019308
    },
    {
        "content": "<p>I'm still not seeing how that's a problem that needs to be solved.  So commits are interwoven... that means cherry picking might be hard.  It probably means I should merge more frequently or will make me merge less frequently or, better yet, not be working on a branch for a long time.</p>",
        "id": 204258004,
        "sender_full_name": "Sean",
        "timestamp": 1595019344
    },
    {
        "content": "<p>It makes it hard for me to follow the commit history of a particular feature's development, without interference from commits in other branches.  If I'm the only one that has the problem it doesn't matter particularly, but that was my motivation since it is something that can be done now in SVN (and I have done on occasion).</p>",
        "id": 204258103,
        "sender_full_name": "starseeker",
        "timestamp": 1595019414
    },
    {
        "content": "<p>I may use it more than I realize, but I'm still struggling to come up with a case where knowing the branch is going to change my behavior or awareness on something.  I'm usually wondering \"who wrote this chunk of code, why was it written\".  I suppose knowing a branch might help indicate that but to date the info's either not existed or come from log messages because branch use has historically been big isolated things.</p>",
        "id": 204258377,
        "sender_full_name": "Sean",
        "timestamp": 1595019595
    },
    {
        "content": "<p>Right - that's the point though, in Git we lose that isolation.  Hang on, let me see if I can give you a concrete example with bullet...</p>",
        "id": 204258504,
        "sender_full_name": "starseeker",
        "timestamp": 1595019651
    },
    {
        "content": "<p>like I might consider the binary attributes  or opencl branches, they both have lots of changes, so it might be nice to know what changes aren't on trunk</p>",
        "id": 204258515,
        "sender_full_name": "Sean",
        "timestamp": 1595019658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  do you want me to start trying to figure out how to replay the history and consolidate the notes into the commit message?</p>",
        "id": 204258613,
        "sender_full_name": "starseeker",
        "timestamp": 1595019711
    },
    {
        "content": "<p>but then maybe I should check out those histories, because I expect the tree view to clearly show what was done on the branch</p>",
        "id": 204258622,
        "sender_full_name": "Sean",
        "timestamp": 1595019715
    },
    {
        "content": "<p>in my experience it does not</p>",
        "id": 204258675,
        "sender_full_name": "starseeker",
        "timestamp": 1595019729
    },
    {
        "content": "<p>I may be missing something - see if you can use (say) gitk to visualize the history of the bullet branch</p>",
        "id": 204258729,
        "sender_full_name": "starseeker",
        "timestamp": 1595019763
    },
    {
        "content": "<p>(by the way, for general history browsing I generally use gitk --branches\"*\" to avoid seeing the notes commits)</p>",
        "id": 204258827,
        "sender_full_name": "starseeker",
        "timestamp": 1595019812
    },
    {
        "content": "<p>okay, so then convinced me it's worth keeping for now -- the branch info -- if only because we have a dozen branches with work worth isolating and if it helps isolate them, fair enough</p>",
        "id": 204258912,
        "sender_full_name": "Sean",
        "timestamp": 1595019848
    },
    {
        "content": "<p>OK, so in the NOTES file I have two aliases defined - logb and logsvnb.  The former tries to use git's \"standard\" information to follow the branch history, and the logsvnb alias uses the notes.</p>",
        "id": 204259170,
        "sender_full_name": "starseeker",
        "timestamp": 1595019994
    },
    {
        "content": "<p>If you checkout the bullet branch, then do:</p>\n<p>git logb</p>\n<p>you'll get one result, and </p>\n<p>git logsvnb</p>\n<p>will produce another.</p>",
        "id": 204259228,
        "sender_full_name": "starseeker",
        "timestamp": 1595020027
    },
    {
        "content": "<p>(you can also do what the aliases are doing in scripts, that was just an easy way for me to achieve the result)</p>",
        "id": 204259357,
        "sender_full_name": "starseeker",
        "timestamp": 1595020086
    },
    {
        "content": "<p>after I set something up, right, to get those aliases?</p>",
        "id": 204259506,
        "sender_full_name": "Sean",
        "timestamp": 1595020187
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/JhuZOAWh7IpQTiiyguAucLtO/Screen-Shot-2020-07-17-at-5.09.07-PM.png\">Screen-Shot-2020-07-17-at-5.09.07-PM.png</a> &lt;-- another downside...</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/JhuZOAWh7IpQTiiyguAucLtO/Screen-Shot-2020-07-17-at-5.09.07-PM.png\" title=\"Screen-Shot-2020-07-17-at-5.09.07-PM.png\"><img src=\"/user_uploads/1549/JhuZOAWh7IpQTiiyguAucLtO/Screen-Shot-2020-07-17-at-5.09.07-PM.png\"></a></div>",
        "id": 204259596,
        "sender_full_name": "Sean",
        "timestamp": 1595020218
    },
    {
        "content": "<p>Try --branches=\"*\" instead of --all - does that help?</p>",
        "id": 204259873,
        "sender_full_name": "starseeker",
        "timestamp": 1595020424
    },
    {
        "content": "<p>Yes, the NOTES definitions get added to your ~/.gitconfig file</p>",
        "id": 204260012,
        "sender_full_name": "starseeker",
        "timestamp": 1595020451
    },
    {
        "content": "<p>ah, need a [alias] header</p>",
        "id": 204260124,
        "sender_full_name": "Sean",
        "timestamp": 1595020515
    },
    {
        "content": "<p>Oh, sorry - I figured for the docs to put in a fully populated .gitconfig file as an example, but I haven't assembled it yet (if we decide not to keep the notes in this form it's moot anyway).</p>",
        "id": 204260219,
        "sender_full_name": "starseeker",
        "timestamp": 1595020568
    },
    {
        "content": "<p>I know this is all one-time setup, but it really does feel clunky -- I think if we can make it work as the last two lines of the log message, we should and most if not all of this custom can go away</p>",
        "id": 204260226,
        "sender_full_name": "Sean",
        "timestamp": 1595020573
    },
    {
        "content": "<p>Well, logsvnb won't but --all will behave better, that's true</p>",
        "id": 204260258,
        "sender_full_name": "starseeker",
        "timestamp": 1595020604
    },
    {
        "content": "<p>well there simply won't be 72k commits that sometimes appear and have to be explained/ignored/parsed over/etc</p>",
        "id": 204260347,
        "sender_full_name": "Sean",
        "timestamp": 1595020663
    },
    {
        "content": "<p>so that'd be a plus</p>",
        "id": 204260361,
        "sender_full_name": "Sean",
        "timestamp": 1595020668
    },
    {
        "content": "<p>curious -- are they on a branch or something?</p>",
        "id": 204260447,
        "sender_full_name": "Sean",
        "timestamp": 1595020710
    },
    {
        "content": "<p>It's some soft of separate mechanism  .git/refs/notes/commits I think</p>",
        "id": 204260532,
        "sender_full_name": "starseeker",
        "timestamp": 1595020773
    },
    {
        "content": "<p>very bizarre presentation</p>",
        "id": 204260673,
        "sender_full_name": "Sean",
        "timestamp": 1595020819
    },
    {
        "content": "<p>when I inspected one, it was presented as a change to file /dev/null</p>",
        "id": 204260710,
        "sender_full_name": "Sean",
        "timestamp": 1595020835
    },
    {
        "content": "<p>user \"CVS_SVN_GIT Mapper &lt;cvs_svn_git&gt;\" which I presume you set</p>",
        "id": 204260793,
        "sender_full_name": "Sean",
        "timestamp": 1595020870
    },
    {
        "content": "<p>yes</p>",
        "id": 204260865,
        "sender_full_name": "starseeker",
        "timestamp": 1595020896
    },
    {
        "content": "<p>and are predominantly at the end of the git log --all  listing, but then are partially interwoven ...odd ordering</p>",
        "id": 204260880,
        "sender_full_name": "Sean",
        "timestamp": 1595020900
    },
    {
        "content": "<p>I wish git embraced a feature like svn attributes.  I think mercurial supports arbitrary key/value attributes on their objects.  <em>sigh</em></p>",
        "id": 204261515,
        "sender_full_name": "Sean",
        "timestamp": 1595021218
    },
    {
        "content": "<p><a href=\"https://github.com/newren/git-filter-repo/\">https://github.com/newren/git-filter-repo/</a> might have some possibilities</p>",
        "id": 204262470,
        "sender_full_name": "starseeker",
        "timestamp": 1595021746
    },
    {
        "content": "<p>you sure it's not easier to update the tooling?  seems like it should be easier to not write notes and simply append to the log messages as they are committed.</p>",
        "id": 204262765,
        "sender_full_name": "Sean",
        "timestamp": 1595021915
    },
    {
        "content": "<p>I think I could also probably write a script that adds them to the existing log if that'd help</p>",
        "id": 204263043,
        "sender_full_name": "Sean",
        "timestamp": 1595022097
    },
    {
        "content": "<p>I've got over 300 manually adjusted commits which would have to be updated by hand (and being off by one character length in any of them will halt the commit) - plus it's now been close to a year since I've mucked in the code that generates the commit headers.  And that's still just the SVN portion of the history - I'd need something like git-filter-repo anyway to get the CVS version.</p>",
        "id": 204263185,
        "sender_full_name": "starseeker",
        "timestamp": 1595022173
    },
    {
        "content": "<p>ah, you're not rebuilding the cvs portion repeatedly?</p>",
        "id": 204263257,
        "sender_full_name": "Sean",
        "timestamp": 1595022215
    },
    {
        "content": "<p>just picking up at 17k or wherever</p>",
        "id": 204263268,
        "sender_full_name": "Sean",
        "timestamp": 1595022228
    },
    {
        "content": "<p>Correct - cvs-git generates that, I then post-process it to match SVN commits to CVS-&gt;GIT commits</p>",
        "id": 204263334,
        "sender_full_name": "starseeker",
        "timestamp": 1595022253
    },
    {
        "content": "<p>~29k, IIRC</p>",
        "id": 204263362,
        "sender_full_name": "starseeker",
        "timestamp": 1595022268
    },
    {
        "content": "<p>ah, right, the reorg was cvs</p>",
        "id": 204263388,
        "sender_full_name": "Sean",
        "timestamp": 1595022291
    },
    {
        "content": "<p>and that was nearly 23k</p>",
        "id": 204263397,
        "sender_full_name": "Sean",
        "timestamp": 1595022300
    },
    {
        "content": "<p>/me nods - I could have put the svn numbers in the commit messages when I was originally writing that code - in fact I considered it - but it wouldn't have been a universal solution and it complicated the commit  message mappings, which had to happen for CVS anyway.</p>",
        "id": 204263511,
        "sender_full_name": "starseeker",
        "timestamp": 1595022369
    },
    {
        "content": "<p>/me nods</p>",
        "id": 204263547,
        "sender_full_name": "Sean",
        "timestamp": 1595022394
    },
    {
        "content": "<p>it wasn't really apparent the burden or full implications until working with it more</p>",
        "id": 204263568,
        "sender_full_name": "Sean",
        "timestamp": 1595022410
    },
    {
        "content": "<p>If you want to help, you could take a look at <a href=\"https://github.com/newren/git-filter-repo/\">https://github.com/newren/git-filter-repo/</a> and see if that provides enough power to rewrite the history by pulling the note (if any) from each commit and appending it to the commit message.</p>",
        "id": 204263643,
        "sender_full_name": "starseeker",
        "timestamp": 1595022479
    },
    {
        "content": "<p>The notes associate the information with the commit, so the problem becomes to (for each commit) retrieve the information and assemble the new commit message.  Then, it needs to be applied and the history above it rewritten to accommodate the new sha1.</p>",
        "id": 204263885,
        "sender_full_name": "starseeker",
        "timestamp": 1595022642
    },
    {
        "content": "<p>Even with a well tuned process that'll be quite slow, especially for the older commits...</p>",
        "id": 204263910,
        "sender_full_name": "starseeker",
        "timestamp": 1595022668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> if you're OK with a mapping file, what about a mapping file for timestamp plus commit message to SVN id?  That should be robust if we can supply a way to look up a given commit using those inputs, even if we skip the notes</p>",
        "id": 204264086,
        "sender_full_name": "starseeker",
        "timestamp": 1595022798
    },
    {
        "content": "<p>(by the way, since a default git clone from github doesn't pull the notes, they're not going to be an issue for people unless they go looking for them...)</p>",
        "id": 204264117,
        "sender_full_name": "starseeker",
        "timestamp": 1595022827
    },
    {
        "content": "<p>I would just shell script it myself, something like:<br>\noldmessage=\"<code>git log ...</code>\"<br>\ngit --ammend -m \"$oldmessage\\nsvn:revision:$revision\"</p>",
        "id": 204264209,
        "sender_full_name": "Sean",
        "timestamp": 1595022887
    },
    {
        "content": "<p>If you want to give that a go, the repo on github now should be a suitable test</p>",
        "id": 204264258,
        "sender_full_name": "starseeker",
        "timestamp": 1595022930
    },
    {
        "content": "<p>I can, but it might delay things for monday -- still working through yesterday's validation check and need to create a few more accounts for the final upload</p>",
        "id": 204264381,
        "sender_full_name": "Sean",
        "timestamp": 1595023011
    },
    {
        "content": "<p>If we need to figure out another solution that involves the conversion process, Monday is shot anyway...</p>",
        "id": 204264426,
        "sender_full_name": "starseeker",
        "timestamp": 1595023056
    },
    {
        "content": "<p>a couple other things I wanted to test too, like what happens if we garbage collect -- are there any orphans now?</p>",
        "id": 204264473,
        "sender_full_name": "Sean",
        "timestamp": 1595023082
    },
    {
        "content": "<p>git fsck --lost-found can check for that, IIRC</p>",
        "id": 204264507,
        "sender_full_name": "starseeker",
        "timestamp": 1595023106
    },
    {
        "content": "<p>also, what happens after deleting all the note commits. . and then garbage collecting.  is there more to clean up.</p>",
        "id": 204264512,
        "sender_full_name": "Sean",
        "timestamp": 1595023110
    },
    {
        "content": "<p>right, I know -- that's just one of a couple dozen validation things to check on my list</p>",
        "id": 204264553,
        "sender_full_name": "Sean",
        "timestamp": 1595023143
    },
    {
        "content": "<p>common ops someone might do to their checkout</p>",
        "id": 204264568,
        "sender_full_name": "Sean",
        "timestamp": 1595023160
    },
    {
        "content": "<p>/me shakes his head - I think we'd better not plan on Monday.  You may find more issues, so let's just wait until you're either confident or have identified specifically where we need to end up to be ready.</p>",
        "id": 204264668,
        "sender_full_name": "starseeker",
        "timestamp": 1595023216
    },
    {
        "content": "<p>We did originally plan for there being about 2 weeks of validation.  I was going to try an cram as much as possible in 4 days <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 204264916,
        "sender_full_name": "Sean",
        "timestamp": 1595023417
    },
    {
        "content": "<p>okay, time to stretch legs.. oof.   giving myself nerve issues with so much sitting for months now.</p>",
        "id": 204265003,
        "sender_full_name": "Sean",
        "timestamp": 1595023465
    },
    {
        "content": "<p>/me nods.  Let me know.</p>\n<p>FWIW, this might generate a SHA1 independent map:  <br>\ngit log --all --pretty=format:\"%ct%nGITMSG%n%B%nGITMSGEND%n%N%n\"</p>",
        "id": 204265038,
        "sender_full_name": "starseeker",
        "timestamp": 1595023502
    },
    {
        "content": "<p>oh nice, that eliminates the indentation too.... I was just going to sed that out, but this is better.</p>",
        "id": 204265141,
        "sender_full_name": "Sean",
        "timestamp": 1595023565
    },
    {
        "content": "<p>We could just commit that, and then the notes wouldn't matter much... most clones wouldn't have them.</p>",
        "id": 204265183,
        "sender_full_name": "starseeker",
        "timestamp": 1595023602
    },
    {
        "content": "<p>That's one thing about git I unreservedly approve of over SVN - it is way way better about programmatic extraction of information.</p>",
        "id": 204265255,
        "sender_full_name": "starseeker",
        "timestamp": 1595023653
    },
    {
        "content": "<p>If you re-clone from github, without pulling the notes, your git log (and gitk) won't show the notes commits even with the --all option.</p>",
        "id": 204265529,
        "sender_full_name": "starseeker",
        "timestamp": 1595023852
    },
    {
        "content": "<p>Here's a demonstration of a command pair that can use a timestamp and message to checkout a specific commit: <br>\nsha1=$(git log -F --after=1047583133 --before=1047583133 --grep=\"<strong>* empty log message </strong>*\" --pretty=format:\"%H\") &amp;&amp; git checkout $sha1</p>",
        "id": 204266875,
        "sender_full_name": "starseeker",
        "timestamp": 1595024915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/204265183\">said</a>:</p>\n<blockquote>\n<p>We could just commit that, and then the notes wouldn't matter much... most clones wouldn't have them.</p>\n</blockquote>\n<p>Just commit what?</p>",
        "id": 204273063,
        "sender_full_name": "Sean",
        "timestamp": 1595030688
    },
    {
        "content": "<p>good to know about the notes, so the extra commits wouldn't be ongoing nuisance unless someone pulls them.   but if they're on the commit log, would there be a reason for keeping both?  or is that not what you meant?</p>",
        "id": 204273299,
        "sender_full_name": "Sean",
        "timestamp": 1595030894
    },
    {
        "content": "<p>If we generate a script that is capable of checking out the matching git commit without requiring the sha1, based on the timestamp and some or all of the commit message, then the git notes won't be needed anymore.</p>",
        "id": 204273702,
        "sender_full_name": "starseeker",
        "timestamp": 1595031313
    },
    {
        "content": "<p>I suppose we could strip them, but I'd rather leave them (at least in the primary github repo, even if we don't tell people to grab them by default) in case whatever script we come up with proves to have some sort of problem - then they'd be available as a fallback.</p>",
        "id": 204273785,
        "sender_full_name": "starseeker",
        "timestamp": 1595031399
    },
    {
        "content": "<p>Won't they get disassociated when the commits get ammended?  guess we can find out..</p>",
        "id": 204274009,
        "sender_full_name": "Sean",
        "timestamp": 1595031621
    },
    {
        "content": "<p>Amended?  Why would we do that, if the script can check out the SVN id?</p>",
        "id": 204274079,
        "sender_full_name": "starseeker",
        "timestamp": 1595031729
    },
    {
        "content": "<p>If we eventually have to change the repo for some reason we'd have to either try the solution the git folks gave us or re-generate the notes, I suppose</p>",
        "id": 204274112,
        "sender_full_name": "starseeker",
        "timestamp": 1595031808
    },
    {
        "content": "<p>maybe talking about different things?</p>\n<p>to append to svn rev the log message, that's an amend</p>",
        "id": 204274120,
        "sender_full_name": "Sean",
        "timestamp": 1595031832
    },
    {
        "content": "<p>Right - I'm trying to avoid having to do that</p>",
        "id": 204274161,
        "sender_full_name": "starseeker",
        "timestamp": 1595031847
    },
    {
        "content": "<p>i'm not following then what the suggestion was</p>",
        "id": 204274171,
        "sender_full_name": "Sean",
        "timestamp": 1595031872
    },
    {
        "content": "<p>To generate a shell script that can accept a SVN revision number as an input, and do the appropriate checkout based on timestamp and commit message matching to check out the corresponding git commit.</p>",
        "id": 204274185,
        "sender_full_name": "starseeker",
        "timestamp": 1595031924
    },
    {
        "content": "<p>That won't tie the script to a particular sha1 hash, and so should be robust.</p>",
        "id": 204274188,
        "sender_full_name": "starseeker",
        "timestamp": 1595031951
    },
    {
        "content": "<p>Then we won't need to worry particularly about notes, updating log messages, etc.</p>",
        "id": 204274226,
        "sender_full_name": "starseeker",
        "timestamp": 1595031976
    },
    {
        "content": "<p>how's it mapping svn rev to commit message?  talking to origin or something?</p>",
        "id": 204274229,
        "sender_full_name": "Sean",
        "timestamp": 1595031989
    },
    {
        "content": "<p>It would hard code the timestamp and message associations into a case statement, which would use the SVN rev as the lookup key</p>",
        "id": 204274252,
        "sender_full_name": "starseeker",
        "timestamp": 1595032026
    },
    {
        "content": "<p>part of the issue was also one of simplicity and obviousness, not having to know some special knowledge to discover the svn rev or have it explained or documented</p>",
        "id": 204274308,
        "sender_full_name": "Sean",
        "timestamp": 1595032083
    },
    {
        "content": "<p>Changing the commit messages is the most disruptive of all the options - are you sure it's worth it?</p>",
        "id": 204274354,
        "sender_full_name": "starseeker",
        "timestamp": 1595032155
    },
    {
        "content": "<p>You, Nick and I are probably the most likely to need SVN revs, and we're the most able to handle something less obvious...</p>",
        "id": 204274405,
        "sender_full_name": "starseeker",
        "timestamp": 1595032203
    },
    {
        "content": "<p>agreed, but looking up commits wasn't the only issue</p>",
        "id": 204274437,
        "sender_full_name": "Sean",
        "timestamp": 1595032237
    },
    {
        "content": "<p>kanzure's first response weighs on me</p>",
        "id": 204274454,
        "sender_full_name": "Sean",
        "timestamp": 1595032273
    },
    {
        "content": "<p>his comment, questioning where the revs are and hoping we saved them somewhere.</p>",
        "id": 204274459,
        "sender_full_name": "Sean",
        "timestamp": 1595032284
    },
    {
        "content": "<p>it's not just that the data is or isn't available.</p>",
        "id": 204274467,
        "sender_full_name": "Sean",
        "timestamp": 1595032298
    },
    {
        "content": "<p>it's that he had to ask</p>",
        "id": 204274469,
        "sender_full_name": "Sean",
        "timestamp": 1595032301
    },
    {
        "content": "<p>and even then, that's still only 3 of the 7 issues that came to mind..</p>",
        "id": 204274523,
        "sender_full_name": "Sean",
        "timestamp": 1595032331
    },
    {
        "content": "<p>with all the churn and back and forth, an e-mail change seems inevitable ... like if github suddenly becomes persona non grata and we move to gitlab.  we might want/need to rewrite all those stupid github privacy aliases .. talk about f'ing vendor lock in.</p>",
        "id": 204274634,
        "sender_full_name": "Sean",
        "timestamp": 1595032501
    },
    {
        "content": "<p>of course, that one is less interesting as future us may have other options</p>",
        "id": 204274647,
        "sender_full_name": "Sean",
        "timestamp": 1595032524
    },
    {
        "content": "<p>s/interesting/compelling/</p>",
        "id": 204274656,
        "sender_full_name": "Sean",
        "timestamp": 1595032543
    },
    {
        "content": "<p>Heh - that's an argument to go to all <a href=\"http://brlcad.org\">brlcad.org</a> emails, in some ways...</p>",
        "id": 204274662,
        "sender_full_name": "starseeker",
        "timestamp": 1595032554
    },
    {
        "content": "<p>I thought about that</p>",
        "id": 204274703,
        "sender_full_name": "Sean",
        "timestamp": 1595032564
    },
    {
        "content": "<p>but then I think we'd end up with even less coverage displayed</p>",
        "id": 204274710,
        "sender_full_name": "Sean",
        "timestamp": 1595032584
    },
    {
        "content": "<p>Ah - because people have to add the <a href=\"http://brlcad.org\">brlcad.org</a> email to their profile?</p>",
        "id": 204274723,
        "sender_full_name": "starseeker",
        "timestamp": 1595032607
    },
    {
        "content": "<p>unlikely to get the old devs like gary to associate an alias he's never used to his github account that he probably never uses.</p>",
        "id": 204274738,
        "sender_full_name": "Sean",
        "timestamp": 1595032626
    },
    {
        "content": "<p>right</p>",
        "id": 204274740,
        "sender_full_name": "Sean",
        "timestamp": 1595032632
    },
    {
        "content": "<p>I mean, 55 out of about 75 is not too shabby</p>",
        "id": 204274759,
        "sender_full_name": "Sean",
        "timestamp": 1595032663
    },
    {
        "content": "<p>OK, I'll see if I can figure out the amending thing, since there are multiple potential applications/use cases.  Just be aware I'm running out of steam, to a degree.</p>",
        "id": 204274849,
        "sender_full_name": "starseeker",
        "timestamp": 1595032772
    },
    {
        "content": "<p>I know, I hated bringing it up.  Don't mean to cause more work.</p>",
        "id": 204274918,
        "sender_full_name": "Sean",
        "timestamp": 1595032859
    },
    {
        "content": "<p>The usability implications have been somewhat jarring/unexpected, and simpler may be better.  We're not losing anything.<br>\nAnd we probably could revert back to notes or attributes or some other feature ends up getting developed.  I have to imagine something eventually will..</p>",
        "id": 204275007,
        "sender_full_name": "Sean",
        "timestamp": 1595032982
    },
    {
        "content": "<p>/me winces.  Once the repo goes live, a change of that sort will be disruptive for all forks even if we figure out how to do it.</p>",
        "id": 204275027,
        "sender_full_name": "starseeker",
        "timestamp": 1595033023
    },
    {
        "content": "<p>yeah, I'm thinking more like if/when we change hosts again</p>",
        "id": 204275074,
        "sender_full_name": "Sean",
        "timestamp": 1595033044
    },
    {
        "content": "<p>it took us so long to get of sourceforge that github is bound to be obsolete soon.</p>",
        "id": 204275087,
        "sender_full_name": "Sean",
        "timestamp": 1595033059
    },
    {
        "content": "<p>off*</p>",
        "id": 204275096,
        "sender_full_name": "Sean",
        "timestamp": 1595033068
    },
    {
        "content": "<p>&lt;/sarcasm&gt;</p>",
        "id": 204275101,
        "sender_full_name": "Sean",
        "timestamp": 1595033080
    },
    {
        "content": "<p>Um.  Even then, in principle we could migrate the git repo without breaking forks, if I understand correctly - it would just be a change in origins.  The breakage would be if we needed to change emails on old commits (as opposed to associating them with the new accounts, say...)</p>",
        "id": 204275117,
        "sender_full_name": "starseeker",
        "timestamp": 1595033115
    },
    {
        "content": "<p>well, yeah -- I think that'd be implicit because of all the github-specific aliases.  that only works on github.</p>",
        "id": 204275177,
        "sender_full_name": "Sean",
        "timestamp": 1595033164
    },
    {
        "content": "<p>Heh - how many times did sourceforge get sold before they started having trouble?  That might be a decent yardstick...</p>",
        "id": 204275180,
        "sender_full_name": "starseeker",
        "timestamp": 1595033165
    },
    {
        "content": "<p>if github were shuttered, there'd be no way to authenticate/claim those addresses</p>",
        "id": 204275188,
        "sender_full_name": "Sean",
        "timestamp": 1595033190
    },
    {
        "content": "<p>Hm.  That's true enough.</p>",
        "id": 204275200,
        "sender_full_name": "starseeker",
        "timestamp": 1595033227
    },
    {
        "content": "<p>I think people just assume they'd rewrite their author names.  I would if I were using one.</p>",
        "id": 204275203,
        "sender_full_name": "Sean",
        "timestamp": 1595033243
    },
    {
        "content": "<p>I find the idea of using a content provider's e-mail alias a bit wonky personally.  Unless it's something \"too big to fail\" like <a href=\"http://gmail.com\">gmail.com</a> ... tech is notoriously unreliable, even fickle ... looking at you <a href=\"http://yahoo.com\">yahoo.com</a></p>",
        "id": 204275261,
        "sender_full_name": "Sean",
        "timestamp": 1595033324
    },
    {
        "content": "<p>/me likes the idea of spam going to /dev/null with the noreply email...</p>",
        "id": 204275352,
        "sender_full_name": "starseeker",
        "timestamp": 1595033424
    },
    {
        "content": "<p>so just put your email address someplace permanent, like <a href=\"http://geocities.com\">geocities.com</a></p>",
        "id": 204275671,
        "sender_full_name": "Erik",
        "timestamp": 1595033910
    },
    {
        "content": "<p>To be honest, I'm not all that worried (on a personal level) about my commits showing up anywhere - they haven't for a decade, and I'll live if they don't... as long as the project's stats behave reasonably, whether it ties to my account is secondary.</p>",
        "id": 204275704,
        "sender_full_name": "starseeker",
        "timestamp": 1595034001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> you mentioned your git fu being strong - we have a case where where help would be appreciated, if you have any ideas</p>",
        "id": 204275773,
        "sender_full_name": "starseeker",
        "timestamp": 1595034049
    },
    {
        "content": "<p>a git repo is a git repo, they can be rewritten, there is no \"exporting\", it just is</p>",
        "id": 204275796,
        "sender_full_name": "Erik",
        "timestamp": 1595034101
    },
    {
        "content": "<p>We need to rewrite a git history to take those commits that have notes, and append them to the end of the commit message instead.</p>",
        "id": 204275798,
        "sender_full_name": "starseeker",
        "timestamp": 1595034114
    },
    {
        "content": "<p><em>shrug</em> so slap a hook in and clone it to fire it or something</p>",
        "id": 204275853,
        "sender_full_name": "Erik",
        "timestamp": 1595034153
    },
    {
        "content": "<p>words like append, rebase, filter-branch, and such hover around this question, but there are additional challenges - such as preserving the original timestamps while doing all this.</p>",
        "id": 204275855,
        "sender_full_name": "starseeker",
        "timestamp": 1595034156
    },
    {
        "content": "<p>we are striving for a degree of fidelity in history preservation that I conclude is somewhat unusual among git users...</p>",
        "id": 204275939,
        "sender_full_name": "starseeker",
        "timestamp": 1595034254
    },
    {
        "content": "<p>there are several types of dates kept in git.. author date, commit date, merge date... um, read all the formatting options in the pretty printing section of man git-log</p>",
        "id": 204275944,
        "sender_full_name": "Erik",
        "timestamp": 1595034274
    },
    {
        "content": "<p>it's probably the quickest most comprehensive way to grok what git stores</p>",
        "id": 204275991,
        "sender_full_name": "Erik",
        "timestamp": 1595034356
    },
    {
        "content": "<p>Is there some sort of standard \"advanced\" script for a situation like this, needing extensive (and non-unique) commit msg updates?</p>",
        "id": 204276057,
        "sender_full_name": "starseeker",
        "timestamp": 1595034427
    },
    {
        "content": "<p>If push comes to shove I can manipulate the data at whatever level is required, but it would be nice if there's a pre-packaged answer...</p>",
        "id": 204276123,
        "sender_full_name": "starseeker",
        "timestamp": 1595034488
    },
    {
        "content": "<p>/me realizes he should probably eat dinner...</p>",
        "id": 204276126,
        "sender_full_name": "starseeker",
        "timestamp": 1595034509
    },
    {
        "content": "<p>there's a hooks directory that can be used for crap like this, the script just has to do one commit, then ask git to clone using it, or filter if you want to try to do it in place, or whatever. Or just write a script to iterate the commits and -amend them. Or ...</p>",
        "id": 204276215,
        "sender_full_name": "Erik",
        "timestamp": 1595034657
    },
    {
        "content": "<p>and it's a dvcs, so, y'know, if you break it, just grab another copy</p>",
        "id": 204276222,
        "sender_full_name": "Erik",
        "timestamp": 1595034679
    },
    {
        "content": "<p>It's not the breaking it, it's the 200 iterations of breaking it before I manage not to break it...</p>",
        "id": 204276816,
        "sender_full_name": "starseeker",
        "timestamp": 1595035562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/204249553\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> per your e-mail, you're also welcome to use your <a href=\"http://brlcad.org\">brlcad.org</a> alias (rossberg).. which can be pointed to anything, and can be claimed in your github account as an additional address.</p>\n</blockquote>\n<p>For github I want to stay with my github address.</p>\n<p>Another issue is that my <a href=\"http://brlcad.org\">brlcad.org</a> address is dead. It points to a sourceforge address, which don't accept mails from outside. ~/.forward seems to not work.</p>",
        "id": 204355244,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1595171463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> your alias no longer points to any sourceforge addresses -- they were all updated recently for everyone for that very reason.</p>",
        "id": 204495106,
        "sender_full_name": "Sean",
        "timestamp": 1595286178
    },
    {
        "content": "<p>just fyi.</p>",
        "id": 204495107,
        "sender_full_name": "Sean",
        "timestamp": 1595286181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  As long as I'm doing this anyway, would you prefer a different format for the SVN revision and branch info than what I was using?  It wouldn't be too much more work to change the formatting once I get the initial logic working, if you would prefer something different.</p>",
        "id": 204507596,
        "sender_full_name": "starseeker",
        "timestamp": 1595299122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/204355244\">said</a>:<br>\nFor github I want to stay with my github address.</p>\n<div class=\"codehilite\"><pre><span></span><code>Another issue is that my brlcad.org address is dead. It points to a sourceforge address, which don&#39;t accept mails from outside. ~/.forward seems to not work.\n</code></pre></div>\n\n\n<p>And of course, not a problem either to keep it on your github address either,  can be whatever you want.  Just was letting you know it was an option.  The aliases are DNS MX records, so they are aliased before they even hit a mail server.</p>",
        "id": 204508211,
        "sender_full_name": "Sean",
        "timestamp": 1595300123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/204507596\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>  As long as I'm doing this anyway, would you prefer a different format for the SVN revision and branch info than what I was using?  It wouldn't be too much more work to change the formatting once I get the initial logic working, if you would prefer something different.</p>\n</blockquote>\n<p>I think what you used is perfectly reasonable.</p>",
        "id": 204511136,
        "sender_full_name": "Sean",
        "timestamp": 1595305025
    },
    {
        "content": "<p><a href=\"https://github.com/starseeker/brlcad_nonotes\">https://github.com/starseeker/brlcad_nonotes</a></p>",
        "id": 204758775,
        "sender_full_name": "starseeker",
        "timestamp": 1595477107
    },
    {
        "content": "<p>how's that 5 contributors less?</p>",
        "id": 204758845,
        "sender_full_name": "Sean",
        "timestamp": 1595477222
    },
    {
        "content": "<p>I'll have to check... just got it working a couple hours ago, pretty fried.</p>",
        "id": 204760111,
        "sender_full_name": "starseeker",
        "timestamp": 1595479134
    },
    {
        "content": "<p>I'm actually seeing more?</p>",
        "id": 204760119,
        "sender_full_name": "starseeker",
        "timestamp": 1595479180
    },
    {
        "content": "<p>60 on the new vs 55 on the previous?</p>",
        "id": 204760121,
        "sender_full_name": "starseeker",
        "timestamp": 1595479201
    },
    {
        "content": "<p>might be taking time to populate</p>",
        "id": 204760162,
        "sender_full_name": "starseeker",
        "timestamp": 1595479214
    },
    {
        "content": "<p>interesting, now it says sixty here too.  guess it wasn't done processing</p>",
        "id": 204760292,
        "sender_full_name": "Sean",
        "timestamp": 1595479449
    },
    {
        "content": "<p>I got 7 more names sorted out, so we should be up to 62 now</p>",
        "id": 204760330,
        "sender_full_name": "Sean",
        "timestamp": 1595479557
    },
    {
        "content": "<p>Ugh.  Alright, can't wrap this up tonight (quite.)</p>",
        "id": 204761491,
        "sender_full_name": "starseeker",
        "timestamp": 1595481435
    },
    {
        "content": "<p>So close...</p>",
        "id": 204761496,
        "sender_full_name": "starseeker",
        "timestamp": 1595481445
    },
    {
        "content": "<p>still got a bit more validation too, but yeah, the last couple names I got were huge wins</p>",
        "id": 204761535,
        "sender_full_name": "Sean",
        "timestamp": 1595481483
    },
    {
        "content": "<p>this is looking good.  we're up to 74% of authors - 64 of 86 - and will be up to at least 95% commits after the next run.  that should do it!</p>",
        "id": 204763850,
        "sender_full_name": "Sean",
        "timestamp": 1595484980
    },
    {
        "content": "<p>it should be at least 96.4%</p>",
        "id": 204763855,
        "sender_full_name": "Sean",
        "timestamp": 1595485009
    },
    {
        "content": "<p>there are flags on just three accounts with anomalies that I'll need to investigate.  one with too few, one with way too many, and one not linking to their github</p>",
        "id": 204763992,
        "sender_full_name": "Sean",
        "timestamp": 1595485262
    },
    {
        "content": "<p>Here's an upload with all the bells and whistles - converted all the emails as of account-maps earlier this morning, notes consolidated into commit messages, and just for grins I also wrapped single line commit messages to 72 chars:</p>\n<p><a href=\"https://github.com/starseeker/brlcad_conv4\">https://github.com/starseeker/brlcad_conv4</a></p>",
        "id": 204802495,
        "sender_full_name": "starseeker",
        "timestamp": 1595513670
    },
    {
        "content": "<p>Needs a validation check to make sure I didn't accidentally mess something up in the processing, still...</p>",
        "id": 204802970,
        "sender_full_name": "starseeker",
        "timestamp": 1595513889
    },
    {
        "content": "<p>Ah crud, typo'ed a couple of the mappings.  screeech, rerun...</p>",
        "id": 204810743,
        "sender_full_name": "starseeker",
        "timestamp": 1595517269
    },
    {
        "content": "<p>There we go (still populating site info...)<br>\n<a href=\"https://github.com/starseeker/brlcad_conv5\">https://github.com/starseeker/brlcad_conv5</a></p>",
        "id": 204816759,
        "sender_full_name": "starseeker",
        "timestamp": 1595520114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  is this what you were looking for with the svn commit names?</p>\n<p><a href=\"https://github.com/starseeker/brlcad_conv6/commit/6dc9436d0fc5f17176a0a5fc5d00b54b1194f75c\">https://github.com/starseeker/brlcad_conv6/commit/6dc9436d0fc5f17176a0a5fc5d00b54b1194f75c</a></p>",
        "id": 204862219,
        "sender_full_name": "starseeker",
        "timestamp": 1595544664
    },
    {
        "content": "<p>I think I'm pretty much out of stuff I know still has to be done (aside from pulling newer commits of course) - let me know if you spot anything else.</p>",
        "id": 204863040,
        "sender_full_name": "starseeker",
        "timestamp": 1595545232
    },
    {
        "content": "<p>Ugh, 80 col experiment didn't work well.  conv6 removed, replaced:<br>\n<a href=\"https://github.com/starseeker/brlcad_conv7\">https://github.com/starseeker/brlcad_conv7</a></p>",
        "id": 204868857,
        "sender_full_name": "starseeker",
        "timestamp": 1595550946
    },
    {
        "content": "<p>(github must be wondering what on earth I'm doing...)</p>",
        "id": 204868910,
        "sender_full_name": "starseeker",
        "timestamp": 1595550980
    },
    {
        "content": "<p>/me proceeds to unplug brain for recharging...</p>",
        "id": 204869112,
        "sender_full_name": "starseeker",
        "timestamp": 1595551239
    },
    {
        "content": "<p>yeah, I've got very strongly mixed feelings about inserting newlines where they didn't exist.  I feel that's just bad git presentation defaults.  Apparently they can be overcome (e.g., default interactive pager is LESS=-S even though it can auto-wrap to screen correctly).</p>",
        "id": 204871125,
        "sender_full_name": "Sean",
        "timestamp": 1595553748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/204863040\">said</a>:</p>\n<blockquote>\n<p>I think I'm pretty much out of stuff I know still has to be done (aside from pulling newer commits of course) - let me know if you spot anything else.</p>\n</blockquote>\n<p>I have commits for three accounts to investigate, which I hope to finish up with tomorrow.  I'm done with accounts -- we nearly got everyone that made at least 100 commits (woot!).  We're definitely getting super close.</p>",
        "id": 204871207,
        "sender_full_name": "Sean",
        "timestamp": 1595553856
    },
    {
        "content": "<p>The log additions for branch and revision look like they were flawless.  Trying to find one with no log message to see what it did...</p>",
        "id": 204871223,
        "sender_full_name": "Sean",
        "timestamp": 1595553899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  That was my experience with wrapping - gitk I know can deal with it, but doesn't by default??? (I can only conclude that it's a deliberate design decision, given the feature does exist and works...)</p>\n<p>I've got notes somewhere on which option to set (at least for gitk), which we'll probably still want to advise people to do regardless because there are some cases I don't detect as wrappable.</p>\n<p>My motivation for wrapping was two fold - 1) if we wrap lines, we'll get better behavior for new users with default tool settings and 2) interfaces/websites/tools that assume \"standard\" git commit message settings may behave better.</p>\n<p>It's quite literally an option in the post-processing tool, so trivial to disable if you decide we shouldn't wrap them.</p>",
        "id": 204898614,
        "sender_full_name": "starseeker",
        "timestamp": 1595585373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  If you just want any commit without a note migration, here's one:<br>\n<a href=\"https://github.com/starseeker/brlcad_conv7/commit/a8161859aa2d1d3935a257be9e725daff89e8157\">https://github.com/starseeker/brlcad_conv7/commit/a8161859aa2d1d3935a257be9e725daff89e8157</a></p>",
        "id": 204898868,
        "sender_full_name": "starseeker",
        "timestamp": 1595585562
    },
    {
        "content": "<p>git log --invert-grep --grep=\"svn:revision\" will list the ones without an svn tag</p>",
        "id": 204899220,
        "sender_full_name": "starseeker",
        "timestamp": 1595585817
    },
    {
        "content": "<p>Here's a no-svn-id commit with a longer message:<br>\n<a href=\"https://github.com/starseeker/brlcad_conv7/commit/0758d43db1ef6e2bb518d4e1db355bf6dc864527\">https://github.com/starseeker/brlcad_conv7/commit/0758d43db1ef6e2bb518d4e1db355bf6dc864527</a></p>",
        "id": 204899522,
        "sender_full_name": "starseeker",
        "timestamp": 1595586016
    },
    {
        "content": "<p>CVS era commit without svn id (i.e. not an artifact of SVN conversion)<br>\n<a href=\"https://github.com/starseeker/brlcad_conv7/commit/dd3a2e848c19e8610c82f81a40e6c9d7fdbc8c81\">https://github.com/starseeker/brlcad_conv7/commit/dd3a2e848c19e8610c82f81a40e6c9d7fdbc8c81</a></p>",
        "id": 204899595,
        "sender_full_name": "starseeker",
        "timestamp": 1595586090
    },
    {
        "content": "<p>I don't think we had any commits with an actual empty string in the git history - the preliminary conversions produced some like this:<br>\n<a href=\"https://github.com/starseeker/brlcad_conv7/commit/a4ad5e277ff55f47cc70bb36dd12097b31d03c02\">https://github.com/starseeker/brlcad_conv7/commit/a4ad5e277ff55f47cc70bb36dd12097b31d03c02</a></p>",
        "id": 204899751,
        "sender_full_name": "starseeker",
        "timestamp": 1595586210
    },
    {
        "content": "<p>Ah, whoops - sorry Sean, just messed up that repo with an experiment.  Hang, on creating a new one.</p>",
        "id": 204904643,
        "sender_full_name": "starseeker",
        "timestamp": 1595589896
    },
    {
        "content": "<p><a href=\"https://github.com/starseeker/brlcad_r76458\">https://github.com/starseeker/brlcad_r76458</a></p>",
        "id": 204905275,
        "sender_full_name": "starseeker",
        "timestamp": 1595590396
    },
    {
        "content": "<p>Nice, I like the annotations.</p>",
        "id": 204967171,
        "sender_full_name": "Sean",
        "timestamp": 1595624939
    },
    {
        "content": "<p>how about \"account\" instead of \"author\" though</p>",
        "id": 204967181,
        "sender_full_name": "Sean",
        "timestamp": 1595624945
    },
    {
        "content": "<p>author has implications that may or may not be true</p>",
        "id": 204967198,
        "sender_full_name": "Sean",
        "timestamp": 1595624956
    },
    {
        "content": "<p>\"account\" or \"username\"</p>",
        "id": 204967309,
        "sender_full_name": "Sean",
        "timestamp": 1595625006
    },
    {
        "content": "<p>What about \"committer\" ?  Other than that I'd vote for account.</p>",
        "id": 204969724,
        "sender_full_name": "starseeker",
        "timestamp": 1595626743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> can I do anything to help analyze the remaining concerns?</p>",
        "id": 204969869,
        "sender_full_name": "starseeker",
        "timestamp": 1595626884
    },
    {
        "content": "<p>(fwiw, \"committer\" is the equivalent term from git)</p>",
        "id": 204969960,
        "sender_full_name": "starseeker",
        "timestamp": 1595626951
    },
    {
        "content": "<p>I would stick with svn's nomenclature</p>",
        "id": 204981002,
        "sender_full_name": "Sean",
        "timestamp": 1595639346
    },
    {
        "content": "<p>it's an account username, so either works</p>",
        "id": 204981014,
        "sender_full_name": "Sean",
        "timestamp": 1595639373
    },
    {
        "content": "<p>Well, I'd prefer to match git, but it's not worth bikeshedding - account it is.</p>",
        "id": 204982285,
        "sender_full_name": "starseeker",
        "timestamp": 1595641509
    },
    {
        "content": "<p>Looks like the distcheck-repo_verify adaptation for Git is working.</p>",
        "id": 204982401,
        "sender_full_name": "starseeker",
        "timestamp": 1595641750
    },
    {
        "content": "<p>/me should confirm the svn-fast-export method is working for the other repos, actually - been a while since I tested that.</p>",
        "id": 204982468,
        "sender_full_name": "starseeker",
        "timestamp": 1595641899
    },
    {
        "content": "<p>Rather crude, but this should encapsulate what's needed for doing a verification between git and svn (at least, as far back as the end of the CVS history) <br>\n<a href=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/misc/repoconv/verify.cpp\">https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/misc/repoconv/verify.cpp</a></p>",
        "id": 205006005,
        "sender_full_name": "starseeker",
        "timestamp": 1595687247
    },
    {
        "content": "<p>Will need to run it against this version, with fixed svn branch names:<br>\n<a href=\"https://github.com/starseeker/brlcad_conv8\">https://github.com/starseeker/brlcad_conv8</a></p>",
        "id": 205006055,
        "sender_full_name": "starseeker",
        "timestamp": 1595687289
    },
    {
        "content": "<p>I've not run it myself, beyond a few commits to see if it looks like it's working - it will be very slow, and there may be more optimal ways to go about checking - this is very much a brute force approach.</p>",
        "id": 205006070,
        "sender_full_name": "starseeker",
        "timestamp": 1595687351
    },
    {
        "content": "<p>We can compare the CVS portion of the history as well if you want to, but I'm not sure what we'd do about any discrepancies - I'm just using the output from cvs-fast-export, so any changes would be quite difficult.</p>",
        "id": 205016247,
        "sender_full_name": "starseeker",
        "timestamp": 1595702326
    },
    {
        "content": "<p>And in that case the true \"ground truth\" would actually be the equivalent CVS checkout, if we can map the svn revisions back to CVS in some fashion.</p>",
        "id": 205016319,
        "sender_full_name": "starseeker",
        "timestamp": 1595702427
    },
    {
        "content": "<p>I must be out of my mind, but I taught <a href=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/misc/repoconv/verify/verify.cpp\">https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/misc/repoconv/verify/verify.cpp</a> to check both the SVN and the CVS repositories, once things get that far back.  (recommended to replace the sphflake.pix,v file as documented in the beginning of <a href=\"http://CONVERT.sh\">CONVERT.sh</a>)</p>",
        "id": 205025555,
        "sender_full_name": "starseeker",
        "timestamp": 1595718126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> when you said there were authors you need to check, was that in the conversion or the Github integration?</p>\n<p>(trying to think of anything else useful I can do...)</p>",
        "id": 205030676,
        "sender_full_name": "starseeker",
        "timestamp": 1595727797
    },
    {
        "content": "<p>In the conversion</p>",
        "id": 205120068,
        "sender_full_name": "Sean",
        "timestamp": 1595858379
    },
    {
        "content": "<p>I hope to have them all inspected today, will ask if there are questions.  It's more a matter a tracing down all their master commit shas and seeing what the delta is against their trunk commits, to make sure all the differences can be explained.</p>",
        "id": 205120592,
        "sender_full_name": "Sean",
        "timestamp": 1595858618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/204898614\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>  That was my experience with wrapping - gitk I know can deal with it, but doesn't by default??? (I can only conclude that it's a deliberate design decision, given the feature does exist and works...</p>\n</blockquote>\n<p>I'll just note that is your assumption, and not one I would make.  Yet you're using it to justify a subsequent decision that all have to live with.</p>\n<blockquote>\n<p>I've got notes somewhere on which option to set (at least for gitk), which we'll probably still want to advise people to do regardless because there are some cases I don't detect as wrappable.</p>\n</blockquote>\n<p>We will also because I have little intention of manually injecting newlines once we're on github for command-line commits.  I don't do it for other git repos and don't plan to on ours either except when the commit warrants a longer description and I'm in an editor.</p>\n<blockquote>\n<p>My motivation for wrapping was two fold - 1) if we wrap lines, we'll get better behavior for new users with default tool settings and 2) interfaces/websites/tools that assume \"standard\" git commit message settings may behave better.</p>\n</blockquote>\n<p>That said, these are sound reasons, save for the caveat I just stated -- that it just means the historic commits might be pretty but not the more recent ones. </p>\n<p>It's quite literally an option in the post-processing tool, so trivial to disable if you decide we shouldn't wrap them.</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 205120789,
        "sender_full_name": "Sean",
        "timestamp": 1595858716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/204898614\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>  That was my experience with wrapping - gitk I know can deal with it, but doesn't by default??? (I can only conclude that it's a deliberate design decision, given the feature does exist and works...</p>\n</blockquote>\n<p>I'll just note that is your assumption, and not one I would make.  Yet you're using it to justify a subsequent decision that all have to live with.  </p>\n<p>From my perspective, this is a feature that git and github have wrong.  Line wrapping is a presentation issue that is trivially handled by apps.  Other distributed vcs didn't make the same decisions, and if we'd picked another we wouldn't even be having this consideration.  Which is to say that it's possibly something we'll regret in the future when we migrate to git's successor.  Unfortunately, it's trivial to add newlines but it's not trivial to remove them.</p>\n<blockquote>\n<p>I've got notes somewhere on which option to set (at least for gitk), which we'll probably still want to advise people to do regardless because there are some cases I don't detect as wrappable.</p>\n</blockquote>\n<p>We will also because I have little intention of manually injecting newlines once we're on github for command-line commits.  I don't do it for other git repos and don't plan to on ours either except when the commit warrants a longer description and I'm in an editor.</p>\n<blockquote>\n<p>My motivation for wrapping was two fold - 1) if we wrap lines, we'll get better behavior for new users with default tool settings and 2) interfaces/websites/tools that assume \"standard\" git commit message settings may behave better.</p>\n</blockquote>\n<p>That said, these are sound reasons, save for the caveat I just stated -- that it just means the historic commits might be pretty but not the more recent ones. </p>\n<blockquote>\n<p>It's quite literally an option in the post-processing tool, so trivial to disable if you decide we shouldn't wrap them.</p>\n</blockquote>\n<p>I don't feel that strongly to oppose it.  I do like it neat and tidy though it begs a couple questions (like what column did you wrap on? what about things like URLs?  what about punctuation? ..).</p>\n<p>It's a little concerning that it's not preserving what actually was written.  It's slightly complicating the review process because they don't match and I have to do additional scripting (but I'll deal, just slows things down).  Those are not strong enough to argue against though.  I think you said you limited it to commits that had only 1-line comments?   That's probably a good balance.</p>",
        "id": 205121524,
        "sender_full_name": "Sean",
        "timestamp": 1595859116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/205121524\">said</a>:</p>\n<blockquote>\n<p>From my perspective, this is a feature that git and github have wrong.</p>\n</blockquote>\n<p>Github actually appears to handle the long lines just fine (ellipses on presentation).  This really is just a git tooling convention / defaults issue.  I think I even read  how one can make git log behave for a different format line.</p>\n<p>But again, not enough to fight against it, just sharing my perspective.  I probably wouldn't, but if you want to inject them on the single line commits, I won't fuss too much.  :)</p>",
        "id": 205123425,
        "sender_full_name": "Sean",
        "timestamp": 1595860049
    },
    {
        "content": "<p>Hm... one possibility comes to mind.  Putting svn:log:wrapped could be used to denote the ones wrapped, which would then make them invertible and an encoding of the original data.</p>",
        "id": 205138341,
        "sender_full_name": "Sean",
        "timestamp": 1595867205
    },
    {
        "content": "<blockquote>\n<p>I'll just note that is your assumption, and not one I would make.  Yet you're using it to justify a subsequent decision that all have to live with.  </p>\n</blockquote>\n<p>Didn't intend it to be a justification - more an assessment of likelihood of it being changed.</p>\n<blockquote>\n<p>From my perspective, this is a feature that git and github have wrong.  Line wrapping is a presentation issue that is trivially handled by apps.  Other distributed vcs didn't make the same decisions, and if we'd picked another we wouldn't even be having this consideration.  Which is to say that it's possibly something we'll regret in the future when we migrate to git's successor.  Unfortunately, it's trivial to add newlines but it's not trivial to remove them.</p>\n</blockquote>\n<p>Point.  I wasn't strongly advocating for it - I just put it in the test conversion as a demonstration of what I could achieve if it was of interest.</p>\n<blockquote>\n<p>We will also because I have little intention of manually injecting newlines once we're on github for command-line commits.  I don't do it for other git repos and don't plan to on ours either except when the commit warrants a longer description and I'm in an editor.</p>\n</blockquote>\n<p>Fair enough.</p>\n<blockquote>\n<p>That said, these are sound reasons, save for the caveat I just stated -- that it just means the historic commits might be pretty but not the more recent ones. </p>\n</blockquote>\n<p>Which actually argues against doing it - don't want newer stuff to look \"worse\" in some sense.</p>\n<blockquote>\n<p>I don't feel that strongly to oppose it.  I do like it neat and tidy though it begs a couple questions (like what column did you wrap on? what about things like URLs?  what about punctuation? ..).</p>\n</blockquote>\n<p>Column 72 - used the \"TextFlow\" algorithm, which I gather is similar to what editors do for work wrapping.</p>\n<blockquote>\n<p>It's a little concerning that it's not preserving what actually was written.  It's slightly complicating the review process because they don't match and I have to do additional scripting (but I'll deal, just slows things down).  Those are not strong enough to argue against though.  I think you said you limited it to commits that had only 1-line comments?   That's probably a good balance.</p>\n</blockquote>\n<p>I wish you'd said something, I could have generated another version without the wrapping.  (Still can, for that matter...)</p>\n<p>The posted version is not the final version anyway...  Over the weekend I think I figured out how to actually audit and fix the CVS era commits so the git checkout for each commit will match what cvs would produce (still testing, and will take a while to run, but initial results are promising.)</p>",
        "id": 205140266,
        "sender_full_name": "starseeker",
        "timestamp": 1595868222
    },
    {
        "content": "<p>Column 74 is I think the minimum only because Git defaults to presenting 4 char indents on log output.</p>",
        "id": 205143079,
        "sender_full_name": "Sean",
        "timestamp": 1595869637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/205140266\">said</a>:</p>\n<blockquote>\n<p>I wish you'd said something, I could have generated another version without the wrapping.  (Still can, for that matter...)</p>\n<p>The posted version is not the final version anyway...  Over the weekend I think I figured out how to actually audit and fix the CVS era commits so the git checkout for each commit will match what cvs would produce (still testing, and will take a while to run, but initial results are promising.)</p>\n</blockquote>\n<p>Only slightly.  But each upload has meant I need to regenerate my list of comparison hashes... ;)</p>",
        "id": 205143155,
        "sender_full_name": "Sean",
        "timestamp": 1595869680
    },
    {
        "content": "<p>On the latter point, what do you think about having the log tags actually denote cvs:revision:### (in addition to the svn revision) for the cvs portion?</p>",
        "id": 205143375,
        "sender_full_name": "Sean",
        "timestamp": 1595869790
    },
    {
        "content": "<p>if there's a way to record the actual account name used (not just the mapped account name) for both cvs and svn, that would be a nice-to-have preservation.   if not, no biggie.</p>",
        "id": 205143521,
        "sender_full_name": "Sean",
        "timestamp": 1595869859
    },
    {
        "content": "<p>and wouldn't do it to only get cvs or only svn.. that could be confusing</p>",
        "id": 205143769,
        "sender_full_name": "Sean",
        "timestamp": 1595870000
    },
    {
        "content": "<p>by the way, I updated <a href=\"https://brlcad.org/wiki/Github_Migration\">https://brlcad.org/wiki/Github_Migration</a> with all the migration steps as I'd envisioned them.  I may have forgotten a step or two, but I think most of it is there.  I did try to make sure it incorporated all the points you mentioned in your (more elaborate) discussion.</p>",
        "id": 205144012,
        "sender_full_name": "Sean",
        "timestamp": 1595870152
    },
    {
        "content": "<p>Of course, some of the verification steps may cause more verification steps, but it's got the gist of what's needed.</p>",
        "id": 205144061,
        "sender_full_name": "Sean",
        "timestamp": 1595870163
    },
    {
        "content": "<p>Growl... well, I can change CVS era commits but auditing them is proving trickier than I'd hoped in some ways... specifically, what do I check out from CVS when Git says a particular commit is on a dozen branches?</p>",
        "id": 205162078,
        "sender_full_name": "starseeker",
        "timestamp": 1595880345
    },
    {
        "content": "<p>About cvs:revision - correct me if I'm wrong, but did the CVS tool actually have revision numbers?  I thought all we had was the numbers SVN assigned various commits when the cvs2svn migration occurred.</p>",
        "id": 205163290,
        "sender_full_name": "starseeker",
        "timestamp": 1595881032
    },
    {
        "content": "<p>I'm checking out by date and -r tag (when trunk/master isn't available) - is there another option?</p>",
        "id": 205163399,
        "sender_full_name": "starseeker",
        "timestamp": 1595881082
    },
    {
        "content": "<p>Are the CVS commit names different from the SVN authors?  I'd been assuming a 1-1 mapping there, but perhaps I'm wrong?</p>",
        "id": 205163489,
        "sender_full_name": "starseeker",
        "timestamp": 1595881149
    },
    {
        "content": "<p>I suppose one possibility might be to add the cvs checkout lines corresponding to each commit...</p>\n<p>cvs:checkout:cvs co -ko -D \"&lt;date&gt;\" [-r tag] -P brlcad</p>",
        "id": 205165726,
        "sender_full_name": "starseeker",
        "timestamp": 1595882437
    },
    {
        "content": "<p>probably overkill</p>",
        "id": 205165860,
        "sender_full_name": "starseeker",
        "timestamp": 1595882520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/205163290\">said</a>:</p>\n<blockquote>\n<p>About cvs:revision - correct me if I'm wrong, but did the CVS tool actually have revision numbers?  I thought all we had was the numbers SVN assigned various commits when the cvs2svn migration occurred.</p>\n</blockquote>\n<p>revisions in cvs are per file -- akin to git.  there is no global number like svn.</p>",
        "id": 205167705,
        "sender_full_name": "Sean",
        "timestamp": 1595883640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/205163489\">said</a>:</p>\n<blockquote>\n<p>Are the CVS commit names different from the SVN authors?  I'd been assuming a 1-1 mapping there, but perhaps I'm wrong?</p>\n</blockquote>\n<p>They're different.</p>",
        "id": 205167876,
        "sender_full_name": "Sean",
        "timestamp": 1595883726
    },
    {
        "content": "<p>At least, there's a swath of names that only exist in cvs, a swath that exist in cvs and svn, and a swath that are only in svn</p>",
        "id": 205167927,
        "sender_full_name": "Sean",
        "timestamp": 1595883755
    },
    {
        "content": "<p>it's whatever account we committed from</p>",
        "id": 205168137,
        "sender_full_name": "Sean",
        "timestamp": 1595883896
    },
    {
        "content": "<p>so for example, Markowski had commits as 'mmark' under rcs and 'mm' under cvs (or vice versa).  I had commits as 'morrison' under cvs, never as that via svn though.</p>",
        "id": 205168324,
        "sender_full_name": "Sean",
        "timestamp": 1595884004
    },
    {
        "content": "<p>not a terrible loss, but it'd be really cool if we could preserve that original commit account name per commit.  there's some semantic repo history that would be preserved just by knowing the name.</p>",
        "id": 205168499,
        "sender_full_name": "Sean",
        "timestamp": 1595884131
    },
    {
        "content": "<p>So if we can ID which account names are unique to CVS, we could flag them.  A quick check shows svn:account:mmark and svn:account::mm both present in the conversion, so the names made it.  A cvs prefix could probably be added based on which commits originally came from the CVS conversion - I'd have to think about that, but it's probably possible.</p>",
        "id": 205172980,
        "sender_full_name": "starseeker",
        "timestamp": 1595886978
    },
    {
        "content": "<p>Actually, that might be best - just prefix with cvs:account or svn:account based on which VCS the commits came from.</p>",
        "id": 205173025,
        "sender_full_name": "starseeker",
        "timestamp": 1595887013
    },
    {
        "content": "<p>revisions will always be svn:revision (those commits that have it) since the numbers came from SVN.</p>",
        "id": 205173085,
        "sender_full_name": "starseeker",
        "timestamp": 1595887074
    },
    {
        "content": "<p>branches are trickier, but based on my experiences so far I'd rather just leave the svn branches alone - my brain hurts trying to sort out the various mappings, and I doubt it's terribly critical as long as git blame can walk back through the history successfully.</p>",
        "id": 205173193,
        "sender_full_name": "starseeker",
        "timestamp": 1595887133
    },
    {
        "content": "<p>Actually since you mentioned it about mmark and mm, it looks like you already have it doing the right thing -- it's using the account username as originally committed for both svn and cvs.  That's great!</p>",
        "id": 205188606,
        "sender_full_name": "Sean",
        "timestamp": 1595900801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/205173025\">said</a>:</p>\n<blockquote>\n<p>Actually, that might be best - just prefix with cvs:account or svn:account based on which VCS the commits came from.</p>\n</blockquote>\n<p>That would be a pretty slick detail.  We'd actually be able to distinguish three \"generations\" of commits, hah.</p>",
        "id": 205188681,
        "sender_full_name": "Sean",
        "timestamp": 1595900884
    },
    {
        "content": "<p>I think I've found a way to associate the author ids (and cvs-fast-export's branch analysis) with the comments in the final conversion.  I'll need to actually test applying the data in repowork, but I've got a script now that looks like it is successfully extracting the information.  (misc/repoconv/cvs_info.sh)</p>",
        "id": 205224487,
        "sender_full_name": "starseeker",
        "timestamp": 1595936153
    },
    {
        "content": "<p>OK, managed to apply the CVS account/branch information, FWIW:<br>\n<a href=\"https://github.com/starseeker/brlcad_conv9\">https://github.com/starseeker/brlcad_conv9</a></p>",
        "id": 205289190,
        "sender_full_name": "starseeker",
        "timestamp": 1595969426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Is there anything more I can do?  I'm not sure it makes sense to have me do the check steps, since I'd basically be re-using the same logic I put together to do the conversion in the first place, but if there's anything that will move the process forward I'd like to help...</p>",
        "id": 205352811,
        "sender_full_name": "starseeker",
        "timestamp": 1596027887
    },
    {
        "content": "<p>best you can probably do is probably just having a bit of patience, however frustrating.. :)  you're right -- you can't / shouldn't verify since you may unintentionally dismiss or overlook something whereas someone else won't know to.  sumanga and I don't know your conversion logic at all, so this is nice indep validation.  :)</p>",
        "id": 205363609,
        "sender_full_name": "Sean",
        "timestamp": 1596032804
    },
    {
        "content": "<p>OK, will do.</p>",
        "id": 205364443,
        "sender_full_name": "starseeker",
        "timestamp": 1596033198
    },
    {
        "content": "<p>I had to make one adjustment post brlcad_conv9 to get the spacing right for the CVS-only comments - should I upload that version of the repo?</p>",
        "id": 205366408,
        "sender_full_name": "starseeker",
        "timestamp": 1596034063
    },
    {
        "content": "<p>(I know you mentioned the changing sha1 values in the various versions was a pain, so I wanted to check...)</p>",
        "id": 205366758,
        "sender_full_name": "starseeker",
        "timestamp": 1596034193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/205289190\">said</a>:</p>\n<blockquote>\n<p>OK, managed to apply the CVS account/branch information, FWIW:<br>\n<a href=\"https://github.com/starseeker/brlcad_conv9\">https://github.com/starseeker/brlcad_conv9</a></p>\n</blockquote>\n<p>should i pull this one right now and run the script? <span aria-label=\"worried\" class=\"emoji emoji-1f61f\" role=\"img\" title=\"worried\">:worried:</span></p>",
        "id": 205401257,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596050255
    },
    {
        "content": "<p>or should i operate on the brlcad_conv8 repo?</p>",
        "id": 205401516,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596050368
    },
    {
        "content": "<p>brlcad_conv8 is fine.</p>",
        "id": 205405691,
        "sender_full_name": "starseeker",
        "timestamp": 1596052630
    },
    {
        "content": "<p>The newer ones are just minor variations on the commit message formatting</p>",
        "id": 205405737,
        "sender_full_name": "starseeker",
        "timestamp": 1596052652
    },
    {
        "content": "<p>thanks for the info <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 205405775,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596052677
    },
    {
        "content": "<p>I'll let you know if one appears that would motivate a restart in the check, but unless someone finds an actual error I doubt it will be necessary at this point...</p>",
        "id": 205405977,
        "sender_full_name": "starseeker",
        "timestamp": 1596052774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> how are the checks going?</p>",
        "id": 205634269,
        "sender_full_name": "starseeker",
        "timestamp": 1596224960
    },
    {
        "content": "<p>somehow the local copy of the github repo got wiped and all i know was that the last revision being checked was 75007</p>",
        "id": 205634467,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596225031
    },
    {
        "content": "<p>now if i clone it, it will start from the beginning</p>",
        "id": 205634543,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596225068
    },
    {
        "content": "<p>Can you tell your script to start at a lower revision?</p>",
        "id": 205634600,
        "sender_full_name": "starseeker",
        "timestamp": 1596225095
    },
    {
        "content": "<p>it starts first with the github repo commits, check them and then checkout the svn revision</p>",
        "id": 205634711,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596225139
    },
    {
        "content": "<p>i have to find a way to go backwards then</p>",
        "id": 205634753,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596225164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> The github checkout has the svn revisions in the comments - could you just filter out any commits that have a number higher than 75007?</p>",
        "id": 205635125,
        "sender_full_name": "starseeker",
        "timestamp": 1596225383
    },
    {
        "content": "<p>i was thinking about that</p>",
        "id": 205635148,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596225408
    },
    {
        "content": "<p>(btw, if you're going to check it out again go with <a href=\"https://github.com/starseeker/brlcad_conv10\">https://github.com/starseeker/brlcad_conv10</a> )</p>",
        "id": 205635168,
        "sender_full_name": "starseeker",
        "timestamp": 1596225424
    },
    {
        "content": "<p>i will make it skip them but not save them in the skipped_commits.txt</p>",
        "id": 205635179,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596225435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/205635168\">said</a>:</p>\n<blockquote>\n<p>(btw, if you're going to check it out again go with <a href=\"https://github.com/starseeker/brlcad_conv10\">https://github.com/starseeker/brlcad_conv10</a> )</p>\n</blockquote>\n<p>will be a good idea</p>",
        "id": 205635197,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596225455
    },
    {
        "content": "<p>/me cleans up older conversion tests...</p>",
        "id": 205635302,
        "sender_full_name": "starseeker",
        "timestamp": 1596225506
    },
    {
        "content": "<p>There we go - now my github account looks less manically busy.</p>",
        "id": 205635581,
        "sender_full_name": "starseeker",
        "timestamp": 1596225675
    },
    {
        "content": "<p><span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 205635601,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596225688
    },
    {
        "content": "<p>found it through grep checked it out and restarted from the same point</p>",
        "id": 205638223,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596227353
    },
    {
        "content": "<p>my script starts checking from the commit which is checked out at the moment on the git repo</p>",
        "id": 205638329,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1596227413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  ping?</p>",
        "id": 206402340,
        "sender_full_name": "starseeker",
        "timestamp": 1596991555
    },
    {
        "content": "<p>Got through two checks the past week, looking good so far.  Few more to go.  Hoping we will be able to go live soon, maybe next weekend if these check go good.</p>",
        "id": 206403736,
        "sender_full_name": "Sean",
        "timestamp": 1596993847
    },
    {
        "content": "<p>How’s your scan going  <span class=\"user-mention\" data-user-id=\"217384\">@Sadeep Darshana</span> ?</p>",
        "id": 206403747,
        "sender_full_name": "Sean",
        "timestamp": 1596993878
    },
    {
        "content": "<p>I believe he  finished it, results in the \"issues in migrated repo\" thread</p>",
        "id": 206403762,
        "sender_full_name": "starseeker",
        "timestamp": 1596993923
    },
    {
        "content": "<p>When I checked, all the SVN era differences I saw where when his script tried to compare brep-debug commits with trunk.  CVS era is messier, as expected.</p>",
        "id": 206403830,
        "sender_full_name": "starseeker",
        "timestamp": 1596993991
    },
    {
        "content": "<p>how much of the migration is left?</p>",
        "id": 206785878,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1597302094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> not sure -  <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> , is <a href=\"https://brlcad.org/wiki/Github_Migration\">https://brlcad.org/wiki/Github_Migration</a> still current?</p>",
        "id": 207025696,
        "sender_full_name": "starseeker",
        "timestamp": 1597504244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> we're shaking down for a release, which will slow things up a bit</p>",
        "id": 207025716,
        "sender_full_name": "starseeker",
        "timestamp": 1597504281
    },
    {
        "content": "<p>if any help is needed, i will try to help if i can</p>",
        "id": 207029114,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1597509720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/207025696\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> not sure -  <span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> , is <a href=\"https://brlcad.org/wiki/Github_Migration\">https://brlcad.org/wiki/Github_Migration</a> still current?</p>\n</blockquote>\n<p>I completed a couple more tasks, will update.</p>",
        "id": 207082535,
        "sender_full_name": "Sean",
        "timestamp": 1597601671
    },
    {
        "content": "<p>ping?  (I know commit reviews are competing with this...)</p>",
        "id": 208898748,
        "sender_full_name": "starseeker",
        "timestamp": 1599087245
    },
    {
        "content": "<p>not really a competition, it's been a full-stop shift to eye-bleeding commit reading for hours on end...</p>",
        "id": 208922916,
        "sender_full_name": "Sean",
        "timestamp": 1599111511
    },
    {
        "content": "<p>/me winces.  Well, hopefully the commit storm will be letting up after this for a while.</p>",
        "id": 208954204,
        "sender_full_name": "starseeker",
        "timestamp": 1599133507
    },
    {
        "content": "<p>Anything helpful I can do?  (Testing, etc?)</p>",
        "id": 208994519,
        "sender_full_name": "starseeker",
        "timestamp": 1599150645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Just FYI, realized  my updates were missing the svn commit ids for newer commits, in case you were using my github test conversion.  New version, current as of last night with all commits,  up at <a href=\"https://github.com/starseeker/brlcad_conv11\">https://github.com/starseeker/brlcad_conv11</a></p>",
        "id": 210160960,
        "sender_full_name": "starseeker",
        "timestamp": 1600190782
    },
    {
        "content": "<p>how much of the migration is done  or left?</p>",
        "id": 210621322,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600530261
    },
    {
        "content": "<p><a href=\"https://brlcad.org/wiki/Github_Migration\">https://brlcad.org/wiki/Github_Migration</a> is the place to watch</p>",
        "id": 210629683,
        "sender_full_name": "starseeker",
        "timestamp": 1600541656
    },
    {
        "content": "<p>nothing changed i think</p>",
        "id": 210629714,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600541705
    },
    {
        "content": "<p>From a technical standpoint the main SVN-&gt;Git conversion is essentially complete (barring discovery of some significant, heretofore unnoticed problem).</p>\n<p>The migration of the secondary data hasn't been as thoroughly explored - that'll probably be tricky, and hasn't (yet) been tested.</p>",
        "id": 210629802,
        "sender_full_name": "starseeker",
        "timestamp": 1600541810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> If you want to do a little experimenting you might see if you can figure out how <a href=\"https://github.com/cmungall/gosf2github\">https://github.com/cmungall/gosf2github</a> works...</p>",
        "id": 210630097,
        "sender_full_name": "starseeker",
        "timestamp": 1600542150
    },
    {
        "content": "<p>Ah, right, now I remember.  Unfortunately I don't have admin privileges on BRL-CAD necessary to do the export...</p>",
        "id": 210630228,
        "sender_full_name": "starseeker",
        "timestamp": 1600542323
    },
    {
        "content": "<p>or atleast someone who has admin privileges who can give the exported stuff needed</p>",
        "id": 210630892,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600543287
    },
    {
        "content": "<p>I don't think any of my old projects have anything to export in this department, certainly not on a scale like BRL-CAD's...</p>",
        "id": 210630952,
        "sender_full_name": "starseeker",
        "timestamp": 1600543343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> One question I don't know the answer to yet is what the best way to handle unmerged patches is.  On github they're pull requests, but on sourceforge they're patch files... I don't know off hand how we're going to handle patch file submissions to github.  Have you seen anything about how people address that problem?</p>",
        "id": 210631033,
        "sender_full_name": "starseeker",
        "timestamp": 1600543447
    },
    {
        "content": "<p>Maybe the gosf2github script migrates them somehow, since it looks like sourceforge categorizes bugs, patches and feature requests as tickets...</p>",
        "id": 210631092,
        "sender_full_name": "starseeker",
        "timestamp": 1600543560
    },
    {
        "content": "<p>that is the main question....if it can migrate them correctly</p>",
        "id": 210631227,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1600543701
    },
    {
        "content": "<p>/me is not quite sure what gosf2github is talking about with setting up oauth... never done that before</p>",
        "id": 210633236,
        "sender_full_name": "starseeker",
        "timestamp": 1600546395
    },
    {
        "content": "<p>OK, I <em>think</em> the \"Personal access tokens\" will work, but the perl script is a bit cranky...</p>",
        "id": 210634138,
        "sender_full_name": "starseeker",
        "timestamp": 1600547860
    },
    {
        "content": "<p>Blegh.  This begs for a detailed, step-by-step guilde for folks unfamiliar with any of this...</p>",
        "id": 210634261,
        "sender_full_name": "starseeker",
        "timestamp": 1600548005
    },
    {
        "content": "<p>OK, It looks like to get the \"collaborators\" list needed by gosf2github the repo needs to be an organization-owned repository:  <a href=\"https://docs.github.com/en/rest/reference/repos#collaborators\">https://docs.github.com/en/rest/reference/repos#collaborators</a></p>",
        "id": 210634490,
        "sender_full_name": "starseeker",
        "timestamp": 1600548363
    },
    {
        "content": "<p>Yeesh.  I guess someone needs to experiment with this stuff on a test import of BRL-CAD in the org project...</p>",
        "id": 210634558,
        "sender_full_name": "starseeker",
        "timestamp": 1600548450
    },
    {
        "content": "<p>Oh well... at least it's not necessary to stand up the primary VCS repos.</p>",
        "id": 210634628,
        "sender_full_name": "starseeker",
        "timestamp": 1600548534
    },
    {
        "content": "<p>/me make a note to check more recently updated fork at <a href=\"https://github.com/n-soda/gosf2github\">https://github.com/n-soda/gosf2github</a></p>",
        "id": 210634754,
        "sender_full_name": "starseeker",
        "timestamp": 1600548738
    },
    {
        "content": "<p>remotely relevant, <a href=\"https://github.com/github/renaming\">https://github.com/github/renaming</a> .. so we could / probably should adopt main instead of master</p>",
        "id": 210634898,
        "sender_full_name": "Sean",
        "timestamp": 1600548969
    },
    {
        "content": "<p>/me tries renaming...</p>",
        "id": 210635008,
        "sender_full_name": "starseeker",
        "timestamp": 1600549146
    },
    {
        "content": "<p>OK, we can rename master-&gt;main - proved out on brlcad_conv11</p>",
        "id": 210635435,
        "sender_full_name": "starseeker",
        "timestamp": 1600549758
    },
    {
        "content": "<p>Essentially painless if we do it before pushing to github - I'll just note it in the <a href=\"http://CONVERT.sh\">CONVERT.sh</a> script.</p>",
        "id": 210635870,
        "sender_full_name": "starseeker",
        "timestamp": 1600550430
    },
    {
        "content": "<p>Good note to be aware of when we eventually try migrating issues (last 2 comments in particular):  <a href=\"https://github.com/beanshell/beanshell/issues/44\">https://github.com/beanshell/beanshell/issues/44</a></p>",
        "id": 210636236,
        "sender_full_name": "starseeker",
        "timestamp": 1600550944
    },
    {
        "content": "<p>OK, looks like our contributions stats are still there after the default branch rename too.</p>\n<p>Phew.  Had a few bad moments wondering if we were going to have to re-run the whole thing again to get commits reassigned...</p>",
        "id": 210636339,
        "sender_full_name": "starseeker",
        "timestamp": 1600551108
    },
    {
        "content": "<p>ping?</p>",
        "id": 211329788,
        "sender_full_name": "starseeker",
        "timestamp": 1601077439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> any update on the migration?</p>",
        "id": 213117611,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1602572089
    },
    {
        "content": "<p>whatcha renaming master to, \"tyrant\"? :D</p>",
        "id": 213497869,
        "sender_full_name": "Erik",
        "timestamp": 1602802422
    },
    {
        "content": "<p>\"main\" appears to be the new convention.  I like it - it's shorter and still starts with the same letters.</p>",
        "id": 213512145,
        "sender_full_name": "starseeker",
        "timestamp": 1602816508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  ping?</p>",
        "id": 213866905,
        "sender_full_name": "starseeker",
        "timestamp": 1603157408
    },
    {
        "content": "<p>I worked on it some this past weekend.  Will update the checklist with things done tomorrow to see where we're at.</p>",
        "id": 213867012,
        "sender_full_name": "Sean",
        "timestamp": 1603157570
    },
    {
        "content": "<p>We've got a problem - my incremental conversion process just broke.</p>",
        "id": 213870376,
        "sender_full_name": "starseeker",
        "timestamp": 1603162241
    },
    {
        "content": "<p>Not Good.</p>",
        "id": 213870387,
        "sender_full_name": "starseeker",
        "timestamp": 1603162272
    },
    {
        "content": "<p>/me apprehensively re-runs to see if he can diagnose the failure...</p>",
        "id": 213870620,
        "sender_full_name": "starseeker",
        "timestamp": 1603162639
    },
    {
        "content": "<p>OK, I think I know what happened... let's see if I can adjust and recover.</p>",
        "id": 213871341,
        "sender_full_name": "starseeker",
        "timestamp": 1603163579
    },
    {
        "content": "<p>Alright, run kicked off - I've got to crash</p>",
        "id": 213871397,
        "sender_full_name": "starseeker",
        "timestamp": 1603163645
    },
    {
        "content": "<p>phew.  Looks like that adjustment got past it.</p>",
        "id": 213912406,
        "sender_full_name": "starseeker",
        "timestamp": 1603197725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> ping?</p>",
        "id": 214653239,
        "sender_full_name": "starseeker",
        "timestamp": 1603762830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> ping?</p>",
        "id": 215108661,
        "sender_full_name": "starseeker",
        "timestamp": 1604071140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> ping?</p>",
        "id": 216156325,
        "sender_full_name": "starseeker",
        "timestamp": 1604964656
    },
    {
        "content": "<p>is he doing that thing were he defers working on it a week every time someone bugs him about it? :D</p>",
        "id": 216407890,
        "sender_full_name": "Erik",
        "timestamp": 1605134948
    },
    {
        "content": "<p>No :P</p>",
        "id": 216407929,
        "sender_full_name": "Sean",
        "timestamp": 1605135002
    },
    {
        "content": "<p><a href=\"https://github.com/starseeker/brlcad_conv11\">https://github.com/starseeker/brlcad_conv11</a> is updated through r77867</p>",
        "id": 218599717,
        "sender_full_name": "starseeker",
        "timestamp": 1606934040
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 218694330,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1607003378
    },
    {
        "content": "<p><a href=\"http://bsdimp.blogspot.com/2020/09/freebsd-subversion-to-git-migration.html\">http://bsdimp.blogspot.com/2020/09/freebsd-subversion-to-git-migration.html</a></p>",
        "id": 218763189,
        "sender_full_name": "starseeker",
        "timestamp": 1607034126
    },
    {
        "content": "<p>leave it to OpenBSD to try and improve on the git frontend:  <a href=\"http://gameoftrees.org/\">http://gameoftrees.org/</a></p>",
        "id": 218763695,
        "sender_full_name": "starseeker",
        "timestamp": 1607034373
    },
    {
        "content": "<p>excellent, I'm going to try and push on it this friday now that a particular render task is finishing up.</p>",
        "id": 218779789,
        "sender_full_name": "Sean",
        "timestamp": 1607047307
    },
    {
        "content": "<p>(excellent == updated through r...)</p>",
        "id": 218779853,
        "sender_full_name": "Sean",
        "timestamp": 1607047344
    },
    {
        "content": "<p>Now through 77924</p>",
        "id": 218829734,
        "sender_full_name": "starseeker",
        "timestamp": 1607087244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Just wanted to check if you were/are able to push on the Git conversion - I can make more of an effort to keep the github repo in sync with SVN if it is helpful, but otherwise it's a little simpler to only do it every few hundred commits...</p>",
        "id": 218947590,
        "sender_full_name": "starseeker",
        "timestamp": 1607194132
    },
    {
        "content": "<p>Current through r77936</p>",
        "id": 218997762,
        "sender_full_name": "starseeker",
        "timestamp": 1607278878
    },
    {
        "content": "<p>ping?</p>",
        "id": 219518780,
        "sender_full_name": "starseeker",
        "timestamp": 1607627154
    },
    {
        "content": "<p><a href=\"https://github.com/starseeker/brlcad_conv11\">https://github.com/starseeker/brlcad_conv11</a> is updated through r77978</p>",
        "id": 220254164,
        "sender_full_name": "starseeker",
        "timestamp": 1608217658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> any chance we'll be able to move before 2021?</p>",
        "id": 220254246,
        "sender_full_name": "starseeker",
        "timestamp": 1608217691
    },
    {
        "content": "<p>Hey, cool - you can select a range on the commit graph for Github. <a href=\"/user_uploads/1549/8B15dyzpp1RTIbwEQzyd6sZt/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/8B15dyzpp1RTIbwEQzyd6sZt/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/8B15dyzpp1RTIbwEQzyd6sZt/image.png\"></a></div>",
        "id": 220262996,
        "sender_full_name": "starseeker",
        "timestamp": 1608221334
    },
    {
        "content": "<p>Your'e on fire!</p>",
        "id": 220286861,
        "sender_full_name": "Sean",
        "timestamp": 1608231763
    },
    {
        "content": "<p>Yeah, I think so.  Was thinking the same thing myself.  working on it!</p>",
        "id": 220286918,
        "sender_full_name": "Sean",
        "timestamp": 1608231790
    },
    {
        "content": "<p>Heh, well, like you said, it's a fire sale :-P</p>",
        "id": 220298084,
        "sender_full_name": "starseeker",
        "timestamp": 1608237132
    },
    {
        "content": "<p>according to those graphs, the fire's been raging for a couple years</p>",
        "id": 220298172,
        "sender_full_name": "Sean",
        "timestamp": 1608237174
    },
    {
        "content": "<p>Gotta say, I like the dark github theme - previously their website was the brightest thing on my desktop</p>",
        "id": 220298180,
        "sender_full_name": "starseeker",
        "timestamp": 1608237178
    },
    {
        "content": "<p>/me blinks - rsyncing the SVN repo from <a href=\"http://sf.net\">sf.net</a> didn't complete.  That's a new one...</p>",
        "id": 220535221,
        "sender_full_name": "starseeker",
        "timestamp": 1608494913
    },
    {
        "content": "<p>There we go.  Github brlcad_conv11 updated through r78038</p>",
        "id": 220537206,
        "sender_full_name": "starseeker",
        "timestamp": 1608498052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> barring something unforeseen, that's probably my last update of both SVN and Github for the year.</p>",
        "id": 220538658,
        "sender_full_name": "starseeker",
        "timestamp": 1608500469
    },
    {
        "content": "<p>I've not done the full cross platform distcheck-full hammering for release testing since the gqa multithreaded test will currently fail, but otherwise things are generally looking like they're in fairly good shape...</p>",
        "id": 220538935,
        "sender_full_name": "starseeker",
        "timestamp": 1608500948
    },
    {
        "content": "<p>Hey can i get the link for github repo where i can look for beginner level,easy to fix problems and try to fix them</p>",
        "id": 220578083,
        "sender_full_name": "Aniket Khandagale",
        "timestamp": 1608553349
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"372795\">@Aniket Khandagale</span> welcome to BRL-CAD Community, I think you can have a look at BRL-CAD Wiki <a href=\"http://www.brlcad.org/wiki\">www.brlcad.org/wiki</a> and start with compiling BRL-CAD to your PC. You can find build instructions from here, <a href=\"https://brlcad.org/wiki/Building_from_SVN\">https://brlcad.org/wiki/Building_from_SVN</a></p>",
        "id": 220583277,
        "sender_full_name": "Thusal Ranawaka",
        "timestamp": 1608557389
    },
    {
        "content": "<p>If you want assistance, ask from Community and also you can ask from Sean and starseeker.</p>",
        "id": 220583420,
        "sender_full_name": "Thusal Ranawaka",
        "timestamp": 1608557474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372795\">Aniket Khandagale</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/220578083\">said</a>:</p>\n<blockquote>\n<p>Hey can i get the link for github repo where i can look for beginner level,easy to fix problems and try to fix them</p>\n</blockquote>\n<p>In this case, I am not sure about the Github Repo, please help <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span></p>",
        "id": 220583521,
        "sender_full_name": "Thusal Ranawaka",
        "timestamp": 1608557544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372795\">Aniket Khandagale</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/220578083\">said</a>:</p>\n<blockquote>\n<p>Hey can i get the link for github repo where i can look for beginner level,easy to fix problems and try to fix them</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"372795\">@Aniket Khandagale</span> BRL-CAD is available on sourceforge(SVN). it is being migrated from sourceforge (svn) to github (git) so there is no (official) github repo. (there is one where the migration is happening but it is not up to date and behind the main repo by a couple of commits (or revisions, as per SVN terminology).</p>",
        "id": 220609562,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1608572632
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> should i wait till the time its been migrated to github?</p>",
        "id": 220611283,
        "sender_full_name": "Aniket Khandagale",
        "timestamp": 1608573701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372795\">@Aniket Khandagale</span> you dont need to wait for the migration.</p>",
        "id": 220611425,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1608573780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span>  can i get the link for sourceforge</p>",
        "id": 220611572,
        "sender_full_name": "Aniket Khandagale",
        "timestamp": 1608573851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span>  Is it possible to fork from  blrcad github,  push staff  or wait to finish migration??</p>",
        "id": 220950778,
        "sender_full_name": "scorp08",
        "timestamp": 1608961125
    },
    {
        "content": "<p>It's technically possible to  fork, but the repository of record is still SVN at the moment.  I'd recommend waiting for us to complete the migration.</p>",
        "id": 220967299,
        "sender_full_name": "starseeker",
        "timestamp": 1608994540
    },
    {
        "content": "<p>Yes, best to wait or things could get messy when it comes time to switch it.  I've been going through the repo so it hopefully won't be a long additional wait for folks.</p>",
        "id": 220967362,
        "sender_full_name": "Sean",
        "timestamp": 1608994674
    },
    {
        "content": "<p>ping?</p>",
        "id": 221469912,
        "sender_full_name": "starseeker",
        "timestamp": 1609706379
    },
    {
        "content": "<p>ping?</p>",
        "id": 223008263,
        "sender_full_name": "starseeker",
        "timestamp": 1610833692
    },
    {
        "content": "<p>I'll post an announcement to the email list as well, but my plan is to lock the SVN repository sometime on  Friday,  Jan. 29th to finalize the repository contents for the Git conversion.</p>",
        "id": 224086749,
        "sender_full_name": "starseeker",
        "timestamp": 1611687742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/224086749\">said</a>:</p>\n<blockquote>\n<p>I'll post an announcement to the email list as well, but my plan is to lock the SVN repository sometime on  Friday,  Jan. 29th to finalize the repository contents for the Git conversion.</p>\n</blockquote>\n<p>does this mean that the migration is done or are there some more things left?</p>",
        "id": 224133285,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1611714952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> is doing final review - I'm going to start uploading the secondary repositories while he finishes looking at the main repository.</p>",
        "id": 224179919,
        "sender_full_name": "starseeker",
        "timestamp": 1611754091
    },
    {
        "content": "<p>Okay<br>\ntell me when the whole operation is done.</p>",
        "id": 224189759,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1611758372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> I've uploaded the svn-all-fast-export conversions of all the projects except BRL-CAD itself to <a href=\"https://github.com/BRL-CAD\">https://github.com/BRL-CAD</a> - can you take a look at rt-cubed and make sure it looks OK to you before anyone starts committing to it?</p>",
        "id": 224193451,
        "sender_full_name": "starseeker",
        "timestamp": 1611759812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> I looks good to me.</p>\n<p>Git doesn't know empty directories, that's why they got lost from src/other/ogre. But, as far as I know, Ogre isn't used anywhere.</p>",
        "id": 224207646,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1611765100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> status?</p>",
        "id": 224612505,
        "sender_full_name": "starseeker",
        "timestamp": 1612051123
    },
    {
        "content": "<p>I spent most of the weekend validating and reviewing.  It's looking really fantastic to me.  I have questions, but no show-stoppers.  I actually got through the laundry checklist I'd written up to identify all the deltas as document discrepancies.  Filed support request for --follow and doing one more pass through the log of missing commits now.  Planning to upload repo myself today so I know the process, unless there's some reason not to.</p>",
        "id": 224768439,
        "sender_full_name": "Sean",
        "timestamp": 1612203514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> brlcad_conv11 is current with the latest commits.</p>",
        "id": 224805752,
        "sender_full_name": "starseeker",
        "timestamp": 1612220264
    },
    {
        "content": "<p>Any other questions I can help answer?</p>",
        "id": 224805775,
        "sender_full_name": "starseeker",
        "timestamp": 1612220281
    },
    {
        "content": "<p>if an empty directory is needed by git, typically a .do_not_delete file is touched</p>",
        "id": 224866530,
        "sender_full_name": "Erik",
        "timestamp": 1612270528
    },
    {
        "content": "<p>I'm not aware of any situation where we actually need an empty directory in the raw source repo - if nothing else, it's simple to have the build system or the code create such directories on the fly...</p>",
        "id": 224868251,
        "sender_full_name": "starseeker",
        "timestamp": 1612271431
    },
    {
        "content": "<p>yup, just quipping what I done seened :)</p>",
        "id": 224868383,
        "sender_full_name": "Erik",
        "timestamp": 1612271482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> It looked like your git isst repo had everything from SVN's isst as well - is that correct?</p>",
        "id": 224868605,
        "sender_full_name": "starseeker",
        "timestamp": 1612271573
    },
    {
        "content": "<p>I'm sure it was just an import, I hope I tried to make the introduction commit as basic as possible and did the \"tidy\" as a next commit... it's been a few, yo :)</p>",
        "id": 224868776,
        "sender_full_name": "Erik",
        "timestamp": 1612271648
    },
    {
        "content": "<p>if not, I hope someone is archiving the svn repo and the latest snapshot, y'know, \"just in case\". I'm sure the DoD can still afford the bits :)</p>",
        "id": 224868832,
        "sender_full_name": "Erik",
        "timestamp": 1612271704
    },
    {
        "content": "<p><a href=\"https://github.com/BRL-CAD/vcs-history\">https://github.com/BRL-CAD/vcs-history</a></p>",
        "id": 224868865,
        "sender_full_name": "starseeker",
        "timestamp": 1612271721
    },
    {
        "content": "<p>neato :D (keep an in-house copy or 20)</p>",
        "id": 224868976,
        "sender_full_name": "Erik",
        "timestamp": 1612271767
    },
    {
        "content": "<p>I may have to \"top off\" the SVN portion depending  on whether I need to make more SVN commits before the final switch, but if some poor soul has to repeat the VCS conversions for whatever reason they should have the necessary inputs to work with.</p>",
        "id": 224869098,
        "sender_full_name": "starseeker",
        "timestamp": 1612271865
    },
    {
        "content": "<p>(straight jacket not included)</p>",
        "id": 224869211,
        "sender_full_name": "starseeker",
        "timestamp": 1612271920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> still no show-stoppers but found a couple oddities.  there are about 100 \"<strong>* empty log message </strong>*\" cvs commits that exist in git and svn but are missing the corresponding svn:revision:#### line.  would that be because of timestamps or something else?</p>",
        "id": 224911488,
        "sender_full_name": "Sean",
        "timestamp": 1612289301
    },
    {
        "content": "<p>some appear to have it while others do not.</p>",
        "id": 224911603,
        "sender_full_name": "Sean",
        "timestamp": 1612289372
    },
    {
        "content": "<p>there are also 139 empty log message cvs commits in addition to the 100 that don't seem to be in git, but I'm writing them off as different cvs2git vs cvs2svn translation until I see evidence otherwise.</p>",
        "id": 224912132,
        "sender_full_name": "Sean",
        "timestamp": 1612289588
    },
    {
        "content": "<p>@Sean I was probably somewhat hesitant about mapping SVN numbers to those commits - with such ambiguous messages, all I had to go on for those was the timestamps, and the git and svn conversions of CVS didn't always end up exactly mapping those.</p>\n<p>svn number assignment logic is in misc/repoconv/svn_map_commit_revs.cxx FWIW</p>",
        "id": 224917604,
        "sender_full_name": "starseeker",
        "timestamp": 1612291751
    },
    {
        "content": "<p>Looking at the logic, I don't know that I did a whole lot with the empty log message commits.</p>",
        "id": 224917987,
        "sender_full_name": "starseeker",
        "timestamp": 1612291900
    },
    {
        "content": "<p>I think by that point I figured we were well into diminishing returns.</p>",
        "id": 224918136,
        "sender_full_name": "starseeker",
        "timestamp": 1612291949
    },
    {
        "content": "<p>I see that I categorized some commits as \"non-unique, has exact timestamp match\" but I think without manual inspection of the diffs I wouldn't have had the confidence to assign them SVN ids</p>",
        "id": 224918464,
        "sender_full_name": "starseeker",
        "timestamp": 1612292069
    },
    {
        "content": "<p>Even the \"Initial revision\" commit assignments, which I did make, are a bit dubious</p>",
        "id": 224918513,
        "sender_full_name": "starseeker",
        "timestamp": 1612292089
    },
    {
        "content": "<p>(non-unique in that context would be \"non-unique commit message string\")</p>",
        "id": 224918893,
        "sender_full_name": "starseeker",
        "timestamp": 1612292225
    },
    {
        "content": "<p>AH!  I think I found the processing log</p>",
        "id": 224919705,
        "sender_full_name": "starseeker",
        "timestamp": 1612292545
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/C5aFsIYxg-sWHfTt5gQ2wH6F/svn_unmapped.txt\">svn_unmapped.txt</a></p>",
        "id": 224919830,
        "sender_full_name": "starseeker",
        "timestamp": 1612292599
    },
    {
        "content": "<p>Looks like when I ran that it was against a git repo that didn't have newer 76300+ commits.  The following is cleaned up and sorted:</p>",
        "id": 224921140,
        "sender_full_name": "starseeker",
        "timestamp": 1612293156
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/rXTCNPnn_KUxFQPz9at9ksB4/svn_unmapped_sorted.txt\">svn_unmapped_sorted.txt</a></p>",
        "id": 224921159,
        "sender_full_name": "starseeker",
        "timestamp": 1612293166
    },
    {
        "content": "<p>So 735 there is an example -- it's  the first in my list.  It's not got a timestamp match, so you didn't know which svn :revision that was (which is  curious in itself)</p>",
        "id": 224925957,
        "sender_full_name": "Sean",
        "timestamp": 1612295332
    },
    {
        "content": "<p>at least maybe?  that's the curious part because you did know it was 735 ...</p>",
        "id": 224926078,
        "sender_full_name": "Sean",
        "timestamp": 1612295385
    },
    {
        "content": "<p>under what conditions would cvs commits get or not get the svn:revision:### note?</p>",
        "id": 224926334,
        "sender_full_name": "Sean",
        "timestamp": 1612295493
    },
    {
        "content": "<p>I know about SVN commit 735, but in the git repository I don't have a commit with an exact timestamp match with the same commit message</p>",
        "id": 224927167,
        "sender_full_name": "starseeker",
        "timestamp": 1612295796
    },
    {
        "content": "<p>What you're seeing in that log is a processing of a detailed log from SVN, combined with a log of available git commits.</p>",
        "id": 224927322,
        "sender_full_name": "starseeker",
        "timestamp": 1612295859
    },
    {
        "content": "<p>For that printout, all SVN commits were checked against what was/is available in git</p>",
        "id": 224927433,
        "sender_full_name": "starseeker",
        "timestamp": 1612295894
    },
    {
        "content": "<p>CVS commits would get the svn:revision note under the following conditions:</p>\n<p>1)  there exists an exact, unique commit message that is shared by an SVN commit and a Git commit<br>\n2)  There exists an SVN commit with a non-unique commit message match that also shares an exact timestamp with a Git commit having the same commit message<br>\n3)  The special case commit message \"Initial revision\" when there exists a Git commit with an exact timestamp match, and the timestamp match is outside the known \"bad\" range of early commits with unreliable timestamps.</p>",
        "id": 224928353,
        "sender_full_name": "starseeker",
        "timestamp": 1612296244
    },
    {
        "content": "<p>Yeah, that's odd.  The timestamp you have for 735 is different in cvs2git from what svn had...</p>",
        "id": 224928527,
        "sender_full_name": "Sean",
        "timestamp": 1612296333
    },
    {
        "content": "<p>Looks like r735 is 771b3183f9e315f6e1451a1e3462e6f84724a9cd</p>",
        "id": 224928555,
        "sender_full_name": "Sean",
        "timestamp": 1612296347
    },
    {
        "content": "<p>svn lists that date as 1986-08-12 23:18:25 -0400</p>",
        "id": 224928705,
        "sender_full_name": "Sean",
        "timestamp": 1612296406
    },
    {
        "content": "<p>git is a solid ten minutes off at Wed Aug 13 03:08:40 1986 +0000</p>",
        "id": 224928745,
        "sender_full_name": "Sean",
        "timestamp": 1612296424
    },
    {
        "content": "<p>(that's not to suggest git's is wrong -- svn could of course be wrong)</p>",
        "id": 224928794,
        "sender_full_name": "Sean",
        "timestamp": 1612296450
    },
    {
        "content": "<p>I will readily admit I didn't delve into the details of how cvs2git and cvs2svn differed in their processing, so I can't say which one is right or better.  For myself I wasn't worried about it - in some circumstance where precision for a given commit's timing mattered, I'd want to query CVS directly...</p>\n<p>A word of caution - now that we're no longer using git notes for svn revision information, any updates to add more mappings are going to be difficult (not impossible, but it will be another custom processing implementation in repowork.)</p>",
        "id": 224929187,
        "sender_full_name": "starseeker",
        "timestamp": 1612296611
    },
    {
        "content": "<p>No worries, not seeing any reason to reprocess anything -- just accounting to make sure nothing is missing.  And simply trying to understand.</p>",
        "id": 224929515,
        "sender_full_name": "Sean",
        "timestamp": 1612296764
    },
    {
        "content": "<p>I was able to rule out all 81 \"Initial revision\" commits for example, as they're clearly all categorically present, just not labeled (likely your #3 above).</p>",
        "id": 224929715,
        "sender_full_name": "Sean",
        "timestamp": 1612296850
    },
    {
        "content": "<p>I think #1 may also be accounting for a lot of the 400 remaining.  Many have a repeat commit message but that was made (sometimes seconds) later.  If there's some discrepancy between the clock being used, that would also potentially account for more.  I should know more definitively here in a bit.</p>",
        "id": 224929941,
        "sender_full_name": "Sean",
        "timestamp": 1612296960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> If you're doing the grunt work to go identify mappings manually, you may as well make a note of the mappings.  If you're going to that degree of trouble, I might as well do the extra work to capture it in the commit messages...</p>",
        "id": 224930162,
        "sender_full_name": "starseeker",
        "timestamp": 1612297063
    },
    {
        "content": "<p>Just something like:</p>\n<p>sha1;# <br>\nsha1;#<br>\n...</p>\n<p>should do it.</p>",
        "id": 224930646,
        "sender_full_name": "starseeker",
        "timestamp": 1612297288
    },
    {
        "content": "<p>One of the problems though is I don't expect some of them to have exact 1-1 mappings at all, since cvs2git may have grouped things differently.</p>",
        "id": 224931219,
        "sender_full_name": "starseeker",
        "timestamp": 1612297541
    },
    {
        "content": "<p>Pardon, my terminology was loose - the tool we're using is cvs-fast-export, not cvs2git.</p>",
        "id": 224932401,
        "sender_full_name": "starseeker",
        "timestamp": 1612298012
    },
    {
        "content": "<p>Hm, yeah I have that info.  I basically wrote two 1-liners to pull a diff of the missing svn revs and and of all git revs, then a 1-liner to make sure they're all accounted for.  I could make it print which commit is actually which missing rev.</p>",
        "id": 224943885,
        "sender_full_name": "Sean",
        "timestamp": 1612303478
    },
    {
        "content": "<p>You're actually comparing the commit diffs themselves?  nifty</p>",
        "id": 224947117,
        "sender_full_name": "starseeker",
        "timestamp": 1612305219
    },
    {
        "content": "<p>technically I'm comparing the md5 sum of just the changed/added/removed lines, but yeah.   it was also needed to figure out which missing commits were because they were just propset changes.</p>",
        "id": 224947501,
        "sender_full_name": "Sean",
        "timestamp": 1612305437
    },
    {
        "content": "<p>they show up as empty diffs, so easy to cull them from review</p>",
        "id": 224947533,
        "sender_full_name": "Sean",
        "timestamp": 1612305463
    },
    {
        "content": "<p>Ah, I hadn't thought of extracting just the diff lines - good call</p>",
        "id": 224947704,
        "sender_full_name": "starseeker",
        "timestamp": 1612305557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> upon reflection, I'm second guessing myself - if I update the older commit messages, it changes all the sha1s again and arguably we would need to do more verification to make sure the new step didn't mess with anything.  Maybe it's not worth it for the stray svn:revision tags?</p>",
        "id": 224966050,
        "sender_full_name": "starseeker",
        "timestamp": 1612318926
    },
    {
        "content": "<p>With a diff based approach, you might in principle be able to spot if any of the Initial Revision commits ended up mapped wrong despite exact timestamp matches...</p>",
        "id": 224969240,
        "sender_full_name": "starseeker",
        "timestamp": 1612322279
    },
    {
        "content": "<p>If I ended up assigning demonstrably incorrect numbers, that's probably worth fixing...</p>",
        "id": 224969306,
        "sender_full_name": "starseeker",
        "timestamp": 1612322318
    },
    {
        "content": "<p>Sure, can revisit the decision -- my priority has been on finding / validating they're there somewhere.  If they're all there and just not tagged, I agree that's less of a concern.   I mean it'd be cool to have them all tagged, but that can happen at a later date even and we make everyone re-clone.</p>",
        "id": 224969477,
        "sender_full_name": "Sean",
        "timestamp": 1612322504
    },
    {
        "content": "<p>Hey, can you take a look at a couple commits and tell me what I'm seeing... <br>\n4850989e3a2f9624127ae043c6094076a60bc472  and  97d02527843ffb84f8bb3da0e64ef5f7db6df28c</p>",
        "id": 224969527,
        "sender_full_name": "Sean",
        "timestamp": 1612322533
    },
    {
        "content": "<p>I'm not entirely sure what those are - some artifact of the cvs-to-git conversion process, obviously, but I'm not entirely clear on what they're trying to represent.</p>",
        "id": 225015956,
        "sender_full_name": "starseeker",
        "timestamp": 1612359633
    },
    {
        "content": "<p>I haven't considered trying to \"clean up\" any of the cvs era artifacts of the conversion, since I don't know which of them might be added to preserve content that would otherwise be garbage collected out.</p>",
        "id": 225024265,
        "sender_full_name": "starseeker",
        "timestamp": 1612363342
    },
    {
        "content": "<p>at a quick glance, they look like the entire repository was deleted.  they're the two largest commits in the git repo.  they're fortunately in branches, but would be good to understand what's going on there because it smells like something went wrong</p>",
        "id": 225037562,
        "sender_full_name": "Sean",
        "timestamp": 1612368532
    },
    {
        "content": "<p>I recall the 7.0 branch and don't remember any sort of merge event like that happening ...</p>",
        "id": 225037682,
        "sender_full_name": "Sean",
        "timestamp": 1612368590
    },
    {
        "content": "<p>The \"cvsconvert\" tool did generate some sort of audit...</p>",
        "id": 225052789,
        "sender_full_name": "starseeker",
        "timestamp": 1612374541
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/hWc_e7z5uU_qC8jkOSfzmG7I/cvs_all_fast_export_audit.txt\">cvs_all_fast_export_audit.txt</a></p>",
        "id": 225052855,
        "sender_full_name": "starseeker",
        "timestamp": 1612374575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> How do you want to proceed?</p>",
        "id": 225053167,
        "sender_full_name": "starseeker",
        "timestamp": 1612374710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> FWIW, I think I've gotten the necessary piece in place to do the sha1;rev# updating successfully.  I'd still want to run your diff check on the final results and probably inspect the updated commits to be sure, but a quick test with your 735 example succeeded.</p>",
        "id": 225077591,
        "sender_full_name": "starseeker",
        "timestamp": 1612384661
    },
    {
        "content": "<p>bbl</p>",
        "id": 225077704,
        "sender_full_name": "starseeker",
        "timestamp": 1612384700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/225053167\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> How do you want to proceed?</p>\n</blockquote>\n<p>It would be nice to understand why either of those branches appear to wipe out everything (if that's indeed what happened), even if were not going to do anything about it.  I think that'd entail checking out one of those branches and looking at the commits before/after to see if there's an explanation.  Not a show-stopper since they're on branches, but concerning from a data anomaly perspective.</p>",
        "id": 225078065,
        "sender_full_name": "Sean",
        "timestamp": 1612384858
    },
    {
        "content": "<p>Good to know about the sha/rev updating.  At a quick glance, lookup succeeded on about 1/2 to 2/3rds of the commits missing.  I'm looking at the ones that didn't match to see if they're actually missing or if there's something in the diffing method pooching things.  There are a few dozen that map 1:many that we can either ignore or map manually by their date, but I wasn't going to worry about them.</p>",
        "id": 225078400,
        "sender_full_name": "Sean",
        "timestamp": 1612385007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> The immediate question is whether they did do that or cvs-fast-export is misinterpreting some aspect of the CVS data.</p>",
        "id": 225107524,
        "sender_full_name": "starseeker",
        "timestamp": 1612401236
    },
    {
        "content": "<p>FWIW, I think a685e85ff730450f669a0d853c69ef545c30b46f may be related to the  97d02527843ffb84f8bb3da0e64ef5f7db6df28c commit</p>",
        "id": 225107757,
        "sender_full_name": "starseeker",
        "timestamp": 1612401419
    },
    {
        "content": "<p>\"remove the cvs tag relic\" may be why the prior incomplete tag commit removed everything?</p>",
        "id": 225107793,
        "sender_full_name": "starseeker",
        "timestamp": 1612401465
    },
    {
        "content": "<p>Ah, wait a minute - I wasn't looking closely enough. \"merge-to-head\" incomplete tag (4850989e3a2f9624127ae043c6094076a60bc472) is an SVN era commit, and also seems to have an associated commit (dd2bb79965568f5aab4f7458606d875d22b74b40)</p>",
        "id": 225107993,
        "sender_full_name": "starseeker",
        "timestamp": 1612401651
    },
    {
        "content": "<p>Yeah, those are both SVN era commits - my apologies.</p>",
        "id": 225108023,
        "sender_full_name": "starseeker",
        "timestamp": 1612401685
    },
    {
        "content": "<p>I was fooled by the \"cvs\" in the commit messages and didn't look closely enough</p>",
        "id": 225108034,
        "sender_full_name": "starseeker",
        "timestamp": 1612401705
    },
    {
        "content": "<p>OK, so checking more carefully, here's the breakdown:</p>\n<p>97d02527843ffb84f8bb3da0e64ef5f7db6df28c - Synthetic commit for incomplete tag release-7-0 - CVS era commit<br>\na685e85ff730450f669a0d853c69ef545c30b46f - child of 97d02, SVN era commit.  Message:<br>\nclearly not actually release 7.0 .. remove the cvs tag relic that was made on a few files just before the project was converted to open source. (svn branch delete)</p>\n<p>4850989e3a2f9624127ae043c6094076a60bc472 - Synthetic commit for incomplete tag merge-to-head-20051223 - CVS era commit<br>\ndd2bb79965568f5aab4f7458606d875d22b74b40 - child of 485098, SVN era commit.  Message:<br>\nmove cvs branch tagging artifact removal (svn branch delete)</p>",
        "id": 225108434,
        "sender_full_name": "starseeker",
        "timestamp": 1612402093
    },
    {
        "content": "<p>So, my guess is that the CVS conversions (evidently both of them, cvs2svn and cvs-fast-export) found something in the data prompted tagging.  Based on the 7.0 message, it looks like a stray tag was on a few files, the converter interpreted that as a tag in Git that preserved only those files and removed everything else (hence the massive diff.)</p>\n<p>Back in 2011, you did some cleanup on the SVN branches and spotted those as spurious.  So, we've got the cvs-fast-export generated tags and associated branches, and then the 2011 SVN cleanup of the cvs2svn versions of the same thing.</p>",
        "id": 225108853,
        "sender_full_name": "starseeker",
        "timestamp": 1612402410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Your call how you want to handle the 1-many - I'm pretty sure I can handle that in the svn:revision assignment, as long as each sha1 maps to only one SVN rev.</p>",
        "id": 225109226,
        "sender_full_name": "starseeker",
        "timestamp": 1612402685
    },
    {
        "content": "<p>(I think if we delete the two branches in question from Git we can probably garbage collect them out, by the way - do we want to preserve that, or would it be better to remove?)</p>",
        "id": 225114196,
        "sender_full_name": "starseeker",
        "timestamp": 1612408341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/225108853\">said</a>:</p>\n<blockquote>\n<p>So, my guess is that the CVS conversions (evidently both of them, cvs2svn and cvs-fast-export) found something in the data prompted tagging.  Based on the 7.0 message, it looks like a stray tag was on a few files, the converter interpreted that as a tag in Git that preserved only those files and removed everything else (hence the massive diff.)</p>\n<p>Back in 2011, you did some cleanup on the SVN branches and spotted those as spurious.  So, we've got the cvs-fast-export generated tags and associated branches, and then the 2011 SVN cleanup of the cvs2svn versions of the same thing.</p>\n</blockquote>\n<p>This is the explanation I was hoping for!</p>",
        "id": 225114545,
        "sender_full_name": "Sean",
        "timestamp": 1612408842
    },
    {
        "content": "<p>Yeah, okay I can see that happening and how it might have gotten intepreted -- a branch was tagged, the branch was removed, but a few stray files from that branch ended up remaining tagged/referenced, so it generated delete commits to preserve their lineage.</p>",
        "id": 225114581,
        "sender_full_name": "Sean",
        "timestamp": 1612408918
    },
    {
        "content": "<p>There were actually a dozen or two commits very similar to those, which is also why it was concerning (they were just the biggest two), but I think that fully explains them.</p>",
        "id": 225114650,
        "sender_full_name": "Sean",
        "timestamp": 1612409005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/225114196\">said</a>:</p>\n<blockquote>\n<p>(I think if we delete the two branches in question from Git we can probably garbage collect them out, by the way - do we want to preserve that, or would it be better to remove?)</p>\n</blockquote>\n<p>I think we can just ignore them for now.  They're not the only ones, they just stood out during validation as potential processing corruption.</p>",
        "id": 225114700,
        "sender_full_name": "Sean",
        "timestamp": 1612409055
    },
    {
        "content": "<p>Knowing that they're not, they are out of sight, out of mind.  Excellent!</p>",
        "id": 225114719,
        "sender_full_name": "Sean",
        "timestamp": 1612409087
    },
    {
        "content": "<p>might wanna docco that with stashed history</p>",
        "id": 225166045,
        "sender_full_name": "Erik",
        "timestamp": 1612449021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> Did folks manually edit CVS files to tag releases or some such?  I know from what Sean said the history was edited at least once to deal with some Tcl/Tk issues (which can be seen comparing CVS checkouts vs git checkouts, actually)...</p>",
        "id": 225166455,
        "sender_full_name": "starseeker",
        "timestamp": 1612449195
    },
    {
        "content": "<p>I have no recollection of manually tweaking CVS files for a release O.o I was slid off to muves3 around that time I think, I think 7 happened without me</p>",
        "id": 225166710,
        "sender_full_name": "Erik",
        "timestamp": 1612449301
    },
    {
        "content": "<p>I mostly just did fbsd support and autoconf before reassignment (plus a few side projects, uh, some parser for matrex federations, uh, something else for Geoff, too... )</p>",
        "id": 225166876,
        "sender_full_name": "Erik",
        "timestamp": 1612449377
    },
    {
        "content": "<p>Fair enough.  The more I see of all this the more grateful I am that I got to come on board just as SVN was introduced.</p>",
        "id": 225166969,
        "sender_full_name": "starseeker",
        "timestamp": 1612449440
    },
    {
        "content": "<p>CVS is... weird.  At one point I even considered <a href=\"https://github.com/rcls/crap\">https://github.com/rcls/crap</a> as an alternative to cvs-fast-export, since it seems to reproduce in Git what CVS checks out, but after discussions with Sean (and I think I noticed this myself at one point) I learned even CVS itself won't accurately check out some parts of our history (accurately in the sense of reproducing the tree that the users would have seen at the time) due to the edits made to work around the libtcl/libtk problems.</p>",
        "id": 225167284,
        "sender_full_name": "starseeker",
        "timestamp": 1612449583
    },
    {
        "content": "<p>CVS is a \"remote RCS server\", grokking rcs is kinda important for grokking cvs</p>",
        "id": 225167486,
        "sender_full_name": "Erik",
        "timestamp": 1612449672
    },
    {
        "content": "<p>&lt;snort&gt;  I guess as a young whippersnapper I joined the software community too late to properly appreciate them.  \"RCS\" to me mostly means annoying tags at the beginning of files that complicate diffing :-P</p>",
        "id": 225167635,
        "sender_full_name": "starseeker",
        "timestamp": 1612449737
    },
    {
        "content": "<p>Which is not to say I could have designed anything better than RCS back in the day, of course - I get the sense that VCS is one of those problems where only experience with the day-to-day requirements of the problems at scale can really result in good designs.</p>",
        "id": 225167953,
        "sender_full_name": "starseeker",
        "timestamp": 1612449897
    },
    {
        "content": "<p>I don't know of CVS files being edited for releases.  They were mostly edited to \"fix\" things CVS couldn't do, like renaming a directory or eliminating a bad commit.</p>",
        "id": 225174610,
        "sender_full_name": "Sean",
        "timestamp": 1612452547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> another something to investigate... do you know why this doesn't work?<br>\ngit diff 2686445fedcfeadcbc8a2960fd8690f2d0ccbf47~1 2686445fedcfeadcbc8a2960fd8690f2d0ccbf47</p>",
        "id": 225174701,
        "sender_full_name": "Sean",
        "timestamp": 1612452591
    },
    {
        "content": "<p>show works, but can't diff it... somehow it doesn't have an ancestor or has multiple or ... ?</p>",
        "id": 225174829,
        "sender_full_name": "Sean",
        "timestamp": 1612452630
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"commit\"><pre><span></span><code>Author: Douglas Kingston &lt;dpk@randomnotes.org&gt;\nDate:   Fri Dec 16 00:10:31 1983 +0000\n\n    Original 4.2 Distribution Source\n\n    svn:revision:2\n    cvs:account:dpk\n    cvs:branch:trunk\n</code></pre></div>\n<p>That's the earliest commit in the history - it doesn't have an ancestor</p>",
        "id": 225175135,
        "sender_full_name": "starseeker",
        "timestamp": 1612452759
    },
    {
        "content": "<p>OH!</p>",
        "id": 225175192,
        "sender_full_name": "Sean",
        "timestamp": 1612452782
    },
    {
        "content": "<p>g'dammit.. okay, I can special case it. haha.</p>",
        "id": 225175297,
        "sender_full_name": "Sean",
        "timestamp": 1612452810
    },
    {
        "content": "<p>I've noticed git tools aren't always graceful when they encounter that case.</p>",
        "id": 225175329,
        "sender_full_name": "starseeker",
        "timestamp": 1612452827
    },
    {
        "content": "<p>I was able to identify most of the missing revisions, but there are about 160 that didn't match, and when I investigated it was because git's show syntax doesn't match diff syntax for merge commits.  manually looking at one of the ones that didn't match, it was indeed a merge commit that didn't match because of  the format.  so I regen'd the diffs but it barfed on that one.</p>",
        "id": 225175350,
        "sender_full_name": "Sean",
        "timestamp": 1612452833
    },
    {
        "content": "<p>/me grins - you found the last turtle!</p>",
        "id": 225175443,
        "sender_full_name": "starseeker",
        "timestamp": 1612452866
    },
    {
        "content": "<p>there must be some other diff syntax that will get that commit?</p>",
        "id": 225175479,
        "sender_full_name": "Sean",
        "timestamp": 1612452881
    },
    {
        "content": "<p>tried ^ ...</p>",
        "id": 225175514,
        "sender_full_name": "Sean",
        "timestamp": 1612452903
    },
    {
        "content": "<p>git show will print it... don't know about diff.</p>",
        "id": 225175529,
        "sender_full_name": "starseeker",
        "timestamp": 1612452908
    },
    {
        "content": "<p>show is the wrong format</p>",
        "id": 225175547,
        "sender_full_name": "Sean",
        "timestamp": 1612452917
    },
    {
        "content": "<p>Conceptually, what are we diffing against?</p>",
        "id": 225175550,
        "sender_full_name": "starseeker",
        "timestamp": 1612452918
    },
    {
        "content": "<p>I want the patch for that commit</p>",
        "id": 225175581,
        "sender_full_name": "Sean",
        "timestamp": 1612452935
    },
    {
        "content": "<p>the commit</p>",
        "id": 225175599,
        "sender_full_name": "Sean",
        "timestamp": 1612452941
    },
    {
        "content": "<p>so patch format, it'll be lines added.</p>",
        "id": 225175674,
        "sender_full_name": "Sean",
        "timestamp": 1612452965
    },
    {
        "content": "<p>git diff 4b825dc642cb6eb9a060e54bf8d69288fbee4904  2686445fedcfeadcbc8a2960fd8690f2d0ccbf47</p>",
        "id": 225175715,
        "sender_full_name": "starseeker",
        "timestamp": 1612452982
    },
    {
        "content": "<p>^! seems to work, but I'm not sure what that means...</p>",
        "id": 225175719,
        "sender_full_name": "Sean",
        "timestamp": 1612452983
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/a/40884093\">https://stackoverflow.com/a/40884093</a></p>",
        "id": 225175755,
        "sender_full_name": "starseeker",
        "timestamp": 1612452999
    },
    {
        "content": "<p>Does that work?</p>",
        "id": 225175776,
        "sender_full_name": "starseeker",
        "timestamp": 1612453007
    },
    {
        "content": "<p>eh... that's f'ing retarded.</p>",
        "id": 225175873,
        "sender_full_name": "Sean",
        "timestamp": 1612453050
    },
    {
        "content": "<p>I'm sure it will.  There's got to be some shorthand for that shit.</p>",
        "id": 225175916,
        "sender_full_name": "Sean",
        "timestamp": 1612453069
    },
    {
        "content": "<p>Maybe ^! is a shorthand for that?  Dunno, haven't encountered that syntax before - <span class=\"user-mention\" data-user-id=\"103542\">@Erik</span>  ?</p>",
        "id": 225176048,
        "sender_full_name": "starseeker",
        "timestamp": 1612453111
    },
    {
        "content": "<p>I found that on some other SO but can't find it in the docs to know what it means.</p>",
        "id": 225176188,
        "sender_full_name": "Sean",
        "timestamp": 1612453174
    },
    {
        "content": "<p>Yeah, that's a tough one to google...</p>",
        "id": 225176210,
        "sender_full_name": "starseeker",
        "timestamp": 1612453189
    },
    {
        "content": "<p>I dunno !<br>\n^ means \"previous\"<br>\n~&lt;n&gt; means \"nth previous\"</p>",
        "id": 225176298,
        "sender_full_name": "Erik",
        "timestamp": 1612453213
    },
    {
        "content": "<p>here we go:  The r1^! notation includes commit r1 but excludes all of its parents. By itself, this notation denotes the single commit r1.</p>",
        "id": 225176361,
        "sender_full_name": "Sean",
        "timestamp": 1612453245
    },
    {
        "content": "<p>sounds like that might be correct</p>",
        "id": 225176400,
        "sender_full_name": "Sean",
        "timestamp": 1612453267
    },
    {
        "content": "<p>ah, neat<br>\n'git show' is what I use for a single commit</p>",
        "id": 225176405,
        "sender_full_name": "Erik",
        "timestamp": 1612453270
    },
    {
        "content": "<p>me too, but it's syntax is wrong for merge commits (at least for patch and diffing purposes)</p>",
        "id": 225176448,
        "sender_full_name": "Sean",
        "timestamp": 1612453297
    },
    {
        "content": "<p>it does ++ and -- lines</p>",
        "id": 225176469,
        "sender_full_name": "Sean",
        "timestamp": 1612453304
    },
    {
        "content": "<p>there's undoubtedly other options to change the format, but diff is the command that does it in the right format by default, so it was a hunt to find the right syntax for \"just this commit\"</p>",
        "id": 225176570,
        "sender_full_name": "Sean",
        "timestamp": 1612453338
    },
    {
        "content": "<p>apparently it's rev^! ...</p>",
        "id": 225176602,
        "sender_full_name": "Sean",
        "timestamp": 1612453352
    },
    {
        "content": "<p>/me reruns a diff dump.. should have answers within the hour</p>",
        "id": 225176864,
        "sender_full_name": "Sean",
        "timestamp": 1612453460
    },
    {
        "content": "<p>I think I would have ended up doing \"git diff rev^..rev\"</p>",
        "id": 225176874,
        "sender_full_name": "Erik",
        "timestamp": 1612453464
    },
    {
        "content": "<p>or something-ish</p>",
        "id": 225176889,
        "sender_full_name": "Erik",
        "timestamp": 1612453471
    },
    {
        "content": "<p>yep, did that and that's what barfs when it encounters the last rev</p>",
        "id": 225176928,
        "sender_full_name": "Sean",
        "timestamp": 1612453493
    },
    {
        "content": "<p>er, first commit</p>",
        "id": 225176944,
        "sender_full_name": "Sean",
        "timestamp": 1612453501
    },
    {
        "content": "<p>git diff rev~ rev</p>",
        "id": 225176980,
        "sender_full_name": "Sean",
        "timestamp": 1612453515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> If you think it's worthwhile, I'd stick your verification script or at least notes about the key gotchas associated with creating it  in misc/repoconv once this is all over - it can't be any worse than my conversion logic, and it might be useful someday if we ever have to dive back into this swamp...</p>",
        "id": 225177402,
        "sender_full_name": "starseeker",
        "timestamp": 1612453697
    },
    {
        "content": "<p>sure</p>",
        "id": 225177463,
        "sender_full_name": "Sean",
        "timestamp": 1612453724
    },
    {
        "content": "<p>I've been stashing notes just in case I need to reference one of the 1-liners later, and notes on missing revs as they've been explained</p>",
        "id": 225177548,
        "sender_full_name": "Sean",
        "timestamp": 1612453774
    },
    {
        "content": "<p>/me is embarrassed that he didn't think of cutting down the diff into +/- lines - should  have considered that when the commit messages didn't resolve things unambiguously</p>",
        "id": 225177581,
        "sender_full_name": "starseeker",
        "timestamp": 1612453791
    },
    {
        "content": "<p>well still remains to be seen -- they may need to be sorted too, but wasn't going to do that until there's evidence it's needed</p>",
        "id": 225177755,
        "sender_full_name": "Sean",
        "timestamp": 1612453850
    },
    {
        "content": "<p>e.g., if there are multiple file changes and svn shows A, B, C but then git displays C, B, A or similar ... shouldn't but might be possible.  so far I'm thinking not just because so many are matching.</p>",
        "id": 225177912,
        "sender_full_name": "Sean",
        "timestamp": 1612453908
    },
    {
        "content": "<p>but the bigger set was empty merges next so should see how many of the 160 this eliminates</p>",
        "id": 225178013,
        "sender_full_name": "Sean",
        "timestamp": 1612453940
    },
    {
        "content": "<p>/me will be curious to see if any of the commit message + timestamp based mappings prove to be incorrect.</p>",
        "id": 225179740,
        "sender_full_name": "starseeker",
        "timestamp": 1612454584
    },
    {
        "content": "<p>I can re-run on everything next but immediate priority was just identifying potentially missing commits</p>",
        "id": 225181932,
        "sender_full_name": "Sean",
        "timestamp": 1612455375
    },
    {
        "content": "<p>/me nods</p>",
        "id": 225181988,
        "sender_full_name": "starseeker",
        "timestamp": 1612455394
    },
    {
        "content": "<p>Whatever you think best - just want to do whatever I can to put  bow on this sucker.</p>",
        "id": 225182061,
        "sender_full_name": "starseeker",
        "timestamp": 1612455424
    },
    {
        "content": "<p>that will require pulling all the svn diffs, which takes a while.  took longer to pull 720 svn diffs from sf than it took to pull 70000 git diffs locally ... not much longer but still was a while</p>",
        "id": 225182096,
        "sender_full_name": "Sean",
        "timestamp": 1612455439
    },
    {
        "content": "<p>I'm fine just making sure we're not missing data.  if a commit is mis-tagged, that could be fixed later.</p>",
        "id": 225182185,
        "sender_full_name": "Sean",
        "timestamp": 1612455473
    },
    {
        "content": "<p>Might be faster to rsync the SVN repo and pull it locally - that's how I've worked with it</p>",
        "id": 225182231,
        "sender_full_name": "starseeker",
        "timestamp": 1612455483
    },
    {
        "content": "<p>oh it definitely would</p>",
        "id": 225182286,
        "sender_full_name": "Sean",
        "timestamp": 1612455493
    },
    {
        "content": "<p>I just didn't bother</p>",
        "id": 225182304,
        "sender_full_name": "Sean",
        "timestamp": 1612455499
    },
    {
        "content": "<p>that'd take like two lines.</p>",
        "id": 225182314,
        "sender_full_name": "Sean",
        "timestamp": 1612455505
    },
    {
        "content": "<p>i'm all about the 1-liners</p>",
        "id": 225182338,
        "sender_full_name": "Sean",
        "timestamp": 1612455515
    },
    {
        "content": "<p>K.  If you've got the data to hand though, now that I've got what should be a means to correct them implemented, I'd kinda like to to ahead and fix them.  Remember, if we have to ask everyone to re-clone, it's also going to wipe out any pull requests, etc. on github folks may have open.</p>",
        "id": 225182525,
        "sender_full_name": "starseeker",
        "timestamp": 1612455592
    },
    {
        "content": "<p>Remember what happened when I messed up the web git repo</p>",
        "id": 225182599,
        "sender_full_name": "starseeker",
        "timestamp": 1612455608
    },
    {
        "content": "<p>ah, okay, good point.  I'll poke that next then.</p>",
        "id": 225182913,
        "sender_full_name": "Sean",
        "timestamp": 1612455666
    },
    {
        "content": "<p>One trick will be the known cases where cvs-fast-export split things more finely than cvs2svn with those desc tags from CVS - any commit with that in play won't match in diff - for those cases (most of them, anyway) the commit message would actually be more reliable.</p>",
        "id": 225185769,
        "sender_full_name": "starseeker",
        "timestamp": 1612456624
    },
    {
        "content": "<p>So I guess the priority ordering would be:</p>\n<p>1)  unique commit message mapping<br>\n2)  diff match</p>",
        "id": 225186335,
        "sender_full_name": "starseeker",
        "timestamp": 1612456836
    },
    {
        "content": "<p>Starts getting a bit more iffy if we have non-unique commit message, matching timestamp, but non-matching diff (with no other exact matching diff) - if the diff is a subset of the SVN diff a case could be made for assigning the number, but that'd probably take some laborious manual inspection...</p>",
        "id": 225186961,
        "sender_full_name": "starseeker",
        "timestamp": 1612457054
    },
    {
        "content": "<p>Hopefully we'll have few/no cases that fall into those categories.</p>",
        "id": 225187015,
        "sender_full_name": "starseeker",
        "timestamp": 1612457076
    },
    {
        "content": "<p>Also, fair warning - I'd expect some differences (due to line endings especially) in the CVS era commits.</p>",
        "id": 225188709,
        "sender_full_name": "starseeker",
        "timestamp": 1612457769
    },
    {
        "content": "<p>If you want to focus on just the commits that are currently unmapped, and ignore trying to validate all of them based on diffs, I'd personally be fine with that given the difficulties of the latter.</p>",
        "id": 225188833,
        "sender_full_name": "starseeker",
        "timestamp": 1612457835
    },
    {
        "content": "<p>I haven't run into any of those yet, but split commits could be handled pretty easily I think.  If they're already tagged, I'd just ignore them and rely on all the unsplit matching as sufficient validation.</p>",
        "id": 225268448,
        "sender_full_name": "Sean",
        "timestamp": 1612510387
    },
    {
        "content": "<p>Update -- my reprocessing using diff format indeed improved things significantly.  Found more than half the remaining missing commits.  Down to just 64 commits unidentified.</p>",
        "id": 225268622,
        "sender_full_name": "Sean",
        "timestamp": 1612510574
    },
    {
        "content": "<p>Digging in, turns out at least a portion of them are due to changed lines with internal whitespace differences.  It's some sort of expanded tabs issue, possibly where cvs-fast-export preserved tabs correctly whereas cvs2svn did not preserve them.  That's unconfirmed, but matches the commit I was checking.  Rerunning it now with internal space stripped and should know in the morning what's left.</p>",
        "id": 225268723,
        "sender_full_name": "Sean",
        "timestamp": 1612510739
    },
    {
        "content": "<p>Huh - I expected some line ending oddities, but I'm surprised there's actual internal whitespace diffs.</p>",
        "id": 225331862,
        "sender_full_name": "starseeker",
        "timestamp": 1612547173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> anything useful I can do?</p>",
        "id": 225385519,
        "sender_full_name": "starseeker",
        "timestamp": 1612584781
    },
    {
        "content": "<p>/me shuts his mouth O:-)</p>",
        "id": 225436167,
        "sender_full_name": "Erik",
        "timestamp": 1612655661
    },
    {
        "content": "<p>is there a public preview of the current incarnation of the git repo?</p>",
        "id": 225436181,
        "sender_full_name": "Erik",
        "timestamp": 1612655741
    },
    {
        "content": "<p><a href=\"https://github.com/starseeker/brlcad_conv11\">https://github.com/starseeker/brlcad_conv11</a></p>",
        "id": 225440743,
        "sender_full_name": "starseeker",
        "timestamp": 1612664003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> Unless <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> spots something, the only planned remaining changes (other than updates until SVN closes) are the application of some addition SVN commit -&gt; Git commit mappings <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> has identified during his validation.</p>",
        "id": 225442047,
        "sender_full_name": "starseeker",
        "timestamp": 1612666814
    },
    {
        "content": "<p>I'm down to reviewing the last few remaining missing commits -- it's down to about 50 missing, so I should hopefully figure out what happened without too much trouble (e.g., if they're categoric processing artifacts or actually missing data).  It's a manual process for the few remaining until I find a categoric pattern.</p>\n<p>So far, I'm genuinely having trouble finding one of them, but not done hunting for it (I found a fragment but then couldn't find its commit, so have to re-find the fragment to see if that was combined/merged with something else or just a coincidental edit to the same line in an unrelated commit.)</p>",
        "id": 225558843,
        "sender_full_name": "Sean",
        "timestamp": 1612797594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> you're much deeper in than I at this point, but is there anything I might be able to help with?</p>",
        "id": 225577700,
        "sender_full_name": "starseeker",
        "timestamp": 1612804904
    },
    {
        "content": "<p>Confound it - <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> any SHA1s after r77842 are most likely going to change</p>",
        "id": 225626900,
        "sender_full_name": "starseeker",
        "timestamp": 1612828404
    },
    {
        "content": "<p>I'm going to see if I can arrange a partial re-run, but there's a glitch in one of my processing filters</p>",
        "id": 225626978,
        "sender_full_name": "starseeker",
        "timestamp": 1612828444
    },
    {
        "content": "<p>Phew.  Tightrope walked, looks like:  <a href=\"https://github.com/starseeker/brlcad_conv12\">https://github.com/starseeker/brlcad_conv12</a></p>",
        "id": 225688455,
        "sender_full_name": "starseeker",
        "timestamp": 1612877139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> can you take a look at 4d401a8617869d3594b5948de12a374a5bd292fe and ea6d4c16bae6ecf30d4439d92c8dd72f56b3e942 and r19440</p>",
        "id": 225725772,
        "sender_full_name": "Sean",
        "timestamp": 1612891706
    },
    {
        "content": "<p>there are no remappings or missings after 77231 so it's fine</p>",
        "id": 225726382,
        "sender_full_name": "Sean",
        "timestamp": 1612891958
    },
    {
        "content": "<p>pulling the new repo</p>",
        "id": 225727532,
        "sender_full_name": "Sean",
        "timestamp": 1612892428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/225725772\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> can you take a look at 4d401a8617869d3594b5948de12a374a5bd292fe and ea6d4c16bae6ecf30d4439d92c8dd72f56b3e942 and r19440</p>\n</blockquote>\n<p>If I'm interpreting this correctly, 4d401a8617869d3594b5948de12a374a5bd292fe matches the r19440 change on trunk, and ea6d4c16bae6ecf30d4439d92c8dd72f56b3e942 is the same change applied to the rel-5-3 branch.  However, the r19440 label was applied to the branch commit rather than the trunk commit.</p>",
        "id": 225735161,
        "sender_full_name": "starseeker",
        "timestamp": 1612895490
    },
    {
        "content": "<p>Which, since SVN reports a diff in trunk for r19440, means the timestamp must have matched for the branch application, but it should instead have been applied to the trunk version</p>",
        "id": 225735514,
        "sender_full_name": "starseeker",
        "timestamp": 1612895595
    },
    {
        "content": "<p>So the \"correct\" fix there would be to apply the SVN revision to the trunk commit and strip it from the branch commit.  I can do the former, but I'll have to tweak things to support the latter.</p>",
        "id": 225735889,
        "sender_full_name": "starseeker",
        "timestamp": 1612895735
    },
    {
        "content": "<p>If you want, we can establish a line with the convention SHA1; to denote commits that I should clear an SVN revision assignment from.</p>",
        "id": 225736006,
        "sender_full_name": "starseeker",
        "timestamp": 1612895776
    },
    {
        "content": "<p>woo hoo, resolved another 13...  damn commit messages :)</p>",
        "id": 225736075,
        "sender_full_name": "Sean",
        "timestamp": 1612895812
    },
    {
        "content": "<p>I don't think it's a huge deal, I'm not sure how many of those there are.  possibly quite unlikely if it was just because those commits were within a few seconds of each other?</p>",
        "id": 225736153,
        "sender_full_name": "Sean",
        "timestamp": 1612895854
    },
    {
        "content": "<p>I'm getting a count now -- there's some number of trunk commits are tagged on branches</p>",
        "id": 225736309,
        "sender_full_name": "Sean",
        "timestamp": 1612895916
    },
    {
        "content": "<p>If cvs2svn consolidated the timestamps on those two commits as \"identical\" and picked the newer timestamp, then it will happen every time cvs-fast-export resolved those cases into individual commits and the branch commit was the newer of the two.</p>",
        "id": 225736466,
        "sender_full_name": "starseeker",
        "timestamp": 1612895980
    },
    {
        "content": "<p>Might as well fix them if it's easy to pull the data set - it won't be appreciably more work than adding the missing mappings in the first place.</p>",
        "id": 225737108,
        "sender_full_name": "starseeker",
        "timestamp": 1612896195
    },
    {
        "content": "<p>I <em>think</em> if I've counted correctly, that there are at least 121 commit revisions that were on trunk, but are tagged in git on a branch.</p>",
        "id": 225737454,
        "sender_full_name": "Sean",
        "timestamp": 1612896309
    },
    {
        "content": "<p>Blegh.</p>",
        "id": 225737521,
        "sender_full_name": "starseeker",
        "timestamp": 1612896339
    },
    {
        "content": "<p>OK, I'll set up to fix 'em</p>",
        "id": 225737634,
        "sender_full_name": "starseeker",
        "timestamp": 1612896369
    },
    {
        "content": "<p>Fortunately, you've identified a test case already ;-)</p>",
        "id": 225737700,
        "sender_full_name": "starseeker",
        "timestamp": 1612896391
    },
    {
        "content": "<p>that one was an anomaly... wasn't even looking, I was collapsing the multiple-match revs manually for the 30 or so that match multiple diffs and that matched two... and noticed it seemed flipped</p>",
        "id": 225737891,
        "sender_full_name": "Sean",
        "timestamp": 1612896465
    },
    {
        "content": "<p>Ah.  Well, either way, good catch.</p>",
        "id": 225737978,
        "sender_full_name": "starseeker",
        "timestamp": 1612896492
    },
    {
        "content": "<p>I'm going to double-check that 121 too.  That seems high to me.</p>",
        "id": 225737981,
        "sender_full_name": "Sean",
        "timestamp": 1612896494
    },
    {
        "content": "<p>Is the branch/trunk label reliable?  I've been assuming it was generated based off commit location with no guessing involved, but realize I should double-check that assumption.</p>",
        "id": 225743835,
        "sender_full_name": "Sean",
        "timestamp": 1612898925
    },
    {
        "content": "<p>For SVN it should be reliable.  CVS identifications were up to cvs-fast-export/cvs2svn and I'm not as certain there</p>",
        "id": 225747171,
        "sender_full_name": "starseeker",
        "timestamp": 1612900321
    },
    {
        "content": "<p>The cvs:branch labels were based off of a fairly low-level analysis of the git conversion data - misc/repoconv/cvs_info.sh IIRC</p>",
        "id": 225749186,
        "sender_full_name": "starseeker",
        "timestamp": 1612901152
    },
    {
        "content": "<p>The root was the git rev-list --first-parent reporting, which depends on cvs-fast-export correctly assigning the first parent based on CVS branch data.</p>",
        "id": 225749434,
        "sender_full_name": "starseeker",
        "timestamp": 1612901247
    },
    {
        "content": "<p>(and on me having correctly interpreted the information, of course)</p>",
        "id": 225749752,
        "sender_full_name": "starseeker",
        "timestamp": 1612901374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> are we still at about 40 unresolved?</p>",
        "id": 225945526,
        "sender_full_name": "starseeker",
        "timestamp": 1613015060
    },
    {
        "content": "<p>There was a categoric anomaly so I cleaned up and changed some things to check, and am re-running the comparison to make sure.</p>",
        "id": 225956241,
        "sender_full_name": "Sean",
        "timestamp": 1613028774
    },
    {
        "content": "<p>The 40 count was wrong (it was higher).  On the plus side, scripting is cleaned up (had to rewrite everything) to the point that it can check all revs easily now.  Got svn cloned too so it can do that quickly.  Got it matching files and log messages cleanly now too.  It's running through re-processing the missing batch now and should have an update in the morning.</p>",
        "id": 225956493,
        "sender_full_name": "Sean",
        "timestamp": 1613029118
    },
    {
        "content": "<p>Can you see if you can find c1644?  There's a number of initial rev commits like that that I can't find.  I'd hope it simply got merged with something else, but trying to verify that on one of them like 1644.</p>",
        "id": 225965073,
        "sender_full_name": "Sean",
        "timestamp": 1613035164
    },
    {
        "content": "<p>Hmm.  Well, if I cheat a bit and use <a href=\"https://stackoverflow.com/a/13598028\">https://stackoverflow.com/a/13598028</a> to find when the files added in c1644 were added in Git, I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>git log --diff-filter=A -- util/pl-X.c\ncommit 86a7fcc40057934832f61255b606c0bd6f7fc12b\nAuthor: Phillip Dykstra &lt;phil@pdykstra.com&gt;\nDate:   Thu Apr 28 17:40:50 1988 +0000\n\n    Unix-plot to X Window System display (X11)\n\n    cvs:branch:trunk\n    cvs:account:phil\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code>git log --diff-filter=A -- util/pl-X10.c\ncommit a6feb76ce1551b09222463514f15e65db0343b55\nAuthor: Phillip Dykstra &lt;phil@pdykstra.com&gt;\nDate:   Thu Apr 28 17:43:26 1988 +0000\n\n    Unix-plot to X Window System Display (X10R4)\n\n    cvs:branch:trunk\n    cvs:account:phil\n</code></pre></div>\n<p>I didn't do a detailed diff analysis, but it looks the difference is splitting up the commit to get the distinct commit messages?</p>",
        "id": 225989422,
        "sender_full_name": "starseeker",
        "timestamp": 1613050303
    },
    {
        "content": "<p>Cool, that was super helpful.  I'm not sure about the general case but I'm guessing it's split them up because they were far apart enough in time (couple min), so cvs2git decided to handle them differently.  Checking down through, that rules out a bunch but I have to figure out how to automate the check across all 135 missing.  I have checks for matching diffs vs logs vs changed files but obviously doesn't catch split/merge changes unless all that changed was the log message (did verify a slew with that lil trick).</p>",
        "id": 226107666,
        "sender_full_name": "Sean",
        "timestamp": 1613117594
    },
    {
        "content": "<p>Initial revisions seem to be a large portion of the bulk missing.  Took some work to figure out they're not just on branches.</p>\n<p>Three commits you could check on for me are r51428, r54352, and r64428.  They're fairly modern commits, so they stick out like a sore thumb for not matching.  Haven't dove in to figure out what's up with them.  </p>\n<p>Set up the check across all svn commits and that's chugging along now.  When that finishes up, should have a list of commits that are mistagged on branch vs trunk.</p>",
        "id": 226108427,
        "sender_full_name": "Sean",
        "timestamp": 1613118084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Starting with r51428... The checkouts of the files are identical, so i pulled the diffs:</p>\n<p>git format-patch -1 be5072cb90113d7c0d75839cc4f183d8cde1646b<br>\nsvn diff -c51428 &gt; r51428.patch</p>\n<p>The patch formatting is different, so I brought them up in meld and applied all the SVN style headers to the git patch.  Doing that, I was left with:<br>\n<a href=\"/user_uploads/1549/jhtImEaIygvlRXmnp_thVIiD/diff.png\">diff.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/jhtImEaIygvlRXmnp_thVIiD/diff.png\" title=\"diff.png\"><img src=\"/user_uploads/1549/jhtImEaIygvlRXmnp_thVIiD/diff.png\"></a></div>",
        "id": 226134592,
        "sender_full_name": "starseeker",
        "timestamp": 1613135525
    },
    {
        "content": "<p>It looks like git and svn made very slightly different decisions on where to start and end their patch blocks.</p>",
        "id": 226134655,
        "sender_full_name": "starseeker",
        "timestamp": 1613135575
    },
    {
        "content": "<p>r54352 is similar, but less subtle - identical files in checkouts, but different ordering on the subtraction line instructions in the diff: <a href=\"/user_uploads/1549/7S7JHWhmJ2i65t0u6IB_Oq0C/diff_r54352.png\">diff_r54352.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/7S7JHWhmJ2i65t0u6IB_Oq0C/diff_r54352.png\" title=\"diff_r54352.png\"><img src=\"/user_uploads/1549/7S7JHWhmJ2i65t0u6IB_Oq0C/diff_r54352.png\"></a></div>",
        "id": 226135743,
        "sender_full_name": "starseeker",
        "timestamp": 1613136232
    },
    {
        "content": "<p>r64428 is the most spectacularly different of the diffs, but checking the Git and SVN checkouts of r64427 and 64428 all files appear to agree, so the two different diffs appear to end up doing the same job.</p>",
        "id": 226137025,
        "sender_full_name": "starseeker",
        "timestamp": 1613136953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> was that what you were looking for, or is there something else about those commits that is concerning?</p>",
        "id": 226261149,
        "sender_full_name": "starseeker",
        "timestamp": 1613242783
    },
    {
        "content": "<p>No that was great, helpful.  I hypothesized that'd happen but hadn't actually seen it (or at least hadn't noticed). Those stuck out because they were new.  I've been going through the list ruling out others like those.</p>",
        "id": 226262517,
        "sender_full_name": "Sean",
        "timestamp": 1613244532
    },
    {
        "content": "<p>Any more you'd like me to check?</p>",
        "id": 226263273,
        "sender_full_name": "starseeker",
        "timestamp": 1613245611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> How did the re-run go?</p>",
        "id": 226383642,
        "sender_full_name": "starseeker",
        "timestamp": 1613395712
    },
    {
        "content": "<p>Went well!  Took a while to process, but went really well.  I double checking a couple lists, but here's the list of trunk commits that are misattributed to branches in git.  It's not as many as originally seemed fortunately, but it's a few:<br>\n<a href=\"/user_uploads/1549/Xo0jqnLfwumhDOKNcgsulere/mistagged_trunk_commits.log\">mistagged_trunk_commits.log</a></p>",
        "id": 226629270,
        "sender_full_name": "Sean",
        "timestamp": 1613552304
    },
    {
        "content": "<p>Looks good - thanks!</p>",
        "id": 226648605,
        "sender_full_name": "starseeker",
        "timestamp": 1613564694
    },
    {
        "content": "<p>r66607 is surprising - I wouldn't have expected any issues like that in the SVN era</p>",
        "id": 226648759,
        "sender_full_name": "starseeker",
        "timestamp": 1613564788
    },
    {
        "content": "<p>OK.  It looks like r66607 was a multi-branch commit, making changes to both the branch and trunk in the same commit.  I didn't realize we had any of those in the modern era - all the instances I had spotted were much earlier.</p>",
        "id": 226660311,
        "sender_full_name": "starseeker",
        "timestamp": 1613570837
    },
    {
        "content": "<p>What the conversion ended up doing was to apply the changes from r66607 to trunk in commit r66672.</p>",
        "id": 226660618,
        "sender_full_name": "starseeker",
        "timestamp": 1613570957
    },
    {
        "content": "<p>Which will also mean that the r66672 diff won't match that from SVN, since the SVN change was just the HAVE_ANALYZER_NORETURN test.</p>",
        "id": 226660953,
        "sender_full_name": "starseeker",
        "timestamp": 1613571099
    },
    {
        "content": "<p>That'll be tricky to fix.  Hmm.</p>",
        "id": 226661194,
        "sender_full_name": "starseeker",
        "timestamp": 1613571212
    },
    {
        "content": "<p>Going through the rest of the list, I haven't identified obvious reassignment candidates yet for the following:</p>\n<p>19033<br>\n19757<br>\n19759<br>\n19761<br>\n19763</p>",
        "id": 226661686,
        "sender_full_name": "starseeker",
        "timestamp": 1613571424
    },
    {
        "content": "<p>Ooof.  <a href=\"https://github.com/starseeker/brlcad_conv13/commits/main?before=e9c0d7ea2dd93965dd2037357f9992480cc1bc12+35&amp;branch=main\">https://github.com/starseeker/brlcad_conv13/commits/main?before=e9c0d7ea2dd93965dd2037357f9992480cc1bc12+35&amp;branch=main</a></p>\n<p>I think I've got the trunk portion of r66607 spliced in correctly.</p>",
        "id": 226728823,
        "sender_full_name": "starseeker",
        "timestamp": 1613597418
    },
    {
        "content": "<p>Identified 19033</p>",
        "id": 226729893,
        "sender_full_name": "starseeker",
        "timestamp": 1613597893
    },
    {
        "content": "<p>Ah, I see.  The other four are cvs2svn artifacts - so rather than reassigning, they simply don't have direct analog commits and all and we just remove the assignments.</p>",
        "id": 226730262,
        "sender_full_name": "starseeker",
        "timestamp": 1613598088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> OK, next! ;-)</p>",
        "id": 226730301,
        "sender_full_name": "starseeker",
        "timestamp": 1613598114
    },
    {
        "content": "<p>Cool, glad you could deduce them.  I wasn't 100% sure if you have it tagging revs separate from branches.  I didn't check whether the :branch: tag was correct or not, only that that rev definitely didn't happen on a branch.</p>",
        "id": 226771808,
        "sender_full_name": "Sean",
        "timestamp": 1613631395
    },
    {
        "content": "<p>Next set is the inverse -- looking a lot better (half done it just found one :trunk mis-assignment) but taking longer to process for some reason.  Should be done here soon.</p>",
        "id": 226772106,
        "sender_full_name": "Sean",
        "timestamp": 1613631742
    },
    {
        "content": "<p>Will share the list of found assignments missing in the morn.</p>",
        "id": 226772130,
        "sender_full_name": "Sean",
        "timestamp": 1613631789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/226728823\">said</a>:</p>\n<blockquote>\n<p>Ooof.  <a href=\"https://github.com/starseeker/brlcad_conv13/commits/main?before=e9c0d7ea2dd93965dd2037357f9992480cc1bc12+35&amp;branch=main\">https://github.com/starseeker/brlcad_conv13/commits/main?before=e9c0d7ea2dd93965dd2037357f9992480cc1bc12+35&amp;branch=main</a></p>\n<p>I think I've got the trunk portion of r66607 spliced in correctly.</p>\n</blockquote>\n<p>What am I looking at in that github date view?</p>",
        "id": 226772823,
        "sender_full_name": "Sean",
        "timestamp": 1613632518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/226772823\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/226728823\">said</a>:</p>\n<blockquote>\n<p>Ooof.  <a href=\"https://github.com/starseeker/brlcad_conv13/commits/main?before=e9c0d7ea2dd93965dd2037357f9992480cc1bc12+35&amp;branch=main\">https://github.com/starseeker/brlcad_conv13/commits/main?before=e9c0d7ea2dd93965dd2037357f9992480cc1bc12+35&amp;branch=main</a></p>\n<p>I think I've got the trunk portion of r66607 spliced in correctly.</p>\n</blockquote>\n<p>What am I looking at in that github date view?</p>\n</blockquote>\n<p>The insertion of this commit into the history: <a href=\"https://github.com/starseeker/brlcad_conv13/commit/e977c035ec8a79967cb3d2a0874af08d86a89764\">https://github.com/starseeker/brlcad_conv13/commit/e977c035ec8a79967cb3d2a0874af08d86a89764</a></p>",
        "id": 226807928,
        "sender_full_name": "starseeker",
        "timestamp": 1613654305
    },
    {
        "content": "<p>I used the date view to illustrate it's not just an isolated commit in the repo, but part of the main history</p>",
        "id": 226808400,
        "sender_full_name": "starseeker",
        "timestamp": 1613654590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Where are we with the list of previously unidentified SVN id matches found by your diffing method?  I'd be glad to help if you have a set of commits for manual review.</p>\n<p>Also, just conceptually, what is your preference for cases like the one identified earlier where a single cvs2svn commit got split up into multiple git commits?  Did you want to assign the SVN id to each \"portion\" commit in Git, if they can be identified?</p>",
        "id": 226809063,
        "sender_full_name": "starseeker",
        "timestamp": 1613654931
    },
    {
        "content": "<p>That would be totally awesome to tag both commits, and similarly, tag merged commits with multiple revision tags.  I know some of them but haven't been fully tracking.  I do think there are probably 100-200 in that category.</p>",
        "id": 226870934,
        "sender_full_name": "Sean",
        "timestamp": 1613678418
    },
    {
        "content": "<p>Tagging multiple svn revs onto a single Git commit would require some rework of the assignment code - let me know if that's something you definitely want to do.</p>",
        "id": 226880467,
        "sender_full_name": "starseeker",
        "timestamp": 1613682286
    },
    {
        "content": "<p>If you want to, go for it, but I don't think it's strictly necessary.  So long as the commit is tagged somewhere on one of the rev parts, that should be sufficient for tracing.</p>",
        "id": 226926241,
        "sender_full_name": "Sean",
        "timestamp": 1613717234
    },
    {
        "content": "<p>I finished checking the inverse and the only anomaly was 30804.  It's tagged as \"svn:branch:trunk-UNNAMED-BRANCH\" but was branch \"unlabeled-2.5.1\" in svn.</p>",
        "id": 226926343,
        "sender_full_name": "Sean",
        "timestamp": 1613717378
    },
    {
        "content": "<p>Am seeing some other anomalies on these tagged revisions, what's going on with r30687 ?  The tags don't appear to match svn at all.</p>",
        "id": 226928045,
        "sender_full_name": "Sean",
        "timestamp": 1613719358
    },
    {
        "content": "<p>Another curious one is 46324 -- it's tagged as being on four branches but it was a tag, never committed to branches.  Saw some others like that.</p>",
        "id": 226928381,
        "sender_full_name": "Sean",
        "timestamp": 1613719731
    },
    {
        "content": "<p>Even if tags are treated as branches, it's tagged on:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>    svn:branch:ansi-20040316-freeze\n    svn:branch:bobWinPort-20051223-freeze\n    svn:branch:ctj-4-5-post\n    svn:branch:ctj-4-5-pre\n    svn:branch:hartley-6-0-post\n    svn:branch:offsite-5-3-pre\n    svn:branch:opensource-pre\n    svn:branch:windows-20040315-freeze\n</code></pre></div>\n<p>but it was on these tags in svn:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>ansi-20040316-freeze\nansi-20040405-merged\nautoconf-freeze\nbobWinPort-20051223-freeze\nctj-4-5-post\nctj-4-5-pre\nhartley-6-0-post\nhartley-6-0-pre\noffsite-5-3-pre\nopensource-post\nopensource-pre\nwindows-20040315-freeze\n</code></pre></div>",
        "id": 226928617,
        "sender_full_name": "Sean",
        "timestamp": 1613719982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/226926343\">said</a>:</p>\n<blockquote>\n<p>I finished checking the inverse and the only anomaly was 30804.  It's tagged as \"svn:branch:trunk-UNNAMED-BRANCH\" but was branch \"unlabeled-2.5.1\" in svn.</p>\n</blockquote>\n<p>Looks like 30688 is also tagged as trunk-UNNAMED-BRANCH but also cjohnson-mac-hack, but I don't see that in svn.  Svn only lists it affecting:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>unlabeled-1.1.1\nunlabeled-1.1.2\nunlabeled-1.2.1\nunlabeled-11.1.1\nunlabeled-2.12.1\nunlabeled-2.6.1\nunlabeled-9.1.1\nunlabeled-9.10.1\nunlabeled-9.12.1\nunlabeled-9.2.1\nunlabeled-9.3.1\nunlabeled-9.7.1\nunlabeled-9.9.1\n</code></pre></div>",
        "id": 226929089,
        "sender_full_name": "Sean",
        "timestamp": 1613720450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I've added the ability to correct the r30804 and r30688 branch assignments.</p>",
        "id": 226971810,
        "sender_full_name": "starseeker",
        "timestamp": 1613745596
    },
    {
        "content": "<p>Looking at r46324, here's what I'm seeing:</p>\n<p>the svn:revision:46324 label is on four commits:</p>\n<div class=\"codehilite\"><pre><span></span><code>commit 44e3d7341c5680250d65091b2aff6ed051720a11 (HEAD, origin/itcl3-2, itcl3-2)\nAuthor: Christopher Sean Morrison &lt;brlcad@gmail.com&gt;\nDate:   Tue Aug 23 12:19:43 2011 +0000\n\n    revmoed additional 3rd party dependencies that don&#39;t really belong amongst our other tags (svn branch delete)\n\n    svn:revision:46324\n    svn:branch:itcl3-2\n    svn:account:brlcad\n\ncommit a988903bbe27985e0dd94228e07079e91e98be4d (origin/libpng_1_0_2, libpng_1_0_2)\nAuthor: Christopher Sean Morrison &lt;brlcad@gmail.com&gt;\nDate:   Tue Aug 23 12:19:43 2011 +0000\n\n    revmoed additional 3rd party dependencies that don&#39;t really belong amongst our other tags (svn branch delete)\n\n    svn:revision:46324\n    svn:branch:libpng_1_0_2\n    svn:account:brlcad\n\ncommit c54b9b07158d4a904aabddae264290854ecb250c (origin/tcl8-3, tcl8-3)\nAuthor: Christopher Sean Morrison &lt;brlcad@gmail.com&gt;\nDate:   Tue Aug 23 12:19:43 2011 +0000\n\n    revmoed additional 3rd party dependencies that don&#39;t really belong amongst our other tags (svn branch delete)\n\n    svn:revision:46324\n    svn:branch:tcl8-3\n    svn:account:brlcad\n\ncommit 03af105da8dd3cf85a29cc7f056513cc8e79d751 (origin/tk8-3, tk8-3)\nAuthor: Christopher Sean Morrison &lt;brlcad@gmail.com&gt;\nDate:   Tue Aug 23 12:19:43 2011 +0000\n\n    revmoed additional 3rd party dependencies that don&#39;t really belong amongst our other tags (svn branch delete)\n\n    svn:revision:46324\n    svn:branch:tk8-3\n    svn:account:brlcad\n</code></pre></div>\n<p>When I look at what r46324 did in SVN, it eliminated branches/tags/itcl3-2, branches/tags/tcl8-3, branches/tags/tk8-3, and branches/tags/libpng_1_0_2 - this seems to corresponds to what is recorded in those Git commits (which can't actually delete the branches without any commits being uniquely referenced by them getting garbage collected.)</p>",
        "id": 226975785,
        "sender_full_name": "starseeker",
        "timestamp": 1613747327
    },
    {
        "content": "<p>Similarly, for r30687:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git log --all --grep 30687\ncommit 004ec0ae439f0ca3c814d22a46957012cd8fb239\nAuthor: Christopher Sean Morrison &lt;brlcad@gmail.com&gt;\nDate:   Wed Apr 16 14:40:20 2008 +0000\n\n    remove branches that have no meaning and are for 3rd-party dependencies (svn branch delete)\n\n    svn:revision:30687\n    svn:branch:Original\n    svn:account:brlcad\n\ncommit 720f9b9b75588e35d3cce0f9f5b802abea2259ab\nAuthor: Christopher Sean Morrison &lt;brlcad@gmail.com&gt;\nDate:   Wed Apr 16 14:40:20 2008 +0000\n\n    remove branches that have no meaning and are for 3rd-party dependencies (svn branch delete)\n\n    svn:revision:30687\n    svn:branch:itcl3-2\n    svn:account:brlcad\n\ncommit f206b315ca475d3a3e55e98ec42d772c6b05baee\nAuthor: Christopher Sean Morrison &lt;brlcad@gmail.com&gt;\nDate:   Wed Apr 16 14:40:20 2008 +0000\n\n    remove branches that have no meaning and are for 3rd-party dependencies (svn branch delete)\n\n    svn:revision:30687\n    svn:branch:libpng_1_0_2\n    svn:account:brlcad\n\ncommit cbff64617866cc3fc2b25db15cd610e651561958\nAuthor: Christopher Sean Morrison &lt;brlcad@gmail.com&gt;\nDate:   Wed Apr 16 14:40:20 2008 +0000\n\n    remove branches that have no meaning and are for 3rd-party dependencies (svn branch delete)\n\n    svn:revision:30687\n    svn:branch:tcl8-3\n    svn:account:brlcad\n\ncommit 87bc784daf7f15cc8d9c9fa980a934a98a17de95\nAuthor: Christopher Sean Morrison &lt;brlcad@gmail.com&gt;\nDate:   Wed Apr 16 14:40:20 2008 +0000\n\n    remove branches that have no meaning and are for 3rd-party dependencies (svn branch delete)\n\n    svn:revision:30687\n    svn:branch:tk8-3\n    svn:account:brlcad\n\ncommit d748c2ea214b699008563e18f5a7105de39faba9\nAuthor: Christopher Sean Morrison &lt;brlcad@gmail.com&gt;\nDate:   Wed Apr 16 14:40:20 2008 +0000\n\n    remove branches that have no meaning and are for 3rd-party dependencies (svn branch delete)\n\n    svn:revision:30687\n    svn:branch:zlib_1_0_4\n    svn:account:brlcad\n</code></pre></div>",
        "id": 226976118,
        "sender_full_name": "starseeker",
        "timestamp": 1613747461
    },
    {
        "content": "<p>I think you're right that SVN tags are getting treated as branches - that's the only way to handle SVN tags with edits - and I doubt I attempted to distinguish when assigning the svn:branch labels.</p>",
        "id": 226976670,
        "sender_full_name": "starseeker",
        "timestamp": 1613747656
    },
    {
        "content": "<p>@Sean I'm not following how you're getting an association between (say)  svn:branch:ansi-20040316-freeze and r46324 ?</p>",
        "id": 226976810,
        "sender_full_name": "starseeker",
        "timestamp": 1613747716
    },
    {
        "content": "<p>I guess I could try to take a list of commits made to tags instead of branches and update the svn:branch: labels to be<code>svn:tag: </code> labels instead?</p>",
        "id": 226977115,
        "sender_full_name": "starseeker",
        "timestamp": 1613747820
    },
    {
        "content": "<p>Ah.  I think this might actually work:</p>\n<div class=\"codehilite\"><pre><span></span><code>svn log file:///home/user/brlcad_repo/brlcad/tags|grep \\^r|awk &#39;{print $1}&#39; &gt; tags.log\n</code></pre></div>\n<p>That gives us (more or less) the set of tag commits.  If we then look for any of them that match commit messages, we get a set of commits. <a href=\"/user_uploads/1549/BrNDaXtX7ITi8Q5PtcpOxnqq/tag_commits.txt\">tag_commits.txt</a></p>",
        "id": 226980201,
        "sender_full_name": "starseeker",
        "timestamp": 1613749051
    },
    {
        "content": "<p>So those commit labels could then be switched from <code>svn:branch:*</code> to <code>svn:tag:*</code></p>",
        "id": 226980611,
        "sender_full_name": "starseeker",
        "timestamp": 1613749174
    },
    {
        "content": "<p>I can generate a list of all branches/tags associated with each commit easily enough -- that's what I was doing to validate specific sets, just not systematically on all commits.</p>",
        "id": 226991753,
        "sender_full_name": "Sean",
        "timestamp": 1613753129
    },
    {
        "content": "<p>Did my breakdown of r46324 make sense?  I may be missing something</p>",
        "id": 226992059,
        "sender_full_name": "starseeker",
        "timestamp": 1613753256
    },
    {
        "content": "<p>you mean the question about the ansi one?</p>",
        "id": 226992231,
        "sender_full_name": "Sean",
        "timestamp": 1613753327
    },
    {
        "content": "<p>or in general?</p>",
        "id": 226992243,
        "sender_full_name": "Sean",
        "timestamp": 1613753332
    },
    {
        "content": "<p>I wasn't (am not) seeing how you associated that commit with that branch, either in SVN or git?</p>",
        "id": 226992300,
        "sender_full_name": "starseeker",
        "timestamp": 1613753356
    },
    {
        "content": "<p>let me check where I got it from because I agree, I'm only seeing it on four git commits now... maybe misprocessed on a subsequent validation</p>",
        "id": 226992513,
        "sender_full_name": "Sean",
        "timestamp": 1613753450
    },
    {
        "content": "<p>ah, yeah, looks like i wrote the wrong rev here in the chat.. 46324 is good...<br>\nthat list was for 46322 ... which looks like it matches so I just got those two crossed when I was checking them manually</p>",
        "id": 226992756,
        "sender_full_name": "Sean",
        "timestamp": 1613753573
    },
    {
        "content": "<p>cool, that's great -- could be more thorough but that's good enough for non-branch commits --  means all non-branch commits that are tagged look like they're mostly tagged correctly besides the two trunk-UNNAMED-BRANCH commits.</p>",
        "id": 226993026,
        "sender_full_name": "Sean",
        "timestamp": 1613753694
    },
    {
        "content": "<p>Those are partially my fault - a regex match was too loose and turned master-UNNAMED-BRANCH into trunk-UNNAMED-BRANCH.  Either way though they had the wrong branch somehow, so I added corrections</p>",
        "id": 226993194,
        "sender_full_name": "starseeker",
        "timestamp": 1613753760
    },
    {
        "content": "<p>uploading a mapping of all revs to non-trunk branches</p>",
        "id": 226993333,
        "sender_full_name": "Sean",
        "timestamp": 1613753806
    },
    {
        "content": "<p>can you check on something unusual... commits 21570 through 21634 in svn<br>\nI got nothing but a log message.</p>",
        "id": 226994384,
        "sender_full_name": "Sean",
        "timestamp": 1613754190
    },
    {
        "content": "<p>perhaps cvs2svn garbage of some sort?  did cvs2git fix/import any of those better?</p>",
        "id": 226994529,
        "sender_full_name": "Sean",
        "timestamp": 1613754242
    },
    {
        "content": "<p>Are there equivalent git commits?</p>",
        "id": 226994739,
        "sender_full_name": "starseeker",
        "timestamp": 1613754309
    },
    {
        "content": "<p>Hmm.  No matching commit message anywhere for 21570</p>",
        "id": 226994975,
        "sender_full_name": "starseeker",
        "timestamp": 1613754383
    },
    {
        "content": "<p>Here's the portion of brlcad/h/Attic/tclIntPlatDecls.h,v from CVS that seems to have generated that commit:</p>\n<div class=\"codehilite\"><pre><span></span><code>1.1\nlog\n@file tclIntPlatDecls.h was initially added on branch windows-6-0-branch.\n@\ntext\n@d1 585\n@\n\n\n1.1.2.1\nlog\n</code></pre></div>",
        "id": 226995370,
        "sender_full_name": "starseeker",
        "timestamp": 1613754544
    },
    {
        "content": "<p>At a guess, cvs2svn put in an empty commit and cvs-fast-export ignored it as an empty commit...</p>",
        "id": 226995444,
        "sender_full_name": "starseeker",
        "timestamp": 1613754577
    },
    {
        "content": "<p>what about one of the revs in the middle?</p>",
        "id": 226996108,
        "sender_full_name": "Sean",
        "timestamp": 1613754832
    },
    {
        "content": "<p>that's a huge range of commits, all with detailed log messages  indicating activity</p>",
        "id": 226996195,
        "sender_full_name": "Sean",
        "timestamp": 1613754858
    },
    {
        "content": "<p>I mean, I guess it's garbage or old cvs issue of some sort, so not a problem, but odd</p>",
        "id": 226996285,
        "sender_full_name": "Sean",
        "timestamp": 1613754902
    },
    {
        "content": "<p>also, how'd you manage to catch/fix r62027 ?  looks like it was added alongside trunk and you somehow fixed it (or at least tagged it better) as being a branch</p>",
        "id": 226996428,
        "sender_full_name": "Sean",
        "timestamp": 1613754964
    },
    {
        "content": "<p>Same deal with 21600 from brlcad/libpkg/Attic/libpkg.dsp,v</p>\n<div class=\"codehilite\"><pre><span></span><code>1.1\nlog\n@file libpkg.dsp was initially added on branch windows-6-0-branch.\n@\ntext\n@d1 115\n@\n\n\n1.1.2.1\n</code></pre></div>",
        "id": 226996549,
        "sender_full_name": "starseeker",
        "timestamp": 1613755006
    },
    {
        "content": "<p>I was the one who messed that up, so I knew it was coming and did some manual work in the initial conversion to special case that.</p>",
        "id": 226996707,
        "sender_full_name": "starseeker",
        "timestamp": 1613755083
    },
    {
        "content": "<p>neat</p>",
        "id": 226996807,
        "sender_full_name": "Sean",
        "timestamp": 1613755124
    },
    {
        "content": "<p>Okay!  Finally... here's the list of commits that appear to have applied to multiple branches at the same time: <a href=\"/user_uploads/1549/u6_A8wMkNmmYdM7c84sDcHH0/commits_to_multiple_branches.txt\">commits_to_multiple_branches.txt</a></p>",
        "id": 226998976,
        "sender_full_name": "Sean",
        "timestamp": 1613756083
    },
    {
        "content": "<p>Might want to double-check me there, but that's only looking at the svn side.  You may already be handling some of them differently like the branches AUTOCONF vs autoconf-branch  ?</p>",
        "id": 226999130,
        "sender_full_name": "Sean",
        "timestamp": 1613756161
    },
    {
        "content": "<p>Maybe.  I recognize 19033 - it's one of the ones you flagged as being missing on trunk.  I had removed its commit id from the branch, but if that's right it actually needs to be on <em>both</em></p>",
        "id": 226999274,
        "sender_full_name": "starseeker",
        "timestamp": 1613756208
    },
    {
        "content": "<p>Blegh.  Well, I uploaded the latest state at brlcad_conv14 to demonstrate the switch to <code>svn:tag:</code> labeling for those commits made to tags, but don't use that for SHA1 lists of any sort - stick to brlcad_conv12.  Clearly the post-processing isn't done yet...</p>",
        "id": 226999497,
        "sender_full_name": "starseeker",
        "timestamp": 1613756303
    },
    {
        "content": "<p>That transcript is derived by pulling a diff of all commits and extracting all the filepaths that changed.</p>",
        "id": 226999502,
        "sender_full_name": "Sean",
        "timestamp": 1613756306
    },
    {
        "content": "<p>I'll take a run through - probably it's just going to mean an adjustment/expansion of the branch and/or trunk commits I need to manually specify revisions for</p>",
        "id": 226999637,
        "sender_full_name": "starseeker",
        "timestamp": 1613756377
    },
    {
        "content": "<p>The other list I know we still need is the svn commit IDs you were able to identify that I had never mapped, like 735 - did that prove practical or were there roadblocks?</p>",
        "id": 226999789,
        "sender_full_name": "starseeker",
        "timestamp": 1613756430
    },
    {
        "content": "<p>yes, that's in one of the windows ... <a href=\"/user_uploads/1549/isHphD8PYdQND3zG1Prlb7X5/Screen-Shot-2021-02-19-at-12.41.50-PM.png\">Screen-Shot-2021-02-19-at-12.41.50-PM.png</a>   :)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/isHphD8PYdQND3zG1Prlb7X5/Screen-Shot-2021-02-19-at-12.41.50-PM.png\" title=\"Screen-Shot-2021-02-19-at-12.41.50-PM.png\"><img src=\"/user_uploads/1549/isHphD8PYdQND3zG1Prlb7X5/Screen-Shot-2021-02-19-at-12.41.50-PM.png\"></a></div>",
        "id": 227000281,
        "sender_full_name": "Sean",
        "timestamp": 1613756648
    },
    {
        "content": "<p>/me grins - it's like my desk, but with yellow terminals instead of dark gray!</p>",
        "id": 227000370,
        "sender_full_name": "starseeker",
        "timestamp": 1613756690
    },
    {
        "content": "<p>I'm not sure what to make of 18999 - I'm not seeing two commits associated with that in Git</p>",
        "id": 227000450,
        "sender_full_name": "starseeker",
        "timestamp": 1613756729
    },
    {
        "content": "<p>I was dark, but eyes needed a different hue some months back</p>",
        "id": 227000479,
        "sender_full_name": "Sean",
        "timestamp": 1613756738
    },
    {
        "content": "<p>/me nods - it's surprising how much difference that makes over long stretches of time.</p>",
        "id": 227000585,
        "sender_full_name": "starseeker",
        "timestamp": 1613756771
    },
    {
        "content": "<p>/me goes through the list to see if he can quickly spot any candidates for svn revision labels...</p>",
        "id": 227000732,
        "sender_full_name": "starseeker",
        "timestamp": 1613756842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> How authoritative was the cvs2svn branch identification for commits?  A lot of these in git are tagged as rel-5-2 rather than rel-5-1-branch - given the process I used to try and determine which branch was the \"origin\" branch in CVS relied on the git conversion itself, it's possible I've not correctly identified the original branches...</p>",
        "id": 227004124,
        "sender_full_name": "starseeker",
        "timestamp": 1613758212
    },
    {
        "content": "<p>A sizable chunk of these are proving to be the mirror image of the other case - instead of the branch getting the svn id and trunk not getting it, it's trunk that got the id and the branch didn't.</p>",
        "id": 227006743,
        "sender_full_name": "starseeker",
        "timestamp": 1613759449
    },
    {
        "content": "<p>How are the rev updates committed in the repo still valid?  Doesn't assigning a different tag on earlier commits affect the future commit shas?</p>",
        "id": 227015981,
        "sender_full_name": "Sean",
        "timestamp": 1613763159
    },
    {
        "content": "<p>Can you give me an example of the rel-52 vs?  Could be a bug, but the processing was pretty straightforward to have it report what actually changed.</p>",
        "id": 227016143,
        "sender_full_name": "Sean",
        "timestamp": 1613763211
    },
    {
        "content": "<p>Yes.  Every time I have to do that, I have to upload a new repository.  That's why the brlcad_conv13 and brlcad_conv14 repos were up briefly</p>",
        "id": 227016173,
        "sender_full_name": "starseeker",
        "timestamp": 1613763221
    },
    {
        "content": "<p>Sure, one sec</p>",
        "id": 227016281,
        "sender_full_name": "starseeker",
        "timestamp": 1613763247
    },
    {
        "content": "<p>OK, to pick one example (this is typical):  r19440 in your list has:</p>\n<p>branches/rel-5-1-branch trunk </p>\n<p>The corresponding commits in the Git conversion report:<br>\ncvs:branch:rel-5-3   cvs:branch:trunk</p>",
        "id": 227016665,
        "sender_full_name": "starseeker",
        "timestamp": 1613763373
    },
    {
        "content": "<p>4d401a8617869d3594b5948de12a374a5bd292fe and ea6d4c16bae6ecf30d4439d92c8dd72f56b3e942</p>",
        "id": 227016754,
        "sender_full_name": "starseeker",
        "timestamp": 1613763411
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>morrison@agua brlcad_conv11 % svn diff -c 19440  svn+ssh://brlcad@svn.code.sf.net/p/brlcad/code|grep \"^Index: brlcad\"\nIndex: brlcad/branches/rel-5-1-branch/tclscripts/mged/grid.tcl\nIndex: brlcad/trunk/tclscripts/mged/grid.tcl\n</code></pre></div>\n<p>No mention of rel-5-3 ...</p>",
        "id": 227019748,
        "sender_full_name": "Sean",
        "timestamp": 1613764706
    },
    {
        "content": "<p>Looks like the git commit log and diff are correct, just incorrectly asssociated with rel-5-3</p>",
        "id": 227020428,
        "sender_full_name": "Sean",
        "timestamp": 1613765030
    },
    {
        "content": "<p>How is the branch/tag figured out?  I sort of assumed it was coming from the processing. If they're suspect, that might explain some of the missing trunk tags.</p>",
        "id": 227020569,
        "sender_full_name": "Sean",
        "timestamp": 1613765092
    },
    {
        "content": "<p>The SVN era branch assignments should come directly from repository information.  The CVS era branch assignments were done using the script in misc/repoconv/cvs_info.sh</p>",
        "id": 227023541,
        "sender_full_name": "starseeker",
        "timestamp": 1613766565
    },
    {
        "content": "<p>Fundamentally, it uses <code>git rev-list --first-parent</code> to follow commit chains back up the branches.</p>",
        "id": 227023615,
        "sender_full_name": "starseeker",
        "timestamp": 1613766602
    },
    {
        "content": "<p>I was trying to identify the commit chains independent of the SVN history.</p>",
        "id": 227023977,
        "sender_full_name": "starseeker",
        "timestamp": 1613766765
    },
    {
        "content": "<p>So my question was whether cvs2svn was more likely to correctly assign a correct commit branch of origin.   If that's the case, then I'll have to reassign the CVS era branches somehow.</p>",
        "id": 227024977,
        "sender_full_name": "starseeker",
        "timestamp": 1613767241
    },
    {
        "content": "<p>I'm not conversant enough with CVS to know how to try and directly coax the information out of the original repo, so my reasoning was that since the cvs-fast-export conversion was the one we were using from the CVS era the branch assignments were the ones to use for that part of the history.</p>",
        "id": 227025967,
        "sender_full_name": "starseeker",
        "timestamp": 1613767698
    },
    {
        "content": "<p>FWIW, SVN commit r19990  \"Release 5.3\" was right in amongst the latter of the multibranch commits SVN reported as being on rel-5-1-branch.  It seems a bit suspect that all the multibranch commits would be originating on rel-5-1-branch when they were about to release 5.3...</p>",
        "id": 227028057,
        "sender_full_name": "starseeker",
        "timestamp": 1613768671
    },
    {
        "content": "<p>I can't say for sure, but I do recall that branches in cvs are recorded <em>explicitly</em> so there's no guessing.  Any tool converting has perfect branch knowledge so I would expect cvs2svn (and cvs-to-git) to correctly reflect what was in cvs in svn.</p>",
        "id": 227038379,
        "sender_full_name": "Sean",
        "timestamp": 1613773004
    },
    {
        "content": "<p>Perhaps --first-parent isn't appropriate?  What if something is a branch of a branch or similar?  Git could be tracking through to a grandparent branch.</p>",
        "id": 227038492,
        "sender_full_name": "Sean",
        "timestamp": 1613773082
    },
    {
        "content": "<p>the branch names are in the ,v files, if you want to see if/when rel-5-1-branch vs 5-3 branch are associated with a 0particular commit.  They're in a \"symbolic names:\" block near the top.</p>",
        "id": 227038680,
        "sender_full_name": "Sean",
        "timestamp": 1613773178
    },
    {
        "content": "<p>Some explanation here: <a href=\"https://www.astro.princeton.edu/~rhl/cvs-branches.html#branchnumbers\">https://www.astro.princeton.edu/~rhl/cvs-branches.html#branchnumbers</a></p>",
        "id": 227039026,
        "sender_full_name": "Sean",
        "timestamp": 1613773329
    },
    {
        "content": "<p>I'm beginning to think git just literally doesn't track this properly at all, at ANY level.  If I'm interpreting these number correctly per the Princeton site,  it looks like SVN has it correct.</p>",
        "id": 227045440,
        "sender_full_name": "starseeker",
        "timestamp": 1613777018
    },
    {
        "content": "<p>That's really, really annoying.</p>",
        "id": 227045517,
        "sender_full_name": "starseeker",
        "timestamp": 1613777046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I don't suppose in that pile of scripts you've got one that will generate the set of branches for all SVN commits?</p>",
        "id": 227045775,
        "sender_full_name": "starseeker",
        "timestamp": 1613777213
    },
    {
        "content": "<p>Nevermind, got it.</p>",
        "id": 227050233,
        "sender_full_name": "starseeker",
        "timestamp": 1613780510
    },
    {
        "content": "<p>OK, there we go.  Can now scrub out the existing cvs:branch labels and replace them with SVN data.</p>",
        "id": 227058457,
        "sender_full_name": "starseeker",
        "timestamp": 1613788298
    },
    {
        "content": "<p>Yeah, that finished processing.  Careful if you used the previous script, had a bug.</p>",
        "id": 227070407,
        "sender_full_name": "Sean",
        "timestamp": 1613801621
    },
    {
        "content": "<p>Here's all revisions, all branches and tags:<br>\n<a href=\"/user_uploads/1549/0UTFPiG9Zy85vqA7KYH2q2Ab/commits_to_multiple_branches2.txt\">commits_to_multiple_branches2.txt</a></p>",
        "id": 227070468,
        "sender_full_name": "Sean",
        "timestamp": 1613801668
    },
    {
        "content": "<p>Er, rather that's all multiple branchpoint commits.  This is all commits in the repo:  <a href=\"/user_uploads/1549/n2Gk2zBMR2oQ-yHHBefx1E-u/all_branches2.log\">all_branches2.log</a></p>",
        "id": 227070952,
        "sender_full_name": "Sean",
        "timestamp": 1613802287
    },
    {
        "content": "<p>note the multiple branches list did update, if that changes anything on the processing</p>",
        "id": 227070975,
        "sender_full_name": "Sean",
        "timestamp": 1613802316
    },
    {
        "content": "<p>OK, I think I've got the branch assignments working using SVN data now.  Here's the diff that shows the changes to the commit messages in brlcad_conv12  <a href=\"/user_uploads/1549/MsWObXc17tXDMlDgM-SIB7B3/diff.txt\">diff.txt</a></p>",
        "id": 227279167,
        "sender_full_name": "starseeker",
        "timestamp": 1614006134
    },
    {
        "content": "<p>The sha1s won't match, but I can upload that version of the repository if it is useful.</p>",
        "id": 227295771,
        "sender_full_name": "starseeker",
        "timestamp": 1614011663
    },
    {
        "content": "<p>Updated diff file:  <a href=\"/user_uploads/1549/7kJkAulVHjDOl3Yqh2Bc4u1m/diff.txt\">diff.txt</a></p>",
        "id": 227316257,
        "sender_full_name": "starseeker",
        "timestamp": 1614019395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Any luck with generating the mappings?  As an alternative if you want you can post the brlcad_conv11 repo you were using (I haven't kept that iteration so I'd need a copy of what you're using) and your existing SHA1 sets - I think I've hammered out an update script now.</p>",
        "id": 227487148,
        "sender_full_name": "starseeker",
        "timestamp": 1614107697
    },
    {
        "content": "<p>Yeah, it's processing now.</p>",
        "id": 227492093,
        "sender_full_name": "Sean",
        "timestamp": 1614109688
    },
    {
        "content": "<p>Should be done soon.  Taking a while to recompute all the hashes.  Looks like the first few hundred ended up unmodified (same sha) but once a commit message changed, everything after had to be re-associated with the new shas and that process takes a couple hours (and it's a couple hours in, so almost done).</p>",
        "id": 227492182,
        "sender_full_name": "Sean",
        "timestamp": 1614109733
    },
    {
        "content": "<p>One curiosity that you can maybe help explain / educate me on ... do you know why a commit like 944 would be in git log --all but not in git log --follow . ?</p>",
        "id": 227492304,
        "sender_full_name": "Sean",
        "timestamp": 1614109796
    },
    {
        "content": "<p>maybe a bad example -- I didn't check if it was a commit to a different repo or something, just the first I noticed</p>",
        "id": 227492419,
        "sender_full_name": "Sean",
        "timestamp": 1614109834
    },
    {
        "content": "<p>Hmm.  If I save the log output of git log --follow . to a file and then search for c037a5e3a6eb97d2f9455225bbafeffec5b79be4 (which I think is the commit corresponding to 944 in brlcad_conv12) it is there.</p>",
        "id": 227497903,
        "sender_full_name": "starseeker",
        "timestamp": 1614111975
    },
    {
        "content": "<p>I do know in general that git log --all will incorporate the history from all branches, not just the currently checked out branch.</p>",
        "id": 227498046,
        "sender_full_name": "starseeker",
        "timestamp": 1614112036
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/a/7203551\">https://stackoverflow.com/a/7203551</a> is sometimes useful in the context of tracking back specific files.</p>",
        "id": 227498188,
        "sender_full_name": "starseeker",
        "timestamp": 1614112098
    },
    {
        "content": "<p>This also seems to work:  git log --follow --full-history -- src/fb/fb-orle.c</p>",
        "id": 227498226,
        "sender_full_name": "starseeker",
        "timestamp": 1614112124
    },
    {
        "content": "<p>Ah, whoops, sorry - that's not the right commit/hash.  One sec...</p>",
        "id": 227498767,
        "sender_full_name": "starseeker",
        "timestamp": 1614112380
    },
    {
        "content": "<p>Checking SVN, that's a property change - so the bug is the SVN revision getting assigned at all.</p>",
        "id": 227499139,
        "sender_full_name": "starseeker",
        "timestamp": 1614112567
    },
    {
        "content": "<p>I.e. it shouldn't be in either git log --all or git log --follow .</p>",
        "id": 227499254,
        "sender_full_name": "starseeker",
        "timestamp": 1614112626
    },
    {
        "content": "<p>OK.  Here are my thoughts so far:  944 looks like a timestamp match with 52036a8b4569b8ffe90e2e8fb0b43f5ed36ba040.  It's got one of the generic log messages, so my revision assignment code went ahead and assigned it that revision.</p>\n<p>Based on the diff report from SVN, that's an incorrect assignment and needs to be changed/cleared.  Hopefully the diff based checking will catch that.</p>",
        "id": 227501364,
        "sender_full_name": "starseeker",
        "timestamp": 1614113618
    },
    {
        "content": "<p>That probably explains why it doesn't show in git log --follow . - that search is based on all the files in the currently checked out branch, working backwards.  Since the incorrectly identified \"944\" has no files associated with it, there's no way for git to associate it with the history walking backwards from the tree as a starting point.</p>",
        "id": 227501573,
        "sender_full_name": "starseeker",
        "timestamp": 1614113705
    },
    {
        "content": "<p>Or, another possibility - even if it can associate it following the commit chains, an empty commit won't match the \".\" specifier.</p>",
        "id": 227501906,
        "sender_full_name": "starseeker",
        "timestamp": 1614113863
    },
    {
        "content": "<p>OK - I see \"Added fb_close\", which is the parent of 52036a8b4569b8ffe90e2e8fb0b43f5ed36ba040, does make it into the git log --follow . output.  That suggests it's following the chain through that commit, but not matching \".\" and skipping reporting it.</p>",
        "id": 227502811,
        "sender_full_name": "starseeker",
        "timestamp": 1614114212
    },
    {
        "content": "<p>(Sorry, that's probably a little more stream of consciousnesses than you were looking for...)</p>",
        "id": 227502954,
        "sender_full_name": "starseeker",
        "timestamp": 1614114258
    },
    {
        "content": "<p>In some ways it's tempting to try to scrub empty commits like that with generic commit messages out, but at this juncture I'd be worried about inadvertently breaking something else...</p>",
        "id": 227503448,
        "sender_full_name": "starseeker",
        "timestamp": 1614114462
    },
    {
        "content": "<p>Hmm.  Actually, repowork already has the info to detect empty commits, in principle, and even categorize them...</p>",
        "id": 227507277,
        "sender_full_name": "starseeker",
        "timestamp": 1614116055
    },
    {
        "content": "<p>Some I know we need (branch creation/deletion), some are marginal (commits removing empty directories, which are no-ops in git) and some of them are useless (empty generic message, empty contents).</p>",
        "id": 227507427,
        "sender_full_name": "starseeker",
        "timestamp": 1614116122
    },
    {
        "content": "<p>Here's the CVS era empties:  <a href=\"/user_uploads/1549/Q0Zzup96XfNKrjTXDvl9Aix0/empty.log\">empty.log</a></p>",
        "id": 227508897,
        "sender_full_name": "starseeker",
        "timestamp": 1614116759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> What do you think - should I scrub out the empty commits with \"<strong>* empty log message</strong>*\" and maybe some of the other obvious ones?</p>",
        "id": 227509363,
        "sender_full_name": "starseeker",
        "timestamp": 1614116948
    },
    {
        "content": "<p>\"BRL CAD Distribution Release 1.10\" has a couple non-empties in addition to the 4 empties, for example...</p>",
        "id": 227509623,
        "sender_full_name": "starseeker",
        "timestamp": 1614117061
    },
    {
        "content": "<p>Yeah, it's a variation on the splicing problem.  Have the ability to remove specified commits now.</p>",
        "id": 227520519,
        "sender_full_name": "starseeker",
        "timestamp": 1614121503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/227497903\">said</a>:</p>\n<blockquote>\n<p>Hmm.  If I save the log output of git log --follow . to a file and then search for c037a5e3a6eb97d2f9455225bbafeffec5b79be4 (which I think is the commit corresponding to 944 in brlcad_conv12) it is there.</p>\n</blockquote>\n<p>by the way what is the difference between conv11 and 12 ?? :)</p>",
        "id": 227664753,
        "sender_full_name": "scorp08",
        "timestamp": 1614197885
    },
    {
        "content": "<p>I don't recall at this point - they were iterative refinements to the process of correcting the output from the main svnfexport conversion (merging git notes into comments, correcting emails, etc.)</p>",
        "id": 227702177,
        "sender_full_name": "starseeker",
        "timestamp": 1614214861
    },
    {
        "content": "<p>conv12 is the \"target\" for a third series of refinements at this point, mainly because I need stable SHA1s to target for processing.   (In principle I've prepared a script to translate between old and new repositories if necessary, but I'd rather not have to use it... this is already complicated enough.)</p>",
        "id": 227702320,
        "sender_full_name": "starseeker",
        "timestamp": 1614214948
    },
    {
        "content": "<p>I see you're getting ahead of my own validation pace... Sorry it's taking so long, I'm just chasing down issues in the multiassignment, a couple bugs in the scripting, wanted the list I give to be more certain than a blanket wash as I'm seeing lots of little discrepancies and ways to mis-associate.</p>",
        "id": 227805270,
        "sender_full_name": "Sean",
        "timestamp": 1614274304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> can you validate this list against the assignments you made:  <a href=\"/user_uploads/1549/PQEhs5NcVyLCsv0EoZHa5hTc/svn.to.git.complete_matches.log\">svn.to.git.complete_matches.log</a></p>",
        "id": 227805689,
        "sender_full_name": "Sean",
        "timestamp": 1614274448
    },
    {
        "content": "<p>I don't see any collisions - you've got about a dozen that I haven't got yet, but I suspect that's probably because I forgot to use the version of the SVN repository that had the RCS tags scrubbed down.</p>",
        "id": 227826710,
        "sender_full_name": "starseeker",
        "timestamp": 1614282469
    },
    {
        "content": "<p>I'll have to look more closely at the ones that popped up on mine as matching you don't have... may be an issue I haven't found yet.</p>",
        "id": 227826922,
        "sender_full_name": "starseeker",
        "timestamp": 1614282519
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>420b6c86aebaab8d233b9124aac2dfcaab390158;2253\n3626fd67e335d89391ce624b8a3246bd99adffec;2470\n231fd989a63e842f6ed485d8ac49caec4eee3660;2471\nbbd7e8166d10d1f8c1c3355f87814fd9c4e652df;2489\n1a79a71444aa3900b25c61c321c270d3f83d7065;2657\n68245f26449e72b3fa8362bfdaa8ec4b458566bc;2841\n0857eeb72eb573cad76f86b770e765349a85a671;2875\nb026f5c0fe0aa8e2d9ca34051a20fb9afb92162a;2884\n3732cf651af0b526eb3ec6bdf5893892f22afef4;2886\n84c054fee5394109f52dfaf15add46d671ede196;2890\nde144fde847a9fe45cac391c97bd7abaeacc3b0b;2900\nd0f9348a8847c22a1f5cb4846f9c7414c7c1081b;3578\n</code></pre></div>\n<p>Just for reference, those are the ones in your set I've not spotted yet.</p>",
        "id": 227828270,
        "sender_full_name": "starseeker",
        "timestamp": 1614283003
    },
    {
        "content": "<p>I can pick up <code>68245f26449e72b3fa8362bfdaa8ec4b458566bc;2841</code> if I sort the diff contents ahead of doing the md5sum.</p>",
        "id": 227829908,
        "sender_full_name": "starseeker",
        "timestamp": 1614283585
    },
    {
        "content": "<p>I have others that partially match, I just haven't validated them so didn't share them yet.</p>",
        "id": 227830670,
        "sender_full_name": "Sean",
        "timestamp": 1614283904
    },
    {
        "content": "<p>Ah, it looks like the rest categorized in my processing as having non-unique content matching.</p>",
        "id": 227831172,
        "sender_full_name": "starseeker",
        "timestamp": 1614284082
    },
    {
        "content": "<p>/me inspects...</p>",
        "id": 227831259,
        "sender_full_name": "starseeker",
        "timestamp": 1614284114
    },
    {
        "content": "<p>OK.  Diff content wasn't unique for r2253 - matches with r22190 - so it takes the path and/or date to resolve.  420b6c86aebaa is correct</p>",
        "id": 227831766,
        "sender_full_name": "starseeker",
        "timestamp": 1614284314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Other matches all check out - your list looks good.</p>",
        "id": 227833610,
        "sender_full_name": "starseeker",
        "timestamp": 1614285061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Sorry, just read back up through chat history - not trying to replace your work (defeats the point of independent V&amp;V) - goal was/is to get representative inputs to make sure my repo updating logic can handle something similar to what the final pass will look like.  Just stashed the various bits and pieces (and notes) in case they prove to be useful.</p>",
        "id": 227866608,
        "sender_full_name": "starseeker",
        "timestamp": 1614301659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span>  e6417be98f27d570d863744f566f5aaf738abbe6 .. I'm seeing listed as branch commit, but it was a trunk commit 19763</p>",
        "id": 227967454,
        "sender_full_name": "Sean",
        "timestamp": 1614362832
    },
    {
        "content": "<p>/me nods.  I'll add it to branch_corrections.txt</p>",
        "id": 227967706,
        "sender_full_name": "starseeker",
        "timestamp": 1614362961
    },
    {
        "content": "<p>Here's a second update with about 70 more matches <a href=\"/user_uploads/1549/k3UmqVRI3AzCtpoqi6YzNgp7/svn.to.git.complete_matches2.log\">svn.to.git.complete_matches2.log</a></p>",
        "id": 227967747,
        "sender_full_name": "Sean",
        "timestamp": 1614362987
    },
    {
        "content": "<p>had a bug that had to get sorted out in verifying the other 70</p>",
        "id": 227967825,
        "sender_full_name": "Sean",
        "timestamp": 1614363013
    },
    {
        "content": "<p>One sec while I merge/verify.</p>",
        "id": 227967869,
        "sender_full_name": "starseeker",
        "timestamp": 1614363041
    },
    {
        "content": "<p>Here are more that appear to be mistagged as branch/tag commits: </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>19033 LOG+FILE MATCH ON c365a032935f99d5cbcc5e0b7316253e918183f5\n19211 LOG+FILE MATCH ON 2ec20a87d6e216cc3af62da933a2917e96459ce2\n19282 LOG+FILE MATCH ON 4d5fe4e8afa57a275c04f0a11cbf20c1378ce600\n19283 LOG+FILE MATCH ON 4af5f01acc93a65ba8e158c1e407e6fa30f0a867\n19288 LOG+FILE MATCH ON 9f4472b6c4a9d77005a25bac0e6ea9d0b45c6829\n19289 LOG+FILE MATCH ON 3312597ec11da607ad8cdecb8e86ecd6cd43a21c\n19440 LOG+FILE MATCH ON ea6d4c16bae6ecf30d4439d92c8dd72f56b3e942\n19449 LOG+FILE MATCH ON af33297408e4ec0b38fa37d211104ae8e3f4b850\n19558 LOG+FILE MATCH ON 3a6fdd142e59c7fee7dfb06fdaecc3b30f28d633\n19587 LOG+FILE MATCH ON a53d24a82016e59e54ad3fa0750238b077313a33\n19720 LOG+FILE MATCH ON f1c200f10e9d5c0f896508b2967f644abafad234\n19723 LOG+FILE MATCH ON 45a67834524348e32e2c1d34071b59dbb1360d9e\n19763 FILE+DIFF MATCH ON e6417be98f27d570d863744f566f5aaf738abbe6\n19772 LOG+FILE MATCH ON 6f4104bd83cf4a930bda9cbaa1b811d3e0d236b3\n19783 LOG+FILE MATCH ON 6af6602bcdb5227c51a6b467226d5fc70d321855\n19797 LOG+FILE MATCH ON 4b51763bd75123f81f069bba1b873c4538776530\n19798 LOG+FILE MATCH ON d82708b47d89c008a20ce23ba23ce4aca80cf232\n19839 LOG+FILE MATCH ON 8dcb60d4529dc5e0cf99729338e05869cf270c06\n</code></pre></div>",
        "id": 227969071,
        "sender_full_name": "Sean",
        "timestamp": 1614363519
    },
    {
        "content": "<p>Confirmed - no collisions.</p>",
        "id": 227969361,
        "sender_full_name": "starseeker",
        "timestamp": 1614363622
    },
    {
        "content": "<p>This one is an outlier I'm not sure about, 11077485329842c81213eab68006fe5d58b5925f ...</p>",
        "id": 227969378,
        "sender_full_name": "Sean",
        "timestamp": 1614363632
    },
    {
        "content": "<p>it says it was 21565 but that was a trunk cvs2svn conversion commit.  Commit message on 11077.. is that of 21564</p>",
        "id": 227969470,
        "sender_full_name": "Sean",
        "timestamp": 1614363671
    },
    {
        "content": "<p>21564 is not found tagged in git</p>",
        "id": 227969603,
        "sender_full_name": "Sean",
        "timestamp": 1614363728
    },
    {
        "content": "<p>/me nods.  Probably means it should be 21564</p>",
        "id": 227969632,
        "sender_full_name": "starseeker",
        "timestamp": 1614363746
    },
    {
        "content": "<p>I need to investigate why 21564 isn't in my list of missing commits... should have caught that but didn't</p>",
        "id": 227969959,
        "sender_full_name": "Sean",
        "timestamp": 1614363900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> am I correct that all the commits you listed are on trunk?</p>",
        "id": 227970152,
        "sender_full_name": "starseeker",
        "timestamp": 1614363987
    },
    {
        "content": "<p>I think I've got 19033 set up as follows:  aec4367dafd37a7b0657c4b27414caa21ac4c1be is the trunk portion of that commit, and c365a032935f99d5cbcc5e0b7316253e918183f5 is the rel-5-1-branch portion</p>",
        "id": 227970737,
        "sender_full_name": "starseeker",
        "timestamp": 1614364231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/227970152\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> am I correct that all the commits you listed are on trunk?</p>\n</blockquote>\n<p>I'll have to confirm that myself, as I've been toggling between processing all commits and only those on trunk.</p>",
        "id": 227972470,
        "sender_full_name": "Sean",
        "timestamp": 1614364951
    },
    {
        "content": "<p>aha!  yes, that explains it.  that's why 21564 wasn't in my list.  thought I was going crazy.  that was a branch commit.</p>",
        "id": 227973173,
        "sender_full_name": "Sean",
        "timestamp": 1614365224
    },
    {
        "content": "<p>so in svn, 21564 was committed to branch, then 21565 commited to trunk to compensate??  I'm not sure what cvs2svn did there.<br>\nregardless, in git .. 21564's diff turned into 11077485.. and perhaps properly tagged as branch, despite being tagged as trunk commit 21565.  do I have that right?</p>",
        "id": 227973523,
        "sender_full_name": "Sean",
        "timestamp": 1614365381
    },
    {
        "content": "<p>21565 appears to be empty in svn</p>",
        "id": 227973643,
        "sender_full_name": "Sean",
        "timestamp": 1614365419
    },
    {
        "content": "<p>In git, if I'm interpreting gitk's display properly, 11077485329842c81213eab68006fe5d58b5925f is a branch commit.  If 21564 was the branch commit in SVN, that's probably what it should be in Git.  Not 100% sure why it got the 21565 assignment instead.</p>",
        "id": 227974014,
        "sender_full_name": "starseeker",
        "timestamp": 1614365587
    },
    {
        "content": "<p>Best guess is something funky happened because the timestamps of those two commits are identical in SVN, as far as I can tell.</p>",
        "id": 227974269,
        "sender_full_name": "starseeker",
        "timestamp": 1614365685
    },
    {
        "content": "<p>Okay, yeah, that's what I thought I was seeing as well.  Don't see how it got 21565 either.  Is there a way to check, see if that happened anywhere else?  Not too worried but if it's scannable, we can do a quick check.</p>",
        "id": 227974527,
        "sender_full_name": "Sean",
        "timestamp": 1614365766
    },
    {
        "content": "<p>Only thing I can think of would be to look for identical timestamp commits in SVN and double check the Git assignments, but not sure how script-able  that is (especially since we're accumulating a fair set of revision number assignments/updates.)</p>",
        "id": 227974868,
        "sender_full_name": "starseeker",
        "timestamp": 1614365900
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>f5a1b0037fec2927cba073d118db24cdbd681975\na098425430db227021617976961e6b51ce5569cb\ne6417be98f27d570d863744f566f5aaf738abbe6\n</code></pre></div>\n<p>Those might be worth checking - I think they also had incorrect revision numbers</p>",
        "id": 227975029,
        "sender_full_name": "starseeker",
        "timestamp": 1614365966
    },
    {
        "content": "<p>It might get to the point where I should run the updates we've accumulated and establish a new baseline for additional comparisons, so we can focus without re-discovering what we've already fixed, but I know that would require regenerating the sha1/md5 mappings again.  Let me know if you think things reach the point where that would be worthwhile.</p>",
        "id": 227975725,
        "sender_full_name": "starseeker",
        "timestamp": 1614366223
    },
    {
        "content": "<p>Yeah, I'm ignoring timestamps because it'd be a fair bit of work to parse the date string into something that could be fuzzy compared in script land</p>",
        "id": 227981433,
        "sender_full_name": "Sean",
        "timestamp": 1614368559
    },
    {
        "content": "<p>You may already have, but here's a couple outliers that are partial matches, appear to be probably split commits?:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>2125 LOG+DIFF MATCH ON 0c1f4a88c5c960bd7de51ef8a05e7f53f00fb1a2 (NOT TAGGED)\n3102 LOG+DIFF MATCH ON 402419dac49d3abe9bd6036f76696b43a70a66f5 (NOT TAGGED)\n</code></pre></div>",
        "id": 228009770,
        "sender_full_name": "Sean",
        "timestamp": 1614380507
    },
    {
        "content": "<p>awesome!  got it doing the comparisons in parallel now... that should speed things up a bit!</p>",
        "id": 228080636,
        "sender_full_name": "Sean",
        "timestamp": 1614457289
    },
    {
        "content": "<p>I've put up a demo repo at <a href=\"https://github.com/starseeker/brlcad_conv15\">https://github.com/starseeker/brlcad_conv15</a> showing all the accumulated changes thus far.</p>",
        "id": 228093664,
        "sender_full_name": "starseeker",
        "timestamp": 1614472738
    },
    {
        "content": "<p>Simple way to compare the brlcad_conv12 and the brlcad_conv15 logs to see changes seems to be:</p>\n<p>git log --all |grep -v ^commit |grep -v ^Merge &gt; all_nc.log</p>",
        "id": 228096583,
        "sender_full_name": "starseeker",
        "timestamp": 1614476573
    },
    {
        "content": "<p>That filters out the sha1s so the message and other changes can be seen easily in a diff.</p>",
        "id": 228097978,
        "sender_full_name": "starseeker",
        "timestamp": 1614478358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  It's looking like SVN and git use subtly different diffing algorithms, so the diff file changes don't always map up.</p>",
        "id": 228242075,
        "sender_full_name": "starseeker",
        "timestamp": 1614609933
    },
    {
        "content": "<p>I think I've pretty well reached my limits:  <a href=\"https://github.com/starseeker/brlcad_conv16\">https://github.com/starseeker/brlcad_conv16</a></p>",
        "id": 228247339,
        "sender_full_name": "starseeker",
        "timestamp": 1614611728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> what comparisons do you have it doing?</p>",
        "id": 228249417,
        "sender_full_name": "starseeker",
        "timestamp": 1614612457
    },
    {
        "content": "<p>I compared every rev.</p>",
        "id": 228259809,
        "sender_full_name": "Sean",
        "timestamp": 1614615998
    },
    {
        "content": "<p>/me winces.  Yeah, that's a slow process.</p>",
        "id": 228259896,
        "sender_full_name": "starseeker",
        "timestamp": 1614616030
    },
    {
        "content": "<p>Cool thing is that now takes about 3-4 hours total to test every rev.</p>",
        "id": 228259904,
        "sender_full_name": "Sean",
        "timestamp": 1614616032
    },
    {
        "content": "<p>Crunches in parallel.</p>",
        "id": 228259939,
        "sender_full_name": "Sean",
        "timestamp": 1614616046
    },
    {
        "content": "<p>Finished over the weekend pretty quickly actually, but I was too exhausted to verify+upload it.. sorry.</p>",
        "id": 228259951,
        "sender_full_name": "Sean",
        "timestamp": 1614616049
    },
    {
        "content": "<p>Did a workout on Sat that wiped me out.</p>",
        "id": 228259968,
        "sender_full_name": "Sean",
        "timestamp": 1614616059
    },
    {
        "content": "<p>I have a laundry list now.. will post it in the categoric sets here in a few min.</p>",
        "id": 228260146,
        "sender_full_name": "Sean",
        "timestamp": 1614616113
    },
    {
        "content": "<p>Np, happens.  I ended up manually hunting up a bunch of Git commits in SVN - hopefully that'll be helpful.</p>",
        "id": 228260151,
        "sender_full_name": "starseeker",
        "timestamp": 1614616115
    },
    {
        "content": "<p>Yeah,  you may have already found/fixed a lot or all of them.</p>",
        "id": 228260208,
        "sender_full_name": "Sean",
        "timestamp": 1614616145
    },
    {
        "content": "<p>I've not done anything with 15 or 16.  I can kick that off a final pass on 17 assuming there are a few updates, but still working on 12 to keep shas in sync.</p>",
        "id": 228260340,
        "sender_full_name": "Sean",
        "timestamp": 1614616202
    },
    {
        "content": "<p>/me nods - sounds good.</p>",
        "id": 228260507,
        "sender_full_name": "starseeker",
        "timestamp": 1614616238
    },
    {
        "content": "<p>Hopefully there won't be too much more to do...</p>",
        "id": 228260571,
        "sender_full_name": "starseeker",
        "timestamp": 1614616265
    },
    {
        "content": "<p>FWIW, I'm not convinced all the CVS era commits will be diff free, even if the revisions line up.</p>",
        "id": 228260727,
        "sender_full_name": "starseeker",
        "timestamp": 1614616324
    },
    {
        "content": "<p>Yeah, I think we already found a few differences where commits were split differently.  They seem to be very few overall.</p>",
        "id": 228264600,
        "sender_full_name": "Sean",
        "timestamp": 1614617626
    },
    {
        "content": "<p>I think cvs2svn and cvs-fast-export might have picked different contents for their \"synthetic commit to represent incomplete tag\" commits... I suppose a case can be made either way for assigning the corresponding SVN revs if that's what happened.  I went ahead and did so, but I could go either way.</p>",
        "id": 228273769,
        "sender_full_name": "starseeker",
        "timestamp": 1614620643
    },
    {
        "content": "<p>r4778 actually is a nice compact illustration of different diff picks - at least with the svn and git versions I have, git produces:</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/librt/db_io.c b/librt/db_io.c\nindex 3645cea1dc..7faa9be6ba 100644\n--- a/librt/db_io.c\n+++ b/librt/db_io.c\n@@ -32,8 +32,8 @@ static char RCSid[] = &quot;@(#)$Header$ (BRL)&quot;;\n\n #include &quot;machine.h&quot;\n #include &quot;vmath.h&quot;\n-#include &quot;raytrace.h&quot;\n #include &quot;db.h&quot;\n+#include &quot;raytrace.h&quot;\n\n #include &quot;./debug.h&quot;\n</code></pre></div>\n<p>and SVN produces:</p>\n<div class=\"codehilite\"><pre><span></span><code>Index: brlcad/trunk/librt/db_io.c\n===================================================================\n--- brlcad/trunk/librt/db_io.c  (revision 4777)\n+++ brlcad/trunk/librt/db_io.c  (revision 4778)\n@@ -32,8 +32,8 @@\n\n #include &quot;machine.h&quot;\n #include &quot;vmath.h&quot;\n+#include &quot;db.h&quot;\n #include &quot;raytrace.h&quot;\n-#include &quot;db.h&quot;\n\n #include &quot;./debug.h&quot;\n</code></pre></div>\n<p>Git moves raytrace.h down, and SVN moves db.h up, both to the same effect.</p>",
        "id": 228277737,
        "sender_full_name": "starseeker",
        "timestamp": 1614621955
    },
    {
        "content": "<p>Shouldn't impact a full-up revision check of course, but does illustrate the limits of diff comparisons nicely.</p>",
        "id": 228277870,
        "sender_full_name": "starseeker",
        "timestamp": 1614621988
    },
    {
        "content": "<p>I should have one of the lists cleaned up here soon now.  Trying to make sure I don't feed you bad data...  so much scripting...</p>",
        "id": 228278324,
        "sender_full_name": "Sean",
        "timestamp": 1614622144
    },
    {
        "content": "<p>The good news is I'd say the vast majority match and map well.</p>",
        "id": 228278387,
        "sender_full_name": "Sean",
        "timestamp": 1614622168
    },
    {
        "content": "<p>/me can imagine - once this is done I'm going to have to scrub my home dir to clean out a truly amazing pile of intermediate scripting files, checkouts, test dirs, etc.</p>",
        "id": 228278774,
        "sender_full_name": "starseeker",
        "timestamp": 1614622286
    },
    {
        "content": "<p>Yeah, I noticed some of the different diffs like that.  Pretty interesting.  I found a couple more complex cases where an entire function appeared to be added/removed when in reality all that happened was the end parenthesis on one function was moved and the signature on the next function had an edit.  Somehow git's diff engine decided it would represent that as some mangled movement.</p>",
        "id": 228278823,
        "sender_full_name": "Sean",
        "timestamp": 1614622303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I'm seeing a big swath of differences between r702 and r3735 - given the timing I'd guess that's tied up with that timestamp business in the SVN conversion?</p>",
        "id": 228309386,
        "sender_full_name": "starseeker",
        "timestamp": 1614634139
    },
    {
        "content": "<p>Datestamp wise it lines up, as near as I can tell.</p>",
        "id": 228309588,
        "sender_full_name": "starseeker",
        "timestamp": 1614634212
    },
    {
        "content": "<p>yeah, I noticed them a while back.  found many/most of them (or ruled them out as splits/inconsequential).</p>",
        "id": 228315041,
        "sender_full_name": "Sean",
        "timestamp": 1614636494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> if we hit a situation where a commit message matches to one revision but the change matches a different revision, which mapping do you prefer to use?</p>",
        "id": 228345368,
        "sender_full_name": "starseeker",
        "timestamp": 1614654016
    },
    {
        "content": "<p>o.O  I'd wonder how that happened...</p>",
        "id": 228359555,
        "sender_full_name": "Sean",
        "timestamp": 1614665875
    },
    {
        "content": "<p>regardless, I think it's more important the rev match the diff since we're notionally using these numbers to trace back changes in a file</p>",
        "id": 228359637,
        "sender_full_name": "Sean",
        "timestamp": 1614665923
    },
    {
        "content": "<p>unrelated, here's  a neat little find in the commits.  there appear to be exactly 7 commits that were perfectly duplicated on branches and trunk:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>10 19514 LOG+FILE+DIFF PERFECT MATCH ON c9cc663089d441f8a7d40f63757b0080dec5af10 f5419dcbab0e9edc78c90af24b5318b04686a7b2 (TAGGED MISMATCH f5419dcbab0e9edc78c90af24b5318b04686a7b2)\n10 19595 LOG+FILE+DIFF PERFECT MATCH ON 0c2cb0cf51b8f543cd740e758ea3ebe2be964336 afbcb106f05606065ae3ce11b602fa566efb0031 (TAGGED MISMATCH afbcb106f05606065ae3ce11b602fa566efb0031)\n10 19605 LOG+FILE+DIFF PERFECT MATCH ON 9bacc2b9ac94977113d3d68617ac4c896a37da60 c614ed067a631ba7d56fee51d1fc289359efb64b (TAGGED MISMATCH 9bacc2b9ac94977113d3d68617ac4c896a37da60)\n10 19697 LOG+FILE+DIFF PERFECT MATCH ON e49447b2d924385b7272c6ba8d78e490590f1778 f363b6cbec7bdd415f20e77a9d3734ecfa6cbf98 (TAGGED MISMATCH f363b6cbec7bdd415f20e77a9d3734ecfa6cbf98)\n10 19892 LOG+FILE+DIFF PERFECT MATCH ON 200ca9ba685b57dbc4bd0dcd9600649a7bec8117 f5787013aff6a38adc807bcc5a8db617510818a3 (TAGGED MISMATCH 200ca9ba685b57dbc4bd0dcd9600649a7bec8117)\n10 19992 LOG+FILE+DIFF PERFECT MATCH ON 1b8fd04c74f8b99551e35ec87d4980bb27735a62 ae67110218bc3d71c5f3301707b5d86a60564cf7 (TAGGED MISMATCH 1b8fd04c74f8b99551e35ec87d4980bb27735a62)\n10 64506 LOG+FILE+DIFF PERFECT MATCH ON eb5c98bf8799083d4d946f1f63f9e1edd8e61631 2ca450a34b29f37d58b4ed8288c3f41a4b155a78 (TAGGED MISMATCH eb5c98bf8799083d4d946f1f63f9e1edd8e61631)\n</code></pre></div>\n<p>Ignore the mismatch, I manually verified and they're all correct in git.  It was just interesting because there appear to be so few of those.  I kind of expected more, but they were apparently pretty rare to be exactly the same message, the same files, same diff.</p>",
        "id": 228359872,
        "sender_full_name": "Sean",
        "timestamp": 1614666113
    },
    {
        "content": "<p>How's it going?</p>",
        "id": 228483875,
        "sender_full_name": "starseeker",
        "timestamp": 1614718478
    },
    {
        "content": "<p>So, here's a question - 7496c761e580e1935607fc336ff85bf06c524caf was initially unassigned.  It got assigned r10209 based on commit message and history position, but diffing it with the SVN checkout indicates some of the changes for r10209 in SVN got grouped into the git commit labeled r10210 instead.</p>\n<p>So we can assign r10209 to 7496c761e5 and be \"approximately\" correct - presumably the best match available in the git history to that SVN commit, but with a checkout that won't match - or skip assigning r10209 to any commit (losing some mapping info, but skipping a mapping that can't produce a matching output.)</p>\n<p>What's the preferred answer in such situations?</p>",
        "id": 228532109,
        "sender_full_name": "starseeker",
        "timestamp": 1614744323
    },
    {
        "content": "<p>So I've been down a rabbit hole trying to sort out how git handles encoding, but it's looking like it's not just that -- I think there's a couple categoric issues potentially.  check these out:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>b17a2836c85b43422c15faf7b111088bc4e445e3\na9daa166161d57ee6ed486cc9488880ffc5da843\ned4c28dcc1f17520d6596192e2ccae808d44ba4f\nbc320ea12852890495809d142600a97eb241bd6f\nd1e7455ffff304d2b8f25aba0cf144c6dc0fb4b4\n9594f3ce737b98e902379066be02337eabc8db53\n18ea6afa636886ee2ba5fb7d7807a920db3ee35e\n8a97709dae7e86479bc04ab8d52dcaa65c2b4beb\n9ae7c9024838f140c1cb20d0ddaf0606e2e486ef\nc13ba71962660bcd2bb471671a08d61c94827e30\n9ef20d544982d92f0b1d9183477c42543c4d45c4\n4d6d7aad28eed5f23e31aa3f3fc37576de05b6dc\n03eab0819b8a74d2a046273443ff14122f2d7e98\n92cc90f7397cf45802a70f70260cfa2f57b1fc3b\n106637f9c2913d3cc43d8a02a0f955c9709f67d4\n6c20c610b10b3c098ad8c8bd53fc111791bca7e6\n9f1e2c92eb250b39ac64b981c6246236f0cdb2c5\n4c103440e2947d6990386e2767b9778266dd1517\nb7a0eb56822e52c1a18ca30f312abea93ead6867\nc90bfc8e507ea27863d82ea9ff514d2c79253b98\ncb8ebedb7da7eb7981d0038fc826b61f4315e699\nb0f3314a23e067051d520b11da483d068b73ebe6\n</code></pre></div>",
        "id": 228534841,
        "sender_full_name": "Sean",
        "timestamp": 1614746289
    },
    {
        "content": "<p>there's clearly some utf-8 going on there that wasn't preserved, but then there's also some utf-8 getting added where it previously did not exist.  I didn't scan all commits for the condition -- these are the ones that came up as matching DIFF+FILES but not matching the log message.</p>",
        "id": 228534919,
        "sender_full_name": "Sean",
        "timestamp": 1614746378
    },
    {
        "content": "<p>looks like about half of them have message up log messages where there was an apostrophe or a double quote.  I checked svn and they were indeed just simple single/double quotes, so I'm thinking something in the scripting</p>",
        "id": 228535014,
        "sender_full_name": "Sean",
        "timestamp": 1614746433
    },
    {
        "content": "<p>As to your question (sorry, had to offload before I lost the context) ... I have that commit matching 10209 and 10210 as well because of the log message match.  They match these git commits:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>5222348e9f8c57c3a7623700413d0f37a1d74122\n7496c761e580e1935607fc336ff85bf06c524caf\n46472340020700642675b9613c7ddce85c391bea\nbecf17cb8e73ddbef7a0e840090712714ef4cff0\n5846eaff72182de5f744baf4ef8c757b1e44b615\n</code></pre></div>",
        "id": 228535274,
        "sender_full_name": "Sean",
        "timestamp": 1614746623
    },
    {
        "content": "<p>So you could tag them all or just the first, <em>shrug</em>, all valid enough choices I think</p>",
        "id": 228535341,
        "sender_full_name": "Sean",
        "timestamp": 1614746655
    },
    {
        "content": "<p>presumably some are 10209 and some are 10210</p>",
        "id": 228535367,
        "sender_full_name": "Sean",
        "timestamp": 1614746687
    },
    {
        "content": "<p>I have a list of others like that, 1156 only match log message</p>",
        "id": 228535469,
        "sender_full_name": "Sean",
        "timestamp": 1614746761
    },
    {
        "content": "<p>when I gave them a prelim scan, it looked like most are commits split up differently than they were in svn</p>",
        "id": 228535561,
        "sender_full_name": "Sean",
        "timestamp": 1614746815
    },
    {
        "content": "<p>So looking at the first one on that list (b17a2836c85b43422c15faf7b111088bc4e445e3) I'm seeing the following:</p>\n<p>CVS</p>\n<div class=\"codehilite\"><pre><span></span><code>add Roßberg to list of contributors\n</code></pre></div>\n<p>SVN</p>\n<div class=\"codehilite\"><pre><span></span><code>add Roßberg to list of contributors\n</code></pre></div>\n<p>Git:</p>\n<div class=\"codehilite\"><pre><span></span><code>add Roßberg to list of contributors\n</code></pre></div>\n<p>You're saying your scripts indicate the SVN and Git messages don't match?  All three lines appear to have the same utf8 character, at least here...</p>",
        "id": 228539463,
        "sender_full_name": "starseeker",
        "timestamp": 1614749513
    },
    {
        "content": "<p>I'll take a look at the rest of the list tomorrow...</p>",
        "id": 228539551,
        "sender_full_name": "starseeker",
        "timestamp": 1614749563
    },
    {
        "content": "<p>yeah, I don't get the utf chars here when I query git.  I could have done something that caused them, but if I just run git show, I get encoded mess</p>",
        "id": 228539792,
        "sender_full_name": "Sean",
        "timestamp": 1614749726
    },
    {
        "content": "<p>another set of oddities to check on, search git for svn 30687</p>",
        "id": 228539875,
        "sender_full_name": "Sean",
        "timestamp": 1614749774
    },
    {
        "content": "<p>appears to be tagged across a variety of branches (which maybe happened, I hadn't checked that yet)</p>",
        "id": 228539895,
        "sender_full_name": "Sean",
        "timestamp": 1614749795
    },
    {
        "content": "<p>okay, so looks like that's part of the story:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>svn diff -c30687 file:///Users/morrison/brlcad.github/svn.sfmirror/code | grep ^Index | cut -f3 -d/ | sort | uniq\nVendorARL\nlibpng\nscriptics\nzlib\n</code></pre></div>\n<p>yet the git side of things is:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>for i in `echo \"004ec0ae439f0ca3c814d22a46957012cd8fb239\n720f9b9b75588e35d3cce0f9f5b802abea2259ab\nf206b315ca475d3a3e55e98ec42d772c6b05baee\ncbff64617866cc3fc2b25db15cd610e651561958\n87bc784daf7f15cc8d9c9fa980a934a98a17de95\nd748c2ea214b699008563e18f5a7105de39faba9\n004ec0ae439f0ca3c814d22a46957012cd8fb239\"` ; do git show $i | grep svn:branch ; done | sort | uniq\n    svn:branch:Original\n    svn:branch:itcl3-2\n    svn:branch:libpng_1_0_2\n    svn:branch:tcl8-3\n    svn:branch:tk8-3\n    svn:branch:zlib_1_0_4\n</code></pre></div>",
        "id": 228540195,
        "sender_full_name": "Sean",
        "timestamp": 1614750043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> what version of Git are you using?</p>",
        "id": 228586718,
        "sender_full_name": "starseeker",
        "timestamp": 1614776501
    },
    {
        "content": "<p>Is <a href=\"https://stackoverflow.com/a/19436421\">https://stackoverflow.com/a/19436421</a> related?</p>",
        "id": 228587170,
        "sender_full_name": "starseeker",
        "timestamp": 1614776701
    },
    {
        "content": "<p>Also, what do you see in gitk as opposed to on the console?</p>",
        "id": 228587248,
        "sender_full_name": "starseeker",
        "timestamp": 1614776735
    },
    {
        "content": "<p>OK, so it looks like the git commits are spurious - I may have messed up a correction or some such.  Of the 4 branches from r30687, only VendorARL is present and it looks like that's because I custom-added it.</p>",
        "id": 228599531,
        "sender_full_name": "starseeker",
        "timestamp": 1614781448
    },
    {
        "content": "<p>r15365 created the libpng branch in SVN, if I'm not mistaken.  In Git, that revision got assigned to f8fa716f5077cdde438f676c1b24244a09eb3fcd</p>",
        "id": 228607058,
        "sender_full_name": "starseeker",
        "timestamp": 1614783969
    },
    {
        "content": "<p>r15338 created the zlib branch in SVN.  In Git, that looks like e85b06be0fa6632e097d8c728506ab5251a2b635</p>",
        "id": 228608921,
        "sender_full_name": "starseeker",
        "timestamp": 1614784624
    },
    {
        "content": "<p>The scriptics branch has 4 commits - r19756, r19758, r19760 and r19762.  Those don't have assignments right now, but it looks like the corresponding commits have r19757, r19759, r19761 and r19763.  Looking at them, I'd say the four earlier commits are probably the better content choices for assignment (not to mention having the mapping commit messages.)</p>",
        "id": 228610283,
        "sender_full_name": "starseeker",
        "timestamp": 1614785097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> OK, I think I've got the corrective files in place for r30687.  Basically, since cvs-fast-export put the commits on other branches, we don't have png, zlib or scriptics branch deletes.  I added the proper VendorARL delete, and removed the spurious itcl3-2, etc. deletes incorrectly associated with r30687 in Git.</p>",
        "id": 228612866,
        "sender_full_name": "starseeker",
        "timestamp": 1614786008
    },
    {
        "content": "<p>Also updated the scriptics commit revision assignments.</p>",
        "id": 228613147,
        "sender_full_name": "starseeker",
        "timestamp": 1614786096
    },
    {
        "content": "<p>I don't think the encoding was a git version issue, I think it's just encoding.  I think I have it sorted out.</p>",
        "id": 228613224,
        "sender_full_name": "Sean",
        "timestamp": 1614786123
    },
    {
        "content": "<p>Looks like the git command I used to dump the log and the svn command used to dump the log ended up dumping differently is all.</p>",
        "id": 228613374,
        "sender_full_name": "Sean",
        "timestamp": 1614786164
    },
    {
        "content": "<p>So that's pretty much the entirety of commits that had UTF-8 characters in them.  The suspicious quote-related ones look like they're actually smart single quotes, probably copy-pasted from some output.</p>",
        "id": 228613582,
        "sender_full_name": "Sean",
        "timestamp": 1614786236
    },
    {
        "content": "<p>Ah, cute.</p>",
        "id": 228613712,
        "sender_full_name": "starseeker",
        "timestamp": 1614786266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/228599531\">said</a>:</p>\n<blockquote>\n<p>OK, so it looks like the git commits are spurious - I may have messed up a correction or some such.  Of the 4 branches from r30687, only VendorARL is present and it looks like that's because I custom-added it.</p>\n</blockquote>\n<p>I can pull the rest... r30687 was just one example.  There are others like that.</p>",
        "id": 228613752,
        "sender_full_name": "Sean",
        "timestamp": 1614786279
    },
    {
        "content": "<p>Well, that was mostly a blind alley I should have known better than to chase, but it did result in characterizing some of the commit diffs... looks like cvs-fast-export and cvs2svn sometimes picked different commit ordering for commits with the same timestamps.</p>\n<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> unless you feel really strongly about that I'd rather not try to switch them around - it'll take some effort on the repowork code to support doing so.</p>",
        "id": 228697465,
        "sender_full_name": "starseeker",
        "timestamp": 1614819673
    },
    {
        "content": "<p>We need some kind of \"good enough\" criteria... my sense is that chasing down all the CVS vs SVN vs Git differences has the potential to be nearly endless...</p>",
        "id": 228699034,
        "sender_full_name": "starseeker",
        "timestamp": 1614820494
    },
    {
        "content": "<p>Yeah, I'm not worried about commit ordering.  The oddity was the multitude of seemingly unrelated branches.  Working on pulling that list still, had some diffs that had to get recomputed and worked on tallying where we're at.</p>",
        "id": 228727686,
        "sender_full_name": "Sean",
        "timestamp": 1614842245
    },
    {
        "content": "<p>My criteria has been to identify or explain all the non-empty trunk commits.  That all are tagged or otherwise accounted for correctly (i.e., with something matching or it's a split commit).  We're definitely closing that gap.</p>",
        "id": 228728121,
        "sender_full_name": "Sean",
        "timestamp": 1614842610
    },
    {
        "content": "<blockquote>\n<p>I can pull the rest... r30687 was just one example.  There are others like that.</p>\n</blockquote>\n<p>Here's the others that were like that:</p>",
        "id": 228730713,
        "sender_full_name": "Sean",
        "timestamp": 1614844503
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>30687 NOT FOUND (empty files) (TAGGED MISMATCH 004ec0ae439f0ca3c814d22a46957012cd8fb239 720f9b9b75588e35d3cce0f9f5b802abea2259ab f206b315ca475d3a3e55e98ec42d772c6b05baee cbff64617866cc3fc2b25db15cd610e651561958 87bc784daf7f15cc8d9c9fa980a934a98a17de95 d748c2ea214b699008563e18f5a7105de39faba9 )\n30688 NOT FOUND (empty files) (TAGGED MISMATCH 3882bb89a329277499b8b6c2246be115544740a0 68aeb784b3ee698c854878c190eb4b229b88e1fe )\n30690 NOT FOUND (empty files) (TAGGED MISMATCH bab9cb74c7cf403e3c6ffb862367e7e921d5de5e 1f1d7a7f607d5b4c673d1d73cc7bcb126b0da82b ebaea28c7f234f5af88bbe8f60e8cae1026d7f08 9a4972e8d397e2fe1457987252531bbb08aae2b5 2000a7fd53ba7f017eadb55168ed737a0e6d2906 47ca01661701d59ee6aa948cd914b42e9ae9e36e )\n36471 NOT FOUND (empty files) (TAGGED MISMATCH 5d5a16ac1af3bef7ea3acd9df913a882ecb2c450 cf54441bbb9da781638c782f0330e2399b114ba2 f3402be29c09993717319df0a8045087c3c1efcc 29fb00141b4040de08c9319404bfe44946ef43f2 2c43fbad65f4bc373dfa80a6254077b5913623d0 e19308e9b43771204ad04daa015bb646ffda7077 )\n36472 LOG+FILE MATCH ON 96a3e5fb75628744e4835d9ce2f7cbf8dbca8ec4 (TAGGED MISMATCH 96a3e5fb75628744e4835d9ce2f7cbf8dbca8ec4 c0737a9252506872ce5ce6cd14207f7c375741da )\n46324 NOT FOUND (empty files) (TAGGED MISMATCH 44e3d7341c5680250d65091b2aff6ed051720a11 a988903bbe27985e0dd94228e07079e91e98be4d c54b9b07158d4a904aabddae264290854ecb250c 03af105da8dd3cf85a29cc7f056513cc8e79d751 )\n46322 NOT FOUND (empty files) (TAGGED MISMATCH e56ca9ed3e746b0f0531a5a90a50706dc4486786 cbd805930e92e0174548d245eee8a50f79f4be6a 8db928ed630bba609e98e97045dc91377539353e f64cf35a3a10e027863a68a07f6d4dda041d0fb4 3e54caeb944540d809a8c123289f9fb3624b7509 f199b69dd1f620bfa299a9e8fd520c37cc9b3c26 33b42ffbd7c4aa5e42e5854d020a8d66dd69ccfc a6225b252463bcb48ce3376200227c1e783c77d5 )\n46328 NOT FOUND (empty files) (TAGGED MISMATCH ccb829355adc0829b9a5a7a3f0b5ac72dc13ea45 a442ff82f39e00b14ef139fb8f62b18c0ec32046 e4fba5a7cdbc525184d64170eec22e7eeedbd1f2 4396a0b1cd513d4ce9945589c4aadb17eda9a6d0 5452bab5c382ff6f2d0af42c2d4b367a0fdc13aa 9884b41b3aa6f790c80dbb4a55cf5cea4844fc8b 46d4a300710516c5547fa1b6f64ba29ec64ab3b4 )\n46335 NOT FOUND (empty files) (TAGGED MISMATCH dd2bb79965568f5aab4f7458606d875d22b74b40 f5e6fc5ebfaaedceb7538a1f2ba1a3fc1589c399 )\n62127 LOG+FILE MATCH ON 797d0138514136e2e95b0dfa1cc7d2e774fef2ab (TAGGED MISMATCH bae6fd511505e5e4f12f16b1cd73b5381f4f47f6 797d0138514136e2e95b0dfa1cc7d2e774fef2ab )\n62975 NOT FOUND (empty files) (TAGGED MISMATCH dbaf54ff6b25ad2f576f82f26086101bc5015dec e047bc1116cc3199bbdbf58101ef281c153c2b74 )\n69921 NOT FOUND (TAGGED MISMATCH cca216f058fe5791dbbd082ad7293911b6aae9f6 f828d1c0b1f6e68879a1bdecb2c58d1dc9a9207b )\n</code></pre></div>",
        "id": 228730740,
        "sender_full_name": "Sean",
        "timestamp": 1614844521
    },
    {
        "content": "<p>can ignore the NOT FOUND / empty files -- that's just me not tracking branches.  What's interesting is those are revs tagged to multiple git commits.  Some of course may be intentional, but that's all of them (on conv12).</p>",
        "id": 228730950,
        "sender_full_name": "Sean",
        "timestamp": 1614844665
    },
    {
        "content": "<p>OK.  Going through the list...</p>",
        "id": 228779610,
        "sender_full_name": "starseeker",
        "timestamp": 1614867623
    },
    {
        "content": "<p>r30688 is on two commits because it eliminated both the branch with the Mac Hack commit and other \"unlabeled\" branches which mapped (collapsed) to \"master-UNNAMED-BRANCH\" in the cvs-fast-export conversion.  So master-UNNAMED-BRANCH has two branch delete commits assigned to it.  Might as well delete 68aeb784b3ee698c, since it doesn't add anything.</p>",
        "id": 228780037,
        "sender_full_name": "starseeker",
        "timestamp": 1614867763
    },
    {
        "content": "<p>r30690 is deliberate - multiple branches removed in a single commit.</p>",
        "id": 228780463,
        "sender_full_name": "starseeker",
        "timestamp": 1614867907
    },
    {
        "content": "<p>r36471 is deliberate - multiple branches removed single SVN commit</p>",
        "id": 228780845,
        "sender_full_name": "starseeker",
        "timestamp": 1614868045
    },
    {
        "content": "<p>r36472 is the result of a branch naming consolidation - c0737a92525 can be removed.</p>",
        "id": 228781323,
        "sender_full_name": "starseeker",
        "timestamp": 1614868215
    },
    {
        "content": "<p>r46324 is deliberate - multiple deletions single SVN commit</p>",
        "id": 228781468,
        "sender_full_name": "starseeker",
        "timestamp": 1614868268
    },
    {
        "content": "<p>ditto r46322 - multiple tag deletions, single SVN commit</p>",
        "id": 228781574,
        "sender_full_name": "starseeker",
        "timestamp": 1614868308
    },
    {
        "content": "<p>Same with r46328 - multiple tag deletions, single SVN commit</p>",
        "id": 228781716,
        "sender_full_name": "starseeker",
        "timestamp": 1614868348
    },
    {
        "content": "<p>Same with r46335 - deliberate</p>",
        "id": 228781796,
        "sender_full_name": "starseeker",
        "timestamp": 1614868379
    },
    {
        "content": "<p>r62127 looks like a branch delete that registered an empty commit on trunk for some reason - 797d0138514136e can be removed.</p>",
        "id": 228782395,
        "sender_full_name": "starseeker",
        "timestamp": 1614868562
    },
    {
        "content": "<p>r62975 is deliberate - multiple branch delete</p>",
        "id": 228782558,
        "sender_full_name": "starseeker",
        "timestamp": 1614868605
    },
    {
        "content": "<p>r69921 - looks like a branch rebase got recorded somehow as a branch delete plus re-creation - f828d1c0b1f6e68879a1bdecb2c58d1dc9a9207b can be removed.</p>",
        "id": 228783231,
        "sender_full_name": "starseeker",
        "timestamp": 1614868841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Note that I went and manually tagged a lot of Git commits as mapping to multiple SVN revisions in the post-conv12 update logic...</p>",
        "id": 228784307,
        "sender_full_name": "starseeker",
        "timestamp": 1614869256
    },
    {
        "content": "<p>I did notice that... it \"should\" just mean a lot more multiple matches no?  If so, I think we can just do a post-process check later to make sure there wasn't a typo or other blatant mistake in the manual tagging, but shouldn't affect the upload V&amp;V.</p>",
        "id": 228798517,
        "sender_full_name": "Sean",
        "timestamp": 1614873722
    },
    {
        "content": "<p>Yes, more multiple matches from the CVS era commits.</p>",
        "id": 228799313,
        "sender_full_name": "starseeker",
        "timestamp": 1614873945
    },
    {
        "content": "<p>I wasn't sure how \"deep\" you wanted to go checking those manual tags - the majority are based on context (unmapped commit that is immediately before a mapped commit, with a file missing from the \"mapped\" commit compared to the SVN file list) but I'm not set up to actually try and validate all the diffs as being part of the SVN commits.</p>",
        "id": 228799602,
        "sender_full_name": "starseeker",
        "timestamp": 1614874036
    },
    {
        "content": "<p>It may not be possible in all cases anyway, if one git commit ended up getting deltas from two SVN commits - in that case the best that can be done is an \"approximate\" assignment.</p>",
        "id": 228799864,
        "sender_full_name": "starseeker",
        "timestamp": 1614874120
    },
    {
        "content": "<p>ankle deep, just blatant sanity check to make sure they are deliberate or mistakes since they were outliers.</p>",
        "id": 228800439,
        "sender_full_name": "Sean",
        "timestamp": 1614874293
    },
    {
        "content": "<p>Okay, <span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> here's a batch for you to check out, myriad issues.  These are all the commits that do not map uniquely.  Most are probably correct as-is and simply aren't unique because they were a common log message applied to the same files or similar or were branch commits (keep in mind that I'm ignoring branch-only diff data so they show up as \"not found\"), BUT the rest are all multiple candidate diffs.  Could be entirely benign or correct, but could use your eyes on at least some of them. <br>\n<a href=\"/user_uploads/1549/t1LkuHE6gE-MzewQNkWV6pWL/svn.to.git5.multiple_matches.sorted\">svn.to.git5.multiple_matches.sorted</a></p>",
        "id": 228901372,
        "sender_full_name": "Sean",
        "timestamp": 1614923146
    },
    {
        "content": "<p>Here's one you may have already captured with changes you made a couple days ago, but here are all the commits that match svn revs in LOG+FILES+DIFF, but aren't tagged revs in git (or at least weren't as of brlcad_conv12).  That's not to say that they should be all mapped -- it's entirely possible for a commit to have gotten split and just happens to map to another with the same files and log message.  I'm not sure how to rule that out, but maybe you can verify them easily.   There's 167 in this category:<br>\n<a href=\"/user_uploads/1549/Rs_Bfi_JUDGGlq0NV7WNegSc/svn.to.git5.matching_not_tagged\">svn.to.git5.matching_not_tagged</a></p>",
        "id": 228902401,
        "sender_full_name": "Sean",
        "timestamp": 1614924120
    },
    {
        "content": "<p>Feel like these two might be swapped:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>+9016 LOG+FILE+DIFF MATCH ON 24c9f6ebb84eba2bb53211c3012b7dfb68672a2b (TAGGED MISMATCH 68b56645d7a689a3af445bb5dfef16c78a4a4270)\n+9015 LOG+FILE+DIFF MATCH ON 68b56645d7a689a3af445bb5dfef16c78a4a4270 (TAGGED MISMATCH 24c9f6ebb84eba2bb53211c3012b7dfb68672a2b)\n</code></pre></div>",
        "id": 228903089,
        "sender_full_name": "Sean",
        "timestamp": 1614924723
    },
    {
        "content": "<p>or they're splits because of cvs screwery and they're right because of other adjacent commits?</p>",
        "id": 228903160,
        "sender_full_name": "Sean",
        "timestamp": 1614924769
    },
    {
        "content": "<p>another set similar to matching_not_tagged is this batch that aren't/weren't in git but match a log+file pairing, possible candidates.  Note some are non-unique.<br>\n<a href=\"/user_uploads/1549/cjiBeIUFvpp-M6uIlygvZ9B5/svn.to.git5.matching_lf_not_tagged\">svn.to.git5.matching_lf_not_tagged</a></p>",
        "id": 228904399,
        "sender_full_name": "Sean",
        "timestamp": 1614925842
    },
    {
        "content": "<p>here's a much smaller but similar set of untagged commits where a matching log file was found, possible candidates for manual tagging.  affects 37 commits:<br>\n<a href=\"/user_uploads/1549/SrlYSgQtvgq-HY3QiYb6o2ls/svn.to.git5.matching_l_not_tagged\">svn.to.git5.matching_l_not_tagged</a></p>",
        "id": 228905558,
        "sender_full_name": "Sean",
        "timestamp": 1614926872
    },
    {
        "content": "<p>In theory, I think those 5 data sets reconciled fully should nearly result in full coverage...  the only ones missing should be ambiguous cases.  I'll can run a final trunk pass on any changes you make (conv16?) and we can see if there are any left!  This might be it.</p>",
        "id": 228908677,
        "sender_full_name": "Sean",
        "timestamp": 1614929439
    },
    {
        "content": "<p>Kind of exciting!</p>",
        "id": 228908693,
        "sender_full_name": "Sean",
        "timestamp": 1614929454
    },
    {
        "content": "<p>Here's where they tallies stand:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code> 78233 total unique commits\n-10544 PERFECT MATCH\n- 9356 NOT FOUND (branch changes)\n-  939 EMPTY (prop changes)\n-50807 LOG+FILE+DIFF (matching)\n       167 LOG+FILE+DIFF MATCH but not tagged (all UNIQUE)\n       141 MISMATCH or duplicated candidates\n- 5001 LOG+FILE (matching)\n       38 LOG+FILE MATCH but not tagged (13 UNIQUE)\n       776 MISMATCH or duplicated candidates\n-  180 LOG+DIFF (matching)\n-   29 FILE+DIFF (matching)\n-   30 DIFF (matching)\n-    0 FILE (matching)\n- 1117 LOG (matching)\n       90 MATCH but not tagged (all UNIQUE)\n       350 MISMATCH or duplicated candidates\n------\n   229 unaccounted for in mismatches not tagged\n  - 90 LOG not tagged\n  - 13 LOG+FILE not tagged\n  -167 LOG+FILE+DIFF not tagged\n------\n   -41 dupes not excluded properly (oops)\n</code></pre></div>",
        "id": 228908853,
        "sender_full_name": "Sean",
        "timestamp": 1614929573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/228903089\">said</a>:</p>\n<blockquote>\n<p>Feel like these two might be swapped:</p>\n<p><div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>+9016 LOG+FILE+DIFF MATCH ON 24c9f6ebb84eba2bb53211c3012b7dfb68672a2b (TAGGED MISMATCH 68b56645d7a689a3af445bb5dfef16c78a4a4270)\n+9015 LOG+FILE+DIFF MATCH ON 68b56645d7a689a3af445bb5dfef16c78a4a4270 (TAGGED MISMATCH 24c9f6ebb84eba2bb53211c3012b7dfb68672a2b)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Looks like they are swapped based on the diffs, yes.</p>",
        "id": 228961936,
        "sender_full_name": "starseeker",
        "timestamp": 1614954469
    },
    {
        "content": "<p>Going through the multiple_matches file, it's looking like the SVN era commits are mostly \"checkpoint\" or similarly ambiguous commit messages on similar file sets (which is what I would expect for the SVN era - given how the commits were generated for that portion of the history I'm not sure how we'd get an SVN revision number mis-assignment, since the commits were generated on a per-SVN commit basis to begin with...)</p>",
        "id": 228963000,
        "sender_full_name": "starseeker",
        "timestamp": 1614954878
    },
    {
        "content": "<p>r62027 and r62708 are a bit more interesting - they are branch creation and deletion commits that represent me adding and deleting a branch in the wrong place.  They are candidates for removal, unless you want to keep them to preserve the history of what happened at those particular SVN commits.</p>",
        "id": 228964549,
        "sender_full_name": "starseeker",
        "timestamp": 1614955480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I've scanned the logs for the SVN era multiple_matches commits, and r62027 is the only one that jumped out - the rest appear to be either checkpoints, branch syncs, throwaway test commits, or applying identical changes to different branches.</p>",
        "id": 228967375,
        "sender_full_name": "starseeker",
        "timestamp": 1614956501
    },
    {
        "content": "<p>or a few that are different changes to the same file with the same commit message.</p>",
        "id": 228967512,
        "sender_full_name": "starseeker",
        "timestamp": 1614956541
    },
    {
        "content": "<p>One I'm not following - how come da4ace8194f81d0f92565b428dfa309143b37914 and  ae970a06e7d02f63e7c77ff927af5ca90721a111 are getting flagged as 75110 match?</p>",
        "id": 228968054,
        "sender_full_name": "starseeker",
        "timestamp": 1614956737
    },
    {
        "content": "<p>I see they're \"rename\" commit message commits, but I'm not seeing any file matching...</p>",
        "id": 228968332,
        "sender_full_name": "starseeker",
        "timestamp": 1614956843
    },
    {
        "content": "<p>r799 is an example where the commit groupings ended up different - match.c isn't in SVN 799, but the vdeck.c changes in that commit do appear to align with the r799 changes.</p>",
        "id": 228972171,
        "sender_full_name": "starseeker",
        "timestamp": 1614958247
    },
    {
        "content": "<p>I'm trying to go through the CVS era a bit more carefully, but so far none of the multiple_matches seem to indicate mis-mapped files.  A couple untagged commits that matched entries on my list, and one minor correction to a git rev assignment.</p>",
        "id": 228978419,
        "sender_full_name": "starseeker",
        "timestamp": 1614960641
    },
    {
        "content": "<p>The matching_not_tagged I confirmed as being part of svn_rev_updates.txt, and the lf_not_tagged  had a few that appear to be valid matches as well (some aren't).   I think I've accounted for the l_not_tagged commits as well.</p>",
        "id": 228981750,
        "sender_full_name": "starseeker",
        "timestamp": 1614961709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> It will take me a bit more time to manually confirm that none of the \"TAGGED MISMATCH\" cvs era git commits are actually incorrectly identified, but I'm hopeful they're good.  I've uploaded the current state at <a href=\"https://github.com/starseeker/brlcad_conv17\">https://github.com/starseeker/brlcad_conv17</a> - if neither of us finds anything else, I'll do a final update from SVN and we'll be ready to roll.</p>\n<p>(The most likely source of any remaining issues is if you spot something in my manually assigned commits - they're more extensive than the ones from the svn.to.git lists, since I was making a stab at mapping all the commits I could back to SVN.)</p>",
        "id": 228984838,
        "sender_full_name": "starseeker",
        "timestamp": 1614962745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/228964549\">said</a>:</p>\n<blockquote>\n<p>r62027 and r62708 are a bit more interesting - they are branch creation and deletion commits that represent me adding and deleting a branch in the wrong place.  They are candidates for removal, unless you want to keep them to preserve the history of what happened at those particular SVN commits.</p>\n</blockquote>\n<p>I can go either way.  I would probably preserve, but not a big deal either way.</p>",
        "id": 229024917,
        "sender_full_name": "Sean",
        "timestamp": 1614978438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/228968054\">said</a>:</p>\n<blockquote>\n<p>One I'm not following - how come da4ace8194f81d0f92565b428dfa309143b37914 and  ae970a06e7d02f63e7c77ff927af5ca90721a111 are getting flagged as 75110 match?</p>\n</blockquote>\n<p>False positive, can ignore them.  They're an artifact of how branches were handled from svn.  They have empty file lists, so it erroneously thinks it has a better match than it really does.   I didn't get around to detecting and handling that case differently.  If you come across a rev that is branch activity, you can just skip it.</p>",
        "id": 229026955,
        "sender_full_name": "Sean",
        "timestamp": 1614979333
    },
    {
        "content": "<p>So.... based on an assumption that svn_rev_updates.txt is correct enough, we're done to just 48 to resolve...HOME STRETCH!<br>\n...</p>",
        "id": 229034337,
        "sender_full_name": "Sean",
        "timestamp": 1614982824
    },
    {
        "content": "<p>and now down to 8!</p>",
        "id": 229034409,
        "sender_full_name": "Sean",
        "timestamp": 1614982863
    },
    {
        "content": "<p>and now 0.</p>",
        "id": 229036938,
        "sender_full_name": "Sean",
        "timestamp": 1614984221
    },
    {
        "content": "<p>O.o</p>",
        "id": 229037049,
        "sender_full_name": "starseeker",
        "timestamp": 1614984266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> Is it possible to tag a merged commit with two revs?</p>",
        "id": 229037063,
        "sender_full_name": "Sean",
        "timestamp": 1614984273
    },
    {
        "content": "<p>Maybe... if we replace the commit with a new commit having a custom message.  A bit tricky, but doable if it's only one or two</p>",
        "id": 229037150,
        "sender_full_name": "starseeker",
        "timestamp": 1614984330
    },
    {
        "content": "<p>there are a handful of svn_rev_updates.txt that didn't apply because the commit was already tagged as something else</p>",
        "id": 229037154,
        "sender_full_name": "Sean",
        "timestamp": 1614984331
    },
    {
        "content": "<p>when I looked, it's because it's both</p>",
        "id": 229037172,
        "sender_full_name": "Sean",
        "timestamp": 1614984347
    },
    {
        "content": "<p>Hmm.  How many?</p>",
        "id": 229037255,
        "sender_full_name": "starseeker",
        "timestamp": 1614984377
    },
    {
        "content": "<p>I don't know, can run a script to find out -- but basically it's all the entries in svn_rev_updates that are on a commit that has something else</p>",
        "id": 229037462,
        "sender_full_name": "Sean",
        "timestamp": 1614984486
    },
    {
        "content": "<p>example f9fd3ad956d23e854df73294083cb37ef3c2f341</p>",
        "id": 229037468,
        "sender_full_name": "Sean",
        "timestamp": 1614984491
    },
    {
        "content": "<p>that's 9011 and 9012 iirc</p>",
        "id": 229037499,
        "sender_full_name": "Sean",
        "timestamp": 1614984511
    },
    {
        "content": "<p>Oh, OK - we're talking CVS era commits.  Yeah, I'm not surprised.</p>",
        "id": 229037563,
        "sender_full_name": "starseeker",
        "timestamp": 1614984548
    },
    {
        "content": "<p>yeah, oldest I found was r14320 which is in 76e74e9e9ce955bf6602171e67cbcd9539bfbec9</p>",
        "id": 229037616,
        "sender_full_name": "Sean",
        "timestamp": 1614984596
    },
    {
        "content": "<p>My original thought was that as long as we had one rev number assigned in the right general range, that would provide timeline and history context.  Is it worth trying to tease out the multiple commit mappings?</p>",
        "id": 229037671,
        "sender_full_name": "starseeker",
        "timestamp": 1614984607
    },
    {
        "content": "<p>Seeing as they won't be 1-1 regardless in that case...</p>",
        "id": 229037719,
        "sender_full_name": "starseeker",
        "timestamp": 1614984635
    },
    {
        "content": "<p>nah, I think it's fine -- just didn't know if it was possible/easy</p>",
        "id": 229037727,
        "sender_full_name": "Sean",
        "timestamp": 1614984640
    },
    {
        "content": "<p>let me do a quick check to see if we're talking about a few dozen or hundreds</p>",
        "id": 229037762,
        "sender_full_name": "Sean",
        "timestamp": 1614984666
    },
    {
        "content": "<p>Not trivially - to really do that \"Right\" I would have had to generate independent per-file diffs for all the git and SVN revisions, then find all the corresponding changes and do all the multi-mappings.</p>",
        "id": 229037812,
        "sender_full_name": "starseeker",
        "timestamp": 1614984704
    },
    {
        "content": "<p>If it's just a couple we can fake it by doing hand-assembled replacement commits, but anything more intensive would be really tough.</p>",
        "id": 229037911,
        "sender_full_name": "starseeker",
        "timestamp": 1614984742
    },
    {
        "content": "<p>Need to leave something for the next generation of historians to figure out ;-)</p>",
        "id": 229037970,
        "sender_full_name": "starseeker",
        "timestamp": 1614984790
    },
    {
        "content": "<p>I'm not looking to find them beyond what's already in svn_rev_mappings.txt ... there's some unknown number of them in there already</p>",
        "id": 229037989,
        "sender_full_name": "Sean",
        "timestamp": 1614984813
    },
    {
        "content": "<p>In hunting down the last few trunk commits missing, it turned out they were in the mappings file identified</p>",
        "id": 229038066,
        "sender_full_name": "Sean",
        "timestamp": 1614984846
    },
    {
        "content": "<p>Ah.</p>",
        "id": 229038105,
        "sender_full_name": "starseeker",
        "timestamp": 1614984866
    },
    {
        "content": "<p>they just weren't tagged because that commit got tagged again as something else</p>",
        "id": 229038108,
        "sender_full_name": "Sean",
        "timestamp": 1614984870
    },
    {
        "content": "<p>only writing out the latter</p>",
        "id": 229038121,
        "sender_full_name": "Sean",
        "timestamp": 1614984877
    },
    {
        "content": "<p>Whoops.  I thought I had checked for those - must have re-introduced a couple.  Hang on - awk + sort + uniq to the rescue...</p>",
        "id": 229038191,
        "sender_full_name": "starseeker",
        "timestamp": 1614984921
    },
    {
        "content": "<p>/me blinks - all the sha1 keys in svn_rev_updates.txt appear to only be in there once...</p>",
        "id": 229038364,
        "sender_full_name": "starseeker",
        "timestamp": 1614985030
    },
    {
        "content": "<p>Must have happened earlier in the process.</p>",
        "id": 229038631,
        "sender_full_name": "starseeker",
        "timestamp": 1614985202
    },
    {
        "content": "<p>If we need to do it for the missing ones, as long as it's not too many, I can do what I did for the \"Mac Hack\" commit to fix its data and make replacement commits to apply.</p>",
        "id": 229038789,
        "sender_full_name": "starseeker",
        "timestamp": 1614985257
    },
    {
        "content": "<p>it's not that there listed more than once</p>",
        "id": 229038900,
        "sender_full_name": "Sean",
        "timestamp": 1614985315
    },
    {
        "content": "<p>it's that whatever processing association that normally happens happened (or it's because i'm on 12 and if I were testing 17 then I wouldn't find 9011 instead of 9012 and vice versa</p>",
        "id": 229039038,
        "sender_full_name": "Sean",
        "timestamp": 1614985381
    },
    {
        "content": "<p>/me nods - I get it, and we actually want both so we don't have missing svn rev mappings.</p>",
        "id": 229039136,
        "sender_full_name": "starseeker",
        "timestamp": 1614985425
    },
    {
        "content": "<p>or we ignore it because it's just 3-4 of them</p>",
        "id": 229039204,
        "sender_full_name": "Sean",
        "timestamp": 1614985448
    },
    {
        "content": "<p>i.e. something for grep to match for both 9011 and 9012, even if it goes to the same commit.</p>",
        "id": 229039216,
        "sender_full_name": "starseeker",
        "timestamp": 1614985453
    },
    {
        "content": "<p>or edit the log message at the last minute</p>",
        "id": 229039228,
        "sender_full_name": "Sean",
        "timestamp": 1614985460
    },
    {
        "content": "<p>If it's just 3-4 I can deal with it pretty quickly (knock on wood)</p>",
        "id": 229039261,
        "sender_full_name": "starseeker",
        "timestamp": 1614985487
    },
    {
        "content": "<p>I'm running a check now</p>",
        "id": 229039264,
        "sender_full_name": "Sean",
        "timestamp": 1614985489
    },
    {
        "content": "<p>If it's a dozen or more I'd be more inclined to punt</p>",
        "id": 229039290,
        "sender_full_name": "starseeker",
        "timestamp": 1614985505
    },
    {
        "content": "<p>looks like 859 and 858 is the first it found</p>",
        "id": 229039315,
        "sender_full_name": "Sean",
        "timestamp": 1614985511
    },
    {
        "content": "<p>/me goes fishing...</p>",
        "id": 229039357,
        "sender_full_name": "starseeker",
        "timestamp": 1614985537
    },
    {
        "content": "<p>it's up to 1500 so I suspect it'll take it 10min to get through them all</p>",
        "id": 229039358,
        "sender_full_name": "Sean",
        "timestamp": 1614985539
    },
    {
        "content": "<p>You said the highest one was in the 14k range?</p>",
        "id": 229039394,
        "sender_full_name": "starseeker",
        "timestamp": 1614985560
    },
    {
        "content": "<p>well just that I ran into looking for missing trunks, but that won't have all the assignments you did</p>",
        "id": 229039489,
        "sender_full_name": "Sean",
        "timestamp": 1614985597
    },
    {
        "content": "<p>I'd have to check 17 for that</p>",
        "id": 229039503,
        "sender_full_name": "Sean",
        "timestamp": 1614985604
    },
    {
        "content": "<p>Ah, right.</p>",
        "id": 229039514,
        "sender_full_name": "starseeker",
        "timestamp": 1614985612
    },
    {
        "content": "<p>/me tries test with 858...</p>",
        "id": 229039564,
        "sender_full_name": "starseeker",
        "timestamp": 1614985637
    },
    {
        "content": "<p>I think this scan over svn_rev_mappings will be a good enough check... if they're really rare, then we can just punt</p>",
        "id": 229039578,
        "sender_full_name": "Sean",
        "timestamp": 1614985648
    },
    {
        "content": "<p>or can amend the log and let the shas shift prior to upload</p>",
        "id": 229039602,
        "sender_full_name": "Sean",
        "timestamp": 1614985671
    },
    {
        "content": "<p>so far it's only found 4 and it's up to 10k</p>",
        "id": 229039832,
        "sender_full_name": "Sean",
        "timestamp": 1614985762
    },
    {
        "content": "<p>Here's the list:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>MISMATCH on 859 and 858 in c7da20384024574fddc07c59dcdfcc2879560e31\nMISMATCH on 9011 and 9012 in f9fd3ad956d23e854df73294083cb37ef3c2f341\nMISMATCH on 11406 and 11407 in eb0179c08aefd8ea90697c42eba31244e4904eed\nMISMATCH on 12424 and 12425 in fc9e5a26cba18a926c644a4e2bb4b321855f2a88\nMISMATCH on 14320 and 14321 in 76e74e9e9ce955bf6602171e67cbcd9539bfbec9\nMISMATCH on 18892 and 18993 in 67c46ada661fdab789632885c34bf77a277962db\nMISMATCH on 21564 and 21565 in 11077485329842c81213eab68006fe5d58b5925f\nMISMATCH on 22525 and 22521 in edf3df35c8c44492fa25cb3999788338b1f2570b\nMISMATCH on 19756 and 19757 in a7c85f280677d70b8eef9aadf79302736ed26ffc\nMISMATCH on 19758 and 19759 in f5a1b0037fec2927cba073d118db24cdbd681975\nMISMATCH on 19760 and 19761 in a098425430db227021617976961e6b51ce5569cb\nMISMATCH on 19762 and 19763 in e6417be98f27d570d863744f566f5aaf738abbe6\n</code></pre></div>",
        "id": 229040228,
        "sender_full_name": "Sean",
        "timestamp": 1614985957
    },
    {
        "content": "<p>9015 and 9016 look suspicious...</p>",
        "id": 229040289,
        "sender_full_name": "Sean",
        "timestamp": 1614985992
    },
    {
        "content": "<p>Weren't those the ones you though were flipped earlier?</p>",
        "id": 229040326,
        "sender_full_name": "starseeker",
        "timestamp": 1614986012
    },
    {
        "content": "<p>I think I looked and concurred...</p>",
        "id": 229040340,
        "sender_full_name": "starseeker",
        "timestamp": 1614986025
    },
    {
        "content": "<p>yes, they were.  okay, so probably showing up just because I'm comparing then to conv12</p>",
        "id": 229040449,
        "sender_full_name": "Sean",
        "timestamp": 1614986072
    },
    {
        "content": "<p>OK, that's not too bad - my 858 test seems to be going smoothly, so I can probably get the others.</p>",
        "id": 229040532,
        "sender_full_name": "starseeker",
        "timestamp": 1614986111
    },
    {
        "content": "<p>Any other TODOs before switch flipping?</p>",
        "id": 229040581,
        "sender_full_name": "starseeker",
        "timestamp": 1614986135
    },
    {
        "content": "<p>were you still sorting through the other potential branch taggings or done with them?</p>",
        "id": 229040673,
        "sender_full_name": "Sean",
        "timestamp": 1614986172
    },
    {
        "content": "<p>You mean the multiple_matches file?</p>",
        "id": 229040729,
        "sender_full_name": "starseeker",
        "timestamp": 1614986209
    },
    {
        "content": "<p>well that one, but more importantly the three not_tagged files to see which if any don't have a tagging</p>",
        "id": 229040788,
        "sender_full_name": "Sean",
        "timestamp": 1614986248
    },
    {
        "content": "<p>since those were content-based lookups, some were unique untagged matches</p>",
        "id": 229040868,
        "sender_full_name": "Sean",
        "timestamp": 1614986287
    },
    {
        "content": "<p>I think I checked the non-tagged and all of those commits were listed in svn_rev_updates.txt</p>",
        "id": 229040881,
        "sender_full_name": "starseeker",
        "timestamp": 1614986294
    },
    {
        "content": "<p>multiple_matches has a pretty high false-positive rate - I'm basically checking the TAGGED MISMATCH commits against the trunk diff visually to make sure they look like they're correctly lined up.  LOG+FILE is apparently not a terribly unique key in the revision set (mostly my fault, too, from what I've seen so far...  I should go back in time and tell myself to use more unique commit messages.)</p>",
        "id": 229041123,
        "sender_full_name": "starseeker",
        "timestamp": 1614986417
    },
    {
        "content": "<p>yep</p>",
        "id": 229041157,
        "sender_full_name": "Sean",
        "timestamp": 1614986439
    },
    {
        "content": "<p>the thing about multiple matches is those are revs for tags that were not tagged in conv12</p>",
        "id": 229041244,
        "sender_full_name": "Sean",
        "timestamp": 1614986475
    },
    {
        "content": "<p>you mean sha1 keys that didn't have a matching SVN rev?</p>",
        "id": 229041346,
        "sender_full_name": "starseeker",
        "timestamp": 1614986532
    },
    {
        "content": "<p>probably would make sense to only check the multiple_match revs to see which if any are NOT listed in svn_rev_mappings , since they're potential new info</p>",
        "id": 229041394,
        "sender_full_name": "Sean",
        "timestamp": 1614986572
    },
    {
        "content": "<p>svn revs that aren't referenced in the git log</p>",
        "id": 229041562,
        "sender_full_name": "Sean",
        "timestamp": 1614986668
    },
    {
        "content": "<p>it should be exclusively branch commits since I half ignored them</p>",
        "id": 229041610,
        "sender_full_name": "Sean",
        "timestamp": 1614986712
    },
    {
        "content": "<p>no worries, it was just a thought.. I think it's good to go</p>",
        "id": 229041641,
        "sender_full_name": "Sean",
        "timestamp": 1614986734
    },
    {
        "content": "<p>Did you want me to do the multi-svn labeling?  That'll probably take about an hour</p>",
        "id": 229041721,
        "sender_full_name": "starseeker",
        "timestamp": 1614986771
    },
    {
        "content": "<p>would it be faster to just edit the commit?</p>",
        "id": 229041759,
        "sender_full_name": "Sean",
        "timestamp": 1614986813
    },
    {
        "content": "<p>Maybe, but I'd have to figure out how to do that...</p>",
        "id": 229041796,
        "sender_full_name": "starseeker",
        "timestamp": 1614986853
    },
    {
        "content": "<p>I mean just edit the log message<br>\ngit --amend or whatever it is</p>",
        "id": 229041817,
        "sender_full_name": "Sean",
        "timestamp": 1614986878
    },
    {
        "content": "<p>Um.  Let me try that once...</p>",
        "id": 229041878,
        "sender_full_name": "starseeker",
        "timestamp": 1614986892
    },
    {
        "content": "<p>I think it's actually \"git rebase\" for older commit messages.</p>",
        "id": 229041978,
        "sender_full_name": "starseeker",
        "timestamp": 1614986974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> 22521 and 22525 should both still be there after svn_rev_update - 22521 was moved to afd806bf472d0ac4b2685be406966a5a6eb28e5c</p>",
        "id": 229043866,
        "sender_full_name": "starseeker",
        "timestamp": 1614988172
    },
    {
        "content": "<p>Ah, I'm supposed to be correcting 18992, not 18892 - that's why</p>",
        "id": 229047507,
        "sender_full_name": "starseeker",
        "timestamp": 1614990531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> OK, re-running - I'll upload to brlcad_conv18 once it's done.</p>",
        "id": 229047559,
        "sender_full_name": "starseeker",
        "timestamp": 1614990561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  ec2350e47ab0a7a6a2e4f798aaf3a348775077ef is tagged as both 2103 and 2185</p>",
        "id": 229049503,
        "sender_full_name": "starseeker",
        "timestamp": 1614992059
    },
    {
        "content": "<p>Ah, I see - 2103 is right</p>",
        "id": 229049663,
        "sender_full_name": "starseeker",
        "timestamp": 1614992202
    },
    {
        "content": "<p><a href=\"https://github.com/starseeker/brlcad_conv18\">https://github.com/starseeker/brlcad_conv18</a></p>",
        "id": 229051420,
        "sender_full_name": "starseeker",
        "timestamp": 1614993604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I think that's got everything.</p>",
        "id": 229051457,
        "sender_full_name": "starseeker",
        "timestamp": 1614993623
    },
    {
        "content": "<p>Cool, checking it now.</p>",
        "id": 229052692,
        "sender_full_name": "Sean",
        "timestamp": 1614994594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> How we looking?</p>",
        "id": 229099830,
        "sender_full_name": "starseeker",
        "timestamp": 1615038947
    },
    {
        "content": "<p>It's still chugging through it all; should know how it looks here in a bit.  Per the checklist, we're done with the repo itself if there are no problems on this final pass!  so exciting!</p>",
        "id": 229117381,
        "sender_full_name": "Sean",
        "timestamp": 1615054415
    },
    {
        "content": "<p>Then on to the dang trackers and such...</p>",
        "id": 229117391,
        "sender_full_name": "Sean",
        "timestamp": 1615054425
    },
    {
        "content": "<p>This is taking a little longer because I had to re-extract the diffs that ran last night.  I forgot to set diff.renameLimit on the new conv18 which caused slews of false differences.  The re-extraction is running.</p>",
        "id": 229117534,
        "sender_full_name": "Sean",
        "timestamp": 1615054557
    },
    {
        "content": "<p>I should probably figure out how to set that in my personal config, instead of having to set it every cloning.</p>",
        "id": 229117617,
        "sender_full_name": "Sean",
        "timestamp": 1615054624
    },
    {
        "content": "<p>I pulled all the latest SVN commits in - brlcad_conv18 should now be up-to-the-minute (i.e. r78389)</p>",
        "id": 229122941,
        "sender_full_name": "starseeker",
        "timestamp": 1615059392
    },
    {
        "content": "<p>Unless you see an issue or someone commits before validation completes, brlcad_conv18 should be ready to upload.</p>",
        "id": 229122985,
        "sender_full_name": "starseeker",
        "timestamp": 1615059448
    },
    {
        "content": "<p>I'm only checking through 78233 just so numbers can be compared with 12, but sounds good!</p>",
        "id": 229126606,
        "sender_full_name": "Sean",
        "timestamp": 1615062616
    },
    {
        "content": "<p>You had indicated you wanted to do the final upload to the BRL-CAD github site - after setting the origin, this is what I use to push to upload everything:</p>\n<p><code>git push --all -u origin &amp;&amp; git push --follow-tags</code></p>",
        "id": 229137828,
        "sender_full_name": "starseeker",
        "timestamp": 1615072989
    },
    {
        "content": "<p>I'm not sure if a basic clone from github will get all the branches, so I'd recommend pulling a mirror clone:</p>\n<div class=\"codehilite\"><pre><span></span><code>git clone --mirror https://github.com/starseeker/brlcad_conv18.git\ncd brlcad_conv18.git\ngit remote set-url origin git@github.com:BRL-CAD/brlcad.git\n</code></pre></div>",
        "id": 229137963,
        "sender_full_name": "starseeker",
        "timestamp": 1615073157
    },
    {
        "content": "<p>I find myself using --git-dir a lot in scripts (cuz pwd is so passe)</p>",
        "id": 229143520,
        "sender_full_name": "Erik",
        "timestamp": 1615078846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> that's helpful, thanks!</p>",
        "id": 229192563,
        "sender_full_name": "starseeker",
        "timestamp": 1615128041
    },
    {
        "content": "<p>where is that documented?</p>",
        "id": 229192612,
        "sender_full_name": "starseeker",
        "timestamp": 1615128103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> did the updated run succeed?  (by the way, I think that limit can be set with:  <code>git config diff.renameLimit 999999 </code>)</p>",
        "id": 229193624,
        "sender_full_name": "starseeker",
        "timestamp": 1615129107
    },
    {
        "content": "<p><code>git config merge.renamelimit 999999</code> may also be relevant</p>",
        "id": 229193649,
        "sender_full_name": "starseeker",
        "timestamp": 1615129155
    },
    {
        "content": "<p>@starseeker: man page? :D a lot of cmds have similar (ninja -C, make -C, cmake -B &lt;dir&gt; -S &lt;dir&gt; ..)</p>",
        "id": 229194438,
        "sender_full_name": "Erik",
        "timestamp": 1615129872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> Oh, I see where I went wrong - it's a top level option supplied before the subcommands, so it's not in their --help statements.</p>",
        "id": 229198177,
        "sender_full_name": "starseeker",
        "timestamp": 1615133062
    },
    {
        "content": "<p>yeah, it's a strange beast, git args/cmds are applied in order with side effects.</p>",
        "id": 229198709,
        "sender_full_name": "Erik",
        "timestamp": 1615133527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/229193624\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> did the updated run succeed?  (by the way, I think that limit can be set with:  <code>git config diff.renameLimit 999999 </code>)</p>\n</blockquote>\n<p>That's what I set, and it's needed to get the right diffs/logs for our history.  The problem is that config is per cloning, so have to remember to do it every time.</p>",
        "id": 229307296,
        "sender_full_name": "Sean",
        "timestamp": 1615213845
    },
    {
        "content": "<p>Working on the upload, I think we're golden...</p>",
        "id": 229307369,
        "sender_full_name": "Sean",
        "timestamp": 1615213868
    },
    {
        "content": "<p>Few changes in the numbers I've been looking at, but nothing turning the train around.</p>",
        "id": 229307464,
        "sender_full_name": "Sean",
        "timestamp": 1615213901
    },
    {
        "content": "<p>Could use a test, but the svn repo \"should\" be read only now for everyone.</p>",
        "id": 229307805,
        "sender_full_name": "Sean",
        "timestamp": 1615214021
    },
    {
        "content": "<p>I'll poke it quick</p>",
        "id": 229307957,
        "sender_full_name": "starseeker",
        "timestamp": 1615214064
    },
    {
        "content": "<p>Bingo:</p>\n<div class=\"codehilite\"><pre><span></span><code>svn: E000013: Commit failed (details follow):\nsvn: E000013: Can&#39;t open file &#39;/svn/p/brlcad/code/db/txn-current-lock&#39;: Permission denied\n</code></pre></div>",
        "id": 229308242,
        "sender_full_name": "starseeker",
        "timestamp": 1615214185
    },
    {
        "content": "<p>Excellent.</p>",
        "id": 229308920,
        "sender_full_name": "Sean",
        "timestamp": 1615214451
    },
    {
        "content": "<p>The migration is almost complete then I guess</p>",
        "id": 229319160,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615218209
    },
    {
        "content": "<p>The migration is almost complete then I guess</p>",
        "id": 229319188,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615218226
    },
    {
        "content": "<p>Yes it is, <span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> ... coming super soon.  Just tallying some final stats.</p>",
        "id": 229319394,
        "sender_full_name": "Sean",
        "timestamp": 1615218288
    },
    {
        "content": "<p>Awesome.🤩🤩</p>",
        "id": 229319604,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615218358
    },
    {
        "content": "<p>One of the world's oldest continuously developed source code repository's migration should be complete later today... ;)</p>",
        "id": 229319678,
        "sender_full_name": "Sean",
        "timestamp": 1615218369
    },
    {
        "content": "<p><em>Noice</em></p>",
        "id": 229320041,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615218504
    },
    {
        "content": "<p>how many more hours will it take from now to see the repository on the github?</p>",
        "id": 229357897,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615231077
    },
    {
        "content": "<p>will it be up tomorrow morning (for me) as it is past 12 midnight?</p>",
        "id": 229358051,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615231130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> I'm hopeful, but I'm still trying to figure out something that changed.</p>",
        "id": 229376887,
        "sender_full_name": "Sean",
        "timestamp": 1615238783
    },
    {
        "content": "<p>Can I assist?</p>",
        "id": 229377681,
        "sender_full_name": "starseeker",
        "timestamp": 1615239093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I'll be back on a bit later - please post anything I can help with.  I'll be glad to re-run the final fixup pass again if necessary...</p>",
        "id": 229378734,
        "sender_full_name": "starseeker",
        "timestamp": 1615239561
    },
    {
        "content": "<p>I need to make sure it's not something I did differently.  I should know here in a bit.  I need to pull conv12 again to confirm.</p>",
        "id": 229379001,
        "sender_full_name": "Sean",
        "timestamp": 1615239690
    },
    {
        "content": "<p>Still might not be enough to stop the gravy train, but it was a surprise. I'm hoping I just fat-fingered something.</p>",
        "id": 229379127,
        "sender_full_name": "Sean",
        "timestamp": 1615239729
    },
    {
        "content": "<p>svn commit counts changed?</p>",
        "id": 229379634,
        "sender_full_name": "starseeker",
        "timestamp": 1615239963
    },
    {
        "content": "<p>numbers are off.  I don't want to speculate too much until I rule out a couple things.</p>",
        "id": 229380266,
        "sender_full_name": "Sean",
        "timestamp": 1615240234
    },
    {
        "content": "<p>K.  The good news is that as long as I don't need to do significant rework in the repowork C++, the post-brlcad_conv12 portion of the conversion runs pretty quickly.</p>",
        "id": 229380399,
        "sender_full_name": "starseeker",
        "timestamp": 1615240297
    },
    {
        "content": "<p>/me will be chewing off his fingernails elsewhere for a few hours...</p>",
        "id": 229380508,
        "sender_full_name": "starseeker",
        "timestamp": 1615240335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> How's it going?</p>",
        "id": 229521132,
        "sender_full_name": "starseeker",
        "timestamp": 1615312208
    },
    {
        "content": "<p>It is done.  <a href=\"https://github.com/BRL-CAD/brlcad\">https://github.com/BRL-CAD/brlcad</a></p>",
        "id": 229607574,
        "sender_full_name": "Sean",
        "timestamp": 1615355887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> Please check and let me know if you see any mistakes.</p>",
        "id": 229609181,
        "sender_full_name": "Sean",
        "timestamp": 1615357278
    },
    {
        "content": "<p>I was ultimately able to reconcile most of the big differences, many looked like branch commit improvements (e.g., looks like you categorically eliminated the \"initially added on branch\" commits, that was 118 of them).</p>",
        "id": 229609251,
        "sender_full_name": "Sean",
        "timestamp": 1615357325
    },
    {
        "content": "<p>Can I clone the repo right now or are you guys still checking if there's any issues?</p>",
        "id": 229618558,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615364018
    },
    {
        "content": "<p>Awesome - thank you <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> for grinding through it!</p>",
        "id": 229638315,
        "sender_full_name": "starseeker",
        "timestamp": 1615374312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> Give me a couple hours to check - this is almost certainly it, but I've got a couple things I need to do before I can focus properly on it.</p>",
        "id": 229638510,
        "sender_full_name": "starseeker",
        "timestamp": 1615374417
    },
    {
        "content": "<p>ohk</p>",
        "id": 229638544,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615374437
    },
    {
        "content": "<p>(starseeker can focus properly now? <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span> ) :D</p>",
        "id": 229643987,
        "sender_full_name": "Erik",
        "timestamp": 1615377388
    },
    {
        "content": "<p>&lt;snort&gt; Only on one thing at a time.  There are days when that's a significant handicap...</p>",
        "id": 229646379,
        "sender_full_name": "starseeker",
        "timestamp": 1615378493
    },
    {
        "content": "<p>OK, pull request and direct commit both worked, branches are present, tags are present, logs match, Contributors is populated.  Looks good!</p>",
        "id": 229649041,
        "sender_full_name": "starseeker",
        "timestamp": 1615379720
    },
    {
        "content": "<p>Looks like I should have made that a rebase for the pull request... generated a merge commit too.  Oh well.</p>",
        "id": 229649305,
        "sender_full_name": "starseeker",
        "timestamp": 1615379854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> Looks like it's good to go.</p>",
        "id": 229655570,
        "sender_full_name": "starseeker",
        "timestamp": 1615382302
    },
    {
        "content": "<p>I'm not as concerned about have a \"clean history\", let it be what it be. ;)</p>",
        "id": 229671762,
        "sender_full_name": "Sean",
        "timestamp": 1615387435
    },
    {
        "content": "<p>The thought that worried me is that checkout out (say) prior release tags will produce checkouts that won't build.</p>",
        "id": 229671951,
        "sender_full_name": "starseeker",
        "timestamp": 1615387485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> I hadn't looked at permissions yet, can do that today.  There's a lot to do.</p>",
        "id": 229671959,
        "sender_full_name": "Sean",
        "timestamp": 1615387487
    },
    {
        "content": "<p>Unfortunately, the fix requires a full (multi-week) re-run of the full process...</p>",
        "id": 229672065,
        "sender_full_name": "starseeker",
        "timestamp": 1615387518
    },
    {
        "content": "<p>what do you mean??</p>",
        "id": 229672100,
        "sender_full_name": "Sean",
        "timestamp": 1615387530
    },
    {
        "content": "<p>If we want (say) 7.30.0 to check out with tkhtml in a build-able state, I need to re-generate the history leaving the tkhtml RCS tags in place.  That's an adjustment to the filters, which means a full re-run.</p>",
        "id": 229672303,
        "sender_full_name": "starseeker",
        "timestamp": 1615387592
    },
    {
        "content": "<p>Hm, I'm still not following.  Why wouldn't a checkout of the rel-7-30-0 tag be any different than what it was?  Is it not right?  Or not right for src/other because of how history was spliced?</p>",
        "id": 229675771,
        "sender_full_name": "Sean",
        "timestamp": 1615388682
    },
    {
        "content": "<p>It's not right because I made a point of stripping out the RCS tags to make the git history following cleaner.  So, for example, </p>\n<div class=\"codehilite\"><pre><span></span><code>static const char rcsid[] = &quot;$Id: cssparser.c,v 1.8 2008/01/19 06:08:13 danielk1977 Exp $&quot;;\n</code></pre></div>\n<p>became</p>\n<div class=\"codehilite\"><pre><span></span><code>static const char rcsid[] = &quot;$Id$&quot;;\n</code></pre></div>\n<p>I exempted a few specific directories early on that were problematic (mostly the step related stuff) but tkhtml was one of the ones that got stripped.</p>",
        "id": 229676184,
        "sender_full_name": "starseeker",
        "timestamp": 1615388799
    },
    {
        "content": "<p>It never crossed my mind that those headers might be a compilation necessity, and apparently for all the scrutiny I put on the conversion (diffing, log messages, etc.) I never actually tried a full compile of the generated checkout.</p>",
        "id": 229676369,
        "sender_full_name": "starseeker",
        "timestamp": 1615388874
    },
    {
        "content": "<p>It looks like tkhtml does some cute trick where it generates a list of source files that go into a generated file, and the script that generates that source file is matching on those rcsid lines.</p>",
        "id": 229676842,
        "sender_full_name": "starseeker",
        "timestamp": 1615389019
    },
    {
        "content": "<p>Actually, I should probably confirm that they were originally populated in the raw SVN data - since SVN will do RCS keyword expansion, it's theoretically possible that they were stored unevaluated internally.  If that's the case, even exempting src/other/tkhtml won't fix it because Git doesn't populate RCS tags.</p>",
        "id": 229680810,
        "sender_full_name": "starseeker",
        "timestamp": 1615390133
    },
    {
        "content": "<p>I'm not sure what to do in that case, actually, short of using something like <a href=\"https://github.com/turon/git-rcs-keywords\">https://github.com/turon/git-rcs-keywords</a></p>",
        "id": 229681464,
        "sender_full_name": "starseeker",
        "timestamp": 1615390295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  It looks like git-rcs-keywords can populate the RCS tags.</p>",
        "id": 229689416,
        "sender_full_name": "starseeker",
        "timestamp": 1615392203
    },
    {
        "content": "<p>a force push to fix something like that would be pretty traumatic once this is \"the way\"</p>",
        "id": 229694537,
        "sender_full_name": "Erik",
        "timestamp": 1615393427
    },
    {
        "content": "<p>I know.  I think the answer is going to be git-rcs-keywords</p>",
        "id": 229695435,
        "sender_full_name": "starseeker",
        "timestamp": 1615393644
    },
    {
        "content": "<p>I'm testing now, and I think it can work.</p>",
        "id": 229695477,
        "sender_full_name": "starseeker",
        "timestamp": 1615393673
    },
    {
        "content": "<p>OK.  Got it.</p>",
        "id": 229699360,
        "sender_full_name": "starseeker",
        "timestamp": 1615394694
    },
    {
        "content": "<p>I'm working with the <a href=\"https://github.com/kimmormh/git-rcs-keywords\">https://github.com/kimmormh/git-rcs-keywords</a> fork - there may be a better way to go at it, but that's functional in testing.</p>",
        "id": 229699712,
        "sender_full_name": "starseeker",
        "timestamp": 1615394789
    },
    {
        "content": "<p>Here's how it works:</p>\n<p>Install the two scripts (rcs-keywords.clean and rcs-keywords.smudge) to /usr/local/share/git_filters</p>\n<p>Add the following section to ~/.gitconfig</p>\n<div class=\"codehilite\"><pre><span></span><code>[filter &quot;rcs-keywords&quot;]\n        clean  = /usr/local/share/git_filters/rcs-keywords.clean\n        smudge = /usr/local/share/git_filters/rcs-keywords.smudge %f\n</code></pre></div>\n<p>Check out the git repository:</p>\n<p>git clone <a href=\"https://github.com/BRL-CAD/brlcad.git\">https://github.com/BRL-CAD/brlcad.git</a></p>\n<p>Copy the attached file to brlcad/.git/info/attributes: <a href=\"/user_uploads/1549/34DoBap9okWkpW1_V7BMarTB/tkhtml_attributes\">tkhtml_attributes</a> </p>\n<p>Note that attributes is the file name, not a directory - the file should be renamed.</p>",
        "id": 229700522,
        "sender_full_name": "starseeker",
        "timestamp": 1615395042
    },
    {
        "content": "<p>What this will do is match the particular tkhtml files in question, and populate the tags.  Placing it in .git/info (rather than .gitattributes) means it will be active for all checkout activities (a .gitattributes file wouldn't exist in older checkouts, defeating the purpose.)</p>\n<p>I've adjusted main's copy of Tkhtml to not use an RCS tag for what it is doing, so it will not be altered by this filter.  The older checkouts still using the $Id: tag, which are the ones that need to be populated, will match and be populated (thus being viable for compilation.)</p>",
        "id": 229701236,
        "sender_full_name": "starseeker",
        "timestamp": 1615395280
    },
    {
        "content": "<p>The attributes file specifically calls out only the tkhtml files in question, to minimize processing time overall.</p>",
        "id": 229701638,
        "sender_full_name": "starseeker",
        "timestamp": 1615395414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> If that looks workable to you, I can write it up for inclusion in the src tree</p>",
        "id": 229702125,
        "sender_full_name": "starseeker",
        "timestamp": 1615395577
    },
    {
        "content": "<p>and then a multi-hour regeneration and multi-day re-review?</p>",
        "id": 229708307,
        "sender_full_name": "Erik",
        "timestamp": 1615397600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> pardon?  the rcs-keywords works with the existing repository</p>",
        "id": 229712078,
        "sender_full_name": "starseeker",
        "timestamp": 1615398906
    },
    {
        "content": "<p>oh, awesome, i thought it'd be a history rewrite to add the appropriate bits</p>",
        "id": 229712345,
        "sender_full_name": "Erik",
        "timestamp": 1615399007
    },
    {
        "content": "<p>Going that route means we don't need to worry about re-inserting any RCS expansions into the history - they're just populated on checkout</p>",
        "id": 229712359,
        "sender_full_name": "starseeker",
        "timestamp": 1615399013
    },
    {
        "content": "<p>If we want it to work without any RCS expansion, yes - that's  a multi-day rewrite, not multi-hour.  If, however, we use the filters to do the expansion just where we need to, all a user has to do is set up the .gitconfig and attributes file.</p>",
        "id": 229712486,
        "sender_full_name": "starseeker",
        "timestamp": 1615399079
    },
    {
        "content": "<p>That has the advantage, once set up, of giving us expanded RCS keywords anywhere we need them.  I'm 90% sure the expanded tkhtml tags were originally in the commit history, but if I'm wrong about that even a full regeneration of the history wouldn't be enough - I'd actually have to inject the expanded tags into the commit history.</p>",
        "id": 229712799,
        "sender_full_name": "starseeker",
        "timestamp": 1615399200
    },
    {
        "content": "<p>cool, please leave breadcrumbs for the next poor fool who tries to compile something old <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> (i had a 43bsd compiling an old old version in a simh vax11, crazy people will do crazy unexpected things...)</p>",
        "id": 229713138,
        "sender_full_name": "Erik",
        "timestamp": 1615399309
    },
    {
        "content": "<p>The drawback of this is it's not a \"working out of the box\" solution - because Git has no way to expand RCS tags by default, it requires some work by the user to prepare the solution. </p>\n<p>The best we can do is pre-bake everything and tell folks exactly how to set it up.</p>",
        "id": 229713293,
        "sender_full_name": "starseeker",
        "timestamp": 1615399361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> And that's the primary drawback - someone coming into things cold and not knowing they need to set up RCS expansion for older checkouts.</p>",
        "id": 229713518,
        "sender_full_name": "starseeker",
        "timestamp": 1615399452
    },
    {
        "content": "<p>Ooo!  There might be an even better way...</p>",
        "id": 229716097,
        "sender_full_name": "starseeker",
        "timestamp": 1615400458
    },
    {
        "content": "<p>/me tests</p>",
        "id": 229716116,
        "sender_full_name": "starseeker",
        "timestamp": 1615400466
    },
    {
        "content": "<p>Sweet!!!!</p>",
        "id": 229716208,
        "sender_full_name": "starseeker",
        "timestamp": 1615400501
    },
    {
        "content": "<p>We don't need to mess with rcs-keywords at all.</p>",
        "id": 229716313,
        "sender_full_name": "starseeker",
        "timestamp": 1615400530
    },
    {
        "content": "<p>All we need to do is put this file at .git/info/attributes : <a href=\"/user_uploads/1549/aV5FdoYFImdZsV4ABVaJSNcr/attributes\">attributes</a></p>",
        "id": 229716421,
        "sender_full_name": "starseeker",
        "timestamp": 1615400584
    },
    {
        "content": "<p>Do tell, but I have a couple thoughts on this.  First off, I'm not terribly concerned about tkhtml working but would be concerned if there's not a simple workaround that can be discovered when the failure is encountered.</p>",
        "id": 229716493,
        "sender_full_name": "Sean",
        "timestamp": 1615400622
    },
    {
        "content": "<p>what's that attributes file do?  looks like it'll match on any files with those names??</p>",
        "id": 229716717,
        "sender_full_name": "Sean",
        "timestamp": 1615400695
    },
    {
        "content": "<p>Yes, it's a filename match.  I haven't figured out yet how to do a full-path match successfully.</p>",
        "id": 229716825,
        "sender_full_name": "starseeker",
        "timestamp": 1615400732
    },
    {
        "content": "<p>It uses the ident property as documented here:  <a href=\"https://git-scm.com/docs/gitattributes\">https://git-scm.com/docs/gitattributes</a></p>",
        "id": 229716855,
        "sender_full_name": "starseeker",
        "timestamp": 1615400749
    },
    {
        "content": "<p>looks like src/other/tkhtml/** is what you want</p>",
        "id": 229716936,
        "sender_full_name": "Sean",
        "timestamp": 1615400768
    },
    {
        "content": "<p>As it happens $Id$ is the RCS keyword at issue, and although the Git expansion is totally different from RCS/CVS/SVN it satisfies the compilation requirement.</p>",
        "id": 229717014,
        "sender_full_name": "starseeker",
        "timestamp": 1615400799
    },
    {
        "content": "<p>/me tries</p>",
        "id": 229717030,
        "sender_full_name": "starseeker",
        "timestamp": 1615400806
    },
    {
        "content": "<p>I'm still more concerned about what the error looks like... is there a non-git workaround possible?</p>",
        "id": 229717123,
        "sender_full_name": "Sean",
        "timestamp": 1615400846
    },
    {
        "content": "<p>like \"install system tkthtml\" if that happened to work (which I bet it doesn't)</p>",
        "id": 229717172,
        "sender_full_name": "Sean",
        "timestamp": 1615400869
    },
    {
        "content": "<p>Um.  It might, actually, if anyone packages it...</p>",
        "id": 229717256,
        "sender_full_name": "starseeker",
        "timestamp": 1615400890
    },
    {
        "content": "<p>or comment something in cmake</p>",
        "id": 229717264,
        "sender_full_name": "Sean",
        "timestamp": 1615400892
    },
    {
        "content": "<p>we test and detect tkhtml??</p>",
        "id": 229717295,
        "sender_full_name": "Sean",
        "timestamp": 1615400906
    },
    {
        "content": "<p>I thought that was one we didn't check</p>",
        "id": 229717350,
        "sender_full_name": "Sean",
        "timestamp": 1615400930
    },
    {
        "content": "<p>At one point I did try, but I may have removed it - it's impossible on headless build nodes and problematic otherwise (almost no systems install Tkhtml)</p>",
        "id": 229717406,
        "sender_full_name": "starseeker",
        "timestamp": 1615400956
    },
    {
        "content": "<p>I'm set up as a 3rd party Tcl package build in CMake, so maybe.</p>",
        "id": 229717465,
        "sender_full_name": "starseeker",
        "timestamp": 1615400987
    },
    {
        "content": "<p>/me tries</p>",
        "id": 229717481,
        "sender_full_name": "starseeker",
        "timestamp": 1615400992
    },
    {
        "content": "<p>if there is a simple way to turn it off (even if it disabled and man viewer), that'd be acceptable workaround</p>",
        "id": 229717689,
        "sender_full_name": "Sean",
        "timestamp": 1615401053
    },
    {
        "content": "<p>Looks like the src/other/tkhtml/** line works.</p>",
        "id": 229717722,
        "sender_full_name": "starseeker",
        "timestamp": 1615401065
    },
    {
        "content": "<p>I'm fairly sure I didn't set up to disable just the Tkhtml dependent components.</p>",
        "id": 229717991,
        "sender_full_name": "starseeker",
        "timestamp": 1615401176
    },
    {
        "content": "<p>I could do it now of course, but that wouldn't help older builds.</p>",
        "id": 229718048,
        "sender_full_name": "starseeker",
        "timestamp": 1615401190
    },
    {
        "content": "<p>Let me see if I can get a system tkhtml install.</p>",
        "id": 229718092,
        "sender_full_name": "starseeker",
        "timestamp": 1615401206
    },
    {
        "content": "<p>what happens if you -DENABLE_TKHTML=OFF ?</p>",
        "id": 229718115,
        "sender_full_name": "Sean",
        "timestamp": 1615401217
    },
    {
        "content": "<p>of if you just comment out the THIRD_PARTY_TCL_PACKAGE line in src/other/CMakeLists.txt</p>",
        "id": 229718375,
        "sender_full_name": "Sean",
        "timestamp": 1615401297
    },
    {
        "content": "<p>those would be generic workarounds we could live with</p>",
        "id": 229718431,
        "sender_full_name": "Sean",
        "timestamp": 1615401313
    },
    {
        "content": "<p>Configure fails.  (unnoticed dependency in tktable build on tkhtml build logic being loaded first.)</p>",
        "id": 229718442,
        "sender_full_name": "starseeker",
        "timestamp": 1615401316
    },
    {
        "content": "<p>damn</p>",
        "id": 229718619,
        "sender_full_name": "Sean",
        "timestamp": 1615401369
    },
    {
        "content": "<p>Actually, wait... let me double check my SVN state.</p>",
        "id": 229718632,
        "sender_full_name": "starseeker",
        "timestamp": 1615401378
    },
    {
        "content": "<p>Yeah, OK - it actually did find the system tkhtml, but then tktable wasn't happy.  However...</p>",
        "id": 229718847,
        "sender_full_name": "starseeker",
        "timestamp": 1615401468
    },
    {
        "content": "<p>If we install BOTH tkhtml and tktable, that worked.</p>",
        "id": 229718922,
        "sender_full_name": "starseeker",
        "timestamp": 1615401485
    },
    {
        "content": "<p>/me builds</p>",
        "id": 229718994,
        "sender_full_name": "starseeker",
        "timestamp": 1615401508
    },
    {
        "content": "<p>Urmf.  It builds successfully, but at least on Ubuntu those packages doesn't seem to work - Archer can't load and while MGED will load, the man viewer won't come up.</p>",
        "id": 229719544,
        "sender_full_name": "starseeker",
        "timestamp": 1615401717
    },
    {
        "content": "<p>rtwizard will load</p>",
        "id": 229720360,
        "sender_full_name": "starseeker",
        "timestamp": 1615402024
    },
    {
        "content": "<p>/me facepalms sadly</p>",
        "id": 229720527,
        "sender_full_name": "Sean",
        "timestamp": 1615402086
    },
    {
        "content": "<p>so what's the minimum to turn it all off?</p>",
        "id": 229720585,
        "sender_full_name": "Sean",
        "timestamp": 1615402103
    },
    {
        "content": "<p>comment package line for both tkhtml and tktable?</p>",
        "id": 229720608,
        "sender_full_name": "Sean",
        "timestamp": 1615402119
    },
    {
        "content": "<p>it's so absurd that they did that with the $Id tag... ugh.</p>",
        "id": 229720682,
        "sender_full_name": "Sean",
        "timestamp": 1615402147
    },
    {
        "content": "<p>That would produce the same result.  Archer requires them and so wouldn't work, and MGED would work but without the man viewer...</p>",
        "id": 229720751,
        "sender_full_name": "starseeker",
        "timestamp": 1615402175
    },
    {
        "content": "<p>Installing the system tkhtml and tktable produced as much of a working config as we could expect without tkhtml/tktable built.</p>",
        "id": 229720849,
        "sender_full_name": "starseeker",
        "timestamp": 1615402204
    },
    {
        "content": "<p>because of require lines in archer?</p>",
        "id": 229720863,
        "sender_full_name": "Sean",
        "timestamp": 1615402207
    },
    {
        "content": "<p>I believe so - Archer's right panel uses tktable, and both the help viewer and man viewer use tkhtml.  The way the Itcl class system works, if I'm remembering correctly, it all gets defined and loaded up front.</p>",
        "id": 229720967,
        "sender_full_name": "starseeker",
        "timestamp": 1615402250
    },
    {
        "content": "<p><strong> will do recursive globbing into subdirs, you can prefix / as the system root, too ( so /db/</strong>/*.g )</p>",
        "id": 229720996,
        "sender_full_name": "Erik",
        "timestamp": 1615402263
    },
    {
        "content": "<p>okay, so archer's got to have it</p>",
        "id": 229721040,
        "sender_full_name": "Sean",
        "timestamp": 1615402280
    },
    {
        "content": "<p>what about surgery?</p>",
        "id": 229721050,
        "sender_full_name": "Sean",
        "timestamp": 1615402287
    },
    {
        "content": "<p>aieee, not bold, double asterisk will do recursive globbing :D</p>",
        "id": 229721051,
        "sender_full_name": "Erik",
        "timestamp": 1615402288
    },
    {
        "content": "<p>that's a finite list -- can it be reduced to a one-line edit in tkhtml's build logic with the list of file names that it would have extracted (or a glob)?</p>",
        "id": 229721133,
        "sender_full_name": "Sean",
        "timestamp": 1615402321
    },
    {
        "content": "<p>The simplest possible source code fix is probably a one line sed line of some sort that replaces all the $Id$ lines with $Id: tkhtml$</p>",
        "id": 229721328,
        "sender_full_name": "starseeker",
        "timestamp": 1615402381
    },
    {
        "content": "<p>That'll be way simpler than trying to do anything with the Archer codebase.</p>",
        "id": 229721387,
        "sender_full_name": "starseeker",
        "timestamp": 1615402400
    },
    {
        "content": "<p>The issue is already fixed in the Git main - the only problem is the older checkouts that we can't change.</p>",
        "id": 229721609,
        "sender_full_name": "starseeker",
        "timestamp": 1615402476
    },
    {
        "content": "<p>right, which I think is a problem unless we can figure out a trivial workaround :(</p>",
        "id": 229722018,
        "sender_full_name": "Sean",
        "timestamp": 1615402628
    },
    {
        "content": "<p>otherwise, there'd be almost no point to all the old tags since all the ones since tkhtml was introduced won't/can't work at all</p>",
        "id": 229722207,
        "sender_full_name": "Sean",
        "timestamp": 1615402690
    },
    {
        "content": "<p><code>echo \"/src/other/tkhtml/** ident\" &gt; .git/info/attributes </code> doesn't count as trivial?</p>",
        "id": 229722297,
        "sender_full_name": "starseeker",
        "timestamp": 1615402731
    },
    {
        "content": "<p><code>find . -path \\*tkhtml\\* -type f -exec sed -i 's/\\$Id\\$/\\$Id: tkhtml\\$/g' {} \\;</code> should also do the trick.</p>",
        "id": 229722601,
        "sender_full_name": "starseeker",
        "timestamp": 1615402831
    },
    {
        "content": "<p>it's a solution, but then it assumes git and is completely non-intuitive... that doesn't feel right</p>",
        "id": 229722612,
        "sender_full_name": "Sean",
        "timestamp": 1615402835
    },
    {
        "content": "<p>I'm not seeing where Id is being  used...</p>",
        "id": 229722715,
        "sender_full_name": "Sean",
        "timestamp": 1615402861
    },
    {
        "content": "<p>in either tkthml or tktable</p>",
        "id": 229722778,
        "sender_full_name": "Sean",
        "timestamp": 1615402883
    },
    {
        "content": "<p>In main it's not, any longer.  It was in mkdefaultstyle.tcl</p>",
        "id": 229722847,
        "sender_full_name": "starseeker",
        "timestamp": 1615402907
    },
    {
        "content": "<p>src/other/tkhtml/src/mkdefaultstyle.tcl:21</p>",
        "id": 229722959,
        "sender_full_name": "starseeker",
        "timestamp": 1615402934
    },
    {
        "content": "<p>ah, ${DOLLAR} is why...</p>",
        "id": 229723367,
        "sender_full_name": "Sean",
        "timestamp": 1615403062
    },
    {
        "content": "<p>so looks like that writes out four files...</p>",
        "id": 229723626,
        "sender_full_name": "Sean",
        "timestamp": 1615403157
    },
    {
        "content": "<p>Hm, I'm not following this logic ... I think I need to get a branch and see how it was</p>",
        "id": 229724573,
        "sender_full_name": "Sean",
        "timestamp": 1615403485
    },
    {
        "content": "<p>You mean what the tags originally looked like?</p>",
        "id": 229724690,
        "sender_full_name": "starseeker",
        "timestamp": 1615403523
    },
    {
        "content": "<p>no, I'm looking at the logic in mkdefaultstyle.tcl</p>",
        "id": 229724778,
        "sender_full_name": "Sean",
        "timestamp": 1615403550
    },
    {
        "content": "<p>it's writing out #define lines (to whomever is calling mkdefaultstyle.tcl), reading from just four files (html.css, tkhtml.css, quirks.css,</p>",
        "id": 229724918,
        "sender_full_name": "Sean",
        "timestamp": 1615403610
    },
    {
        "content": "<p>and *.c (okay, so not four files, but four categories)</p>",
        "id": 229724945,
        "sender_full_name": "Sean",
        "timestamp": 1615403626
    },
    {
        "content": "<p><a href=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/other/tkhtml/src/mkdefaultstyle.tcl\">https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/src/other/tkhtml/src/mkdefaultstyle.tcl</a></p>",
        "id": 229724946,
        "sender_full_name": "starseeker",
        "timestamp": 1615403626
    },
    {
        "content": "<p>yes, that's what I'm looking at...</p>",
        "id": 229725034,
        "sender_full_name": "Sean",
        "timestamp": 1615403649
    },
    {
        "content": "<p>That file is very old... I don't know that I ever changed it.</p>",
        "id": 229725080,
        "sender_full_name": "starseeker",
        "timestamp": 1615403670
    },
    {
        "content": "<p>I'm saying I don't see yet what that file is actually doing.</p>",
        "id": 229725199,
        "sender_full_name": "Sean",
        "timestamp": 1615403708
    },
    {
        "content": "<p>because the logic says it's writing out #define lines, but none of them exist (yet)</p>",
        "id": 229725262,
        "sender_full_name": "Sean",
        "timestamp": 1615403728
    },
    {
        "content": "<p>They go into build/src/other/tkhtml/htmldefaultstyle.c</p>",
        "id": 229725445,
        "sender_full_name": "starseeker",
        "timestamp": 1615403786
    },
    {
        "content": "<p>during compilation</p>",
        "id": 229725489,
        "sender_full_name": "Sean",
        "timestamp": 1615403812
    },
    {
        "content": "<p>Target in CMakeLists.txt line 34</p>",
        "id": 229725503,
        "sender_full_name": "starseeker",
        "timestamp": 1615403819
    },
    {
        "content": "<p>Yes - custom build step, prior to building Tkhtml lib</p>",
        "id": 229725558,
        "sender_full_name": "starseeker",
        "timestamp": 1615403842
    },
    {
        "content": "<p>hm, so maybe ... can you generate it on trunk and see what happens on branch if you just drop htmldefaultstyle.c into the build dir?</p>",
        "id": 229725757,
        "sender_full_name": "Sean",
        "timestamp": 1615403901
    },
    {
        "content": "<p>So, check out an older branch in git, take the trunk copy of that file, and drop it in the build dir?</p>",
        "id": 229725862,
        "sender_full_name": "starseeker",
        "timestamp": 1615403947
    },
    {
        "content": "<p>That seemed to work.</p>",
        "id": 229726341,
        "sender_full_name": "starseeker",
        "timestamp": 1615404110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> You're thinking to stash the older htmldefaultstyle.c somewhere and just have folks drop it into the build directory?</p>",
        "id": 229726838,
        "sender_full_name": "starseeker",
        "timestamp": 1615404288
    },
    {
        "content": "<p>something like that, it's agnostic</p>",
        "id": 229727072,
        "sender_full_name": "Sean",
        "timestamp": 1615404373
    },
    {
        "content": "<p>does it work if it's dropped into the source tree?  could commit changes to the tags...</p>",
        "id": 229727220,
        "sender_full_name": "Sean",
        "timestamp": 1615404429
    },
    {
        "content": "<p>course, could just expand the Ids in the tags too..</p>",
        "id": 229727265,
        "sender_full_name": "Sean",
        "timestamp": 1615404447
    },
    {
        "content": "<p>one time patching</p>",
        "id": 229727294,
        "sender_full_name": "Sean",
        "timestamp": 1615404463
    },
    {
        "content": "<p>Yeah, that'd be the way to go.  That file is entirely build dir generated.</p>",
        "id": 229727304,
        "sender_full_name": "starseeker",
        "timestamp": 1615404466
    },
    {
        "content": "<p>what about just checking out all tags and committing the Id expansion?</p>",
        "id": 229727435,
        "sender_full_name": "Sean",
        "timestamp": 1615404502
    },
    {
        "content": "<p>does that screw with anything?</p>",
        "id": 229727475,
        "sender_full_name": "Sean",
        "timestamp": 1615404516
    },
    {
        "content": "<p>I think we'd need to make new branches for those tags that don't already have one - a tag in git is just a pointer to a commit, so we'd be making a new branch from that change for the new tag.</p>",
        "id": 229727548,
        "sender_full_name": "starseeker",
        "timestamp": 1615404546
    },
    {
        "content": "<p>If we did that I'd want to use the same fix I made to main, so we can still keep the attributes option without breaking anything.  The attributes solution allows arbitrary older commits to work, tag fixes will only address the tags.</p>",
        "id": 229727822,
        "sender_full_name": "starseeker",
        "timestamp": 1615404626
    },
    {
        "content": "<p>Actually though, with an ident based solution there, it probably won't matter anyway.</p>",
        "id": 229727915,
        "sender_full_name": "starseeker",
        "timestamp": 1615404659
    },
    {
        "content": "<p>right, I was thinking tags==branches</p>",
        "id": 229727920,
        "sender_full_name": "Sean",
        "timestamp": 1615404663
    },
    {
        "content": "<p>going to take a while to adjust my mental model</p>",
        "id": 229727954,
        "sender_full_name": "Sean",
        "timestamp": 1615404671
    },
    {
        "content": "<p>/me got it pounded into him for a year writing converter logic ;-)</p>",
        "id": 229728025,
        "sender_full_name": "starseeker",
        "timestamp": 1615404697
    },
    {
        "content": "<p>they're just dirs in svn, so you can keep committing to the tag/branch</p>",
        "id": 229728069,
        "sender_full_name": "Sean",
        "timestamp": 1615404712
    },
    {
        "content": "<p>Right.  The ones were we did that I believe have branches already (or they should) since we can't commit to tags.  However, if any tags weren't edited that'll be new branches to introduce.</p>",
        "id": 229728231,
        "sender_full_name": "starseeker",
        "timestamp": 1615404761
    },
    {
        "content": "<p>/me is game to do that if you think it's the best solution.  I'm also willing (gulp) to redo the process with the correct tkhtml contents, if you decide that's best - it was my mistake, and I'll do what it takes to fix it.</p>",
        "id": 229728694,
        "sender_full_name": "starseeker",
        "timestamp": 1615404917
    },
    {
        "content": "<p>let me do a checkout to see how confusing it actually looks when it fails</p>",
        "id": 229728776,
        "sender_full_name": "Sean",
        "timestamp": 1615404953
    },
    {
        "content": "<p>I've been using <code>git checkout rel-7-32-2</code> fwiw</p>",
        "id": 229728876,
        "sender_full_name": "starseeker",
        "timestamp": 1615404982
    },
    {
        "content": "<p>it's not just on you... checking out a couple tags was on my verification list and I got lazy and skipped that one ... :(</p>",
        "id": 229728887,
        "sender_full_name": "Sean",
        "timestamp": 1615404988
    },
    {
        "content": "<p>looks like after turning off STRICT, adding include(CheckSymbolExists), all that was required to at least compile was commenting out the line it failed on -- Tcl_SetResult(interp, HTML_SOURCE_FILES, TCL_STATIC); in htmltcl.c:2787</p>",
        "id": 229762650,
        "sender_full_name": "Sean",
        "timestamp": 1615417129
    },
    {
        "content": "<p>and then both archer and mged work</p>",
        "id": 229762659,
        "sender_full_name": "Sean",
        "timestamp": 1615417138
    },
    {
        "content": "<p>I think that's an acceptable hardship since there's always going to be tweaking of old builds required.</p>",
        "id": 229762749,
        "sender_full_name": "Sean",
        "timestamp": 1615417185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Actually,  I may have just coaxed repowork into redoing just the tkhtml sources:  <a href=\"https://github.com/starseeker/brlcad_tkhtml_fix\">https://github.com/starseeker/brlcad_tkhtml_fix</a></p>",
        "id": 229765607,
        "sender_full_name": "starseeker",
        "timestamp": 1615418609
    },
    {
        "content": "<p>Testing now, stand by...</p>",
        "id": 229765621,
        "sender_full_name": "starseeker",
        "timestamp": 1615418618
    },
    {
        "content": "<p>Ah hah!  rel-7-32-2 builds clean.</p>",
        "id": 229765952,
        "sender_full_name": "starseeker",
        "timestamp": 1615418823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> , <span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> - don't do anything yet with your forks.  I may have achieved a deeper fix for the tkhtml issue, and if so it will require swapping out the current git repository.</p>",
        "id": 229766288,
        "sender_full_name": "starseeker",
        "timestamp": 1615419007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> This is not a brlcad_conv12 derivative - it is the current repository up on BRL-CAD/brlcad with a targeted set of blob sha1 replacements centered on just the relevant Tkhtml files.</p>",
        "id": 229766453,
        "sender_full_name": "starseeker",
        "timestamp": 1615419106
    },
    {
        "content": "<p>As such it has the commits we had already made to that repository.  Indeed, the commit where I had restored the rcsid strings is now in this new repository almost a no-op (there was one .txt file that got its revision restored in that commit but not in my remapping work.)</p>",
        "id": 229766576,
        "sender_full_name": "starseeker",
        "timestamp": 1615419171
    },
    {
        "content": "<p>Once I contemplated re-running the whole conversion again to avoid filtering the tkhtml sources, I realized it was far easier to take the existing conversion (which already has a multitude of corrections applied that would be tricky to re-apply again) and target just the necessary sources.  So I scripted a git log --follow of all the relevant .c files in git, and for each log entry for each file extracted the svn revision.  Then I checked out both the git and the SVN tkhtml sources for the corresponding revisions, calculated the git hashes for the git and svn versions of the file, and made a git fast-import blob out of each revison of the  svn version of the file.  That gave me a way to map the git internal state to what it should have been had the SVN files been properly included, and also gave me the raw blob inputs to feed to fast import so the blobs would be available to reference.</p>",
        "id": 229767095,
        "sender_full_name": "starseeker",
        "timestamp": 1615419440
    },
    {
        "content": "<p>It looks as if it worked.  To switch this repository in I would recommend deleting BRL-CAD/brlcad and re-creating it, since all the revisions after somewhere in the 32k range will have different SHA1 values.</p>",
        "id": 229767316,
        "sender_full_name": "starseeker",
        "timestamp": 1615419581
    },
    {
        "content": "<p>Here's the set of commits where those files changed:</p>\n<p>32868<br>\n32899<br>\n40243<br>\n40405<br>\n47234<br>\n49599<br>\n49602<br>\n49607<br>\n49608<br>\n49609<br>\n49611<br>\n49613<br>\n57890</p>",
        "id": 229770523,
        "sender_full_name": "starseeker",
        "timestamp": 1615421418
    },
    {
        "content": "<p>Sigh.  Another oddity.  Now that I can try distcheck, <a href=\"http://run.sh\">run.sh</a> isn't set to executable and benchmark isn't cleaning up properly.</p>",
        "id": 229779002,
        "sender_full_name": "starseeker",
        "timestamp": 1615427070
    },
    {
        "content": "<p><a href=\"https://github.com/starseeker/brlcad_bench_fix\">https://github.com/starseeker/brlcad_bench_fix</a> superceeds the tkhtml_fix repository - it has those fixes and 100755 setting for the SVN executable files that git didn't have listed.</p>\n<p>For the latter it's a brute force approach - I generated a list of all the file paths rel-7-32-2 had set executable that git did not, and set those paths' modes to 100755 throughout the git history.  I didn't attempt an analysis of when SVN did or didn't set that property on those files.</p>\n<p>make distcheck now passes on a <code>git checkout rel-7-32-2</code></p>",
        "id": 229784328,
        "sender_full_name": "starseeker",
        "timestamp": 1615430943
    },
    {
        "content": "<p>/me fires distcheck-full on rel-7-32-2, notes that brain has reached \"E\", and heads off to the charging station...</p>",
        "id": 229790708,
        "sender_full_name": "starseeker",
        "timestamp": 1615435839
    },
    {
        "content": "<p>Thanks for the warning. I removed my fork for now.</p>",
        "id": 229805906,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1615447571
    },
    {
        "content": "<p>Should I also remove the fork?</p>",
        "id": 229810974,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1615450746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> I would suggest doing so - <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> will need to review what I've done and see what he wants to do.</p>",
        "id": 229842899,
        "sender_full_name": "starseeker",
        "timestamp": 1615467239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> distcheck-full succeeded on rel-7-32-2 from the brlcad_bench_fix repo</p>",
        "id": 229843087,
        "sender_full_name": "starseeker",
        "timestamp": 1615467315
    },
    {
        "content": "<p>One additional quirk I just hit, but something that's not specific to our setup as far as I can tell - git checked out the .3dm file in text mode by default on Windows.  When I added .3dm binary to the .gitattributes file that seems to address it, but since older checkouts won't have a .gitattributes file on Windows they'll probably get the wrong checkout by default.</p>",
        "id": 229860960,
        "sender_full_name": "starseeker",
        "timestamp": 1615474385
    },
    {
        "content": "<p>Workarounds would either be the .git/info/attributes approach discussed earlier for $Id$, or setting .3dm in a global attributes file:  <a href=\"https://stackoverflow.com/a/28027656\">https://stackoverflow.com/a/28027656</a></p>",
        "id": 229862872,
        "sender_full_name": "starseeker",
        "timestamp": 1615474991
    },
    {
        "content": "<p>With that caveat, brlcad_bench_fix rel-7-32-2 built successfully on Windows with MSVC</p>",
        "id": 229864154,
        "sender_full_name": "starseeker",
        "timestamp": 1615475422
    },
    {
        "content": "<p>rel-7-32-0 distcheck-full passed on Ubuntu</p>",
        "id": 229868589,
        "sender_full_name": "starseeker",
        "timestamp": 1615476903
    },
    {
        "content": "<p>rel-7-32-2 enable-all build succeeded on OSX</p>",
        "id": 229876297,
        "sender_full_name": "starseeker",
        "timestamp": 1615479069
    },
    {
        "content": "<p>rel-7-30-8 is too old to distcheck vanilla on this box without modding the system (system proj_api.h interferes )</p>",
        "id": 229878835,
        "sender_full_name": "starseeker",
        "timestamp": 1615479867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> If you have other tests you'd like me to do I'm game...</p>",
        "id": 229878958,
        "sender_full_name": "starseeker",
        "timestamp": 1615479911
    },
    {
        "content": "<p>what about 7.0? :D I think that was the first release I contributed to (fbsd support and autoconf)</p>",
        "id": 229879489,
        "sender_full_name": "Erik",
        "timestamp": 1615480095
    },
    {
        "content": "<p>\"here's a cd with fbsd, here's a cd with our source code, here's a computer. We'll try to get you on the network in the next couple of weeks.\" haha, the good old days :D</p>",
        "id": 229879694,
        "sender_full_name": "Erik",
        "timestamp": 1615480171
    },
    {
        "content": "<p>/me chuckles.  I'd almost certainly need a VM to try building something that old.</p>",
        "id": 229879837,
        "sender_full_name": "starseeker",
        "timestamp": 1615480214
    },
    {
        "content": "<p>speaking of! A lot of my life lately is building singularity and occasionally docker images. I know we had a raw disk image a while back for loading into vmware or bochs or whatever, do we/should we(you) provide container images? :D</p>",
        "id": 229880667,
        "sender_full_name": "Erik",
        "timestamp": 1615480514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> Checking the diffs, it looks like whitespace changes (line endings) and expanded vs. unexpanded RCS tags.  Plus a couple files like .cvsignore and .gitignore</p>",
        "id": 229880923,
        "sender_full_name": "starseeker",
        "timestamp": 1615480590
    },
    {
        "content": "<p>he, hehe, he, yeh... 'find . -type f | xargs sed -i.bak 's/[ ^t]*//'` ... I think I did an indent back then, too...</p>",
        "id": 229881241,
        "sender_full_name": "Erik",
        "timestamp": 1615480689
    },
    {
        "content": "<p>I mean differences between the SVN and git checkouts.  Although if git's history following breaks in there I'll know who blame ;-)</p>",
        "id": 229881479,
        "sender_full_name": "starseeker",
        "timestamp": 1615480770
    },
    {
        "content": "<p>c'mon, I was new, had to spraypaint my name all over the place and get established, ch'know :D</p>",
        "id": 229887103,
        "sender_full_name": "Erik",
        "timestamp": 1615482584
    },
    {
        "content": "<p>/me tries a crazy idea to handle the .3dm checkout issue...</p>",
        "id": 229957878,
        "sender_full_name": "starseeker",
        "timestamp": 1615511453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I've figured out how to insert a .gitattributes file at strategic points in the git history so the .3dm file gets flagged by git as a binary checkout.  Ironically, this means the rel-7-32-2 distcheck will break on the default repo_verify step, since by that point: 1. the CMake logic had been taught how to use git for bookkeeping and 2. the .gitattributes file is present and unaccounted for in the CMake logic.  However, I think it's still better to insert it -  the error message tells the user what flag to supply to to avoid the problem (or they can just delete the .gitattributes file, since it has done its job by that point.)  A corrupted 3dm file, on the other hand, has no easy fix.</p>\n<p><a href=\"https://github.com/starseeker/brlcad_added_gitattributes\">https://github.com/starseeker/brlcad_added_gitattributes</a></p>",
        "id": 229967210,
        "sender_full_name": "starseeker",
        "timestamp": 1615517951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> I found a good way to quickly extract all the files ever marked executable.  It's a lot more than a handful.  Quick scan of just a few dozen revisions found 2635 files.  As expected, some are bogus but most look good.  I'll do a manual pass over the list in the morning to weed out the ones that clearly shouldn't have exec set.  The rest should be harmless.</p>",
        "id": 229978709,
        "sender_full_name": "Sean",
        "timestamp": 1615526872
    },
    {
        "content": "<p>Think it's better that the build work and the files be valid/usable on checkout.  Distcheck failing isn't critical, so it's a reasonable trade.  I would be cautious making more changes like that though.  Surgery on the history to inject and edit files is risky in a manner that might not be realized for months and need to be re-uploaded to fix if there's some obscure but important bug.</p>",
        "id": 229981138,
        "sender_full_name": "Sean",
        "timestamp": 1615528876
    },
    {
        "content": "<p>Couldn't wait till morning.  I went over the list manually, eliminated all the ones that looked like the exec bit was wrong/unnecessary, and here they are:  <a href=\"/user_uploads/1549/KdzUlkADP9t7PGaOEF4PJeg6/executables.txt\">executables.txt</a></p>",
        "id": 229991109,
        "sender_full_name": "Sean",
        "timestamp": 1615536760
    },
    {
        "content": "<p>I only looked at every 250'th commit for expediency, but did look through entire history up through r77000.  I also only looked at trunk, so anything only existing on a branch Intentionally delisted all the itcl/itk files, makefile logic, and other outright errors (many of which are still wrong on trunk albeit harmlessly).  Identified/Kept 1770 files but could use another pass from fresh eyes.</p>",
        "id": 229991763,
        "sender_full_name": "Sean",
        "timestamp": 1615537194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/229981138\">said</a>:</p>\n<blockquote>\n<p>Think it's better that the build work and the files be valid/usable on checkout.  Distcheck failing isn't critical, so it's a reasonable trade.  I would be cautious making more changes like that though.  Surgery on the history to inject and edit files is risky in a manner that might not be realized for months and need to be re-uploaded to fix if there's some obscure but important bug.</p>\n</blockquote>\n<p>Agreed.  It might be better in that sense not to change it, even, since the .git/info/attributes answer would also address the issue and does not require history editing. </p>\n<p>If we do opt for adding .gitattributes, there is one final question - the repo I posted last night puts a minimal .gitattributes in at two places - once when terra.dsp is introduced, and the second time when  the .3dm file is introduced.  The .gitattribute contents are focused tightly on those two file extensions.  However, if we're going to more closely mimic the SVN checkout behavior, it would actually make more sense to inject a more comprehensive .gitattributes at the beginning of the history that covers more file types.  My initial impulse was to go minimal to avoid surprises, but since SVN did have those mime types set there is an argument that it is more surprising for git not to have them.  Thoughts?</p>",
        "id": 230021842,
        "sender_full_name": "starseeker",
        "timestamp": 1615552730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> on the executable files - I set up some checks as well, using a brute force approach.  (SSD speeds are nice)  I checked all commits for trunk/ and branches/ is finishing up now.</p>\n<p>Here is the full, unedited trunk list:  <a href=\"/user_uploads/1549/ncL4cXhZCG_bNYP0lb9m-wSp/trunk.txt\">trunk.txt</a></p>",
        "id": 230038001,
        "sender_full_name": "starseeker",
        "timestamp": 1615559557
    },
    {
        "content": "<p>(That's all trunk commits from the beginning.)</p>",
        "id": 230038109,
        "sender_full_name": "starseeker",
        "timestamp": 1615559592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span>  That's basically the list I started with.  I edited it down to the executables.txt list as there are many subtley and blatantly wrong entries in there.</p>",
        "id": 230039533,
        "sender_full_name": "Sean",
        "timestamp": 1615560125
    },
    {
        "content": "<p>We shouldn't set all those.  There are entire folders that were checked in with executable bit set, including source files, header files, build files, images, ...</p>",
        "id": 230039662,
        "sender_full_name": "Sean",
        "timestamp": 1615560181
    },
    {
        "content": "<p>Agreed.</p>",
        "id": 230039707,
        "sender_full_name": "starseeker",
        "timestamp": 1615560190
    },
    {
        "content": "<p>I spent an hour whittling it down to what looked like should be the set to set.</p>",
        "id": 230039741,
        "sender_full_name": "Sean",
        "timestamp": 1615560202
    },
    {
        "content": "<p>What's the alternative to .gitattributes?</p>",
        "id": 230039869,
        "sender_full_name": "Sean",
        "timestamp": 1615560253
    },
    {
        "content": "<p>I 'll give it a quick check to see if a full rev check caught any that the 250-per jumping skipped over, but I don't expect to find much.</p>",
        "id": 230039917,
        "sender_full_name": "starseeker",
        "timestamp": 1615560269
    },
    {
        "content": "<p>I'm not terribly a fan of littering folders with vcs files.</p>",
        "id": 230039928,
        "sender_full_name": "Sean",
        "timestamp": 1615560273
    },
    {
        "content": "<p>After doing a main checkout, the user can add \"*.3dm binary\" to the .git/info/attributes file.</p>",
        "id": 230039984,
        "sender_full_name": "starseeker",
        "timestamp": 1615560303
    },
    {
        "content": "<p>That has to be a manual step, but because it's not a file in the repo history and it has highest precedence, once it's there any checkouts of other branches or tags will use it.</p>",
        "id": 230040081,
        "sender_full_name": "starseeker",
        "timestamp": 1615560342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/230039917\">said</a>:</p>\n<blockquote>\n<p>I 'll give it a quick check to see if a full rev check caught any that the 250-per jumping skipped over, but I don't expect to find much.</p>\n</blockquote>\n<p>You're comparing apples to oranges there a bit because missing will be any between the 250 jumps that lived ephemerally but 99% will be intentional removals.  I can give you the full list I started with.</p>",
        "id": 230040215,
        "sender_full_name": "Sean",
        "timestamp": 1615560382
    },
    {
        "content": "<p>Either way - I'd be good to go with your list if you're comfortable with it.</p>",
        "id": 230040301,
        "sender_full_name": "starseeker",
        "timestamp": 1615560422
    },
    {
        "content": "<p>Here's the list I started with -- can compare with this to see what got skipped:  <a href=\"/user_uploads/1549/g3j1bt0e72d_R8O5J5OmxA8u/executables_250.txt\">executables_250.txt</a></p>",
        "id": 230040578,
        "sender_full_name": "Sean",
        "timestamp": 1615560518
    },
    {
        "content": "<p>Here's what pulls the list: for i in <code>seq 0 250 77000</code> ; do echo $i ; svn -R -r $i propget svn:executable file:///Users/morrison/brlcad.github/svn.sfmirror/code/brlcad/trunk ; done | tee executables.log<br>\nThen just sort | uniq -c | sort -nr | awk | sed | sort  ;)</p>",
        "id": 230040804,
        "sender_full_name": "Sean",
        "timestamp": 1615560605
    },
    {
        "content": "<p>Here's what got added by all revs:  <a href=\"/user_uploads/1549/aRHMVYiFBUxlMPLknA7yCDzT/250_vs_trunk_all.diff\">250_vs_trunk_all.diff</a></p>",
        "id": 230041066,
        "sender_full_name": "starseeker",
        "timestamp": 1615560721
    },
    {
        "content": "<p>Checking all tags, there was only one path that got added compared to trunk - \"misc/archlinux/brlcad.sh\"</p>",
        "id": 230041785,
        "sender_full_name": "starseeker",
        "timestamp": 1615560987
    },
    {
        "content": "<p>that's diff'd against executables_250.txt ??</p>",
        "id": 230042595,
        "sender_full_name": "Sean",
        "timestamp": 1615561265
    },
    {
        "content": "<p>250_vs_trunk_all.diff?  Yes.</p>",
        "id": 230042711,
        "sender_full_name": "starseeker",
        "timestamp": 1615561310
    },
    {
        "content": "<p>because that looks more like the list of what I deleted</p>",
        "id": 230042767,
        "sender_full_name": "Sean",
        "timestamp": 1615561322
    },
    {
        "content": "<p>/me redoes it to be sure...</p>",
        "id": 230042827,
        "sender_full_name": "starseeker",
        "timestamp": 1615561343
    },
    {
        "content": "<p>oh, I posted the wrong file dammits</p>",
        "id": 230042980,
        "sender_full_name": "Sean",
        "timestamp": 1615561392
    },
    {
        "content": "<p>gimmie a sec</p>",
        "id": 230043166,
        "sender_full_name": "Sean",
        "timestamp": 1615561446
    },
    {
        "content": "<p>This is the full list!<br>\n<a href=\"/user_uploads/1549/vNt84SlMCRSMjrXduPDwJgnJ/executables_redux250.txt\">executables_redux250.txt</a></p>",
        "id": 230043632,
        "sender_full_name": "Sean",
        "timestamp": 1615561585
    },
    {
        "content": "<p>FYI, I deleted the brlcad repo :(</p>",
        "id": 230043836,
        "sender_full_name": "Sean",
        "timestamp": 1615561655
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/kOma8WZRfk_Lt8JReSofufg4/250_vs_trunk_all_take2.diff\">250_vs_trunk_all_take2.diff</a></p>",
        "id": 230043863,
        "sender_full_name": "starseeker",
        "timestamp": 1615561666
    },
    {
        "content": "<p>Mostly culls - couple configure scripts and the like that may pass...</p>",
        "id": 230044015,
        "sender_full_name": "starseeker",
        "timestamp": 1615561714
    },
    {
        "content": "<p>I'm three quarters of the way through the remaining branch checks - so far it  looks like a little over 1200 files set exec that are unique to branches.</p>",
        "id": 230044526,
        "sender_full_name": "starseeker",
        "timestamp": 1615561896
    },
    {
        "content": "<p>I'll comb through that diff list.  There are a few in there that should be preserved.</p>",
        "id": 230049544,
        "sender_full_name": "Sean",
        "timestamp": 1615563646
    },
    {
        "content": "<p>Here's the set that are unique to branch commits:  <a href=\"/user_uploads/1549/998I262h9qdExTsMmZTEq5Ln/branches_uniq.txt\">branches_uniq.txt</a></p>",
        "id": 230051089,
        "sender_full_name": "starseeker",
        "timestamp": 1615564190
    },
    {
        "content": "<p>Here's the set with some of the obvious culls removed:  <a href=\"/user_uploads/1549/KfEu6s1TreR4JI6yWWRIhyPH/branches_uniq_reduced.txt\">branches_uniq_reduced.txt</a> </p>\n<p>Line used: <code>cat branches_uniq.txt |grep -v \\\\.h|grep -v \\\\.msg |grep -v \\\\.itk |grep -v \\\\.cpp |grep -v tzdata &gt; branches_uniq_reduced.txt</code></p>",
        "id": 230051260,
        "sender_full_name": "starseeker",
        "timestamp": 1615564241
    },
    {
        "content": "<p>still some inappropriates in there<br>\nI should be done going through the diff list here in a jiffy after I grab a bite</p>",
        "id": 230062879,
        "sender_full_name": "Sean",
        "timestamp": 1615568122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> thoughts on the creo3plugin snafu?  inclined to ignore it from an exec bit perspective</p>",
        "id": 230072895,
        "sender_full_name": "Sean",
        "timestamp": 1615572166
    },
    {
        "content": "<p>Agreed.  Not significant.</p>",
        "id": 230072943,
        "sender_full_name": "starseeker",
        "timestamp": 1615572185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> As far as the .gitattributes thing, which option do you want to go with?  We've got:</p>\n<p>a) Insert minimal .gitattributes files at strategic points (the brlcad_added_gitattributes repo)</p>\n<p>b)  Insert more fully populated .gitattributes file for overall repo (closer match to SVN mime types in many cases, but problematic if we get unanticipated matches - personally I'm inclined not to do this)</p>\n<p>c)  No .gitattributes insertions, require user to set either per-checkout attributes or some form of global git attribute.</p>\n<p>I'd be OK with a) or c) - if we go with c) however, we'll need to prominently document what to do to get \"proper\" older checkout behavior on Windows.  The .dsp file isn't particularly noticeable if it gets munged up by the  checkout, but the 3dm file is...</p>",
        "id": 230073953,
        "sender_full_name": "starseeker",
        "timestamp": 1615572663
    },
    {
        "content": "<p>Here's the merged reduced set:<br>\n<a href=\"/user_uploads/1549/Vt0Vt202b54l2aTIb7vsPh_S/executables2.txt\">executables2.txt</a></p>",
        "id": 230074412,
        "sender_full_name": "Sean",
        "timestamp": 1615572866
    },
    {
        "content": "<p>how does git normally handle the exec bit?</p>",
        "id": 230074518,
        "sender_full_name": "Sean",
        "timestamp": 1615572924
    },
    {
        "content": "<p>I think it stashes it as part of the commit internally.</p>",
        "id": 230074628,
        "sender_full_name": "starseeker",
        "timestamp": 1615572966
    },
    {
        "content": "<p>ah, I see <a href=\"https://stackoverflow.com/questions/21691202/how-to-create-file-execute-mode-permissions-in-git-on-windows\">https://stackoverflow.com/questions/21691202/how-to-create-file-execute-mode-permissions-in-git-on-windows</a></p>",
        "id": 230074646,
        "sender_full_name": "Sean",
        "timestamp": 1615572978
    },
    {
        "content": "<p>yeah, it stashes the mode on commit</p>",
        "id": 230074670,
        "sender_full_name": "Sean",
        "timestamp": 1615572987
    },
    {
        "content": "<p>so ... I think it looks like that's a global property that's just set, not something tracked per commit?</p>",
        "id": 230074768,
        "sender_full_name": "Sean",
        "timestamp": 1615573040
    },
    {
        "content": "<p>am I reading that right?</p>",
        "id": 230074776,
        "sender_full_name": "Sean",
        "timestamp": 1615573046
    },
    {
        "content": "<p>the fact that one can do git update-index --chmod=+x <a href=\"http://foo.sh\">foo.sh</a></p>",
        "id": 230074796,
        "sender_full_name": "Sean",
        "timestamp": 1615573058
    },
    {
        "content": "<p>the \"index\" being some sort of permissions ledger</p>",
        "id": 230074819,
        "sender_full_name": "Sean",
        "timestamp": 1615573077
    },
    {
        "content": "<p>I don't... think so?  I think the index update is going to alter the tree entries git uses to track the checkout states?</p>",
        "id": 230074910,
        "sender_full_name": "starseeker",
        "timestamp": 1615573109
    },
    {
        "content": "<p>I know in the fast-export file that's how it's represented... hang on, let me generate something quick.</p>",
        "id": 230074939,
        "sender_full_name": "starseeker",
        "timestamp": 1615573129
    },
    {
        "content": "<p>I guess to answer your question, I'm looking for an option #4 where it's just set in the repo transparently instead of explicitly as a bandaid</p>",
        "id": 230075014,
        "sender_full_name": "Sean",
        "timestamp": 1615573174
    },
    {
        "content": "<p>since we're going through the rigor to fix it, might as well .. fix it</p>",
        "id": 230075045,
        "sender_full_name": "Sean",
        "timestamp": 1615573190
    },
    {
        "content": "<p>Oh, you're talking about the binary vs. text mode checkout?</p>",
        "id": 230075111,
        "sender_full_name": "starseeker",
        "timestamp": 1615573209
    },
    {
        "content": "<p>That's different from the exec mode.</p>",
        "id": 230075124,
        "sender_full_name": "starseeker",
        "timestamp": 1615573216
    },
    {
        "content": "<p>what about checking out each rev and doing a git update-index on each of the files in our ledger?</p>",
        "id": 230075156,
        "sender_full_name": "Sean",
        "timestamp": 1615573236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/230075111\">said</a>:</p>\n<blockquote>\n<p>Oh, you're talking about the binary vs. text mode checkout?</p>\n</blockquote>\n<p>No, I'm not</p>",
        "id": 230075183,
        "sender_full_name": "Sean",
        "timestamp": 1615573248
    },
    {
        "content": "<p>I've not even considered the binary property...</p>",
        "id": 230075265,
        "sender_full_name": "Sean",
        "timestamp": 1615573281
    },
    {
        "content": "<p>Here's the fast-export stream from the repository without the blobs (i.e. small enough to be viewed): <a href=\"https://brlcad.org/~starseeker/no_blobs.fi.gz\">https://brlcad.org/~starseeker/no_blobs.fi.gz</a></p>",
        "id": 230075315,
        "sender_full_name": "starseeker",
        "timestamp": 1615573308
    },
    {
        "content": "<p>I find that helpful for understanding how things are stored by git.</p>",
        "id": 230075436,
        "sender_full_name": "starseeker",
        "timestamp": 1615573352
    },
    {
        "content": "<p>So every time it's checked in, it's mode is potentially changed</p>",
        "id": 230075726,
        "sender_full_name": "Sean",
        "timestamp": 1615573489
    },
    {
        "content": "<p>Yes.</p>",
        "id": 230075739,
        "sender_full_name": "starseeker",
        "timestamp": 1615573497
    },
    {
        "content": "<p>That's my understanding - I can do an experiment quick to confirm that.</p>",
        "id": 230075843,
        "sender_full_name": "starseeker",
        "timestamp": 1615573539
    },
    {
        "content": "<p>So a script that walks every commit and scans for all the executables2.txt files?</p>",
        "id": 230075863,
        "sender_full_name": "Sean",
        "timestamp": 1615573548
    },
    {
        "content": "<p>Can you do an update-index on a committed sha?</p>",
        "id": 230075979,
        "sender_full_name": "Sean",
        "timestamp": 1615573587
    },
    {
        "content": "<p>I was planning to do what I did for the previous case - take executables2.txt, reformat it for repowork, and operate on the fast import stream.</p>",
        "id": 230076021,
        "sender_full_name": "starseeker",
        "timestamp": 1615573604
    },
    {
        "content": "<p>I'm not familiar with what \"operate on the fast import stream\" means... :)</p>",
        "id": 230076508,
        "sender_full_name": "Sean",
        "timestamp": 1615573818
    },
    {
        "content": "<p>how's it doing surgery on the repo commits?</p>",
        "id": 230076554,
        "sender_full_name": "Sean",
        "timestamp": 1615573837
    },
    {
        "content": "<p>or is it not?</p>",
        "id": 230076564,
        "sender_full_name": "Sean",
        "timestamp": 1615573841
    },
    {
        "content": "<p>Heh.  Sorry.  repowork take the output of \"git fast-export\", reads it into C++ data structures, manipulates it, and dumps out a new fast-import stream that is in turn fed to \"git fast-import\"</p>",
        "id": 230076610,
        "sender_full_name": "starseeker",
        "timestamp": 1615573872
    },
    {
        "content": "<p>so re-running the conversion</p>",
        "id": 230076811,
        "sender_full_name": "Sean",
        "timestamp": 1615573976
    },
    {
        "content": "<p>and fixing it then</p>",
        "id": 230076829,
        "sender_full_name": "Sean",
        "timestamp": 1615573982
    },
    {
        "content": "<p>or dumping the conversion, fixing, and re-importing</p>",
        "id": 230076885,
        "sender_full_name": "Sean",
        "timestamp": 1615574000
    },
    {
        "content": "<p>I think you mean you are dumping 12, doing all those corrections+fixes+etc, and then ending up with a new repo (call it 19 or 20 or whatever)?</p>",
        "id": 230077030,
        "sender_full_name": "Sean",
        "timestamp": 1615574054
    },
    {
        "content": "<p>The latter.  So the full sequence is:</p>\n<div class=\"codehilite\"><pre><span></span><code>cd old_repo &amp;&amp; git fast-export --all --show-original-ids &gt; ~/old.fi\n./repowork --mode-map exec_update.txt ~/old.fi new.fi\nmkdir new_repo &amp;&amp; cd new_repo &amp;&amp; git init\ncat ../new.fi | git fast-import\n</code></pre></div>",
        "id": 230077048,
        "sender_full_name": "starseeker",
        "timestamp": 1615574057
    },
    {
        "content": "<p>No, dumping (in this case) brlcad_added_gitattributes.</p>",
        "id": 230077112,
        "sender_full_name": "starseeker",
        "timestamp": 1615574093
    },
    {
        "content": "<p>That way I don't have to redo all the 12-&gt;18 corrections - they're already there.</p>",
        "id": 230077167,
        "sender_full_name": "starseeker",
        "timestamp": 1615574117
    },
    {
        "content": "<p>okay, I think I get it</p>",
        "id": 230077219,
        "sender_full_name": "Sean",
        "timestamp": 1615574141
    },
    {
        "content": "<p>That's why I was asking about the .gitattributes solution - I can also dump brlcad_tkhtml_fix and not incorporate the .gitattributes changes.</p>",
        "id": 230077258,
        "sender_full_name": "starseeker",
        "timestamp": 1615574161
    },
    {
        "content": "<p>sounds good.  Okay, so then ... is there anything to be done about the binary files?  we could audit them similarly</p>",
        "id": 230077315,
        "sender_full_name": "Sean",
        "timestamp": 1615574178
    },
    {
        "content": "<p>I'd like to avoid .gitattributes if we can.</p>",
        "id": 230077382,
        "sender_full_name": "Sean",
        "timestamp": 1615574213
    },
    {
        "content": "<p>Hrm.  I hadn't considered that beyond the known breakages...</p>",
        "id": 230077385,
        "sender_full_name": "starseeker",
        "timestamp": 1615574214
    },
    {
        "content": "<p>Well, we can't avoid something like that, unless you know about a Git feature I don't.</p>",
        "id": 230077460,
        "sender_full_name": "starseeker",
        "timestamp": 1615574249
    },
    {
        "content": "<p>I can pull the list of known correct and incorrect binaries the same way.  even doing every rev would probably take an hour or so</p>",
        "id": 230077476,
        "sender_full_name": "Sean",
        "timestamp": 1615574258
    },
    {
        "content": "<p>Whether the dsp or 3dm files get checked out as text or binary I don't think is governed by anything stored internally in the repo.</p>",
        "id": 230077513,
        "sender_full_name": "starseeker",
        "timestamp": 1615574280
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 230077545,
        "sender_full_name": "Sean",
        "timestamp": 1615574282
    },
    {
        "content": "<p>That's why I posted the <a href=\"http://no_blob.fi\">no_blob.fi</a> file.  If you check pretty much any commit, you'll see that only the mode and the blob sha1 are associated with the path.  There doesn't seem to be an equivalent to the svn:mime-type</p>",
        "id": 230077710,
        "sender_full_name": "starseeker",
        "timestamp": 1615574357
    },
    {
        "content": "<p><a href=\"https://git-scm.com/docs/gitattributes\">https://git-scm.com/docs/gitattributes</a></p>",
        "id": 230077866,
        "sender_full_name": "starseeker",
        "timestamp": 1615574416
    },
    {
        "content": "<p>right, my understanding is git doesn't actually store mixed encodings like svn</p>",
        "id": 230077981,
        "sender_full_name": "Sean",
        "timestamp": 1615574474
    },
    {
        "content": "<p>that everything is essentially just stored (binary) and whether it displays them or treats them as binary depends on it detecting non-ascii bytes</p>",
        "id": 230078035,
        "sender_full_name": "Sean",
        "timestamp": 1615574505
    },
    {
        "content": "<p>Right, which means if you want it to treat a file (say) as binary anyway (or keep Windows line endings on Linux, for that matter) you need some form of gitattributes override.  The dsp and 3dm files are getting detected as text, as far as I can tell.</p>",
        "id": 230078201,
        "sender_full_name": "starseeker",
        "timestamp": 1615574572
    },
    {
        "content": "<p>We could look for other files in the repository that should be binary but will match a text detection, although I'm not 100% how to set that up, but even once we know that there's no per-path property we can set in git (that I know of) that doesn't involve the .gitattributes file</p>",
        "id": 230078400,
        "sender_full_name": "starseeker",
        "timestamp": 1615574664
    },
    {
        "content": "<p>gotcha</p>",
        "id": 230078521,
        "sender_full_name": "Sean",
        "timestamp": 1615574724
    },
    {
        "content": "<p>in that case, I'm inclined to see-no-evil</p>",
        "id": 230078556,
        "sender_full_name": "Sean",
        "timestamp": 1615574743
    },
    {
        "content": "<p>too much potential to screw up something.  e.g., .dsp files .. those were msvc6 project files iirc, so they usually are/were text files</p>",
        "id": 230078727,
        "sender_full_name": "Sean",
        "timestamp": 1615574813
    },
    {
        "content": "<p>Right - that's where terra.dsp got so messed up historically - when people auto-set all the mime types for .dsp files.</p>",
        "id": 230078838,
        "sender_full_name": "starseeker",
        "timestamp": 1615574873
    },
    {
        "content": "<p>i mean, we can fix our little terra.dsp and 3dm, but probably not worth seeking out more</p>",
        "id": 230078848,
        "sender_full_name": "Sean",
        "timestamp": 1615574879
    },
    {
        "content": "<p>potential for error would probably be the few .g's that have been committed, but those are almost certainly correctly detected as binary</p>",
        "id": 230078982,
        "sender_full_name": "Sean",
        "timestamp": 1615574928
    },
    {
        "content": "<p>i'll do a spot check just to see if it looks like there were any important binaries in the history</p>",
        "id": 230079049,
        "sender_full_name": "Sean",
        "timestamp": 1615574964
    },
    {
        "content": "<p>similar 250 jumping to see what was binary</p>",
        "id": 230079069,
        "sender_full_name": "Sean",
        "timestamp": 1615574978
    },
    {
        "content": "<p>that just takes a couple min</p>",
        "id": 230079086,
        "sender_full_name": "Sean",
        "timestamp": 1615574993
    },
    {
        "content": "<p>oh that'll be handy -- this will also tell which files we changed the mime-type on, which might be an indicator that it was important</p>",
        "id": 230079686,
        "sender_full_name": "Sean",
        "timestamp": 1615575226
    },
    {
        "content": "<p>half done</p>",
        "id": 230079753,
        "sender_full_name": "Sean",
        "timestamp": 1615575244
    },
    {
        "content": "<p>Sounds good.  This repo has the exec updates from your new file:  <a href=\"https://github.com/starseeker/brlcad_exec2\">https://github.com/starseeker/brlcad_exec2</a></p>",
        "id": 230079847,
        "sender_full_name": "starseeker",
        "timestamp": 1615575297
    },
    {
        "content": "<p>4868 unique binary file paths</p>",
        "id": 230080689,
        "sender_full_name": "Sean",
        "timestamp": 1615575625
    },
    {
        "content": "<p>man... there's a lot of mime-type mistakes in there</p>",
        "id": 230081024,
        "sender_full_name": "Sean",
        "timestamp": 1615575743
    },
    {
        "content": "<p>/me fires distcheck-full on rel-7-32-2 from brlcad_exec2</p>",
        "id": 230082082,
        "sender_full_name": "starseeker",
        "timestamp": 1615576207
    },
    {
        "content": "<p>(or more specifically, <code>cmake .. -DFORCE_DISTCHECK=ON &amp;&amp; make distcheck-full</code>)</p>",
        "id": 230082206,
        "sender_full_name": "starseeker",
        "timestamp": 1615576268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> If you do find more important binary paths that test as text files, what did you want to do about them - make similar insertions of .gitattributes to protect them?</p>",
        "id": 230086046,
        "sender_full_name": "starseeker",
        "timestamp": 1615578090
    },
    {
        "content": "<p>still going through the list</p>",
        "id": 230086999,
        "sender_full_name": "Sean",
        "timestamp": 1615578536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> do you have an existing .gitconfig or other file specifying file extensions being binary or not somewhere?</p>",
        "id": 230087330,
        "sender_full_name": "Sean",
        "timestamp": 1615578686
    },
    {
        "content": "<p>My current heuristics are here:  <a href=\"https://github.com/starseeker/brlcad_exec2/blob/main/.gitattributes\">https://github.com/starseeker/brlcad_exec2/blob/main/.gitattributes</a></p>",
        "id": 230087475,
        "sender_full_name": "starseeker",
        "timestamp": 1615578743
    },
    {
        "content": "<p>but you just added that, no?</p>",
        "id": 230087656,
        "sender_full_name": "Sean",
        "timestamp": 1615578838
    },
    {
        "content": "<p>that's not what I'm getting at</p>",
        "id": 230087708,
        "sender_full_name": "Sean",
        "timestamp": 1615578848
    },
    {
        "content": "<p>Oh, you mean do I have something else on my system setting attributes?</p>",
        "id": 230087760,
        "sender_full_name": "starseeker",
        "timestamp": 1615578879
    },
    {
        "content": "<p>Not to my knowledge... let me see if there's a system file...</p>",
        "id": 230087785,
        "sender_full_name": "starseeker",
        "timestamp": 1615578896
    },
    {
        "content": "<p>It doesn't look like it, no.</p>",
        "id": 230087895,
        "sender_full_name": "starseeker",
        "timestamp": 1615578954
    },
    {
        "content": "<p>The fact that it got terra.dsp wrong is a little surprising as it clearly has non-printable characters.  The only reason I can think of where it would have committed that as text is somewhere something saying '.dsp files are text'.  I'm not finding that so it's a little concerning where that came from.</p>",
        "id": 230088066,
        "sender_full_name": "Sean",
        "timestamp": 1615579021
    },
    {
        "content": "<p>by any automatic measure, terra.dsp would have come up binary</p>",
        "id": 230088146,
        "sender_full_name": "Sean",
        "timestamp": 1615579061
    },
    {
        "content": "<p>Oh.  That may be my error.</p>",
        "id": 230088244,
        "sender_full_name": "starseeker",
        "timestamp": 1615579092
    },
    {
        "content": "<p>terra.dsp may have gotten the svn mime-type set by pattern match.</p>",
        "id": 230088303,
        "sender_full_name": "starseeker",
        "timestamp": 1615579116
    },
    {
        "content": "<p>It may be that left to itself it would be fine in git...</p>",
        "id": 230088334,
        "sender_full_name": "starseeker",
        "timestamp": 1615579135
    },
    {
        "content": "<p>that's file's been set both ways in svn, a source of issues over the years</p>",
        "id": 230088353,
        "sender_full_name": "Sean",
        "timestamp": 1615579146
    },
    {
        "content": "<p>That would simplify matters, actually - we'd only have to add .gitattributes for the 3dm file.</p>",
        "id": 230088390,
        "sender_full_name": "starseeker",
        "timestamp": 1615579165
    },
    {
        "content": "<p>As long as git doesn't have any built-in file extension awareness for *.dsp... I doubt it...</p>",
        "id": 230088587,
        "sender_full_name": "starseeker",
        "timestamp": 1615579241
    },
    {
        "content": "<p>I can't imagine it does either.</p>",
        "id": 230088630,
        "sender_full_name": "Sean",
        "timestamp": 1615579259
    },
    {
        "content": "<p>is NIST_MBE_PMI_7-10.3dm the only 3dm file or was something else triggering it?</p>",
        "id": 230088676,
        "sender_full_name": "Sean",
        "timestamp": 1615579279
    },
    {
        "content": "<p>that's another that should get detected as binary... I mean unless the detection method is onerously too simple.</p>",
        "id": 230088828,
        "sender_full_name": "Sean",
        "timestamp": 1615579323
    },
    {
        "content": "<p>I believe it's the only uncompressed 3dm file</p>",
        "id": 230088840,
        "sender_full_name": "starseeker",
        "timestamp": 1615579327
    },
    {
        "content": "<p>src/libbrep/tests/ayam_hyperbolid.3dm I guess would be another one.</p>",
        "id": 230088919,
        "sender_full_name": "starseeker",
        "timestamp": 1615579365
    },
    {
        "content": "<p>but I don't think I've got that hooked into any build tests right now...</p>",
        "id": 230088970,
        "sender_full_name": "starseeker",
        "timestamp": 1615579385
    },
    {
        "content": "<p>is that in the history or something?</p>",
        "id": 230088994,
        "sender_full_name": "Sean",
        "timestamp": 1615579388
    },
    {
        "content": "<p>oh strange</p>",
        "id": 230089057,
        "sender_full_name": "Sean",
        "timestamp": 1615579412
    },
    {
        "content": "<p>/me blinks - it should be in trunk...</p>",
        "id": 230089085,
        "sender_full_name": "starseeker",
        "timestamp": 1615579427
    },
    {
        "content": "<p>so that file is in svn trunk, but it's not in conv18</p>",
        "id": 230089098,
        "sender_full_name": "Sean",
        "timestamp": 1615579434
    },
    {
        "content": "<p>oh right, my bad -- that was my 7.30 test</p>",
        "id": 230089228,
        "sender_full_name": "Sean",
        "timestamp": 1615579471
    },
    {
        "content": "<p>there it is</p>",
        "id": 230089306,
        "sender_full_name": "Sean",
        "timestamp": 1615579512
    },
    {
        "content": "<p>/me blinks - terra.dsp is coming out different in SVN and git checkouts according to diff, even though I fixed the SVN mime type in 70882</p>",
        "id": 230089335,
        "sender_full_name": "starseeker",
        "timestamp": 1615579520
    },
    {
        "content": "<p>/me growls and heads for a CVS checkout... what's the right file here??</p>",
        "id": 230089392,
        "sender_full_name": "starseeker",
        "timestamp": 1615579547
    },
    {
        "content": "<p>OK, I guess that makes sense, kind of.  Both r18847 and latest trunk SVN checkout of terra.dsp diff with the CVS checkout, but the git checkout matches the CVS checkout.</p>",
        "id": 230089887,
        "sender_full_name": "starseeker",
        "timestamp": 1615579746
    },
    {
        "content": "<p>/me doesn't know why NONE of the SVN checkouts match CVS, but I guess it doesn't really matter at this point...</p>",
        "id": 230089931,
        "sender_full_name": "starseeker",
        "timestamp": 1615579772
    },
    {
        "content": "<p>interesting.  so the difference is really subtle.</p>",
        "id": 230090611,
        "sender_full_name": "Sean",
        "timestamp": 1615580047
    },
    {
        "content": "<p>trunk's terra.dsp doesn't appear to have any 0x13 bytes (carriage returns)</p>",
        "id": 230090875,
        "sender_full_name": "Sean",
        "timestamp": 1615580171
    },
    {
        "content": "<p>it does have 0x11 bytes (newlines)</p>",
        "id": 230090910,
        "sender_full_name": "Sean",
        "timestamp": 1615580191
    },
    {
        "content": "<p>conv18's terra.dsp has both 0x13 and 0x11 bytes which at a glance is probably correct</p>",
        "id": 230090988,
        "sender_full_name": "Sean",
        "timestamp": 1615580232
    },
    {
        "content": "<p>it's also worth mentioning that both are perfectly valid dsp data files for the same dimensional specification.  the difference is going to be a 1/32768 difference in elevation at those points.</p>",
        "id": 230091164,
        "sender_full_name": "Sean",
        "timestamp": 1615580325
    },
    {
        "content": "<p>I just tested brlcad_tkhtml_fix on Windows, which for older checkouts doesn't have .gitattributes.   terra.dsp checkout matches the CVS version according to diff, so you're correct - we don't need .dsp flagged as binary explicitly.  We just need to make sure we <em>don't</em> flag it as Windows line ending in git.</p>",
        "id": 230091231,
        "sender_full_name": "starseeker",
        "timestamp": 1615580368
    },
    {
        "content": "<p>It's probably worth leaving the entry in the new .gitattributes to avoid that, but we don't need to insert it in the old history for that purpose.  I'll adjust my logic to only add the .3dm version.</p>",
        "id": 230091466,
        "sender_full_name": "starseeker",
        "timestamp": 1615580479
    },
    {
        "content": "<p>can we get rid of the top-level .gitattributes altogether?  rather we stick to defaults if we can manage.</p>",
        "id": 230091475,
        "sender_full_name": "Sean",
        "timestamp": 1615580487
    },
    {
        "content": "<p>We still need it for .3dm</p>",
        "id": 230091507,
        "sender_full_name": "starseeker",
        "timestamp": 1615580505
    },
    {
        "content": "<p>can't that be a single-line .gitattributes in that lone 3dm's folder?</p>",
        "id": 230091699,
        "sender_full_name": "Sean",
        "timestamp": 1615580591
    },
    {
        "content": "<p>Let me see if git supports that...</p>",
        "id": 230091726,
        "sender_full_name": "starseeker",
        "timestamp": 1615580611
    },
    {
        "content": "<p>there's so much override specified in that file, I can see that coming to bite down the road or at least being a debugging discovery journey</p>",
        "id": 230091761,
        "sender_full_name": "Sean",
        "timestamp": 1615580634
    },
    {
        "content": "<p>but that also still begs the question how that 3dm is getting treated as text... it's full of binary</p>",
        "id": 230091852,
        "sender_full_name": "Sean",
        "timestamp": 1615580664
    },
    {
        "content": "<p>'file' sees it as binary</p>",
        "id": 230091875,
        "sender_full_name": "Sean",
        "timestamp": 1615580676
    },
    {
        "content": "<p>Yeah, I don't know why Windows treated it differently.</p>",
        "id": 230091968,
        "sender_full_name": "starseeker",
        "timestamp": 1615580720
    },
    {
        "content": "<p>OK, if I'm reading this right, \".gitattributes file in the same directory as the path in question\" is in the precedence list, so you should be correct we can target locally.</p>",
        "id": 230092191,
        "sender_full_name": "starseeker",
        "timestamp": 1615580770
    },
    {
        "content": "<p>I would target as specific and minimally as possible for this initial thrust</p>",
        "id": 230092413,
        "sender_full_name": "Sean",
        "timestamp": 1615580819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I'm game to ditch the top level .gitattributes in main - I added it mostly trying to match the subversion default rules you had set up...</p>",
        "id": 230092487,
        "sender_full_name": "starseeker",
        "timestamp": 1615580847
    },
    {
        "content": "<p>Give me a few minutes to rework the repowork in puts...</p>",
        "id": 230092556,
        "sender_full_name": "starseeker",
        "timestamp": 1615580874
    },
    {
        "content": "<p>okay, so apparently their method is essentially ...\"check for any occurrence of a zero/nul byte in the first 8000 bytes\"</p>",
        "id": 230092686,
        "sender_full_name": "Sean",
        "timestamp": 1615580918
    },
    {
        "content": "<p>/me checks that file</p>",
        "id": 230092712,
        "sender_full_name": "Sean",
        "timestamp": 1615580933
    },
    {
        "content": "<p>so terra.dsp qualifies.  it's got a zero around byte 280</p>",
        "id": 230092819,
        "sender_full_name": "Sean",
        "timestamp": 1615580984
    },
    {
        "content": "<p>okay, so NIST_MBE_PMI_7-10.3dm has a zero byte at the 34th byte in the file...</p>",
        "id": 230093136,
        "sender_full_name": "Sean",
        "timestamp": 1615581101
    },
    {
        "content": "<p>34th, 35th, 36th, 39th, 40th are all zero...</p>",
        "id": 230093232,
        "sender_full_name": "Sean",
        "timestamp": 1615581129
    },
    {
        "content": "<p>did you maybe use some git checkout tool that had a built-in config such that it was an individual issue?</p>",
        "id": 230093365,
        "sender_full_name": "Sean",
        "timestamp": 1615581191
    },
    {
        "content": "<p>/me shrugs.  Maybe - I'll try again.</p>",
        "id": 230093410,
        "sender_full_name": "starseeker",
        "timestamp": 1615581215
    },
    {
        "content": "<p>according to git on mac, it thinks they're binary...<br>\nthis tells which it thinks are binary:  git diff --numstat 4b825dc642cb6eb9a060e54bf8d69288fbee4904 HEAD -- | grep '^-'</p>",
        "id": 230094023,
        "sender_full_name": "Sean",
        "timestamp": 1615581495
    },
    {
        "content": "<p>I just tried again cloning with Git on Windows - the SVN checkout and the git checkout differ.</p>",
        "id": 230094347,
        "sender_full_name": "starseeker",
        "timestamp": 1615581668
    },
    {
        "content": "<p>those would seem to imply we don't need to do anything for them and terra.dsp is getting historically and contemporarily fixed by the migration</p>",
        "id": 230094355,
        "sender_full_name": "Sean",
        "timestamp": 1615581673
    },
    {
        "content": "<p>maybe the svn checkout is wrong</p>",
        "id": 230094416,
        "sender_full_name": "Sean",
        "timestamp": 1615581716
    },
    {
        "content": "<p>terra.dsp agreed.  The 3dm files are the issue - ayam_hyperbolid.3dm also differs between git and SVN checkouts.</p>",
        "id": 230094519,
        "sender_full_name": "starseeker",
        "timestamp": 1615581751
    },
    {
        "content": "<p>3dm-g works on the SVN checkouts, but not the git versions.</p>",
        "id": 230094542,
        "sender_full_name": "starseeker",
        "timestamp": 1615581771
    },
    {
        "content": "<p>/me double checks that...</p>",
        "id": 230094559,
        "sender_full_name": "starseeker",
        "timestamp": 1615581780
    },
    {
        "content": "<p>Confirmed.  Git checkouts of both 3dm files on Windows fail to convert with 3dm-g</p>",
        "id": 230094752,
        "sender_full_name": "starseeker",
        "timestamp": 1615581879
    },
    {
        "content": "<p>what's the checkout tool?</p>",
        "id": 230094818,
        "sender_full_name": "Sean",
        "timestamp": 1615581914
    },
    {
        "content": "<p>this: <a href=\"https://git-scm.com/download/win\">https://git-scm.com/download/win</a> ?</p>",
        "id": 230094861,
        "sender_full_name": "Sean",
        "timestamp": 1615581943
    },
    {
        "content": "<p>Just the standard Git windows install, from the bash command line</p>",
        "id": 230094872,
        "sender_full_name": "starseeker",
        "timestamp": 1615581948
    },
    {
        "content": "<p>I believe so, yes.</p>",
        "id": 230094931,
        "sender_full_name": "starseeker",
        "timestamp": 1615581966
    },
    {
        "content": "<p>what does this report on windows: git diff --numstat 4b825dc642cb6eb9a060e54bf8d69288fbee4904 HEAD -- | grep '^-' | grep 3dm</p>",
        "id": 230094991,
        "sender_full_name": "Sean",
        "timestamp": 1615582015
    },
    {
        "content": "<p>I get:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>morrison@agua brlcad_conv18 % git diff --numstat 4b825dc642cb6eb9a060e54bf8d69288fbee4904 HEAD -- | grep '^-' | grep 3dm\n-   -   db/nist/NIST_MBE_PMI_7-10.3dm\n-   -   regress/nurbs/brep-3dm.tar.bz2\n-   -   src/libbrep/tests/ayam_hyperbolid.3dm\n</code></pre></div>",
        "id": 230095043,
        "sender_full_name": "Sean",
        "timestamp": 1615582054
    },
    {
        "content": "<p>or git diff --stat ... it reports Bin too</p>",
        "id": 230095238,
        "sender_full_name": "Sean",
        "timestamp": 1615582148
    },
    {
        "content": "<p>Yes, that matches</p>",
        "id": 230095247,
        "sender_full_name": "starseeker",
        "timestamp": 1615582151
    },
    {
        "content": "<p>Are the bytes the same? </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>% git diff --stat 4b825dc642cb6eb9a060e54bf8d69288fbee4904 HEAD -- | grep 3dm\n db/nist/NIST_MBE_PMI_7-10.3dm                      |    Bin 0 -&gt; 4232626 bytes\n regress/nurbs/brep-3dm.tar.bz2                     |    Bin 0 -&gt; 103242 bytes\n src/conv/3dm/3dm-g.c                               |    137 +\n src/conv/3dm/CMakeLists.txt                        |     16 +\n src/libbrep/tests/ayam_hyperbolid.3dm              |    Bin 0 -&gt; 4189 bytes\n src/other/openNURBS/opennurbs_3dm.h                |    528 +\n src/other/openNURBS/opennurbs_3dm_attributes.cpp   |   1528 +\n src/other/openNURBS/opennurbs_3dm_attributes.h     |    573 +\n src/other/openNURBS/opennurbs_3dm_properties.cpp   |    598 +\n src/other/openNURBS/opennurbs_3dm_properties.h     |    142 +\n src/other/openNURBS/opennurbs_3dm_settings.cpp     |   4036 +\n src/other/openNURBS/opennurbs_3dm_settings.h       |    891 +\n</code></pre></div>",
        "id": 230095325,
        "sender_full_name": "Sean",
        "timestamp": 1615582203
    },
    {
        "content": "<p><a href=\"https://brlcad.org/~starseeker/ayam_hyperbolid.3dm.gz\">https://brlcad.org/~starseeker/ayam_hyperbolid.3dm.gz</a></p>",
        "id": 230095481,
        "sender_full_name": "starseeker",
        "timestamp": 1615582266
    },
    {
        "content": "<p>there's one of the windows checkouts...</p>",
        "id": 230095500,
        "sender_full_name": "starseeker",
        "timestamp": 1615582276
    },
    {
        "content": "<p><a href=\"https://brlcad.org/~starseeker/NIST_MBE_PMI_7-10.3dm.gz\">https://brlcad.org/~starseeker/NIST_MBE_PMI_7-10.3dm.gz</a></p>",
        "id": 230095644,
        "sender_full_name": "starseeker",
        "timestamp": 1615582348
    },
    {
        "content": "<p>yeah, it's bigger 4199 bytes</p>",
        "id": 230095752,
        "sender_full_name": "Sean",
        "timestamp": 1615582404
    },
    {
        "content": "<p>and confirmed in hex mode, it's converted 0a's to 0d0a's</p>",
        "id": 230095781,
        "sender_full_name": "Sean",
        "timestamp": 1615582423
    },
    {
        "content": "<p>WHY?  does stat say they're Bin for you ??</p>",
        "id": 230095920,
        "sender_full_name": "Sean",
        "timestamp": 1615582477
    },
    {
        "content": "<p>Interestingly, I get the same report when I ask git:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git diff --stat 4b825dc642cb6eb9a060e54bf8d69288fbee4904 HEAD -- | grep 3dm\n db/nist/NIST_MBE_PMI_7-10.3dm                      |    Bin 0 -&gt; 4232626 bytes\n regress/nurbs/brep-3dm.tar.bz2                     |    Bin 0 -&gt; 103242 bytes\n src/conv/3dm/3dm-g.c                               |    137 +\n src/conv/3dm/CMakeLists.txt                        |     16 +\n src/libbrep/tests/ayam_hyperbolid.3dm              |    Bin 0 -&gt; 4189 bytes\n src/other/openNURBS/opennurbs_3dm.h                |    528 +\n src/other/openNURBS/opennurbs_3dm_attributes.cpp   |   1528 +\n src/other/openNURBS/opennurbs_3dm_attributes.h     |    573 +\n src/other/openNURBS/opennurbs_3dm_properties.cpp   |    598 +\n src/other/openNURBS/opennurbs_3dm_properties.h     |    142 +\n src/other/openNURBS/opennurbs_3dm_settings.cpp     |   4036 +\n src/other/openNURBS/opennurbs_3dm_settings.h       |    891 +\n</code></pre></div>",
        "id": 230095992,
        "sender_full_name": "starseeker",
        "timestamp": 1615582509
    },
    {
        "content": "<p>yeah, see that makes no f'ing sense...</p>",
        "id": 230096041,
        "sender_full_name": "Sean",
        "timestamp": 1615582526
    },
    {
        "content": "<p>it thinks they're binary ... yet it's been translated by something</p>",
        "id": 230096068,
        "sender_full_name": "Sean",
        "timestamp": 1615582539
    },
    {
        "content": "<p>\"something\"</p>",
        "id": 230096144,
        "sender_full_name": "Sean",
        "timestamp": 1615582563
    },
    {
        "content": "<p>Here's what stat says:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ stat db/nist/NIST_MBE_PMI_7-10.3dm\n  File: db/nist/NIST_MBE_PMI_7-10.3dm\n  Size: 4232626         Blocks: 4136       IO Block: 65536  regular file\nDevice: e02c1581h/3760985473d   Inode: 3096224743825018  Links: 1\nAccess: (0644/-rw-r--r--)  Uid: (197612/   cliff)   Gid: (197612/ UNKNOWN)\nAccess: 2021-03-12 15:55:21.920148200 -0500\nModify: 2021-03-12 15:53:06.716503800 -0500\nChange: 2021-03-12 15:53:06.716503800 -0500\n Birth: 2021-03-12 15:53:06.716503800 -0500\n</code></pre></div>",
        "id": 230096175,
        "sender_full_name": "starseeker",
        "timestamp": 1615582580
    },
    {
        "content": "<p>woah, that's odd too</p>",
        "id": 230096253,
        "sender_full_name": "Sean",
        "timestamp": 1615582620
    },
    {
        "content": "<p>4232626 bytes ... yet the file you sent me is 4243206 bytes</p>",
        "id": 230096556,
        "sender_full_name": "Sean",
        "timestamp": 1615582748
    },
    {
        "content": "<p>how's that possible?</p>",
        "id": 230096617,
        "sender_full_name": "Sean",
        "timestamp": 1615582777
    },
    {
        "content": "<p>stat is saying it has no carriage returns, yet the file you sent has carriage returns</p>",
        "id": 230096703,
        "sender_full_name": "Sean",
        "timestamp": 1615582803
    },
    {
        "content": "<p>that's stat on windows?</p>",
        "id": 230096762,
        "sender_full_name": "Sean",
        "timestamp": 1615582818
    },
    {
        "content": "<p>Yes.  All those were run from the git bash command prompt</p>",
        "id": 230096832,
        "sender_full_name": "starseeker",
        "timestamp": 1615582835
    },
    {
        "content": "<p>what's ls say?</p>",
        "id": 230096909,
        "sender_full_name": "Sean",
        "timestamp": 1615582862
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ ls -l db/nist/NIST_MBE_PMI_7-10.3dm\n-rw-r--r-- 1 cliff 197612 4232626 Mar 12 15:53 db/nist/NIST_MBE_PMI_7-10.3dm\n</code></pre></div>",
        "id": 230097007,
        "sender_full_name": "starseeker",
        "timestamp": 1615582911
    },
    {
        "content": "<p>!</p>",
        "id": 230097025,
        "sender_full_name": "Sean",
        "timestamp": 1615582919
    },
    {
        "content": "<p>and you're saying 3dm-g in that same shell dies on it?</p>",
        "id": 230097126,
        "sender_full_name": "Sean",
        "timestamp": 1615582958
    },
    {
        "content": "<p>Well, I first got this:</p>\n<div class=\"codehilite\"><pre><span></span><code> /c/brlcad-build/Debug/bin/3dm-g.exe -o test.g brlcad_tkhtml_fix/src/libbrep/tests/ayam_hyperbolid.3dm\ninvalid input file (&#39;ONX_Model::Read() failed.\n\nNote:  if this file was saved from Rhino3D, make sure it was saved using\nRhino&#39;s v5 format or lower - newer versions of the 3dm format are not\ncurrently supported by BRL-CAD.&#39;)\n\nfailed to load input file\n</code></pre></div>\n<p>but I just tried it again and it seemed to work???</p>",
        "id": 230097454,
        "sender_full_name": "starseeker",
        "timestamp": 1615583128
    },
    {
        "content": "<p>And now the diff matches????????!!!!!</p>",
        "id": 230097619,
        "sender_full_name": "starseeker",
        "timestamp": 1615583205
    },
    {
        "content": "<p>that's what's confusing because all the numbers are pointing at it being correct (now)</p>",
        "id": 230097629,
        "sender_full_name": "Sean",
        "timestamp": 1615583210
    },
    {
        "content": "<p>What in the world?</p>",
        "id": 230097636,
        "sender_full_name": "starseeker",
        "timestamp": 1615583215
    },
    {
        "content": "<p>maybe make sure you don't ahve a git diff or checkout again or something</p>",
        "id": 230097666,
        "sender_full_name": "Sean",
        "timestamp": 1615583227
    },
    {
        "content": "<p>It's almost as if it wrote an intermediate version of the file and then went back and changed it</p>",
        "id": 230097678,
        "sender_full_name": "starseeker",
        "timestamp": 1615583238
    },
    {
        "content": "<p>not a .gitattributes or .gitconfig or something...</p>",
        "id": 230097688,
        "sender_full_name": "Sean",
        "timestamp": 1615583243
    },
    {
        "content": "<p>/me starts over...</p>",
        "id": 230097697,
        "sender_full_name": "starseeker",
        "timestamp": 1615583248
    },
    {
        "content": "<p>check that size after every step<br>\n4232626 is correct... 423 good 424 bad</p>",
        "id": 230097750,
        "sender_full_name": "Sean",
        "timestamp": 1615583281
    },
    {
        "content": "<p>OK, fresh checkout, back to bad file:</p>\n<div class=\"codehilite\"><pre><span></span><code>MINGW64 /c\n$ ls -l brlcad_tkhtml_fix/db/nist/NIST_MBE_PMI_7-10.3dm\n-rw-r--r-- 1 cliff 197612 4243206 Mar 12 16:08 brlcad_tkhtml_fix/db/nist/NIST_MBE_PMI_7-10.3dm\n\nMINGW64 /c\n$ diff brlcad_tkhtml_fix/db/nist/NIST_MBE_PMI_7-10.3dm brlcad/db/nist/NIST_MBE_PMI_7-10.3dm\nBinary files brlcad_tkhtml_fix/db/nist/NIST_MBE_PMI_7-10.3dm and brlcad/db/nist/NIST_MBE_PMI_7-10.3dm differ\n\nMINGW64 /c\n$ ls -l brlcad_tkhtml_fix/db/nist/NIST_MBE_PMI_7-10.3dm\n-rw-r--r-- 1 cliff 197612 4243206 Mar 12 16:08 brlcad_tkhtml_fix/db/nist/NIST_MBE_PMI_7-10.3dm\n\nMINGW64 /c\n$ /c/brlcad-build/Debug/bin/3dm-g.exe -o /c/brlcad_tkhtml_fix/test.g brlcad_tkhtml_fix/db/nist/NIST_MBE_PMI_7-10.3dm\ninvalid input file (&#39;ONX_Model::Read() failed.\n\nNote:  if this file was saved from Rhino3D, make sure it was saved using\nRhino&#39;s v5 format or lower - newer versions of the 3dm format are not\ncurrently supported by BRL-CAD.&#39;)\n\nfailed to load input file\n\nMINGW64 /c\n$ ls -l brlcad_tkhtml_fix/db/nist/NIST_MBE_PMI_7-10.3dm\n -rw-r--r-- 1 cliff 197612 4243206 Mar 12 16:08 brlcad_tkhtml_fix/db/nist/NIST_MBE_PMI_7-10.3dm\n\n MINGW64 /c\n$ date\nFri Mar 12 16:11:59 EST 2021\n</code></pre></div>",
        "id": 230098408,
        "sender_full_name": "starseeker",
        "timestamp": 1615583578
    },
    {
        "content": "<p>So far it hasn't fixed itself again...</p>",
        "id": 230099117,
        "sender_full_name": "starseeker",
        "timestamp": 1615583894
    },
    {
        "content": "<p>stat at least agrees with the wrong version this time:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ stat db/nist/NIST_MBE_PMI_7-10.3dm\n  File: db/nist/NIST_MBE_PMI_7-10.3dm\n  Size: 4243206         Blocks: 4144       IO Block: 65536  regular file\nDevice: e02c1581h/3760985473d   Inode: 48132221017637258  Links: 1\nAccess: (0644/-rw-r--r--)  Uid: (197612/   cliff)   Gid: (197612/ UNKNOWN)\nAccess: 2021-03-12 16:17:43.513220300 -0500\nModify: 2021-03-12 16:16:43.532223700 -0500\nChange: 2021-03-12 16:16:43.532223700 -0500\n Birth: 2021-03-12 16:08:53.242552400 -0500\n</code></pre></div>",
        "id": 230099250,
        "sender_full_name": "starseeker",
        "timestamp": 1615583956
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>MINGW64 /c/brlcad_tkhtml_fix (main)\n$ git diff --stat 4b825dc642cb6eb9a060e54bf8d69288fbee4904 HEAD -- | grep 3dm\n db/nist/NIST_MBE_PMI_7-10.3dm                      |    Bin 0 -&gt; 4232626 bytes\n regress/nurbs/brep-3dm.tar.bz2                     |    Bin 0 -&gt; 103242 bytes\n src/conv/3dm/3dm-g.c                               |    137 +\n src/conv/3dm/CMakeLists.txt                        |     16 +\n src/libbrep/tests/ayam_hyperbolid.3dm              |    Bin 0 -&gt; 4189 bytes\n src/other/openNURBS/opennurbs_3dm.h                |    528 +\n src/other/openNURBS/opennurbs_3dm_attributes.cpp   |   1528 +\n src/other/openNURBS/opennurbs_3dm_attributes.h     |    573 +\n src/other/openNURBS/opennurbs_3dm_properties.cpp   |    598 +\n src/other/openNURBS/opennurbs_3dm_properties.h     |    142 +\n src/other/openNURBS/opennurbs_3dm_settings.cpp     |   4036 +\n src/other/openNURBS/opennurbs_3dm_settings.h       |    891 +\n\nMINGW64 /c/brlcad_tkhtml_fix (main)\n$ stat db/nist/NIST_MBE_PMI_7-10.3dm\n  File: db/nist/NIST_MBE_PMI_7-10.3dm\n  Size: 4243206         Blocks: 4144       IO Block: 65536  regular file\nDevice: e02c1581h/3760985473d   Inode: 48132221017637258  Links: 1\nAccess: (0644/-rw-r--r--)  Uid: (197612/   cliff)   Gid: (197612/ UNKNOWN)\nAccess: 2021-03-12 16:17:43.852005600 -0500\nModify: 2021-03-12 16:16:43.532223700 -0500\nChange: 2021-03-12 16:16:43.532223700 -0500\n Birth: 2021-03-12 16:08:53.242552400 -0500\n</code></pre></div>",
        "id": 230099418,
        "sender_full_name": "starseeker",
        "timestamp": 1615584028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>    I dont' suppose you have access to a similar environment?</p>",
        "id": 230099790,
        "sender_full_name": "starseeker",
        "timestamp": 1615584200
    },
    {
        "content": "<p>what about a git up or git stat .. wondering if that fixed it</p>",
        "id": 230099817,
        "sender_full_name": "Sean",
        "timestamp": 1615584217
    },
    {
        "content": "<p>I've tried deleting it and re-checking it out - to no avail</p>",
        "id": 230099934,
        "sender_full_name": "starseeker",
        "timestamp": 1615584268
    },
    {
        "content": "<p>it has to have been a git tool that fixed it.. you tried git diff --stat or git diff --numstat on it?</p>",
        "id": 230100193,
        "sender_full_name": "Sean",
        "timestamp": 1615584383
    },
    {
        "content": "<p>I'm thinking the GUI checkout tool has a bug</p>",
        "id": 230100245,
        "sender_full_name": "Sean",
        "timestamp": 1615584414
    },
    {
        "content": "<p>I didn't use the GUI though - just the command line</p>",
        "id": 230100273,
        "sender_full_name": "starseeker",
        "timestamp": 1615584427
    },
    {
        "content": "<p>well torpedo'd that thought good</p>",
        "id": 230100314,
        "sender_full_name": "Sean",
        "timestamp": 1615584443
    },
    {
        "content": "<p>and your .gitconfig is empty?  and no .gitattributes?</p>",
        "id": 230100390,
        "sender_full_name": "Sean",
        "timestamp": 1615584477
    },
    {
        "content": "<p>cause now it's a double mystery.  why it's cloning wrong and  how it got fixed.</p>",
        "id": 230100479,
        "sender_full_name": "Sean",
        "timestamp": 1615584498
    },
    {
        "content": "<p>Only thing I can think of is that .gitattributes file I added in main may actually be the problem.</p>",
        "id": 230100496,
        "sender_full_name": "starseeker",
        "timestamp": 1615584506
    },
    {
        "content": "<p>Yep. I'll be that's it.</p>",
        "id": 230100844,
        "sender_full_name": "starseeker",
        "timestamp": 1615584641
    },
    {
        "content": "<p>It checked out wrong in main because some rule I stuck in there must have matched the 3dm file, then when the branch checked out it kept the file that had been \"modified\" by the .gitattributes file.</p>",
        "id": 230101001,
        "sender_full_name": "starseeker",
        "timestamp": 1615584699
    },
    {
        "content": "<p>OK, I'm convinced - no gitattributes file.</p>",
        "id": 230101037,
        "sender_full_name": "starseeker",
        "timestamp": 1615584714
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> That's what I suspected would eventually happen... just not so soon.</p>",
        "id": 230101152,
        "sender_full_name": "Sean",
        "timestamp": 1615584749
    },
    {
        "content": "<p>When I switched to the branch that didn't have the file, blew away the modded 3dm file, and restored from the branch rather than main that's where the good file came from.</p>",
        "id": 230101181,
        "sender_full_name": "starseeker",
        "timestamp": 1615584767
    },
    {
        "content": "<p>ahh! yep, that'd explain it. whew.</p>",
        "id": 230101277,
        "sender_full_name": "Sean",
        "timestamp": 1615584812
    },
    {
        "content": "<p>OK.  I'll back up to conv18 (or the one with your readme update if I've got it) and re-apply the tkhtml fix and the exec settings.  We should then be Good To Go - minimalism wins again.</p>",
        "id": 230101304,
        "sender_full_name": "starseeker",
        "timestamp": 1615584829
    },
    {
        "content": "<p>Ima need a hard drink tonight after that</p>",
        "id": 230101312,
        "sender_full_name": "Sean",
        "timestamp": 1615584834
    },
    {
        "content": "<p>README update wasn't important.  that was just testing commit</p>",
        "id": 230101399,
        "sender_full_name": "Sean",
        "timestamp": 1615584856
    },
    {
        "content": "<p>I plan to completely overhaul the readme soon once all the other docs and tickets are in place.</p>",
        "id": 230101461,
        "sender_full_name": "Sean",
        "timestamp": 1615584884
    },
    {
        "content": "<p>/me has been rather bad for your stress levels this week.  OK, give me a few minutes to do a final pass and I'll upload the final candidate.</p>",
        "id": 230101627,
        "sender_full_name": "starseeker",
        "timestamp": 1615584954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> remind me after we're done here to check the fast4 regression test - one of those files is deliberately Windows line endings and one is deliberately Linux - we may have to switch the in repo copies of those files to be .bz2 or something so they don't get autoupdated as text files on checkout.</p>",
        "id": 230103869,
        "sender_full_name": "starseeker",
        "timestamp": 1615586018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> While we're thinking about it, did you also want to eliminate .gitignore?  It's in there now because it gave us some non-empty SVN commits for id mapping, but maybe we want to eliminate it now.</p>",
        "id": 230104059,
        "sender_full_name": "starseeker",
        "timestamp": 1615586116
    },
    {
        "content": "<p><a href=\"https://github.com/starseeker/brlcad_conv19\">https://github.com/starseeker/brlcad_conv19</a></p>",
        "id": 230104329,
        "sender_full_name": "starseeker",
        "timestamp": 1615586260
    },
    {
        "content": "<p>Windows build and distcheck-full running on rel-7-32-2 tag from that repo now.  Will confirm if successful in a few hours</p>",
        "id": 230109001,
        "sender_full_name": "starseeker",
        "timestamp": 1615587589
    },
    {
        "content": "<p>I'll start testing 19 now too unless there's a reason to wait.</p>",
        "id": 230112005,
        "sender_full_name": "Sean",
        "timestamp": 1615589163
    },
    {
        "content": "<p>Go for it</p>",
        "id": 230112088,
        "sender_full_name": "starseeker",
        "timestamp": 1615589212
    },
    {
        "content": "<p>Windows build passed, distcheck full Ubuntu passed for rel-7-32-2</p>",
        "id": 230123868,
        "sender_full_name": "starseeker",
        "timestamp": 1615598601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Any other checks you'd like me to run?</p>",
        "id": 230176535,
        "sender_full_name": "starseeker",
        "timestamp": 1615656010
    },
    {
        "content": "<p>maybe just make sure the few .g's that are in the repo open and seem valid?</p>",
        "id": 230381568,
        "sender_full_name": "Sean",
        "timestamp": 1615827359
    },
    {
        "content": "<p>I'm running out of checks on my end, I think I'll upload the update this afternoon unless you found anything</p>",
        "id": 230381682,
        "sender_full_name": "Sean",
        "timestamp": 1615827393
    },
    {
        "content": "<p><code>find ../ -name \\*.g -exec ./bin/mged {} ls \\;</code> came through clean, as far as I can tell.</p>",
        "id": 230389240,
        "sender_full_name": "starseeker",
        "timestamp": 1615830232
    },
    {
        "content": "<p>Ditto on Windows (git bash shell)</p>",
        "id": 230396391,
        "sender_full_name": "starseeker",
        "timestamp": 1615833089
    },
    {
        "content": "<p>Hello everyone, will it be possible if someone can point me out to the getting started docs or quick start  docs for  opencax ?</p>",
        "id": 230404200,
        "sender_full_name": "Prabhat Singh",
        "timestamp": 1615836693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> something that exercises external-to-internal form, like doing a get * or draw *.  ls doesn't crack them iirc.</p>",
        "id": 230408277,
        "sender_full_name": "Sean",
        "timestamp": 1615838312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> draw console output matches that from SVN build.</p>",
        "id": 230431428,
        "sender_full_name": "starseeker",
        "timestamp": 1615847287
    },
    {
        "content": "<p>g2asc output for all of them matches as well, except for a few chars in the openNURBS serializations of the breps.</p>",
        "id": 230432106,
        "sender_full_name": "starseeker",
        "timestamp": 1615847620
    },
    {
        "content": "<p>OK, yeah - the openNURBS serializations differ even building from the same sources, when different build dirs are used.</p>",
        "id": 230447269,
        "sender_full_name": "starseeker",
        "timestamp": 1615858343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> no known blockers on my side...</p>",
        "id": 230447326,
        "sender_full_name": "starseeker",
        "timestamp": 1615858398
    },
    {
        "content": "<p>Anything I can do to help?</p>",
        "id": 230600491,
        "sender_full_name": "starseeker",
        "timestamp": 1615932617
    },
    {
        "content": "<p>I just finished up, didn't find anything else.  Will upload in the morning.</p>",
        "id": 230645495,
        "sender_full_name": "Sean",
        "timestamp": 1615963787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> If it's the vanilla brlcad_conv19 repo, shall I go ahead and upload it?</p>",
        "id": 230787286,
        "sender_full_name": "starseeker",
        "timestamp": 1616024529
    },
    {
        "content": "<p>No, not yet</p>",
        "id": 230787966,
        "sender_full_name": "Sean",
        "timestamp": 1616024971
    },
    {
        "content": "<p>So I think a \"soft opening\" is probably in order.  It's uploaded and live, but perhaps we could give it a few days to \"simmer\" .. not announce it publicly just yet.</p>",
        "id": 230969070,
        "sender_full_name": "Sean",
        "timestamp": 1616122913
    },
    {
        "content": "<p>Sounds good.  So to be sure - I'm clear to commit?</p>",
        "id": 230971094,
        "sender_full_name": "starseeker",
        "timestamp": 1616124946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> haha, that sounds terrifying when you say it like that</p>",
        "id": 230971740,
        "sender_full_name": "Sean",
        "timestamp": 1616125555
    },
    {
        "content": "<p>but yeah, I don't see a reason why not.  if anything, we should exercise it to make sure it's correct.</p>",
        "id": 230972191,
        "sender_full_name": "Sean",
        "timestamp": 1616125934
    },
    {
        "content": "<p>Woo hoo!  <a href=\"https://github.com/BRL-CAD/brlcad/actions\">https://github.com/BRL-CAD/brlcad/actions</a></p>",
        "id": 231012437,
        "sender_full_name": "starseeker",
        "timestamp": 1616155643
    },
    {
        "content": "<p>/me has been working towards that for quite a while now</p>",
        "id": 231014191,
        "sender_full_name": "starseeker",
        "timestamp": 1616156685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Do we want to bother setting up an email mailing list for folks to get commit emails without having a Github account?  If so this may be useful... <a href=\"https://docs.github.com/en/github/administering-a-repository/about-email-notifications-for-pushes-to-your-repository\">https://docs.github.com/en/github/administering-a-repository/about-email-notifications-for-pushes-to-your-repository</a></p>",
        "id": 231015653,
        "sender_full_name": "starseeker",
        "timestamp": 1616157495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Right now I've got the \"check\" target building on the runners, but that's not going to succeed reliably due to the threading issues - looks like regress-gqa is failing some of the time on the OSX runner.  Should I disable the check portion of the test until we have an expectation it can reliably run?</p>",
        "id": 231021882,
        "sender_full_name": "starseeker",
        "timestamp": 1616160413
    },
    {
        "content": "<p>I took a run at updating HACKING, but without doing an all-up release I'm sure I've missed something.</p>",
        "id": 231044692,
        "sender_full_name": "starseeker",
        "timestamp": 1616169027
    },
    {
        "content": "<p>One thing that is clear - if we want to keep providing the GNU style ChangeLog files, we'll have to put some effort into it.</p>",
        "id": 231045377,
        "sender_full_name": "starseeker",
        "timestamp": 1616169280
    },
    {
        "content": "<p>My thought, since now each git clone has the whole history locally, would be to either dispense with the ChangeLog all together or simply use the git log output.  The only real utility to the ChangeLog would be for folks looking at tarballs without any access to either a local or github version of the history - I would expect that to be a rare case, and even in that scenario I would expect git log (or maybe git log --stat) output to be as useful as the current ChangeLog.</p>",
        "id": 231045987,
        "sender_full_name": "starseeker",
        "timestamp": 1616169518
    },
    {
        "content": "<p>Started populating the releases - that's going to be a job if we want to get all the binaries, source tarballs and notes moved.  I got the majority of the release notes set up - all but a couple back to 7.0, except for a couple without obvious corresponding tags.  However, I've only gotten a few of the uploads.</p>",
        "id": 231080515,
        "sender_full_name": "starseeker",
        "timestamp": 1616183483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Seems to be working pretty well so far.</p>",
        "id": 231110624,
        "sender_full_name": "starseeker",
        "timestamp": 1616202558
    },
    {
        "content": "<p>/me needs to add a tag for rel-7-10-4</p>",
        "id": 231117181,
        "sender_full_name": "starseeker",
        "timestamp": 1616209935
    },
    {
        "content": "<p>rel-7-6-2 as well</p>",
        "id": 231117281,
        "sender_full_name": "starseeker",
        "timestamp": 1616210105
    },
    {
        "content": "<p>and rel-7-4-2</p>",
        "id": 231117353,
        "sender_full_name": "starseeker",
        "timestamp": 1616210166
    },
    {
        "content": "<p>ehhh, if github is central to development, people who want to see that far into development should come watch...</p>",
        "id": 231145047,
        "sender_full_name": "Erik",
        "timestamp": 1616245253
    },
    {
        "content": "<p>Phew!  OK, missing tags added, source and binary tarballs uploaded.  Needs someone to double check to make sure I didn't miss any.   OVA image (just barely) uploaded to Release on OVA repository.</p>\n<p>Only binaries I don't have up yet are the old ProE plugins - not sure where to put them.</p>",
        "id": 231151713,
        "sender_full_name": "starseeker",
        "timestamp": 1616252845
    },
    {
        "content": "<p>Options would be either to set up a separate project for the creo plugins, or add tags for the plugins (something like proe-plugin-0-2-0 maybe?) and upload the plugins to those tags.  If we do want to add older tags for the plugins, we'll need to be careful about setting tag dates once we identify the corresponding commits.  (Just got bit by that - it's fixable <a href=\"https://stackoverflow.com/a/21741848/2037687\">https://stackoverflow.com/a/21741848/2037687</a> but we may as well get it right up front...)</p>",
        "id": 231152178,
        "sender_full_name": "starseeker",
        "timestamp": 1616253391
    },
    {
        "content": "<p>Do we want to use <a href=\"https://pages.github.com/\">https://pages.github.com/</a> for the site?</p>",
        "id": 231152727,
        "sender_full_name": "starseeker",
        "timestamp": 1616254019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"103542\">@Erik</span> Do you know anything about the Github \"packages\" feature?  Is that anything that might be useful for BRL-CAD?</p>",
        "id": 231216293,
        "sender_full_name": "starseeker",
        "timestamp": 1616333126
    },
    {
        "content": "<p><a href=\"https://docs.github.com/en/packages/learn-github-packages/core-concepts-for-github-packages\">https://docs.github.com/en/packages/learn-github-packages/core-concepts-for-github-packages</a> looks like the starting point but I'm not clear yet on what a \"BRL-CAD package\" would be or mean...  Is that were we'd stick (say) a docker image?</p>",
        "id": 231216367,
        "sender_full_name": "starseeker",
        "timestamp": 1616333203
    },
    {
        "content": "<p>no clue, never heard of it... my daily is on bitbucket :/</p>",
        "id": 231303625,
        "sender_full_name": "Erik",
        "timestamp": 1616417226
    },
    {
        "content": "<p><a href=\"https://github.com/nektos/act\">https://github.com/nektos/act</a></p>",
        "id": 231533699,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1616529401
    },
    {
        "content": "<p>this repo looks like a good one for testing out the workflow files for github</p>",
        "id": 231533752,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1616529426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> Interesting!  Have you tried that with the BRL-CAD actions?</p>",
        "id": 231536647,
        "sender_full_name": "starseeker",
        "timestamp": 1616530583
    },
    {
        "content": "<p>i just can keep my laptop open for more than 2-3 hr mainly for classes</p>",
        "id": 231536810,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1616530668
    },
    {
        "content": "<p>but i can try it right now if you want and keep the laptop open for the night....</p>",
        "id": 231536896,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1616530693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> Up to you - I'd actually be surprised if it can do anything much with our action files, since they call for Windows and OSX vms as well as Linux...</p>",
        "id": 231537024,
        "sender_full_name": "starseeker",
        "timestamp": 1616530756
    },
    {
        "content": "<p>as per the readme, it seems like it cant work with windows and macos</p>",
        "id": 231537238,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1616530832
    },
    {
        "content": "<p>only works with linux</p>",
        "id": 231537251,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1616530837
    },
    {
        "content": "<p>so might not be a good one for testing out workflow files except for linux ones</p>",
        "id": 231537421,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1616530897
    },
    {
        "content": "<p>So the question would be whether it knows to skip the non-Linux entries automatically or would we need to edit the files down before running it.</p>",
        "id": 231537583,
        "sender_full_name": "starseeker",
        "timestamp": 1616530959
    },
    {
        "content": "<p>might skip them</p>",
        "id": 231537799,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1616531047
    },
    {
        "content": "<p>let me try a dry run</p>",
        "id": 231537804,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1616531051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> <a href=\"#narrow/stream/104062-general/topic/off.20topic/near/231533699\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/nektos/act\">https://github.com/nektos/act</a></p>\n</blockquote>\n<p>How is this offtopic?? :D</p>",
        "id": 231537832,
        "sender_full_name": "Sean",
        "timestamp": 1616531058
    },
    {
        "content": "<p>i didnt know that it can actually help with BRL-CAD's github actions so thought it was off topic <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 231537970,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1616531117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> fits with the Github topic, if you want to shift it over there.</p>",
        "id": 231538212,
        "sender_full_name": "starseeker",
        "timestamp": 1616531220
    },
    {
        "content": "<p>done <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 231538303,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1616531259
    },
    {
        "content": "<p>I've lost count of the number of things I've done on this conversion that I've considered where I didn't know whether or not it would help...</p>",
        "id": 231538324,
        "sender_full_name": "starseeker",
        "timestamp": 1616531265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/231015653\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> Do we want to bother setting up an email mailing list for folks to get commit emails without having a Github account?  If so this may be useful... <a href=\"https://docs.github.com/en/github/administering-a-repository/about-email-notifications-for-pushes-to-your-repository\">https://docs.github.com/en/github/administering-a-repository/about-email-notifications-for-pushes-to-your-repository</a></p>\n</blockquote>\n<p>Yes, though I'm not fond of Github's default that merely links to the diff.  It should really be in the e-mail (up to some kb limit) since the entire point of commit notification is quick review of the code change.</p>",
        "id": 231576415,
        "sender_full_name": "Sean",
        "timestamp": 1616555397
    },
    {
        "content": "<p>Looks like the way to handle it will be to set up a clone on .bz that pulls periodically with a receive hook</p>",
        "id": 231576485,
        "sender_full_name": "Sean",
        "timestamp": 1616555432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/231021882\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> Right now I've got the \"check\" target building on the runners, but that's not going to succeed reliably due to the threading issues - looks like regress-gqa is failing some of the time on the OSX runner.  Should I disable the check portion of the test until we have an expectation it can reliably run?</p>\n</blockquote>\n<p>Yes, advisory in the meantime.</p>",
        "id": 231576528,
        "sender_full_name": "Sean",
        "timestamp": 1616555480
    },
    {
        "content": "<p>For the ChangeLog, we can start without it.  I think it will be good to include one in future source tarballs, though I don't think it matters so much what tool generates it.  Including more than the git 1-liner would be essential, but a git log of all changes since last release would probably be adequate.</p>\n<p>At a glance, looks like there are a couple that wrap git log, and looks like emacs can do it, or we can just sort out the magic needed to automatically extract commits since the previous release (a little tricky, but not terribly hard).</p>",
        "id": 231579185,
        "sender_full_name": "Sean",
        "timestamp": 1616557935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/231151713\">said</a>:</p>\n<blockquote>\n<p>OVA image (just barely) uploaded to Release on OVA repository.</p>\n</blockquote>\n<p>How close was it to the file limit?</p>",
        "id": 231579223,
        "sender_full_name": "Sean",
        "timestamp": 1616557984
    },
    {
        "content": "<p>The github file size limit is, IIRC, 2 gigs.  Compressed, it was on the order of 1.8</p>",
        "id": 231626475,
        "sender_full_name": "starseeker",
        "timestamp": 1616589940
    },
    {
        "content": "<p>I thought we determined that was a soft limit, not a hard one...</p>",
        "id": 231746454,
        "sender_full_name": "Sean",
        "timestamp": 1616646589
    },
    {
        "content": "<p>Maybe... I don't recall for sure</p>",
        "id": 231780339,
        "sender_full_name": "starseeker",
        "timestamp": 1616669961
    },
    {
        "content": "<p>/me bemusedly wonders if <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> is planning to announce the migration on April 1st...</p>",
        "id": 232362570,
        "sender_full_name": "starseeker",
        "timestamp": 1617069698
    },
    {
        "content": "<p>Okay, I've sent out 16 invitations to add people to our list of members (i.e., people that have commit access to any repo).  It's only a fraction of what we had on SourceForge, but it should be a good start.</p>",
        "id": 232447662,
        "sender_full_name": "Sean",
        "timestamp": 1617118953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> you also apparently lacked the admin bit on the brlcad repo and weren't a member of the dev team, which looks like is why you couldn't add anyone.</p>",
        "id": 232449604,
        "sender_full_name": "Sean",
        "timestamp": 1617119672
    },
    {
        "content": "<p>/me nods - that'll do it.</p>",
        "id": 232449670,
        "sender_full_name": "starseeker",
        "timestamp": 1617119698
    },
    {
        "content": "<p>That's fixed and I've added the new repos to the existing teams</p>",
        "id": 232449689,
        "sender_full_name": "Sean",
        "timestamp": 1617119703
    },
    {
        "content": "<p>right now, being in a team pretty much gives full administrative control, so we may want to change that later, but that's essentially how it was on sourceforge</p>",
        "id": 232449789,
        "sender_full_name": "Sean",
        "timestamp": 1617119738
    },
    {
        "content": "<p>Does github offer finer granularity?</p>",
        "id": 232449852,
        "sender_full_name": "starseeker",
        "timestamp": 1617119761
    },
    {
        "content": "<p>oh heck yes, it's quite granular and with two separate layers</p>",
        "id": 232449944,
        "sender_full_name": "Sean",
        "timestamp": 1617119785
    },
    {
        "content": "<p>permissions are set on repos themselves or they're set on teams (which then have permissions attached to them) or they're set on members (which have permissions attached to them)</p>",
        "id": 232450152,
        "sender_full_name": "Sean",
        "timestamp": 1617119862
    },
    {
        "content": "<p>three layers I guess</p>",
        "id": 232450176,
        "sender_full_name": "Sean",
        "timestamp": 1617119871
    },
    {
        "content": "<p>Wow - nifty!</p>",
        "id": 232450285,
        "sender_full_name": "starseeker",
        "timestamp": 1617119900
    },
    {
        "content": "<p>so for example you were a member, which lets you create repos, but you weren't on the dev team, so you couldn't add people to brlcad</p>",
        "id": 232450304,
        "sender_full_name": "Sean",
        "timestamp": 1617119906
    },
    {
        "content": "<p>It looks like it's set up this way so you can have teams with admin access, teams without, all accessing some or not having access to other repos.  It's not a strict hierarchy of permissions, it's more of a matrix.</p>",
        "id": 232450460,
        "sender_full_name": "Sean",
        "timestamp": 1617119973
    },
    {
        "content": "<p>A bit complex to manage, but also potentially quite useful for preventing accidents and the like.</p>",
        "id": 232450693,
        "sender_full_name": "starseeker",
        "timestamp": 1617120041
    },
    {
        "content": "<p>right now I just have two teams set up, devs and webdevs, with devs having all repos but only admin on the compiled-code repos, and webdevs having admin over the web-related repos including the website and web projects</p>",
        "id": 232459208,
        "sender_full_name": "Sean",
        "timestamp": 1617123203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span>   :(   ... git log --follow src/conv/iges/g-iges.c</p>",
        "id": 232648879,
        "sender_full_name": "Sean",
        "timestamp": 1617218254
    },
    {
        "content": "<p>Looks like \"nearly\" everything in there has no traceability after the 25XXX converter movements.  Looking at iges.h for example, it stops at 25521.  Git log appears to have the other changes, for example if I git log --follow src/conv/iges/iges.h, it looks corrupted to me.</p>",
        "id": 232652575,
        "sender_full_name": "Sean",
        "timestamp": 1617219629
    },
    {
        "content": "<p>the last commit is shown as 0fe9bf30dc0f7980df6486014bb29567bec09a84 (r4502) which was a change to sig/i-a.c ... similarly 1cdf453b9d355b1a7fb10bea445ab18b262a0252 (r5920) was sig/u-a.c</p>",
        "id": 232652764,
        "sender_full_name": "Sean",
        "timestamp": 1617219716
    },
    {
        "content": "<p>the two commits before that seem to have nothing to do with sig and are other random commits</p>",
        "id": 232652939,
        "sender_full_name": "Sean",
        "timestamp": 1617219773
    },
    {
        "content": "<p>looks like it's not until 3408f5ba1220271623a90b3740eb43abe06a857a a dozen or commits prior that it starts to get back on track</p>",
        "id": 232653574,
        "sender_full_name": "Sean",
        "timestamp": 1617220009
    },
    {
        "content": "<p>If I trace back commits in subversion, the last five on iges.h are r13453, r10561, r9487, r8144, r7715.   Commits r13453 is 994dcc97ee6d9f60e670aa9a2ed110273920294c for example and r7715 is split across three commits: 317460fce22e6ba835a08bef126e2b75a123ee78<br>\nb9f6d30bd15f4c66ed5e7506877b6ae35c80ea06<br>\neb458e30c765b2758097abc1cb5909422e050e90<br>\nso the commits are somewhere in the full history, I'm just not sure where. :(</p>",
        "id": 232654204,
        "sender_full_name": "Sean",
        "timestamp": 1617220228
    },
    {
        "content": "<p>/me hopes this is limited to conv/ or conv/iges  and not all directory renames besides r22798... because there were a dozen or so others</p>",
        "id": 232654844,
        "sender_full_name": "Sean",
        "timestamp": 1617220477
    },
    {
        "content": "<p>looks like it got vfont correct, looks like it got src/external/Creo wrong ..</p>",
        "id": 232657402,
        "sender_full_name": "Sean",
        "timestamp": 1617221495
    },
    {
        "content": "<p>For whatever reason, the --follow algorithm isn't finding the src/iges/iges.h file starting from src/conv/iges/iges.h.  Looking at the gitk history, following the parent commits does get to the rename commit, so my initial guess is that it's not data corruption per say but a limitation of the implementation of --follow (which apparently has some issues...)</p>",
        "id": 232660286,
        "sender_full_name": "starseeker",
        "timestamp": 1617222705
    },
    {
        "content": "<p>That doesn't add up though -- it lists some older commits on some files, commits that have absolutely nothing to do with that directory entirely.</p>",
        "id": 232660718,
        "sender_full_name": "Sean",
        "timestamp": 1617222854
    },
    {
        "content": "<p>like the sig/ files</p>",
        "id": 232660741,
        "sender_full_name": "Sean",
        "timestamp": 1617222862
    },
    {
        "content": "<p>If I'm reading this right, git's interpretation (or cvs-fast-export's, at any rate) was that r25518 removed the iges files rather than moving them, 25519 and 25520 were then committed, and 25521 added the iges files back in.</p>",
        "id": 232660795,
        "sender_full_name": "starseeker",
        "timestamp": 1617222886
    },
    {
        "content": "<p>that may what breaks the --follow chain</p>",
        "id": 232660831,
        "sender_full_name": "starseeker",
        "timestamp": 1617222902
    },
    {
        "content": "<p>I don't get any --follow output pass 25521</p>",
        "id": 232661073,
        "sender_full_name": "starseeker",
        "timestamp": 1617223003
    },
    {
        "content": "<p>Your --follow is giving you bogus commits prior to 25521 with follow on iges.h?</p>",
        "id": 232661157,
        "sender_full_name": "starseeker",
        "timestamp": 1617223043
    },
    {
        "content": "<p><code>git log --full-history -- \"**/iges.h\"</code> may be useful here</p>",
        "id": 232661608,
        "sender_full_name": "starseeker",
        "timestamp": 1617223234
    },
    {
        "content": "<p>git log --follow src/conv/iges/iges.h</p>",
        "id": 232661621,
        "sender_full_name": "Sean",
        "timestamp": 1617223239
    },
    {
        "content": "<p>The last dozen or two commits have nothing to do with iges.h</p>",
        "id": 232661642,
        "sender_full_name": "Sean",
        "timestamp": 1617223253
    },
    {
        "content": "<p>Are they empty commits?</p>",
        "id": 232662025,
        "sender_full_name": "starseeker",
        "timestamp": 1617223436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/232661608\">said</a>:</p>\n<blockquote>\n<p><code>git log --full-history -- \"**/iges.h\"</code> may be useful here</p>\n</blockquote>\n<p>Doesn't that just mean that the history is attached somewhere?  That much is already confirmed, the commits exist in the history, just seemingly not where they should be.  Like, where is r13453 ?  What file can I do a log on to find it?  (inclined to see if it's attached to some other random file like the u-a.c commit.</p>",
        "id": 232662150,
        "sender_full_name": "Sean",
        "timestamp": 1617223476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/232662025\">said</a>:</p>\n<blockquote>\n<p>Are they empty commits?</p>\n</blockquote>\n<p>Definitely not, they're genuine changes to other files not even related to src/conv in any way.</p>",
        "id": 232662229,
        "sender_full_name": "Sean",
        "timestamp": 1617223518
    },
    {
        "content": "<p>git show 0fe9bf30dc0f7980df6486014bb29567bec09a84 ... it says that was the first commit to iges.h in that location (sans follow)</p>",
        "id": 232662464,
        "sender_full_name": "Sean",
        "timestamp": 1617223600
    },
    {
        "content": "<p>The parent commit of 25521 is 3408f5ba1220 (25520) which is an empty commit as far as iges.h is concerned (and iges.h doesn't exist in the tree at that point.)  That may break the --follow chain, but I'm not clear yet on why --follow is reporting anything else before src/conv/iges/ iges.h in that case</p>",
        "id": 232662677,
        "sender_full_name": "starseeker",
        "timestamp": 1617223684
    },
    {
        "content": "<p>Wonder if this is related somehow?  <a href=\"https://blog.plover.com/prog/git-log-follow.html\">https://blog.plover.com/prog/git-log-follow.html</a></p>",
        "id": 232662799,
        "sender_full_name": "starseeker",
        "timestamp": 1617223730
    },
    {
        "content": "<p>Commits back through 22798 in the follow history do have changes that pertain to iges.h, from the looks of things.</p>",
        "id": 232664435,
        "sender_full_name": "starseeker",
        "timestamp": 1617224498
    },
    {
        "content": "<p>It goes off the rails from 22798 to 22606.</p>",
        "id": 232664554,
        "sender_full_name": "starseeker",
        "timestamp": 1617224536
    },
    {
        "content": "<p>some do in a general sense, like license header updates, others not so much</p>",
        "id": 232664586,
        "sender_full_name": "Sean",
        "timestamp": 1617224552
    },
    {
        "content": "<p>I haven't been able to find the iges/iges.h history which had several dozen commits prior to the move around 25520</p>",
        "id": 232664821,
        "sender_full_name": "Sean",
        "timestamp": 1617224647
    },
    {
        "content": "<p>I'm not seeing several dozen?  Here's what I can find for iges.h:  <a href=\"/user_uploads/1549/qHrhO8_BGdcJ5_VZhNxDNCRq/iges_h_svn.txt\">iges_h_svn.txt</a></p>",
        "id": 232667257,
        "sender_full_name": "starseeker",
        "timestamp": 1617225725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I agree git log --follow is going off the rails in a bizarre way, but if I diff the svn commits and those found by git log -- \"**/iges.h\"  the delta is pretty small:</p>\n<div class=\"codehilite\"><pre><span></span><code>--- svnrevs.txt 2021-03-31 17:19:14.593937412 -0400\n+++ gitrevs.txt 2021-03-31 17:19:50.609358451 -0400\n@@ -18,12 +18,13 @@\n 27341\n 26074\n 25521\n+25518\n 23807\n 23633\n 23577\n+22839\n 22798\n 13453\n-10561\n 9487\n 8144\n 7715\n</code></pre></div>",
        "id": 232668116,
        "sender_full_name": "starseeker",
        "timestamp": 1617226176
    },
    {
        "content": "<p><code>gitk \"**/iges.h\"</code>  is also useful...</p>",
        "id": 232669038,
        "sender_full_name": "starseeker",
        "timestamp": 1617226592
    },
    {
        "content": "<p>bbl</p>",
        "id": 232669147,
        "sender_full_name": "starseeker",
        "timestamp": 1617226668
    },
    {
        "content": "<p>Discussion of how --follow works:  <a href=\"https://stackoverflow.com/a/43960010/2037687\">https://stackoverflow.com/a/43960010/2037687</a></p>",
        "id": 232673440,
        "sender_full_name": "starseeker",
        "timestamp": 1617228660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/232667257\">said</a>:</p>\n<blockquote>\n<p>I'm not seeing several dozen?  Here's what I can find for iges.h:  <a href=\"/user_uploads/1549/qHrhO8_BGdcJ5_VZhNxDNCRq/iges_h_svn.txt\">iges_h_svn.txt</a></p>\n</blockquote>\n<p>Sorry, I meant iges.c for that one -- I was trying to find it's full history the same way and can't get it to report the 30 commits prior to it getting moved around even with git log --full-history -- **/iges.c</p>",
        "id": 232702171,
        "sender_full_name": "Sean",
        "timestamp": 1617251155
    },
    {
        "content": "<p>Comparing against:  svn log  svn+ssh://brlcad@svn.code.sf.net/p/brlcad/code/brlcad/trunk/iges/iges.c@22500 | grep '^r'</p>",
        "id": 232702227,
        "sender_full_name": "Sean",
        "timestamp": 1617251178
    },
    {
        "content": "<p>How can I manually traverse the actual history manually on the git side?  In svn, one would see a log stops at r12345, then one pulls log on a path mentioned in the comment at a few revs prior (e.g., r12340), and repeat as needed.  if it wasn't mentioned in a comment, one can still pull the tree at r12340, find the file, then continue the log on it.</p>",
        "id": 232702552,
        "sender_full_name": "Sean",
        "timestamp": 1617251518
    },
    {
        "content": "<p>in general,  that system works even if the file was renamed.</p>",
        "id": 232702615,
        "sender_full_name": "Sean",
        "timestamp": 1617251575
    },
    {
        "content": "<p>I mean, I can think of a really brute force way, checking out the sha prior (-1), but what's the right way?</p>",
        "id": 232702805,
        "sender_full_name": "Sean",
        "timestamp": 1617251751
    },
    {
        "content": "<p>Relying on \"git log -- **/file\" feels inadequate in the general case because it 1) only works if the file wasn't renamed, 2) can erroneously catch other same-named files (good luck tracking a subdir README that moved..), and 3) doesn't seem to help figure out where the commit exists..only that it exists.</p>",
        "id": 232704511,
        "sender_full_name": "Sean",
        "timestamp": 1617253235
    },
    {
        "content": "<p>Any idea what happened with ProEngineer?  It seems to similarly have lost track.  I didn't check the others.</p>",
        "id": 232704589,
        "sender_full_name": "Sean",
        "timestamp": 1617253311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/232702227\">said</a>:</p>\n<blockquote>\n<p>Comparing against:  svn log  svn+ssh://brlcad@svn.code.sf.net/p/brlcad/code/brlcad/trunk/iges/iges.c@22500 | grep '^r'</p>\n</blockquote>\n<p>So if I do the following:  <code>git log -- \"**/iges.c\"|grep svn:revision|awk -F':' '{print $3}'</code> the last few returns are:</p>\n<div class=\"codehilite\"><pre><span></span><code>22367\n21028\n20508\n19942\n19550\n19335\n19139\n19131\n18043\n17500\n16912\n13453\n12989\n11582\n9951\n9831\n9693\n9487\n9283\n9227\n9221\n9133\n9080\n8573\n8144\n8129\n7790\n7716\n7715\n</code></pre></div>",
        "id": 232741324,
        "sender_full_name": "starseeker",
        "timestamp": 1617276513
    },
    {
        "content": "<p>With SVN <code>svn log https://svn.code.sf.net/p/brlcad/code/brlcad/trunk/iges/iges.c@22500 | grep '^r'|awk '{print $1}'|sed 's/r//'</code> I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>22367\n21028\n20508\n19942\n19550\n19335\n19139\n19131\n18043\n17500\n16912\n13453\n12989\n11582\n10561\n9951\n9831\n9693\n9487\n9283\n9227\n9221\n9133\n9080\n8573\n8144\n8129\n7790\n7716\n7715\n</code></pre></div>",
        "id": 232741489,
        "sender_full_name": "starseeker",
        "timestamp": 1617276606
    },
    {
        "content": "<p>r10561 is the only one missing from Git, and that's expected as it  was an SVN property change.</p>",
        "id": 232741619,
        "sender_full_name": "starseeker",
        "timestamp": 1617276686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/232702552\">said</a>:</p>\n<blockquote>\n<p>How can I manually traverse the actual history manually on the git side?  In svn, one would see a log stops at r12345, then one pulls log on a path mentioned in the comment at a few revs prior (e.g., r12340), and repeat as needed.  if it wasn't mentioned in a comment, one can still pull the tree at r12340, find the file, then continue the log on it.</p>\n</blockquote>\n<p>In that situation what I would usually do is bring up gitk (or maybe gitk --all) and go to the last known relevant commit, then browse my way back up the history.</p>\n<p>Following file history in Git is a known weak point (<br>\n<a href=\"https://stackoverflow.com/questions/5743739/how-to-really-show-logs-of-renamed-files-with-git\">https://stackoverflow.com/questions/5743739/how-to-really-show-logs-of-renamed-files-with-git</a>)  </p>\n<p>IMHO not tracking file moves was a mistake, since it fundamentally limits what you can successfully pull out of the history in cases like this.</p>",
        "id": 232742802,
        "sender_full_name": "starseeker",
        "timestamp": 1617277350
    },
    {
        "content": "<p><code>git log --follow</code> and  variations on <code>git log -- \"**/fiename\"</code> are the best answers I'm currently aware of, but I'll keep my eyes peeled for better ones.</p>",
        "id": 232743755,
        "sender_full_name": "starseeker",
        "timestamp": 1617277902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/232704589\">said</a>:</p>\n<blockquote>\n<p>Any idea what happened with ProEngineer?  It seems to similarly have lost track.  I didn't check the others.</p>\n</blockquote>\n<p>If I'm interpreting 69329 correctly, the CREO directory was added while the ProEngineer directory was still present.</p>",
        "id": 232745433,
        "sender_full_name": "starseeker",
        "timestamp": 1617278814
    },
    {
        "content": "<p>That may be why it's not following Creo back into ProEngineer - it wasn't a folder rename.</p>",
        "id": 232745517,
        "sender_full_name": "starseeker",
        "timestamp": 1617278875
    },
    {
        "content": "<p>gitk's blame feature might be slightly better in some cases at following changes back, since some of the comments I've seen seem to suggest it's using a more powerful search mechanism than the --follow option...</p>",
        "id": 232745683,
        "sender_full_name": "starseeker",
        "timestamp": 1617278955
    },
    {
        "content": "<p>Woah, okay, hah... huge difference between:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>git log -- **/iges.c\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>git log -- \"**/iges.c\"\n</code></pre></div>\n<p>... I'd missed quoting the glob, so it was only matching src/conv/iges/iges.c history.</p>",
        "id": 232827938,
        "sender_full_name": "Sean",
        "timestamp": 1617312627
    },
    {
        "content": "<p>With or without --full-history/-all/etc that was what was causing me grief.</p>",
        "id": 232828063,
        "sender_full_name": "Sean",
        "timestamp": 1617312713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/232742802\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/232702552\">said</a>:<br>\nIn that situation what I would usually do is bring up gitk (or maybe gitk --all) and go to the last known relevant commit, then browse my way back up the history.</p>\n</blockquote>\n<p>Er, that's rather error prone I'd think, trying to follow a text line potentially next to a half dozen other | lines, scrolling up for pages, maybe 10k commits back.  Still that's also only good in GUI mode -- I'm looking for lower-level that will work even when I'm remove in a console.  I mean is \"git log -1 sha\" where the gitk line connects up to?  Or is it sha^! or something else?</p>",
        "id": 232828499,
        "sender_full_name": "Sean",
        "timestamp": 1617312958
    },
    {
        "content": "<p>Maybe I'm not quite following what you're after... Do you mean something like the following?:</p>\n<p>For commit 22798:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git log -1 a1e49c\ncommit a1e49c5edbb4df8eb10f7ae014ae6efeb12fc966\nAuthor: Christopher Sean Morrison &lt;brlcad@gmail.com&gt;\nDate:   Thu May 20 15:22:02 2004 +0000\n\n    Vast reorganization begins.  Sources moved from top-level directories into src/.\n\n    svn:revision:22798\n    cvs:account:morrison\n    cvs:branch:trunk\n</code></pre></div>\n<p>If I want info about the immediately preceding commit:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git log -1 a1e49c~1\ncommit be1f3137808b681347a7665a05049911c55166a1\nAuthor: Christopher Sean Morrison &lt;brlcad@gmail.com&gt;\nDate:   Thu May 20 14:54:22 2004 +0000\n\n    Sources that are external to BRL-CAD are moved from the top level to src/other/.\n\n    svn:revision:22797\n    cvs:account:morrison\n    cvs:branch:trunk\n</code></pre></div>\n<p>I can then get (for example) a top level view of the tree at that previous revision:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git ls-tree a1e49c~1\n100644 blob cf056985dbd9086d3db465d486471e1e4ec5427f    .gitignore\n100644 blob 20214282c2426fcf91b0cd7635598aedb1ae06a7    AUTHORS\n100644 blob c750a69b34d9c6cd4a914966f104176d00edf5f4    BUGS\n100644 blob 1df557054723c07a38dc07014966a80bf024fdbc    COPYING\n...\n</code></pre></div>\n<p>If I want to see into a subdirectory:</p>\n<div class=\"codehilite\"><pre><span></span><code>git ls-tree a1e49c~1 iges/\n100644 blob 2ce043e0fec731921623a30b66a61350a6ca8f28    iges/Makefile.am\n100644 blob 77a5bc69e89aae54230f3594a29345b4a6210c43    iges/add_face.c\n100644 blob de7c126c87da7202a0fff25b39915c1605b6624e    iges/add_inner_shell.c\n...\n</code></pre></div>",
        "id": 232838040,
        "sender_full_name": "starseeker",
        "timestamp": 1617318721
    },
    {
        "content": "<p>Or look recursively for a specific path:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git ls-tree -r a1e49c~1 |grep /iges\\\\.c\n100644 blob 3cc309a9a5cc94b19ac1ffcda9f4a1204f889bbc    iges/iges.c\n</code></pre></div>",
        "id": 232838298,
        "sender_full_name": "starseeker",
        "timestamp": 1617318886
    },
    {
        "content": "<p>To follow back up the parent-child chain starting from that commit, I can just pull a local log:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git log --oneline -10 a1e49c\na1e49c5edb Vast reorganization begins.  Sources moved from top-level directories into src/.\nbe1f313780 Sources that are external to BRL-CAD are moved from the top level to src/other/.\n4440f1c095 Sources that are external to BRL-CAD are moved from the top level to src/other/.\nfa32f6950a The old regression test scripts are being replaced by something else.  Likely it&#39;ll be Corredor with some unit test framework.  The old scripts are so far out of sync and so inadequate that it&#39;s simply not worth it any more.\n074785b939 moved from html/ to doc/html/\n4e5eaaaa87 s/.doc/.tr/\nb51a0ee5e9 renamed .doc files to .tr since they are [tng]roff files\n40e36bc94e old nmake visual studio file no longer exists\n679e068d94 cake is no more and theres no incentive to maintain it any more so .. buh bye.\n29ba93efce rename the text files from .doc to a .txt extension.  reserve .doc extension for groff files\n</code></pre></div>",
        "id": 232838507,
        "sender_full_name": "starseeker",
        "timestamp": 1617319025
    },
    {
        "content": "<p>Other cute tricks... this finds all the file paths that had the file name TODO:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git log --all --name-only --pretty=format:&quot;&quot; &quot;**/TODO&quot; |sort|uniq\n\ndoc/docbook/resources/other/standard/xsl/TODO\ndoc/docbook/resources/standard/xsl/TODO\ndoc/docbook/system/man3/en/TODO\ndoc/docbook/system/man3/TODO\nlibitcl3.2/TODO\nlibitcl/TODO\nlibpng/TODO\nmisc/d-bindings/TODO\nmisc/tools/astyle/TODO\nmisc/tools/svn2cl/TODO\nsrc/archer/TODO\nsrc/libdm/TODO\nsrc/libged/TODO\nsrc/libicv/TODO\nsrc/libpc/TODO\nsrc/other/blt/src/TODO\nsrc/other/ext/stepcode/TODO\nsrc/other/ext/tcl/compat/zlib/contrib/iostream3/TODO\nsrc/other/ext/tcl/pkgs/itcl4.2.0/TODO\nsrc/other/ext/tcl/pkgs/tdbcpostgres1.1.1/TODO\nsrc/other/flex/TODO\nsrc/other/freetype/docs/TODO\nsrc/other/incrTcl/itcl/TODO\nsrc/other/incrTcl/itk/TODO\nsrc/other/incrTcl/TODO\nsrc/other/libitcl/TODO\nsrc/other/libnetpbm/TODO\nsrc/other/libpng/TODO\nsrc/other/libz/contrib/iostream3/TODO\nsrc/other/openscenegraph/TODO\nsrc/other/stepcode/TODO\nsrc/other/step/TODO\nsrc/other/tcl/compat/zlib/contrib/iostream3/TODO\nsrc/other/tcl/pkgs/itcl4.0.4/TODO\nsrc/other/tcl/pkgs/itcl4.2.0/TODO\nsrc/other/tcl/pkgs/tdbcpostgres1.1.1/TODO\nsrc/other/uuid/TODO\nsrc/qbrlcad/TODO\nsrc/qged/TODO\nsrc/superbuild/stepcode/TODO\nsrc/superbuild/tcl/compat/zlib/contrib/iostream3/TODO\nsrc/superbuild/tcl/pkgs/itcl4.2.0/TODO\nsrc/superbuild/tcl/pkgs/tdbcpostgres1.1.1/TODO\nsrc/tclscripts/checker/TODO\n</code></pre></div>",
        "id": 232839851,
        "sender_full_name": "starseeker",
        "timestamp": 1617320039
    },
    {
        "content": "<p>If you know something about the contents, you can use git grep - for example, if I think the historical version of \"iges.c\" that I'm looking for has the string \"Code to support the g-iges converter\" in it but I don't know if the file name changed, I can do the following to grep for it back 5 commits:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git grep &quot;Code to support the g-iges converter&quot; $(git log -5 --pretty=format:&quot;%H&quot; 3408f5ba122027)\n3408f5ba1220271623a90b3740eb43abe06a857a:src/conv/iges/iges.c: *  Code to support the g-iges converter\n90f783ca790a5a2f7d176c1b9c0a5eba4c880927:src/iges/iges.c: *  Code to support the g-iges converter\nf89fb406daf8348bf215ed96f115bdcf9bbd072c:src/iges/iges.c: *  Code to support the g-iges converter\nb6414214c3cdd7e883be1d5f3cd19f9102deb9ec:src/iges/iges.c: *  Code to support the g-iges converter\n</code></pre></div>\n<p>Notice only 4 commits reported matching that content.  If we look at the straight log for 5 commits from that point:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git log --oneline -5 3408f5ba122\n3408f5ba12 (HEAD) moved all the geometry converter directories from src/. to src/conv/.\n48a6bed946 a single iges file didn&#39;t make it for some bizzare reason, manually move from src/iges to src/conv/iges\n90f783ca79 iges converter moved\nf89fb406da moved all the geometry converter directories from src/. to src/conv/.\nb6414214c3 formatting, spelling, reference the tasker too\n</code></pre></div>\n<p>Commit 48a6bed946's tree does not have a file (by any name) matching that string.</p>",
        "id": 232841383,
        "sender_full_name": "starseeker",
        "timestamp": 1617321134
    },
    {
        "content": "<p>iges.h has similar results, being missing from 3 commits (this is from a checkout of 3408f5ba12:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git grep &quot;I G E S . H&quot; $(git log -5 --pretty=format:&quot;%H&quot;)\n3408f5ba1220271623a90b3740eb43abe06a857a:src/conv/iges/iges.h:/*                          I G E S . H\nb6414214c3cdd7e883be1d5f3cd19f9102deb9ec:src/iges/iges.h:/*                          I G E S . H\n$ git log --oneline -5\n3408f5ba12 (HEAD) moved all the geometry converter directories from src/. to src/conv/.\n48a6bed946 a single iges file didn&#39;t make it for some bizzare reason, manually move from src/iges to src/conv/iges\n90f783ca79 iges converter moved\nf89fb406da moved all the geometry converter directories from src/. to src/conv/.\nb6414214c3 formatting, spelling, reference the tasker too\n</code></pre></div>",
        "id": 232844135,
        "sender_full_name": "starseeker",
        "timestamp": 1617323063
    },
    {
        "content": "<p>I'm still not sure why git log --follow pulls in 23649 for iges.h when doing the src/conv/iges/iges.h path search - it's clearly wrong.  However, if I check out the first commit that does have the iges.h contents again (b6414214c3) <code>git log --follow</code> looks like it can go the rest of the way successfully.</p>",
        "id": 232844910,
        "sender_full_name": "starseeker",
        "timestamp": 1617323654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> My thinking is it's more likely we found a bug in git log --follow than in the repo data...</p>",
        "id": 232845046,
        "sender_full_name": "starseeker",
        "timestamp": 1617323762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> did we want to set the BRL-CAD github org's icon to the BRL-CAD logo?  Right now it's just one of the generic Github images...</p>",
        "id": 233096979,
        "sender_full_name": "starseeker",
        "timestamp": 1617554643
    },
    {
        "content": "<p>That's helpful.  Looks like ls-tree in combo with a couple other commands can help me walk it back.</p>",
        "id": 233217535,
        "sender_full_name": "Sean",
        "timestamp": 1617650806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/233096979\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> did we want to set the BRL-CAD github org's icon to the BRL-CAD logo?  Right now it's just one of the generic Github images...</p>\n</blockquote>\n<p>Yep, good idea.  Hadn't gotten to cosmetic yet.</p>\n<p>Really needing commits with diffs... but apparently that's going to require some customization.  Will have to live with links to the changes for now.</p>",
        "id": 233217743,
        "sender_full_name": "Sean",
        "timestamp": 1617650934
    },
    {
        "content": "<p>I just saw some other organizations in GitHub and they have verified tag. We can have it too right?</p>",
        "id": 242607963,
        "sender_full_name": "Himanshu",
        "timestamp": 1623681996
    },
    {
        "content": "<p>Later, sure.  Not a priority right now.</p>",
        "id": 242619294,
        "sender_full_name": "Sean",
        "timestamp": 1623686180
    },
    {
        "content": "<p>The <code>verified</code> tag is the committers responsibility.<br>\nCommits, made online by GitHub web interface, are verified with a GitHub key automatically.<br>\nCommitter with push access have to set up a GPG key to their GitHub account and sign local commits using this key.<br>\nThen commits are verified by the developers key. A click on the <code>verified</code> tag shows the key owner.<br>\nSee <a href=\"https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification\">https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification</a></p>",
        "id": 242803365,
        "sender_full_name": "Armin (LordOfBikes)",
        "timestamp": 1623793200
    },
    {
        "content": "<p>I added the new repository location to OpenHub and removed the older ones:  <a href=\"https://www.openhub.net/p/brlcad/enlistments\">https://www.openhub.net/p/brlcad/enlistments</a></p>\n<p>So far the new repo hasn't \"taken\" for analysis - it tried to pull it down last night, but towards the end of the processing this morning something must have gone wrong.  I added some paths to the ignore files (src/other, etc.) - that may help it complete successfully.  Fingers crossed...</p>",
        "id": 243804926,
        "sender_full_name": "starseeker",
        "timestamp": 1624549289
    },
    {
        "content": "<p>There we go - 15 hour delay updating.  BRL-CAD's OpenHub page is back!</p>",
        "id": 243818016,
        "sender_full_name": "starseeker",
        "timestamp": 1624555150
    },
    {
        "content": "<p>That's really great to have our stats back online fully.  Awesome!</p>",
        "id": 243875714,
        "sender_full_name": "Sean",
        "timestamp": 1624597084
    },
    {
        "content": "<p>is it, like, really really official, or still moving bits into place? :D</p>",
        "id": 246231937,
        "sender_full_name": "Erik",
        "timestamp": 1626446488
    },
    {
        "content": "<p>It's official from my perspective - the SVN repo is frozen and all dev activity is now on github</p>",
        "id": 246289096,
        "sender_full_name": "starseeker",
        "timestamp": 1626475471
    },
    {
        "content": "<p>There's still a lot of polishing to do on the site - get our logo up, see if we can migrate the sf metadata (patches, bug reports, etc.) somehow, etc.  But Github is now the active development center.</p>",
        "id": 246289134,
        "sender_full_name": "starseeker",
        "timestamp": 1626475540
    },
    {
        "content": "<p>rock on, now we're all moving to ... :D</p>",
        "id": 246294155,
        "sender_full_name": "Erik",
        "timestamp": 1626481183
    },
    {
        "content": "<p>grats on accomplishing such a mega-effort</p>",
        "id": 246294213,
        "sender_full_name": "Erik",
        "timestamp": 1626481261
    },
    {
        "content": "<p>thanks :-).  It's satisfying to have it complete, although I'm still finding myself in the \"confound it, why doesn't git record file moves\" camp</p>",
        "id": 246294305,
        "sender_full_name": "starseeker",
        "timestamp": 1626481399
    },
    {
        "content": "<p>The CI testing has been Really Useful though - it's already caught me a number of times.</p>",
        "id": 246294371,
        "sender_full_name": "starseeker",
        "timestamp": 1626481486
    },
    {
        "content": "<p>I tried turning on CodeQL to see what happens - early signs suggest we may be too big a bite for that setup to handle.</p>",
        "id": 246294392,
        "sender_full_name": "starseeker",
        "timestamp": 1626481528
    },
    {
        "content": "<p>blehhhh, ci/cd stacks, that's my life lately. On software that takes 40 minutes on a 64 core (128 hyperthread) machine to compile and, uh, a test sys that is heavy enough that it'd cost ~$500 on aws to run once and has a minimum 10 hour turnaround... I hear ya on the pain of bein' too big :D</p>",
        "id": 246294934,
        "sender_full_name": "Erik",
        "timestamp": 1626482227
    },
    {
        "content": "<p>I had already evolved a script to target the clang static analyzer at our core libs selectively, but I figured that would be a local machine only affair.  However, I found some examples recently which suggested it might actually be possible to install the necessary pieces on the runner to set that up as a github action.  I'm letting CodeQL run a bit to see what happens, but I wouldn't be surprised to see it time out without finishing.</p>",
        "id": 246295272,
        "sender_full_name": "starseeker",
        "timestamp": 1626482789
    },
    {
        "content": "<p>The static analyzer script looks like it may be able to complete in on the order of an hour, which isn't too bad.</p>",
        "id": 246295335,
        "sender_full_name": "starseeker",
        "timestamp": 1626482888
    },
    {
        "content": "<p>We're deliberately building serially in order to minimize stress on the I/O subsystem - I pushed it harder in some early tests and had a few cases where file writes didn't complete properly.</p>",
        "id": 246295347,
        "sender_full_name": "starseeker",
        "timestamp": 1626482932
    },
    {
        "content": "<p>ya'll should get a lil nvme raid with one of them melly-nox connectx5's :D beastly i/o pair</p>",
        "id": 246295466,
        "sender_full_name": "Erik",
        "timestamp": 1626483133
    },
    {
        "content": "<p>(if the file writes didn't complete properly, either there're kernel bugs or your writer doesn't check return values and bitbuckets data when the buffers are full)</p>",
        "id": 246295482,
        "sender_full_name": "Erik",
        "timestamp": 1626483197
    },
    {
        "content": "<p>I'm not sure what sort of backend system the Actions setup is using for its runners, so I can't say for sure.</p>",
        "id": 246295611,
        "sender_full_name": "starseeker",
        "timestamp": 1626483385
    },
    {
        "content": "<p>So far at least none of the issues we've hit is anything like that sourceforge failure that led to the duplicate SVN commit id crisis (knock on wood)</p>",
        "id": 246295619,
        "sender_full_name": "starseeker",
        "timestamp": 1626483421
    },
    {
        "content": "<p>Usually when that sort of thing happens I suspect another parallel compilation bug, but in this case it was a single .c file that failed to build - not much opportunity there for parallel issues...</p>",
        "id": 246295679,
        "sender_full_name": "starseeker",
        "timestamp": 1626483496
    },
    {
        "content": "<p><a href=\"https://github.com/actions/runner/issues/718\">https://github.com/actions/runner/issues/718</a></p>",
        "id": 246295691,
        "sender_full_name": "starseeker",
        "timestamp": 1626483545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> <span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> i am thinking about trying to migrate the bugs to start getting back to work......and while migrating look at the bugs i can try to fix as starters to getting to know the code</p>",
        "id": 277513580,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1648885622
    },
    {
        "content": "<p>where can i start?</p>",
        "id": 277513587,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1648885634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> You'll want to check with <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> on that one - I know he has some thoughts about migrating SF data</p>",
        "id": 277554909,
        "sender_full_name": "starseeker",
        "timestamp": 1648937806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> meanwhile....can I transfer the bugs and to-dos from the 2 files?</p>",
        "id": 277577323,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1648963815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> getting started with bug migration sounds great!</p>",
        "id": 277656071,
        "sender_full_name": "Sean",
        "timestamp": 1649013394
    },
    {
        "content": "<p>were you thinking the BUGS file?  I wouldn't migrate those to github issues without first confirming that they are still issues.  The BUGS file is intended to be for devs to leave notes on issues that may or may not be user visible, may or may not be fixed, may or may not be opinions on design, etc.  It's great for finding things to work on, but I wouldn't necessarily think we want to elevate all of them to a github \"issue\".</p>",
        "id": 277656091,
        "sender_full_name": "Sean",
        "timestamp": 1649013453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277656071\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> getting started with bug migration sounds great!</p>\n</blockquote>\n<p>well right now my target is the already present BUGS and TODO files....after that i will try the online issues</p>",
        "id": 277656096,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649013472
    },
    {
        "content": "<p>A better starting point would be to look at the bugs reported at  <a href=\"http://sourceforge.net/p/brlcad/bugs/\">http://sourceforge.net/p/brlcad/bugs/</a>  ... those could all be migrated automatically or manually</p>",
        "id": 277656098,
        "sender_full_name": "Sean",
        "timestamp": 1649013474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277656091\">said</a>:</p>\n<blockquote>\n<p>were you thinking the BUGS file?  I wouldn't migrate those to github issues without first confirming that they are still issues.  The BUGS file is intended to be for devs to leave notes on issues that may or may not be user visible, may or may not be fixed, may or may not be opinions on design, etc.  It's great for finding things to work on, but I wouldn't necessarily think we want to elevate all of them to a github \"issue\".</p>\n</blockquote>\n<p>should i try the todo file ?</p>",
        "id": 277656156,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649013542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277656098\">said</a>:</p>\n<blockquote>\n<p>A better starting point would be to look at the bugs reported at  <a href=\"http://sourceforge.net/p/brlcad/bugs/\">http://sourceforge.net/p/brlcad/bugs/</a>  ... those could all be migrated automatically or manually</p>\n</blockquote>\n<p>well i was going to try the sf2github script but it needs the bugs.json file to start which i dont have</p>",
        "id": 277656185,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649013602
    },
    {
        "content": "<p>there are 126 bugs listed on <a href=\"http://sf.net\">sf.net</a>, 67 feature requests on <a href=\"http://sf.net\">sf.net</a>, 51 support requests, 4 geometry, and 214 patches.  there's about 166 entries in the BUGS file and 492 ideas in the TODO file.   :)</p>",
        "id": 277656244,
        "sender_full_name": "Sean",
        "timestamp": 1649013644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277656244\">said</a>:</p>\n<blockquote>\n<p>there are 126 bugs listed on <a href=\"http://sf.net\">sf.net</a>, 67 feature requests on <a href=\"http://sf.net\">sf.net</a>, 51 support requests, 4 geometry, and 214 patches.  there's about 166 entries in the BUGS file and 492 ideas in the TODO file.   <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>that was fast</p>",
        "id": 277656306,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649013731
    },
    {
        "content": "<p>I mean it all depends on what interests you.  working on any of those will be helpful!</p>",
        "id": 277656323,
        "sender_full_name": "Sean",
        "timestamp": 1649013770
    },
    {
        "content": "<p>anyways i saw that the sf2github script is not updated but  i can fix it to work as per our need i think</p>",
        "id": 277656340,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649013789
    },
    {
        "content": "<p>personally, I'd probably start with the smallest (geometry) and next smallest (support requests), etc just because I like to shorten lists.</p>",
        "id": 277656344,
        "sender_full_name": "Sean",
        "timestamp": 1649013796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277656344\">said</a>:</p>\n<blockquote>\n<p>personally, I'd probably start with the smallest (geometry) and next smallest (support requests), etc just because I like to shorten lists.</p>\n</blockquote>\n<p>thats not a bad idea actually</p>",
        "id": 277656363,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649013830
    },
    {
        "content": "<p>right now i was trying to parse the TODO file....should i continue with it or start doing the sf requests?</p>",
        "id": 277656433,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649013882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277656344\">said</a>:</p>\n<blockquote>\n<p>personally, I'd probably start with the smallest (geometry) and next smallest (support requests), etc just because I like to shorten lists.</p>\n</blockquote>\n<p>to start with this i think i need the bugs.json file or something like that</p>",
        "id": 277656538,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649013980
    },
    {
        "content": "<p>well, I meant actually address the item, not really migrate it -- or migrate it manually (copy-paste and link to the sf item)</p>",
        "id": 277656743,
        "sender_full_name": "Sean",
        "timestamp": 1649014237
    },
    {
        "content": "<p>I can look into generating the .json file -- there's a script I have to run as admin, I believe</p>",
        "id": 277656747,
        "sender_full_name": "Sean",
        "timestamp": 1649014256
    },
    {
        "content": "<p>alternatively, could just look through the list of bugs in BUGS like you'd said and find one you think you understand -- then add it to issues, then work on it ;)</p>",
        "id": 277656765,
        "sender_full_name": "Sean",
        "timestamp": 1649014285
    },
    {
        "content": "<p>Just as an observation - the BUGS and TODO files, by virtue of being part of the repo, are already preserved on Github.  The data in the  Sourceforge systems isn't migrated at all, so from a data preservation standpoint it's the data we don't have migrated at all, in any form.</p>",
        "id": 277658313,
        "sender_full_name": "starseeker",
        "timestamp": 1649016251
    },
    {
        "content": "<p>For the SF data, my thinking (again for what it's worth) is that it's probably worth migrating them by hand, and doing some checking to see if the original issue is still valid for the current codebase.  The end result would be a better set of issues than just a mechanical migration.</p>",
        "id": 277658411,
        "sender_full_name": "starseeker",
        "timestamp": 1649016400
    },
    {
        "content": "<p>Yeah definitely would be most valuable to have some manually migrate and validate sf tracker items.</p>",
        "id": 277659681,
        "sender_full_name": "Sean",
        "timestamp": 1649018207
    },
    {
        "content": "<p>That’s where I’d probably start with the geometry because there’s just four of them and they could easily turn into four pull requests for new sample geom.  iirc they just needed docs and some minor cleanup like making sure top level object name made sense, minimal overlaps, make sure title is set, etc</p>",
        "id": 277659810,
        "sender_full_name": "Sean",
        "timestamp": 1649018375
    },
    {
        "content": "<p>so i tried pulling all of the tickets throught the SF api.....one thing i have to know is that there are a few tickets with attachments, right?</p>",
        "id": 277661749,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649020961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277658411\">said</a>:</p>\n<blockquote>\n<p>For the SF data, my thinking (again for what it's worth) is that it's probably worth migrating them by hand, and doing some checking to see if the original issue is still valid for the current codebase.  The end result would be a better set of issues than just a mechanical migration.</p>\n</blockquote>\n<p>if manual checking is needed then i can try putting all of the tickets i got throught API into a text file and then manually checking the needed ones?</p>",
        "id": 277661856,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649021101
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 277663051,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649022798
    },
    {
        "content": "<p>There are a lot of tickets with attachments (especially the patches and geometry trackers), but not so much for the feature and support request trackers.</p>",
        "id": 277665691,
        "sender_full_name": "Sean",
        "timestamp": 1649026203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277661856\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277658411\">said</a>:<br>\nif manual checking is needed then i can try putting all of the tickets i got throught API into a text file and then manually checking the needed ones?</p>\n</blockquote>\n<p>Yes, that would definitely work and be helpful!  Any trackers that are still relevant could be manually submitted as a gh issue or pr (in the case of the patches and geometry).</p>",
        "id": 277665739,
        "sender_full_name": "Sean",
        "timestamp": 1649026288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277665691\">said</a>:</p>\n<blockquote>\n<p>There are a lot of tickets with attachments (especially the patches and geometry trackers), but not so much for the feature and support request trackers.</p>\n</blockquote>\n<p>i am giving only the urls of the attachments because nothing else can be gotten from the API</p>",
        "id": 277688407,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649055148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277665739\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277661856\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277658411\">said</a>:<br>\nif manual checking is needed then i can try putting all of the tickets i got throught API into a text file and then manually checking the needed ones?</p>\n</blockquote>\n<p>Yes, that would definitely work and be helpful!  Any trackers that are still relevant could be manually submitted as a gh issue or pr (in the case of the patches and geometry).</p>\n</blockquote>\n<p>i will make a text file for an intermediate place for the tickets then......after the manual checking, the text file can again be parsed and then put onto github if that works</p>",
        "id": 277688621,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649055340
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/evsvgBWPh1dt7SebEcDaSeiy/bugs\">bugs</a> <br>\n<a href=\"/user_uploads/1549/DN5Rory8LaTcZaOX7IVqSPCR/feature-requests\">feature-requests</a> <br>\n<a href=\"/user_uploads/1549/9wWcuFzim1tw_k835P2313O7/support-requests\">support-requests</a> <br>\n<a href=\"/user_uploads/1549/zVxCXqezSLcePm1Eb5aMeu55/geometry\">geometry</a> </p>\n<p>these file contain tickets with their  information i got from the sourceforge API.....if this works, then i can make a parser which will parse the checked tickets and get it into github  as issues</p>",
        "id": 277695384,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649059612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> that sounds good, but I don't want to cause you work if there's a tool I can run as admin to migrate everything -- what about this:  <a href=\"https://github.com/cmungall/gosf2github\">https://github.com/cmungall/gosf2github</a> ?</p>",
        "id": 277786274,
        "sender_full_name": "Sean",
        "timestamp": 1649102732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277786274\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> that sounds good, but I don't want to cause you work if there's a tool I can run as admin to migrate everything -- what about this:  <a href=\"https://github.com/cmungall/gosf2github\">https://github.com/cmungall/gosf2github</a> ?</p>\n</blockquote>\n<p>wait.....there was and updated tool....the last time i checked there were no updated tools for this</p>",
        "id": 277830842,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649138050
    },
    {
        "content": "<p>gotta look out for stuff</p>",
        "id": 277830845,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649138057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> there's no mention whether that tool does anything with file uploads, but I was going to test it out on the geometry tracker since it's so small..  If it goes bad, probably won't be hard to clean up after it.</p>",
        "id": 277893468,
        "sender_full_name": "Sean",
        "timestamp": 1649171416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277893468\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"247135\">Sumagna Das</span> there's no mention whether that tool does anything with file uploads, but I was going to test it out on the geometry tracker since it's so small..  If it goes bad, probably won't be hard to clean up after it.</p>\n</blockquote>\n<p>geometry tracker doesnt have any attachments and its small so not a problem i guess</p>",
        "id": 277976843,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649222498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247135\">@Sumagna Das</span> the geometry tracker does have attachments... they're in the comments</p>",
        "id": 277980761,
        "sender_full_name": "Sean",
        "timestamp": 1649227042
    },
    {
        "content": "<p>that's its whole point, they're people submitting geometry models (.g files)</p>",
        "id": 277980772,
        "sender_full_name": "Sean",
        "timestamp": 1649227066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-general/topic/GitHub/near/277980772\">said</a>:</p>\n<blockquote>\n<p>that's its whole point, they're people submitting geometry models (.g files)</p>\n</blockquote>\n<p>i can do something about that i think</p>",
        "id": 278033883,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649256261
    },
    {
        "content": "<p>the SF API supports providing the discussion (posts) as well as it uploads/attachments   via requests i think</p>",
        "id": 278033967,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649256300
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 278034225,
        "sender_full_name": "Sumagna Das",
        "timestamp": 1649256402
    },
    {
        "content": "<p>Profanity aside, this is actually a really useful reference for common git issues:  <a href=\"https://ohshitgit.com\">https://ohshitgit.com</a></p>",
        "id": 280873160,
        "sender_full_name": "Sean",
        "timestamp": 1651498077
    },
    {
        "content": "<p>This looks fun… <a href=\"https://github.com/AmrDeveloper/GQL\">https://github.com/AmrDeveloper/GQL</a></p>",
        "id": 405568907,
        "sender_full_name": "Sean",
        "timestamp": 1701553228
    },
    {
        "content": "<p>Huh, interesting.  Certainly feels like it should be useful for some sort of repo report generation</p>",
        "id": 405571436,
        "sender_full_name": "starseeker",
        "timestamp": 1701555649
    },
    {
        "content": "<p>Hey Sean, it has been years, how's everything? I have received the \"ok\" from Mark to work fewer hours to do that point cloud thing. I'm planning the algorithm on paper before I get started, there are some details I'm undecided how to handle</p>",
        "id": 405577618,
        "sender_full_name": "Alexis Naveros",
        "timestamp": 1701561482
    },
    {
        "content": "<p>And that post of mine was off-topic. I'm not used to this Zulip topic-based chat</p>",
        "id": 405577668,
        "sender_full_name": "Alexis Naveros",
        "timestamp": 1701561516
    },
    {
        "content": "<p>I would have a couple questions... Cliff said you already had Screened Poisson reconstruction, the wording suggested that it was satisfactory but very slow. Could it be just a matter of beating the hell out of that code with threads, SSE/AVX/AVX-512, atomics, NUMA awareness? I briefly looked at the code but was a bit lost backtracking beyond SPSR.cpp</p>",
        "id": 405594245,
        "sender_full_name": "Alexis Naveros",
        "timestamp": 1701571639
    },
    {
        "content": "<p>And do you have some kind of deadline or desired date for the mesh reconstruction algorithm? Just to have an idea how I'll weight the couple different things that need to be done</p>",
        "id": 405594445,
        "sender_full_name": "Alexis Naveros",
        "timestamp": 1701571783
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"671298\">@Alexis Naveros</span> very delayed reply!...  everything has been going really great, and glad to hear they're going well for you too.  short answer is \"I dunno\" on the screened poisson, at least to say for sure.  I'm fairly certain it's typical unstable non-performant academic code, so yeah, probably tons of room for optimizations and improvement.  </p>\n<p>On that point, I listed to a talk just last week by someone that was comparing screened poisson with other methods, outlining the general deficiencies of the algorithm.  I believe they were approaching it from a completely different perspective, incorporating ML into the pipeline to make more dynamic decisions, with good results.</p>",
        "id": 426263031,
        "sender_full_name": "Sean",
        "timestamp": 1710308100
    },
    {
        "content": "<p>if it wasn't obvious, we don't have deadlines here.  or better still, there's many many many desired deadlines to choose from and they often go wooshing by, but we make progress steadily still.</p>\n<p>I consequently just finished implementing a montecarlo approach to external surface area estimation that samples the hell out of the exterior surfaces and would love a robust point-cloud to solid mesh routine.  My current tactic is going to be to sample it very densely, make thin cylinders at each surface hit point, mesh and union them all together, and (if sampled densely enough) I should be able to eliminate all the interior faces/points.  It's stupid, but it just might work well.</p>",
        "id": 426263352,
        "sender_full_name": "Sean",
        "timestamp": 1710308331
    },
    {
        "content": "<p>If you came up with a better way, I'd gladly use it!</p>",
        "id": 426263377,
        "sender_full_name": "Sean",
        "timestamp": 1710308354
    }
]