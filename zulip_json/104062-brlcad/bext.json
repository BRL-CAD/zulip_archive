[
    {
        "content": "<p>For those experimenting with bext, the latest main will now clone and build its own copy of bext as part of the configure stage if a BRLCAD_EXT_DIR location isn't supplied.</p>",
        "id": 421967391,
        "sender_full_name": "starseeker",
        "timestamp": 1708137185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> If you're going to remove the src/bext submodule, be sure to update the docs and remove the build logic that checks for it</p>",
        "id": 455960417,
        "sender_full_name": "starseeker",
        "timestamp": 1722611458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span>  Ooops, I just saw an empty dir and thought it was leftover.  Where does it check for it?  Why does it need to be there empty?</p>",
        "id": 456036990,
        "sender_full_name": "Sean",
        "timestamp": 1722630369
    },
    {
        "content": "<p><a href=\"https://github.com/BRL-CAD/brlcad/blob/main/misc/CMake/BRLCAD_EXT_Setup.cmake#L50\">https://github.com/BRL-CAD/brlcad/blob/main/misc/CMake/BRLCAD_EXT_Setup.cmake#L50</a></p>",
        "id": 456052905,
        "sender_full_name": "starseeker",
        "timestamp": 1722637569
    },
    {
        "content": "<p>That's how unpopulated submodules in git work, AFAIK - a shallow bext clone is like that, as well</p>",
        "id": 456052933,
        "sender_full_name": "starseeker",
        "timestamp": 1722637595
    },
    {
        "content": "<p>okay, so it's currently looking for it that way.. and that possibly explains some other issues I kept running into. </p>\n<p>bit unexpected to have running something in the build dir affect the source tree by default.  I assumed it was cloning into the build dir.  Invoking action was a build action, so it probably shouldn't be touching the source dir.</p>\n<p>Any reason it couldn't just be an external project add like bext is doing?  That way, the clone rule will live in the build logic and the files will be in the build tree.</p>",
        "id": 456109914,
        "sender_full_name": "Sean",
        "timestamp": 1722664935
    },
    {
        "content": "<p>If the cmake configure does a clone, it <em>is</em> doing it in the build dir.  The submodule in src/ was to allow a single git clone command to download everything needed for any BRL-CAD build config, in a single shot</p>",
        "id": 456158063,
        "sender_full_name": "starseeker",
        "timestamp": 1722690997
    },
    {
        "content": "<p>If the user clones BRL-CAD with a git clone --recursive, then (and only then) src/bext is populated.  Otherwise, everything happens in the build directory</p>",
        "id": 456158228,
        "sender_full_name": "starseeker",
        "timestamp": 1722691031
    },
    {
        "content": "<p>Ahh, okay, so then it doesn't explain some other issues I kept running into...</p>",
        "id": 456177994,
        "sender_full_name": "Sean",
        "timestamp": 1722699413
    },
    {
        "content": "<p>Weird.  I never did the recursive, but the auto kept giving me trouble.  I've since switched to a manual build of bext because it would be broken after any change to a submodule (different reasons iirc).</p>",
        "id": 456178292,
        "sender_full_name": "Sean",
        "timestamp": 1722699487
    },
    {
        "content": "<p>So then sounds like there's three ways -- a recursive clone into src, an auto clone into builddir, or manual BRLCAD_EXT_DIR</p>",
        "id": 456178560,
        "sender_full_name": "Sean",
        "timestamp": 1722699572
    },
    {
        "content": "<p>Correct.</p>",
        "id": 456197123,
        "sender_full_name": "starseeker",
        "timestamp": 1722707413
    },
    {
        "content": "<p>The first is intended for the \"I don't care about disk space, make sure I've got everything I'll ever need\" case.  The second is the \"only build what I need for this config of BRL-CAD\" case.  The third is the \"I'm going to be compiling this sucker a lot, I don't want to keep rebuilding this\" case.</p>",
        "id": 456197324,
        "sender_full_name": "starseeker",
        "timestamp": 1722707484
    },
    {
        "content": "<p>Regarding the question of automatically responding to updated sources from git updates... My best guess is it would take some sort of custom UPDATE_COMMAND: <a href=\"https://cmake.org/cmake/help/latest/module/ExternalProject.html#update-step-options\">https://cmake.org/cmake/help/latest/module/ExternalProject.html#update-step-options</a></p>",
        "id": 456929867,
        "sender_full_name": "starseeker",
        "timestamp": 1722970078
    },
    {
        "content": "<p>Sticking  <code>rsync -a --delete</code>  into the Itcl ExternalProject_Add as an UPDATE_COMMAND results in rebuilding  every time, so it appears to be triggering as expected - the trick would be to conditionally trigger based on a change in the original sources, rather than just doing it blindly.  Probably a CMake script could do it...</p>",
        "id": 456930885,
        "sender_full_name": "starseeker",
        "timestamp": 1722970492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> food for thought, thanks for checking.  Might be a little more hairy if updates involve new patches also -- would probably need to catch any change inside the dependency subdir, invalidate it, and proceed as before (ideally).  Not sure it's worth the extra logic though if that'd need to get injected into any places outside update_command (e.g., patching).</p>",
        "id": 456968338,
        "sender_full_name": "Sean",
        "timestamp": 1722982692
    },
    {
        "content": "<p>On a mildly point -- the itcl header patch is no bueno.  There's no Tcl vars accessible to Itcl at that point, so the vars are invalid/empty.</p>",
        "id": 456968392,
        "sender_full_name": "Sean",
        "timestamp": 1722982736
    },
    {
        "content": "<p>The patch file itself, or the associated CMake logic?</p>",
        "id": 456982471,
        "sender_full_name": "starseeker",
        "timestamp": 1722992043
    },
    {
        "content": "<p>I'm testing some ideas now - you have a point that things will get hairy if we all start piling into updating dependencies.  I initially shied away from the added complexity in the initial work, but I'll see if I can find a reasonable solution</p>",
        "id": 456982567,
        "sender_full_name": "starseeker",
        "timestamp": 1722992125
    },
    {
        "content": "<p>Oh, right gotcha - the Itcl build is doing find_package for Tcl, but the parent isn't</p>",
        "id": 456983358,
        "sender_full_name": "starseeker",
        "timestamp": 1722992749
    },
    {
        "content": "<p>Duh.</p>",
        "id": 456983360,
        "sender_full_name": "starseeker",
        "timestamp": 1722992752
    }
]