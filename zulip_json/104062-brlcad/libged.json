[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> I know it's not hooked up, but help is the furthest along of libged's new command structure.  Please don't merge the deletion.</p>",
        "id": 204497450,
        "sender_full_name": "Sean",
        "timestamp": 1595288304
    },
    {
        "content": "<p>(talking about libged/help)</p>",
        "id": 204499596,
        "sender_full_name": "Sean",
        "timestamp": 1595290119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> No problem - I only merged the relocations because I figured they were harmless and would make life easier down the road - the bit I'm into now is a bit crazier.</p>\n<p>What I'm trying is a bit different from what was there (at least, so far) so I don't know if it will be acceptable in the end or not - it's mostly an experiment, and may end up being a throw-away.</p>",
        "id": 204502895,
        "sender_full_name": "starseeker",
        "timestamp": 1595293259
    },
    {
        "content": "<p>the relocations aren't a problem, that's been the plan, so it's all good.  it's the commit on the branch deleting help/help.cpp that was a lil concerning.</p>",
        "id": 204508128,
        "sender_full_name": "Sean",
        "timestamp": 1595299939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> That was a temporary measure for compiling while setting up the change in the API - I should have commented it out rather than deleting it.</p>",
        "id": 204536494,
        "sender_full_name": "starseeker",
        "timestamp": 1595331123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> fixed - gedplugins branch now has the help and zoom plugins enabled using the new setup.</p>",
        "id": 204544894,
        "sender_full_name": "starseeker",
        "timestamp": 1595336890
    },
    {
        "content": "<p>cool</p>",
        "id": 204600631,
        "sender_full_name": "Sean",
        "timestamp": 1595364185
    },
    {
        "content": "<p>I like them dynamically loading.  will be interesting to see how that scales up, what if anything it does to initialization.</p>",
        "id": 204600758,
        "sender_full_name": "Sean",
        "timestamp": 1595364260
    },
    {
        "content": "<p>also sets the stage for having a single runner process that dynamically loads and communicates back over a channel -- complete protected process encapsulation</p>",
        "id": 204600802,
        "sender_full_name": "Sean",
        "timestamp": 1595364301
    },
    {
        "content": "<p>/me is being driven slightly batty by the libged file names and function  names not necessarily matching the invocation strings higher level code expects, but starting to get some interesting progress now.</p>\n<p>Must confess I started down this road trying to see if I could come with a way to avoid all the verbose wrapping logic in the libtclcad layer... figured at the very least it would force me to understand which pieces are doing what.</p>\n<p>/me sometimes prefers to trample down the maze rather than wind his way through it...</p>",
        "id": 204612836,
        "sender_full_name": "starseeker",
        "timestamp": 1595372470
    },
    {
        "content": "<p>My initialization here (and shutdown) seems to be dominated by Tcl/Tk.</p>",
        "id": 204623122,
        "sender_full_name": "starseeker",
        "timestamp": 1595382661
    },
    {
        "content": "<p>careful reading into those tea leaves there.  it's super i/o heavy, so throwing in a ton of additional syscalls could be exasperating it in ways that won't measure correctly easily.</p>",
        "id": 204626932,
        "sender_full_name": "Sean",
        "timestamp": 1595388144
    },
    {
        "content": "<p>Fair enough - just going by wall clock time.  I've notice the same thing with other Tcl/Tk apps on this system (gitk, for example).</p>",
        "id": 204726127,
        "sender_full_name": "starseeker",
        "timestamp": 1595454119
    },
    {
        "content": "<p>There is a strange stall that seems to happen only sometimes (perhaps tcl index rebuilding, dunno, guessing) that can stall MGED on first launch after install, lasting 20-100 seconds...  I haven't been able to reproduce it reliably, but I have seen it.</p>",
        "id": 204726550,
        "sender_full_name": "Sean",
        "timestamp": 1595454375
    },
    {
        "content": "<p>/me nods - seen that too, same symptoms.</p>",
        "id": 204726964,
        "sender_full_name": "starseeker",
        "timestamp": 1595454680
    },
    {
        "content": "<p>I think the libged refactor is starting to get interesting.  As far as I can tell, I've got MGED and libtclcad working with the new setup.</p>",
        "id": 204727045,
        "sender_full_name": "starseeker",
        "timestamp": 1595454723
    },
    {
        "content": "<p>I saw, looking good.</p>",
        "id": 204727098,
        "sender_full_name": "Sean",
        "timestamp": 1595454762
    },
    {
        "content": "<p>only thought that's come to mind is \"I wonder how slow that is\" ;)</p>",
        "id": 204727128,
        "sender_full_name": "Sean",
        "timestamp": 1595454787
    },
    {
        "content": "<p>I'll have to try a Windows build next, and maybe toss it on the Github mac runner</p>",
        "id": 204727136,
        "sender_full_name": "starseeker",
        "timestamp": 1595454799
    },
    {
        "content": "<p>Um.  Do we have benchmarks for that?  It shouldn't bother the standard raytracing benchmarks much...</p>",
        "id": 204727166,
        "sender_full_name": "starseeker",
        "timestamp": 1595454826
    },
    {
        "content": "<p>I had a little test runner I made for indianlarry that I wish I'd kept -- but could probably reproduce</p>",
        "id": 204727174,
        "sender_full_name": "Sean",
        "timestamp": 1595454837
    },
    {
        "content": "<p>it timed how fast commands could run, pushed their limit</p>",
        "id": 204727242,
        "sender_full_name": "Sean",
        "timestamp": 1595454874
    },
    {
        "content": "<p>I know it's not a fair question, but if there's any way to know what I need to aim for... How slow is \"too slow\" in this case?</p>",
        "id": 204727294,
        "sender_full_name": "starseeker",
        "timestamp": 1595454921
    },
    {
        "content": "<p>if restructuring libged slows down the benchmarks, that enters revert territory because libged shouldn't even be involved :D</p>",
        "id": 204727300,
        "sender_full_name": "Sean",
        "timestamp": 1595454926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/libged/near/204727294\">said</a>:</p>\n<blockquote>\n<p>I know it's not a fair question, but if there's any way to know what I need to aim for... How slow is \"too slow\" in this case?</p>\n</blockquote>\n<p>I don't think any single command matters unless it gets into non-responsive territory.  commands that should complete immediately that are taking 500 to 5000ms for example, when they maybe took 5ms before -- that would be a problem I think</p>",
        "id": 204727446,
        "sender_full_name": "Sean",
        "timestamp": 1595455027
    },
    {
        "content": "<p>Sounds like a candidate for a regression test, actually...</p>",
        "id": 204727556,
        "sender_full_name": "starseeker",
        "timestamp": 1595455107
    },
    {
        "content": "<p>the general bar for interactivity is 20 per sec, which is 50ms</p>",
        "id": 204727618,
        "sender_full_name": "Sean",
        "timestamp": 1595455161
    },
    {
        "content": "<p>Would need to \"normalize\" somehow on the platform at the beginning of the run, but if we recorded an expected range based on a ratio of the control test maybe?  Even fairly large error bars might be useful for spotting bad problems getting introduced...</p>",
        "id": 204727648,
        "sender_full_name": "starseeker",
        "timestamp": 1595455181
    },
    {
        "content": "<p>if a command doesn't complete in under that, it's not \"interactive\".  now in practice, I think most people's tolerance is more like web page tolerance, not necessarily interactive rate, but \"responsive\" enough and that sits in the 2s ballpark.</p>",
        "id": 204727757,
        "sender_full_name": "Sean",
        "timestamp": 1595455249
    },
    {
        "content": "<p>/me gets an idea...</p>",
        "id": 204727909,
        "sender_full_name": "starseeker",
        "timestamp": 1595455339
    },
    {
        "content": "<p>where a slowdown would be concerning is any commands that call into other commands.  like if search suddenly goes from 1s to 10s .. that implies an architecture problem getting introduced.</p>",
        "id": 204727955,
        "sender_full_name": "Sean",
        "timestamp": 1595455388
    },
    {
        "content": "<p>I doubt that's happened though</p>",
        "id": 204727965,
        "sender_full_name": "Sean",
        "timestamp": 1595455402
    },
    {
        "content": "<p>it'd be nice to have a dashboard of how long each command takes to do its intended function</p>",
        "id": 204728110,
        "sender_full_name": "Sean",
        "timestamp": 1595455516
    },
    {
        "content": "<p>which would imply having a test for every command, which we don't have yet though either</p>",
        "id": 204728137,
        "sender_full_name": "Sean",
        "timestamp": 1595455543
    },
    {
        "content": "<p>Well, my libged plugin test is iterating through calling all of them (or should be, at any rate)...</p>",
        "id": 204728583,
        "sender_full_name": "starseeker",
        "timestamp": 1595455883
    },
    {
        "content": "<p>the mged test calls them all too, to make sure they all report help -- not the same as doing and timing their intended function though</p>",
        "id": 204728705,
        "sender_full_name": "Sean",
        "timestamp": 1595455963
    },
    {
        "content": "<p>Ah.  That shouldn't be needed for overhead comparison though, should it?  Or is there a chance that living as a shared object will slow down the execution?</p>",
        "id": 204728767,
        "sender_full_name": "starseeker",
        "timestamp": 1595456017
    },
    {
        "content": "<p>it depends on where slowdown came from</p>",
        "id": 204728842,
        "sender_full_name": "Sean",
        "timestamp": 1595456046
    },
    {
        "content": "<p>saw we screwed up rt_db_export_internal performance for example, wouldn't show just by testing usage or help</p>",
        "id": 204728932,
        "sender_full_name": "Sean",
        "timestamp": 1595456103
    },
    {
        "content": "<p>they have their place as a test, just not as interesting for dashboarding purposes at least</p>",
        "id": 204728958,
        "sender_full_name": "Sean",
        "timestamp": 1595456131
    },
    {
        "content": "<p>and regarding performance for usability testing, startup time is just a fraction of the time that matters</p>",
        "id": 204729116,
        "sender_full_name": "Sean",
        "timestamp": 1595456242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I doubt it's the number you're after, but if it's of interest I added a timer in ged_exec...</p>",
        "id": 204731119,
        "sender_full_name": "starseeker",
        "timestamp": 1595457685
    },
    {
        "content": "<p>heh, you know you just added another syscall right??</p>",
        "id": 204732091,
        "sender_full_name": "Sean",
        "timestamp": 1595458395
    },
    {
        "content": "<p>ah, apparently it depends -- might not be a syscall</p>",
        "id": 204732235,
        "sender_full_name": "Sean",
        "timestamp": 1595458479
    },
    {
        "content": "<p>looks like it is a system call, but doesn't always provoke typical system call behavior -- it depends on the OS and libc implementation.  may at least avoid an allocation, but may still cause an interrupt/stall.</p>",
        "id": 204732571,
        "sender_full_name": "Sean",
        "timestamp": 1595458740
    },
    {
        "content": "<p>To the overall timing, yes - I thought the issue of main concern was whether the invocation of the ged commands was being slowed?</p>",
        "id": 204735979,
        "sender_full_name": "starseeker",
        "timestamp": 1595461561
    },
    {
        "content": "<p>The idea was to show execution times to evaluate whether things look \"too slow\" or not, and then remove it once it passes muster...</p>",
        "id": 204736057,
        "sender_full_name": "starseeker",
        "timestamp": 1595461633
    },
    {
        "content": "<p>yes, that was the immediate question.  Doesn't need to persist as a feature, though -- just for awareness.</p>",
        "id": 204736061,
        "sender_full_name": "Sean",
        "timestamp": 1595461638
    },
    {
        "content": "<p>yeah, thumbs up</p>",
        "id": 204736069,
        "sender_full_name": "Sean",
        "timestamp": 1595461652
    },
    {
        "content": "<p>Ironically, the new approach is a whole lot easier to instrument than traditional ged calls - no single entry point there to watch.</p>",
        "id": 204736138,
        "sender_full_name": "starseeker",
        "timestamp": 1595461699
    },
    {
        "content": "<p>sure, but that's because you made a ged_exec to call them .. and that's been the plan all along regardless of them being dynamic or not</p>",
        "id": 204736178,
        "sender_full_name": "Sean",
        "timestamp": 1595461739
    },
    {
        "content": "<p>/me nods.  So the question is whether they should just all be built as one library in lieu of the individual .so files?</p>",
        "id": 204736242,
        "sender_full_name": "starseeker",
        "timestamp": 1595461801
    },
    {
        "content": "<p>/me figured the latter was a good stepping stone to per-process commands (which I would expect to be slower than this approach, really...)</p>",
        "id": 204736310,
        "sender_full_name": "starseeker",
        "timestamp": 1595461845
    },
    {
        "content": "<p>all or some subset, we may find there's a benefit in having a core guaranteed preloaded</p>",
        "id": 204736311,
        "sender_full_name": "Sean",
        "timestamp": 1595461845
    },
    {
        "content": "<p>yep</p>",
        "id": 204736325,
        "sender_full_name": "Sean",
        "timestamp": 1595461856
    },
    {
        "content": "<p>per-process will be even more overhead, that's why it's all just situational awareness curiosity.  I don't expect it to be much more than a few ms increase.</p>",
        "id": 204736370,
        "sender_full_name": "Sean",
        "timestamp": 1595461911
    },
    {
        "content": "<p>if anything, it could conceivably reduce overall runtime while increasing individual commands, because not all have to be resolved by ld during startup</p>",
        "id": 204736431,
        "sender_full_name": "Sean",
        "timestamp": 1595461950
    },
    {
        "content": "<p>it should just be adding a few interrupts to do the .so search, open, scan+read the file to get the symbols.  that's probably not very much and should only be on the first call.</p>",
        "id": 204736559,
        "sender_full_name": "Sean",
        "timestamp": 1595462101
    },
    {
        "content": "<p>So, bottom line, what's the path forward?  I'm not in a tearing hurry to merge - my target is libtclcad and I can tangle with that in this branch well enough - but we'll need some plan to move forward eventually.  This'll be a tough to maintain long term as a branch if any significant work starts on libged in trunk...</p>",
        "id": 204736673,
        "sender_full_name": "starseeker",
        "timestamp": 1595462201
    },
    {
        "content": "<p>if mged seems to be behaving and there's not an obvious slowdown, no major concerns from me.</p>",
        "id": 204738675,
        "sender_full_name": "Sean",
        "timestamp": 1595464015
    },
    {
        "content": "<p>if it's slower, that should be born out by observation of an issue (e.g., search 10x slower or something).  any fix  should be with an eye towards fixing a specific observed problem.  i don't think this change warrants hunting for a problem necessarily.  a sanity check on a couple typical commands should be enough hopefully, and it'd be good to merge.</p>",
        "id": 204738832,
        "sender_full_name": "Sean",
        "timestamp": 1595464167
    },
    {
        "content": "<p>Sounds good.  Time to boot the laptop into Windows again... ugh.</p>",
        "id": 204740116,
        "sender_full_name": "starseeker",
        "timestamp": 1595465413
    },
    {
        "content": "<p>/me does the github Mac test first because it's more fun...</p>",
        "id": 204740171,
        "sender_full_name": "starseeker",
        "timestamp": 1595465501
    }
]