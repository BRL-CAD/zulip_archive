[
    {
        "content": "<h1>Preface</h1>\n<p>There was a discussion on GitHub regarding a programming style guide for arbalest. There is the HACKING in the brlcad repository, of course, but I don't think it is suited for modern C++ code. And, I hate especially the indentation rules.</p>\n<p>The following represent very much what I used for the development of MOOSE, still they shall not be understood as a proposal for an arbalest style-guide. Rather, I want to demonstrate my expactations regarding a coding style guide. You may observe many issues among my set of rules. But I hope that they can serve as the starting point of a serious discussion.</p>",
        "id": 528551472,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1752434534
    },
    {
        "content": "<h1>Basic principles</h1>\n<ul>\n<li>\n<p>The rules should be influenced by already existing ones, learn from their experience, but not copy them. Own classes, functions, etc. should be easily distingushable from alien code.<br>\n  (For example, in MFC all class names start with \"C\". Therefore, somebody state the rule to do this in own code too. The result was that it became hard to distinguish own classes from MFC classes, e.g. in the debugger's call stack.)</p>\n</li>\n<li>\n<p>The code should be compact, as long as it doesn't hinder its legibility.</p>\n</li>\n<li>The less, the personal style of a programmer can be visible, the better.</li>\n</ul>",
        "id": 528551626,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1752434674
    },
    {
        "content": "<h1>Style Guide</h1>\n<h2>Source Code Layout</h2>\n<p><strong>There shall be no more than one statement per line.</strong></p>\n<h3>Source Code File</h3>\n<p><strong>Every source file begins with the copyright notice, license, and a short description.</strong><br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cm\">/*                    V E C T O R L I S T. C P P</span>\n<span class=\"cm\"> * BRL-CAD</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * Copyright (c) 2020-2025 United States Government as represented by</span>\n<span class=\"cm\"> * the U.S. Army Research Laboratory.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * This library is free software; you can redistribute it and/or</span>\n<span class=\"cm\"> * modify it under the terms of the GNU Lesser General Public License</span>\n<span class=\"cm\"> * version 2.1 as published by the Free Software Foundation.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * This library is distributed in the hope that it will be useful, but</span>\n<span class=\"cm\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>\n<span class=\"cm\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>\n<span class=\"cm\"> * Lesser General Public License for more details.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * You should have received a copy of the GNU Lesser General Public</span>\n<span class=\"cm\"> * License along with this file; see the file named COPYING for more</span>\n<span class=\"cm\"> * information.</span>\n<span class=\"cm\"> */</span>\n<span class=\"cm\">/** @file VectorList.cpp</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> *  BRL-CAD core C++ interface:</span>\n<span class=\"cm\"> *      vlist implementation</span>\n<span class=\"cm\"> */</span>\n</code></pre></div>\n<p><strong>Header files shall be protected against multiple including with a define of the form &lt;NAMESPACE&gt;_&lt;FILENAME&gt;_INCLUDED.</strong><br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cm\">/*                    V E C T O R L I S T. H</span>\n<span class=\"cm\"> * BRL-CAD</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * Copyright (c) 2020-2025 United States Government as represented by</span>\n<span class=\"cm\"> * the U.S. Army Research Laboratory.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * This library is free software; you can redistribute it and/or</span>\n<span class=\"cm\"> * modify it under the terms of the GNU Lesser General Public License</span>\n<span class=\"cm\"> * version 2.1 as published by the Free Software Foundation.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * This library is distributed in the hope that it will be useful, but</span>\n<span class=\"cm\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>\n<span class=\"cm\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>\n<span class=\"cm\"> * Lesser General Public License for more details.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * You should have received a copy of the GNU Lesser General Public</span>\n<span class=\"cm\"> * License along with this file; see the file named COPYING for more</span>\n<span class=\"cm\"> * information.</span>\n<span class=\"cm\"> */</span>\n<span class=\"cm\">/** @file VectorList.h</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> *  BRL-CAD core C++ interface:</span>\n<span class=\"cm\"> *      vlist declaration</span>\n<span class=\"cm\"> */</span>\n\n<span class=\"cp\">#ifndef BRLCAD_VECTORLIST_INCLUDED</span>\n<span class=\"cp\">#define BRLCAD_VECTORLIST_INCLUDED</span>\n</code></pre></div>\n<p>[includes]<br>\n[forward declarations]</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">namespace</span><span class=\"w\"> </span><span class=\"nn\">BRLCAD</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<p>[declarations]</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"p\">}</span>\n\n\n<span class=\"cp\">#endif </span><span class=\"c1\">// BRLCAD_VECTORLIST_INCLUDED</span>\n</code></pre></div>\n<p><strong>Version information are stored in the version control system, and only there.</strong></p>\n<h3>Indents</h3>\n<p><strong>A single indent consists of 4 white-spaces.</strong><br>\nDeeper indentations consist of a multiple of that.</p>\n<p><strong>Tabs may not be used for the source code layout.</strong></p>\n<h3>Operators</h3>\n<p><strong>Except for unary operators, there shall be at least one white-space before and after it.</strong></p>\n<p><strong>Same operators shall be written below each other.</strong><br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"n\">a</span><span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">;</span>\n<span class=\"n\">b</span><span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">;</span>\n<span class=\"n\">ab</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"n\">cd</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><strong>Unary operators are written without space between the operand.</strong><br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">;</span>\n</code></pre></div>\n<h3>Blocks</h3>\n<p><strong>Opening brackets shall be in the line preceding the block.</strong><br>\nExample 1:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">FunctionName</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<p>Example 2:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<p><strong>The content of a block has a single indent.</strong><br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">FunctionName</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><strong>Closing brackets shall be in an own line.</strong></p>\n<p><strong>Preceding a block, there shall be an empty line, except, the block follows immediately the beginning of another block.</strong><br>\nExample 1:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">;</span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<p>Example 2:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">FunctionName</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<p><strong>Following a block, there shall be an empty line, except, it follows immediately the end of another block or the block's preceding statement is continued.</strong><br>\nExample 1:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Example 2:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Example 3:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n</code></pre></div>\n<h3>Function declarations</h3>\n<p><strong>The parameters of a non-member function shall be written as a block. The opening bracket goes into an own line.</strong><br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">FunctionName</span>\n<span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\">    </span><span class=\"n\">number</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">value</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<p>This rule holds for declarations in header files as well as function implementations. This accentuates the impotence of the parameters of a function. They are easier to understand.</p>\n<p><strong>The parameters of class methods shall be written below each other, the first one in the same line as the function name.</strong><br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">ClassName</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">FunctionName</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\">    </span><span class=\"n\">number</span><span class=\"p\">,</span>\n<span class=\"w\">                     </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>Often, classes have many methods with similar signature. A compact style eases the overview.</p>\n<p><strong>The declaration of a parameterless function shall be written in a single line.</strong><br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">FunctionName</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<h2>Keyword Names</h2>\n<p><strong>Keywords, which will handed over to the compiler, shall be written in camel-case.</strong><br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">ExampleFunction</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">exampleVariable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">exampleVariable</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><strong>Keywords, which are handled by the preprocessor, shall be written in capital letters.</strong><br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#define MAX_USER_NUMBER 4</span>\n</code></pre></div>\n<h3>Names of objects with fixed address start with a capital letter, objects with variable address start with a lower letter.</h3>\n<p><strong>Function and type names start with a capital letter.</strong></p>\n<p><strong>Variable names start with a lower letter.</strong></p>\n<p><strong>Constants names start with a capital letter.</strong></p>\n<p><strong>Variables, which are not declared in the function, where they are used, have an underline \"_\" in the name.</strong></p>\n<p><strong>Variables, which are members of a class, start with \"m_\".</strong><br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">ExampleClass</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">ExampleFunction</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">m_exampleVariable</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"k\">private</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">m_exampleVariable</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<h2>Programming Style</h2>\n<h3>Variables</h3>\n<p><strong>A variable declaration shall be its initialization too, or a variable shall be declared not until a value can be assigned.</strong></p>\n<p><strong>A convincing name shall be preferred to comments.</strong><br>\nBad:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// number of elements</span>\n</code></pre></div>\n<p>Good:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">numberOfElements</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This means more typing, but if somebody reads the code, e.g. hits this variable in a debugger, they see immediately what it is. No need to scroll back. The variable names are not for the compiler, it can handle \"gt5jd7\" as well, but for the programmers.</p>\n<h3>Functions</h3>\n<p><strong>Functions have exactly one exit point (return statement).</strong><br>\nThis makes it easier to follow all processing paths, because they all end at the single exit point. In addition, it makes it easier to debug a function, because there is exactly one place for a break point at the function's end.<br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">Foo</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">value</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3><em>goto</em> statements</h3>\n<p><strong><em>goto</em> statements are generally deprecated.</strong></p>\n<p><strong>The usage of <em>goto</em> statements can be justified.</strong><br>\nFor example in exception handling:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"nf\">OpenFile</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">fileName</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">Exist</span><span class=\"p\">(</span><span class=\"n\">fileName</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"k\">throw</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ReadingPermitted</span><span class=\"p\">(</span><span class=\"n\">fileName</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"k\">throw</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">FileHandleAvailable</span><span class=\"p\">(</span><span class=\"n\">fileName</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"k\">throw</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// open file</span>\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here, the throw of an exception is used to jump out of the file processing. But, an exception isn't a simple jump but a much more complicated mechanism. In such a case, using <em>goto</em> statements can be a solution:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"nf\">OpenFile</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">fileName</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">Exist</span><span class=\"p\">(</span><span class=\"n\">fileName</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"k\">goto</span><span class=\"w\"> </span><span class=\"n\">EXIT_LABEL</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ReadingPermitted</span><span class=\"p\">(</span><span class=\"n\">fileName</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"k\">goto</span><span class=\"w\"> </span><span class=\"n\">EXIT_LABEL</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">FileHandleAvailable</span><span class=\"p\">(</span><span class=\"n\">fileName</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"k\">goto</span><span class=\"w\"> </span><span class=\"n\">EXIT_LABEL</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// open file</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">;</span>\n\n<span class=\"nl\">EXIT_LABEL</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>See also recommendation 2 in section 14.11 of Bjarne Stroustrup's \"The C++ Programming Language\".</p>",
        "id": 528552284,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1752435278
    },
    {
        "content": "<p>adapting an existing style that something like astyle or vs code natively supports might be best</p>",
        "id": 529179964,
        "sender_full_name": "Erik",
        "timestamp": 1752707878
    },
    {
        "content": "<p>I'm not sure what you have in mind. It should be feasible by humans with an ordinary editor to follow the rules. E.g., I use Notepad++ or Kate. But with these, it's very hard to do the indentation in brlcad right. If a special software is necessary to do follow a rule, it would be a red flag for me.</p>",
        "id": 529344553,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1752781185
    }
]