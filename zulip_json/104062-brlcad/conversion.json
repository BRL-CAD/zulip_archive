[
    {
        "content": "<p>Interesting, some preliminary results coming in from testing main vs 7.36.0 on Mac.</p>\n<p>Overall, main is definitely succeeding more.  There are some that timeout after 5min and some that throw mtx errors and \"SHOULD NOT HAPPEN\" errors for both old and new at a seemingly similar rate.</p>\n<p>Looks like conversion/facetize is also taking about 2x longer with the new approach.  Most simple objects that succeed seem to do so in about 3s whereas they're 1.5s on average in 7.36.0.  Running the conversion across lots of files, that of course adds up but then is partially offset by slightly more old that hit the 5min timeout limit (I think, still have to verity).</p>",
        "id": 451646570,
        "sender_full_name": "Sean",
        "timestamp": 1721084790
    },
    {
        "content": "<p>For the fully successful run, I had <code>MAXTIME=5000</code> as my upper limit - 300s was definitely much too short, so the timeouts are no surprise.</p>",
        "id": 451734349,
        "sender_full_name": "starseeker",
        "timestamp": 1721127662
    },
    {
        "content": "<p>I noticed the simple cases being slower - I think, at least in my case, what appeared to be happening was the overhead of starting up the subprocess to process a single primitive was adding the extra time (which would explain the 1.5s vs 3s difference - two process startup/teardowns vs 1  for 7.36.0 - the actual primitive facetize in such cases should be virtually instantaneous.)</p>",
        "id": 451734662,
        "sender_full_name": "starseeker",
        "timestamp": 1721127770
    },
    {
        "content": "<p>For the SHOULD NOT HAPPEN errors, one possible approach would be to get the newer mmesh version of that logic working:  <a href=\"https://github.com/BRL-CAD/mmesh\">https://github.com/BRL-CAD/mmesh</a></p>",
        "id": 451734978,
        "sender_full_name": "starseeker",
        "timestamp": 1721127883
    },
    {
        "content": "<p>When I took a quick look it's not quite a 1-1 drop in replacement for the gct calls, so I could use a little help getting it figured out and set up.</p>",
        "id": 451735092,
        "sender_full_name": "starseeker",
        "timestamp": 1721127931
    },
    {
        "content": "<p>Still don't yet have the delta, but here's full run results I got on Linux w/ main:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Summary\n=======\nConverted: 96.9%  ( 9923 of 10245 objects, 40 files )\n   Passed: 9923   ( 9974 NMG 10231 BoT 10116 Brep )\n   Failed: 303   ( 243 NMG 12 BoT 126 Brep )\n  Timeout:  19   ( 28 NMG 2 BoT 3 Brep )\n NMG rate: 97.4%  ( 9974 of 10245 )\n BoT rate: 99.9%  ( 10231 of 10245 )\nBrep rate: 98.7%  ( 10116 of 10245 )\nPrim rate: 99.7%  ( 7029 of 7050 )\n Reg rate: 95.1%  ( 2316 of 2436 )\n  Elapsed: 61697.0 seconds\n  Average: 6.0 seconds per object\n</code></pre></div>",
        "id": 454681389,
        "sender_full_name": "Sean",
        "timestamp": 1722211056
    },
    {
        "content": "<p>That's a surprisingly high failure rate for BoT - the input test set is our sample models?</p>",
        "id": 454819745,
        "sender_full_name": "starseeker",
        "timestamp": 1722256259
    },
    {
        "content": "<p>Yep, it's a straight up run on db/, no additions.</p>",
        "id": 454883901,
        "sender_full_name": "Sean",
        "timestamp": 1722270998
    },
    {
        "content": "<p>0.1% is a high failure rate?</p>",
        "id": 454883961,
        "sender_full_name": "Sean",
        "timestamp": 1722271020
    },
    {
        "content": "<p>On my local machine, at least with a timeout of 5000, I had a completely clean run</p>",
        "id": 454884102,
        "sender_full_name": "starseeker",
        "timestamp": 1722271064
    },
    {
        "content": "<p>I was more surprised that BoT succeeds more than NMG -- in theory could go bot-to-nmg on those failure cases to get both in sync.</p>",
        "id": 454884127,
        "sender_full_name": "Sean",
        "timestamp": 1722271074
    },
    {
        "content": "<p>NMG has to use the old NMG boolean - that'll fail more often</p>",
        "id": 454884243,
        "sender_full_name": "starseeker",
        "timestamp": 1722271101
    },
    {
        "content": "<p>Manifold is BoT only</p>",
        "id": 454884275,
        "sender_full_name": "starseeker",
        "timestamp": 1722271112
    },
    {
        "content": "<p>NMG has to result in an NMG...</p>",
        "id": 454884371,
        "sender_full_name": "Sean",
        "timestamp": 1722271140
    },
    {
        "content": "<p>so if we had a bot-to-nmg(), which is pretty straightforward, they could be in sync, more success all around.</p>",
        "id": 454884500,
        "sender_full_name": "Sean",
        "timestamp": 1722271176
    },
    {
        "content": "<p>I mean, if you're willing to ditch the fancy polygons for NMG triangles I guess - but doesn't that defeat the point of NMG in the first place?</p>",
        "id": 454884524,
        "sender_full_name": "starseeker",
        "timestamp": 1722271181
    },
    {
        "content": "<p>nmg is would then still give nice quad-mesh results for some things, but still give <em>some</em> mesh where it'd otherwise fail.</p>",
        "id": 454884729,
        "sender_full_name": "Sean",
        "timestamp": 1722271222
    },
    {
        "content": "<p>No no, that's why I said <em>when nmg fails</em></p>",
        "id": 454884801,
        "sender_full_name": "Sean",
        "timestamp": 1722271239
    },
    {
        "content": "<p>Oh, gotcha</p>",
        "id": 454884818,
        "sender_full_name": "starseeker",
        "timestamp": 1722271245
    },
    {
        "content": "<p>a fail is useless for everyone</p>",
        "id": 454884847,
        "sender_full_name": "Sean",
        "timestamp": 1722271254
    },
    {
        "content": "<p>True - I suppose the only time you'd want to see it would be a dev trying to use the Manifold techniques with NMG data types</p>",
        "id": 454885133,
        "sender_full_name": "starseeker",
        "timestamp": 1722271317
    },
    {
        "content": "<p>I'm really curious what primitives out-and-out failed.  Timeout I can see - the fallback methods can be expensive - but failure...</p>",
        "id": 454885951,
        "sender_full_name": "starseeker",
        "timestamp": 1722271487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-brlcad/topic/conversion/near/454884102\">said</a>:</p>\n<blockquote>\n<p>On my local machine, at least with a timeout of 5000, I had a completely clean run</p>\n</blockquote>\n<p>That could be the difference.  I used the default 5min limit.  50min is nuts imho... :)   That said, good point about whether it succeeds at all vs cannot.</p>\n<p>I'll re-run with a higher limit, but definitely a UX argument to be made given how simple all the sample models are.  As an outsider, I would expect them all to be sub-minute or something is \"wrong\".  Even 5min (again, per <em>object</em>) seems pretty generous.</p>",
        "id": 454886384,
        "sender_full_name": "Sean",
        "timestamp": 1722271615
    },
    {
        "content": "<p>Also, I didn't dive into the log yet to see if they failed because of timeout.  So will have to check that.</p>",
        "id": 454886514,
        "sender_full_name": "Sean",
        "timestamp": 1722271659
    },
    {
        "content": "<p>I will have to get it running in parallel before doing that -- it took a super long time to get through everything as it is.</p>",
        "id": 454886657,
        "sender_full_name": "Sean",
        "timestamp": 1722271702
    },
    {
        "content": "<p>plate mode to vol and brep point sampling are the two worse offenders</p>",
        "id": 454886665,
        "sender_full_name": "starseeker",
        "timestamp": 1722271704
    },
    {
        "content": "<p>Generic twin booleans are nothing to sneeze at, even if you pre-convert the plate modes</p>",
        "id": 454886834,
        "sender_full_name": "starseeker",
        "timestamp": 1722271762
    },
    {
        "content": "<p>17 hours to run everything...</p>",
        "id": 454886871,
        "sender_full_name": "Sean",
        "timestamp": 1722271773
    },
    {
        "content": "<p>(with a 5min timeout!)</p>",
        "id": 454886927,
        "sender_full_name": "Sean",
        "timestamp": 1722271792
    },
    {
        "content": "<p>my numbers are in the facetize thread, IIRC</p>",
        "id": 454887045,
        "sender_full_name": "starseeker",
        "timestamp": 1722271817
    },
    {
        "content": "<p>I'm kind of assuming that real models are going to take 10-100x for full conversions.</p>",
        "id": 454887082,
        "sender_full_name": "Sean",
        "timestamp": 1722271828
    },
    {
        "content": "<p>&lt;nod&gt;  Not claiming we're \"done\" in any way - all the fallback method uses except DSP are an indication of a problem in our primitive conversions that should be fixed.</p>",
        "id": 454887567,
        "sender_full_name": "starseeker",
        "timestamp": 1722271976
    },
    {
        "content": "<p>Given where we have been historically, I was willing to take any sort of \"working\" I could get to start with.  Frankly I didn't expect them all to succeed even with the long timeout, I was rather surprised when they did</p>",
        "id": 454887737,
        "sender_full_name": "starseeker",
        "timestamp": 1722272032
    },
    {
        "content": "<p>That's not a dig or push, just talking out loud my thoughts on implications</p>",
        "id": 454887744,
        "sender_full_name": "Sean",
        "timestamp": 1722272034
    },
    {
        "content": "<p>If your run did have all timeouts, we need to fix the summary - what you posted above made it look like some timeouts and some failures</p>",
        "id": 454887945,
        "sender_full_name": "starseeker",
        "timestamp": 1722272090
    },
    {
        "content": "<p>I kinda buy the fallout methods being quirky depending on the environment, since the point sampling is pseudorandom</p>",
        "id": 454888110,
        "sender_full_name": "starseeker",
        "timestamp": 1722272141
    },
    {
        "content": "<p>Immediate goal is still to get a conversion trajectory over time, but hit a load of build issues that I'm working through.  Would be nice to track the finish line progress on %conversion, time, and conversion methods, dashboard it up onto a graph.  Then throw more models into the mix.</p>",
        "id": 454888119,
        "sender_full_name": "Sean",
        "timestamp": 1722272144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-brlcad/topic/conversion/near/454887945\">said</a>:</p>\n<blockquote>\n<p>If your run did have all timeouts, we need to fix the summary - what you posted above made it look like some timeouts and some failures</p>\n</blockquote>\n<p>Can change it, but the pragmatic issue is picking a line in the sand that is \"too much\" no matter the reason.  If a single object conversion took 10 days, I would kind of say it doesn't matter -- that's a fail for all intents.</p>",
        "id": 454888581,
        "sender_full_name": "Sean",
        "timestamp": 1722272266
    },
    {
        "content": "<p>Original line was 5min as a general rule that a full model would potentially have two orders more, which would be approximately a full day for a full model to convert.  Something that doesn't complete overnight is a difficult proposition.</p>",
        "id": 454888861,
        "sender_full_name": "Sean",
        "timestamp": 1722272346
    },
    {
        "content": "<p>Bumping to an hour per object increases that to an order, so over a week to convert...  potentially useful to know where we are algorithmically, but definitely long enough to give anyone pause.</p>",
        "id": 454889093,
        "sender_full_name": "Sean",
        "timestamp": 1722272410
    },
    {
        "content": "<p>(on a real model)</p>",
        "id": 454889124,
        "sender_full_name": "Sean",
        "timestamp": 1722272417
    },
    {
        "content": "<p>Still, point taken that it can+should include the second number  (#timeouts) in the summary just so it doesn't conflate the two.  That's definitely important for our own purposes.</p>",
        "id": 454889296,
        "sender_full_name": "Sean",
        "timestamp": 1722272461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> <a href=\"#narrow/stream/104062-brlcad/topic/conversion/near/454889296\">said</a>:</p>\n<blockquote>\n<p>Still, point taken that it can+should include the second number  (#timeouts) in the summary just so it doesn't conflate the two.  That's definitely important for our own purposes.</p>\n</blockquote>\n<p>and I'm blind... it already calls out timeouts.  There were only 2 bot timeouts.  The rest were actual failures.</p>",
        "id": 454957377,
        "sender_full_name": "Sean",
        "timestamp": 1722289860
    },
    {
        "content": "<p>So it does affect the success percentages, but not terribly so for bot.  It should probably list the timeout and other details (like the version identifier) in the summary for sure.</p>",
        "id": 454957904,
        "sender_full_name": "Sean",
        "timestamp": 1722290067
    },
    {
        "content": "<p>The failures are what surprise me - I didn't see those here</p>",
        "id": 454971222,
        "sender_full_name": "starseeker",
        "timestamp": 1722294781
    }
]