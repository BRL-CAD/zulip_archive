[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> Looks like build is Sad Mac.  It finds system Tcl/Tk but then fails to find TCL_STUB_LIBRARY: </p>\n<div class=\"codehilite\"><pre><span></span>Compile Tcl ........................: OFF\nCompile Tk .........................: OFF\nCompile Itcl/Itk ...................: OFF\nCompile Iwidgets ...................: OFF\nCompile Tkhtml .....................: ON\nCompile Tktable ....................: OFF\nCompile libpng .....................: OFF\nCompile libregex ...................: OFF\nCompile zlib .......................: OFF\nCompile Utah Raster Toolkit ........: ON\nCompile openNURBS ..................: ON\nCompile STEPcode....................: ON\n\nOpenGL support <span class=\"o\">(</span>optional<span class=\"o\">)</span> ..........: ON\nX11 support <span class=\"o\">(</span>optional<span class=\"o\">)</span> .............: ON\nQt support <span class=\"o\">(</span>optional<span class=\"o\">)</span> ..............: OFF\nRun-time debuggability <span class=\"o\">(</span>optional<span class=\"o\">)</span> ..: ON\n\nBuild <span class=\"m\">32</span>/64-bit release ............: 64BIT <span class=\"o\">(</span>Auto<span class=\"o\">)</span>\nBuild optimized release ............: OFF\nBuild static libraries .............: ON\nBuild dynamic libraries ............: ON\nInstall example geometry models ....: ON\nGenerate extra docs ................: ON <span class=\"o\">(</span>html/man<span class=\"o\">)</span>\n\nElapsed configuration time: <span class=\"m\">2</span> minutes <span class=\"m\">22</span> seconds\n-- Configuring <span class=\"k\">done</span>\nCMake Error: The following variables are used in this project, but they are <span class=\"nb\">set</span> to NOTFOUND.\nPlease <span class=\"nb\">set</span> them or make sure they are <span class=\"nb\">set</span> and tested correctly in the CMake files:\nTCL_STUB_LIBRARY\n    linked by target <span class=\"s2\">&quot;Tkhtml&quot;</span> in directory /Users/morrison/brlcad.trunk/src/other/tkhtml\n\n-- Generating <span class=\"k\">done</span>\nCMake Generate step failed.  Build files cannot be regenerated correctly.\n</pre></div>",
        "id": 193406706,
        "sender_full_name": "Sean",
        "timestamp": 1586407269
    },
    {
        "content": "<p>Erm.  Does Apple's install of Tcl/Tk have the stub library?  (Alternately, we might try just TCL_LIBRARY on Mac...)</p>",
        "id": 193445333,
        "sender_full_name": "starseeker",
        "timestamp": 1586436829
    },
    {
        "content": "<p>What does ENABLE_ALL do?</p>",
        "id": 193445399,
        "sender_full_name": "starseeker",
        "timestamp": 1586436852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> build is still sad mac with enable all too</p>",
        "id": 194522900,
        "sender_full_name": "Sean",
        "timestamp": 1587179283
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"p\">[</span> <span class=\"mi\">56</span><span class=\"o\">%</span><span class=\"p\">]</span> <span class=\"n\">Building</span> <span class=\"n\">C</span> <span class=\"n\">object</span> <span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">other</span><span class=\"o\">/</span><span class=\"n\">tcl</span><span class=\"o\">/</span><span class=\"n\">CMakeFiles</span><span class=\"o\">/</span><span class=\"n\">tcl</span><span class=\"p\">.</span><span class=\"n\">dir</span><span class=\"o\">/</span><span class=\"n\">unix</span><span class=\"o\">/</span><span class=\"n\">tclLoadDyld</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">o</span>\n<span class=\"p\">[</span> <span class=\"mi\">56</span><span class=\"o\">%</span><span class=\"p\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">C</span> <span class=\"n\">shared</span> <span class=\"n\">library</span> <span class=\"p\">..</span><span class=\"o\">/</span><span class=\"p\">..</span><span class=\"o\">/</span><span class=\"p\">..</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">libtcl</span><span class=\"p\">.</span><span class=\"n\">dylib</span>\n<span class=\"n\">duplicate</span> <span class=\"n\">symbol</span> <span class=\"err\">&#39;</span><span class=\"n\">_TclpDlopen</span><span class=\"err\">&#39;</span> <span class=\"nl\">in</span><span class=\"p\">:</span>\n    <span class=\"n\">CMakeFiles</span><span class=\"o\">/</span><span class=\"n\">tcl</span><span class=\"p\">.</span><span class=\"n\">dir</span><span class=\"o\">/</span><span class=\"n\">unix</span><span class=\"o\">/</span><span class=\"n\">tclLoadDl</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">o</span>\n    <span class=\"n\">CMakeFiles</span><span class=\"o\">/</span><span class=\"n\">tcl</span><span class=\"p\">.</span><span class=\"n\">dir</span><span class=\"o\">/</span><span class=\"n\">unix</span><span class=\"o\">/</span><span class=\"n\">tclLoadDyld</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">o</span>\n<span class=\"n\">duplicate</span> <span class=\"n\">symbol</span> <span class=\"err\">&#39;</span><span class=\"n\">_TclGuessPackageName</span><span class=\"err\">&#39;</span> <span class=\"nl\">in</span><span class=\"p\">:</span>\n    <span class=\"n\">CMakeFiles</span><span class=\"o\">/</span><span class=\"n\">tcl</span><span class=\"p\">.</span><span class=\"n\">dir</span><span class=\"o\">/</span><span class=\"n\">unix</span><span class=\"o\">/</span><span class=\"n\">tclLoadDl</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">o</span>\n    <span class=\"n\">CMakeFiles</span><span class=\"o\">/</span><span class=\"n\">tcl</span><span class=\"p\">.</span><span class=\"n\">dir</span><span class=\"o\">/</span><span class=\"n\">unix</span><span class=\"o\">/</span><span class=\"n\">tclLoadDyld</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">o</span>\n<span class=\"nl\">ld</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"n\">duplicate</span> <span class=\"n\">symbols</span> <span class=\"k\">for</span> <span class=\"n\">architecture</span> <span class=\"n\">x86_64</span>\n<span class=\"nl\">clang</span><span class=\"p\">:</span> <span class=\"nl\">error</span><span class=\"p\">:</span> <span class=\"n\">linker</span> <span class=\"n\">command</span> <span class=\"n\">failed</span> <span class=\"n\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"n\">use</span> <span class=\"o\">-</span><span class=\"n\">v</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"n\">invocation</span><span class=\"p\">)</span>\n<span class=\"n\">make</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"o\">***</span> <span class=\"p\">[</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">libtcl</span><span class=\"mf\">.8.6.10</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"p\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">1</span>\n<span class=\"n\">make</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"o\">***</span> <span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">other</span><span class=\"o\">/</span><span class=\"n\">tcl</span><span class=\"o\">/</span><span class=\"n\">CMakeFiles</span><span class=\"o\">/</span><span class=\"n\">tcl</span><span class=\"p\">.</span><span class=\"n\">dir</span><span class=\"o\">/</span><span class=\"n\">all</span><span class=\"p\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">2</span>\n</pre></div>",
        "id": 194522911,
        "sender_full_name": "Sean",
        "timestamp": 1587179307
    },
    {
        "content": "<p>Looks like Mac is even more sad I skip that error.  Termio compile errors next, missing libbu symbols.</p>",
        "id": 194526056,
        "sender_full_name": "Sean",
        "timestamp": 1587185341
    },
    {
        "content": "<p>Ah, that's me - I switched a couple logging statements and string opts to bu versions</p>",
        "id": 194543486,
        "sender_full_name": "starseeker",
        "timestamp": 1587214861
    },
    {
        "content": "<p>forgot to update libtermio CMakeLists.txt</p>",
        "id": 194543494,
        "sender_full_name": "starseeker",
        "timestamp": 1587214871
    },
    {
        "content": "<p>I think I fixed where OSX build was pulling in the file with colliding symbols.</p>",
        "id": 194544181,
        "sender_full_name": "starseeker",
        "timestamp": 1587215855
    },
    {
        "content": "<p>The (Linux)build is still broken?</p>\n<div class=\"codehilite\"><pre><span></span><code>Build Time: Mon May  4 18:01:26 2020\n\n[  0%] Built target timestamp\n[  0%] Built target lcheck\n[  0%] Built target toplevel_DOCFILES_cp\n[  0%] Built target lemon\n[  1%] Built target re2c_bootstrap\n[  1%] Built target re2c\n[  1%] Built target perplex_template_cp\n[  2%] Built target perplex\n[  2%] Built target astyle\n[  2%] Built target env2c\n[  2%] Built target debug2c\n[  2%] Built target 04238f4c3429a37ca335f9352ba2dc81_cp\n[  2%] Built target openNURBS_headers_cp\n[  2%] Built target lz4\n[  2%] Built target lz4-static\n[  2%] Built target netpbm-static\n[  3%] Built target netpbm\n[  4%] Built target utahrle-static\n[  4%] Built target utahrle\n[  4%] Built target itclstub\n[  4%] Linking C shared library ../../../lib/libitcl.so\n/usr/bin/ld: -ltclstub kann nicht gefunden werden\ncollect2: error: ld returned 1 exit status\nmake[2]: *** [src/other/itcl3/CMakeFiles/itcl.dir/build.make:250: lib/libitcl.so.3.4] Fehler 1\nmake[1]: *** [CMakeFiles/Makefile2:3600: src/other/itcl3/CMakeFiles/itcl.dir/all] Fehler 2\nmake: *** [Makefile:163: all] Fehler 2\n</code></pre></div>",
        "id": 196202285,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588608369
    },
    {
        "content": "<p>This could be the same issue I ran across.  I think the underlying issue was a system libtcl that did not install libtclstub?  Or perhaps the cmake detection of it failed?  I don't recall the detail but does enable all work for you¿</p>",
        "id": 196242622,
        "sender_full_name": "Sean",
        "timestamp": 1588627923
    },
    {
        "content": "<p>Right, libtcl8.6 is there, but no libtclstub. And, there seems to be no Debian package providing it.</p>",
        "id": 196314249,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588688529
    },
    {
        "content": "<p>It looks like the old find-TCL hasn't found the system TCL library, but the new one does.</p>",
        "id": 196319022,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588690477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  Are you able to build trunk on OSX now, or is it still busted?</p>",
        "id": 196357048,
        "sender_full_name": "starseeker",
        "timestamp": 1588707859
    },
    {
        "content": "<p>Trunk built yesterday, but I haven't tested it since.  I'll kick off a build</p>",
        "id": 196358521,
        "sender_full_name": "Sean",
        "timestamp": 1588708475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> new opennurbs-zlib-related compilation error encountered after a fresh cmake: </p>\n<div class=\"codehilite\"><pre><span></span><code>/usr/local/Cellar/llvm/10.0.0_3/bin/clang++  -w -m64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk -mmacosx-version-min=10.14 -dynamiclib -Wl,-headerpad_max_install_names  -m64 -current_version 2012.10.245 -o ../../../lib/libopenNURBS.2012.10.245.dylib -install_name @rpath/libopenNURBS.2012.10.245.dylib CMakeFiles/openNURBS-obj.dir/opennurbs_basic.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_brep_changesrf.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_brep_kinky.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_x.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_3dm_attributes.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_3dm_properties.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_3dm_settings.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_annotation.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_annotation2.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_arc.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_arccurve.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_archive.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_array.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_base32.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_base64.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_beam.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_bezier.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_beziervolume.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_bitmap.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_bounding_box.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_box.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_brep.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_brep_extrude.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_brep_io.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_brep_isvalid.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_brep_region.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_brep_tools.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_brep_v2valid.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_circle.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_color.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_compress.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_cone.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_crc.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_curve.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_curveonsurface.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_curveproxy.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_cylinder.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_defines.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_detail.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_dimstyle.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_dll.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_ellipse.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_embedded_file.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_error.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_error_message.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_evaluate_nurbs.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_extensions.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_font.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_fsp.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_geometry.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_group.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_hatch.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_instance.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_intersect.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_knot.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_layer.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_light.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_line.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_linecurve.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_linetype.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_lookup.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_material.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_math.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_massprop.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_matrix.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_memory.c.o CMakeFiles/openNURBS-obj.dir/opennurbs_memory_util.c.o CMakeFiles/openNURBS-obj.dir/opennurbs_mesh.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_mesh_ngon.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_mesh_tools.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_morph.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_nurbscurve.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_nurbssurface.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_nurbsvolume.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_object.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_object_history.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_objref.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_offsetsurface.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_optimize.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_plane.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_planesurface.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_pluginlist.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_point.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_pointcloud.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_pointgeometry.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_pointgrid.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_polycurve.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_polyedgecurve.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_polyline.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_polylinecurve.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_rand.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_revsurface.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_rtree.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_sort.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_sphere.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_string.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_sum.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_sumsurface.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_surface.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_surfaceproxy.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_textlog.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_torus.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_unicode.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_userdata.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_uuid.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_viewport.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_workspace.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_wstring.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_xform.cpp.o CMakeFiles/openNURBS-obj.dir/opennurbs_zlib.cpp.o  /usr/lib/libz.dylib\nUndefined symbols for architecture x86_64:\n  &quot;_brl_deflate&quot;, referenced from:\n      ON_CompressStream::In(unsigned long long, void const*) in opennurbs_compress.cpp.o\n      ON_CompressStream::End() in opennurbs_compress.cpp.o\n      ON_BinaryArchive::WriteDeflate(unsigned long, void const*) in opennurbs_zlib.cpp.o\n      ON_CompressedBuffer::DeflateHelper(ON_CompressedBufferHelper*, unsigned long, void const*) in opennurbs_zlib.cpp.o\n  &quot;_brl_deflateEnd&quot;, referenced from:\n      ON_CompressStream::End() in opennurbs_compress.cpp.o\n      ON_BinaryArchive::CompressionEnd() in opennurbs_zlib.cpp.o\n      ON_CompressedBuffer::CompressionEnd(ON_CompressedBufferHelper*) const in opennurbs_zlib.cpp.o\n  &quot;_brl_deflateInit_&quot;, referenced from:\n      ON_CompressStream::Begin() in opennurbs_compress.cpp.o\n      ON_BinaryArchive::CompressionInit() in opennurbs_zlib.cpp.o\n      ON_CompressedBuffer::CompressionInit(ON_CompressedBufferHelper*) const in opennurbs_zlib.cpp.o\n  &quot;_brl_inflate&quot;, referenced from:\n      ON_UncompressStream::In(unsigned long long, void const*) in opennurbs_compress.cpp.o\n      ON_UncompressStream::End() in opennurbs_compress.cpp.o\n      ON_BinaryArchive::ReadInflate(unsigned long, void*) in opennurbs_zlib.cpp.o\n      ON_CompressedBuffer::InflateHelper(ON_CompressedBufferHelper*, unsigned long, void*) const in opennurbs_zlib.cpp.o\n  &quot;_brl_inflateEnd&quot;, referenced from:\n      ON_UncompressStream::End() in opennurbs_compress.cpp.o\n      ON_BinaryArchive::CompressionEnd() in opennurbs_zlib.cpp.o\n      ON_CompressedBuffer::CompressionEnd(ON_CompressedBufferHelper*) const in opennurbs_zlib.cpp.o\n  &quot;_brl_inflateInit_&quot;, referenced from:\n      ON_UncompressStream::Begin() in opennurbs_compress.cpp.o\n      ON_BinaryArchive::CompressionInit() in opennurbs_zlib.cpp.o\n      ON_CompressedBuffer::CompressionInit(ON_CompressedBufferHelper*) const in opennurbs_zlib.cpp.o\nld: symbol(s) not found for architecture x86_64\n</code></pre></div>",
        "id": 196608397,
        "sender_full_name": "Sean",
        "timestamp": 1588757269
    },
    {
        "content": "<p>this was on mac</p>",
        "id": 196608453,
        "sender_full_name": "Sean",
        "timestamp": 1588757285
    },
    {
        "content": "<p>looks like it's still linking system libz there at the end</p>",
        "id": 196608743,
        "sender_full_name": "Sean",
        "timestamp": 1588757485
    },
    {
        "content": "<p>That's... weird.  Wonder why it's doing that only on one platform.</p>\n<p>The license scanning is in place now - might be time to subsume the openNURBS build under libbrep.</p>",
        "id": 196628456,
        "sender_full_name": "starseeker",
        "timestamp": 1588769220
    },
    {
        "content": "<p>Because we're only testing 2-3 platforms?</p>",
        "id": 196675096,
        "sender_full_name": "Sean",
        "timestamp": 1588788809
    },
    {
        "content": "<p>Characterizing it diminutively as \"only on one platform\" is not exactly a healthy perspective for the build...  That was absolutely broken elsewhere as well.</p>\n<p>It depends how ld is configured on the system, the type of library being compiled, and options in use (two of those are in the user's purview).   Libraries can be resolved at compilation, at linkage, or at runtime (or combinations thereof).  Mac happens to default to resolved dynamic libraries, but Linux, UNIX, and BSD linking can be configured this way as well (and some distros do).</p>",
        "id": 196675345,
        "sender_full_name": "Sean",
        "timestamp": 1588788952
    },
    {
        "content": "<p>All that was probably needed was listing our renamed libz as a dependendency to cmake and it would have probably done the right thing.</p>",
        "id": 196675441,
        "sender_full_name": "Sean",
        "timestamp": 1588788988
    },
    {
        "content": "<p>We've hit that issue before repeatedly over the years.  Usually from Mac, but also from some Linux platforms.  Cmake figures it out if things are fully declared correctly.</p>",
        "id": 196675533,
        "sender_full_name": "Sean",
        "timestamp": 1588789043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> build now fails with a different set of issues:</p>\n<div class=\"codehilite\"><pre><span></span><code>In file included from /Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array.h:1788:\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:120:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n[ 12%] Built target SPSR\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:434:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:463:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:557:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:583:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:875:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:901:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:966:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n[ 12%] Building C object src/libnmg/CMakeFiles/libnmg-obj.dir/copy.c.o\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:1585:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:1627:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:1663:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:1890:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n[ 12%] Building C object src/libbu/CMakeFiles/libbu-obj.dir/whereis.c.o\n/Users/morrison/brlcad.trunk/src/libbrep/openNURBS/opennurbs_array_defs.h:1970:36: error: unknown\n      warning group &#39;-Wclass-memaccess&#39;, ignored [-Werror,-Wunknown-warning-option]\n#  pragma clang diagnostic ignored &quot;-Wclass-memaccess&quot;\n                                   ^\n</code></pre></div>",
        "id": 196675698,
        "sender_full_name": "Sean",
        "timestamp": 1588789115
    },
    {
        "content": "<p>trying a different compiler...</p>",
        "id": 196677185,
        "sender_full_name": "Sean",
        "timestamp": 1588789801
    },
    {
        "content": "<p>also horked.   looks like more pragmas.  did you add those or were they already there?  some seem to be in include/defines.h, others in opennurbs files.</p>",
        "id": 196677543,
        "sender_full_name": "Sean",
        "timestamp": 1588789942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span>  I see you riddled it with the pragmas.  Please, please...<br>\nPlease don't make huge changes like this.  I get why as we've talked about moving opennurbs, but this is so unstable an approach with pragma hacks on top of a major dependency restructure.. all to fix what should have been a single line declaration that was missing.</p>",
        "id": 196679405,
        "sender_full_name": "Sean",
        "timestamp": 1588790840
    },
    {
        "content": "<p>Reverted.  FWIW, wasn't just for that - figured it would avoid the Windows zlib issue as well.</p>",
        "id": 196680076,
        "sender_full_name": "starseeker",
        "timestamp": 1588791184
    },
    {
        "content": "<p>Still need to figure out why openNURBS is getting system zlib on the mac - by the time it gets to src/other/openNURBS FindZLIB should be satisfied</p>",
        "id": 196680232,
        "sender_full_name": "starseeker",
        "timestamp": 1588791253
    },
    {
        "content": "<p>I'm sure it wasn't, but it's just the unexpected stress of everything coming to a halt.  Was dead in the water again and that went in a more unstable direction with maintenance issues embedded.</p>",
        "id": 196680417,
        "sender_full_name": "Sean",
        "timestamp": 1588791355
    },
    {
        "content": "<p>fair enough.  I'll see if I can coax a mac build out of github - that's failing when Ubuntu, BSD and Windows don't so I'm having a hard time predicting failures reliably.</p>",
        "id": 196680665,
        "sender_full_name": "starseeker",
        "timestamp": 1588791466
    },
    {
        "content": "<p>Sorry if my frustration is coming through.  I hear Lee from 15 years ago in my messages.  Just needing things to be a bit more stable on trunk to make progress debugging.</p>",
        "id": 196680922,
        "sender_full_name": "Sean",
        "timestamp": 1588791585
    },
    {
        "content": "<p>No problem - I'm getting a bit greedy trying to push through things that I've wanted to do for a long time, and now isn't the time for it.</p>",
        "id": 196681068,
        "sender_full_name": "starseeker",
        "timestamp": 1588791633
    },
    {
        "content": "<p>BSD was also broken with the pragmas, fwiw.</p>",
        "id": 196681085,
        "sender_full_name": "Sean",
        "timestamp": 1588791639
    },
    {
        "content": "<p>right,  that one's on me - the class-memaccess warning must be unique to GCC right now.</p>",
        "id": 196681128,
        "sender_full_name": "starseeker",
        "timestamp": 1588791668
    },
    {
        "content": "<p>(probably a real issue though - that may bite us someday with the openNURBS code...)</p>",
        "id": 196681165,
        "sender_full_name": "starseeker",
        "timestamp": 1588791686
    },
    {
        "content": "<p>there were 3-4 pragmas it was complaining about, different files, that was just the first</p>",
        "id": 196681194,
        "sender_full_name": "Sean",
        "timestamp": 1588791700
    },
    {
        "content": "<p>Yeah, clang and GCC define different sets.  Right now the src/other builds deliberately don't enable any of the warnings so we don't see any of that.</p>",
        "id": 196681295,
        "sender_full_name": "starseeker",
        "timestamp": 1588791743
    },
    {
        "content": "<p>and I get why, but pragmas should be last resort imho, when there is not a build system solution because that is intrinsically unstable</p>",
        "id": 196681321,
        "sender_full_name": "Sean",
        "timestamp": 1588791752
    },
    {
        "content": "<p>a -w flag forced on src/libbrep/openNURBS would have been better I think</p>",
        "id": 196681380,
        "sender_full_name": "Sean",
        "timestamp": 1588791785
    },
    {
        "content": "<p>or maybe -Wno-error</p>",
        "id": 196681423,
        "sender_full_name": "Sean",
        "timestamp": 1588791814
    },
    {
        "content": "<p>Probably what would have had to happen in that case is including src/libbrep/openNURBS with -isystem</p>",
        "id": 196681439,
        "sender_full_name": "starseeker",
        "timestamp": 1588791820
    },
    {
        "content": "<p>Anyway,  moot</p>",
        "id": 196681530,
        "sender_full_name": "starseeker",
        "timestamp": 1588791850
    },
    {
        "content": "<p>pragmas went into our headers too, which means the instability infection spread</p>",
        "id": 196681532,
        "sender_full_name": "Sean",
        "timestamp": 1588791853
    },
    {
        "content": "<p>Well, the revert should be clean - two commits only, not mixed with anything</p>",
        "id": 196681797,
        "sender_full_name": "starseeker",
        "timestamp": 1588791972
    },
    {
        "content": "<p>I'm less sure what to do about the system zlib creeping in - can you send me your CMakeCache.txt file?</p>",
        "id": 196681848,
        "sender_full_name": "starseeker",
        "timestamp": 1588792001
    },
    {
        "content": "<p>sure</p>",
        "id": 196682436,
        "sender_full_name": "Sean",
        "timestamp": 1588792319
    },
    {
        "content": "<p>any idea what this is about?  I don't get it all the time and it doesn't halt cmake despite the message:</p>\n<div class=\"codehilite\"><pre><span></span><code>CMake Error: The source directory &quot;/Users/morrison/brlcad.trunk/.build/remove&quot; does not exist.\nSpecify --help for usage, or press the help button on the CMake GUI.\nCMake Error: The source directory &quot;/Users/morrison/brlcad.trunk/.build/remove&quot; does not exist.\nSpecify --help for usage, or press the help button on the CMake GUI.\nCMake Error: The source directory &quot;/Users/morrison/brlcad.trunk/.build/remove&quot; does not exist.\nSpecify --help for usage, or press the help button on the CMake GUI.\n...\n</code></pre></div>",
        "id": 196683034,
        "sender_full_name": "Sean",
        "timestamp": 1588792635
    },
    {
        "content": "<p>Not sure - I've been seeing that too, but haven't run it down yet.</p>",
        "id": 196683072,
        "sender_full_name": "starseeker",
        "timestamp": 1588792666
    },
    {
        "content": "<p>Happens repeatedly intermixed throughout the cmake output, so it's undoubtedly in some macro/function</p>",
        "id": 196683089,
        "sender_full_name": "Sean",
        "timestamp": 1588792681
    },
    {
        "content": "<p>that message isn't in our code (at least I didnt' find it)<br>\nnot sure what to make of 'remove' either as that's not a file in our repo.  we do test for the remove function, but that seems entirely unrelated to the messages and this message appearing just in the past few days.</p>",
        "id": 196683345,
        "sender_full_name": "Sean",
        "timestamp": 1588792789
    },
    {
        "content": "<p>I think I noticed it when I started using a newer CMake, but I'll have to confirm that.  It didn't seem to break anything, and I'm using a way newer CMake than most distros, so I wasn't sure if it needed to be run down for general use yet...  Since you're seeing it too, that decides it</p>",
        "id": 196683556,
        "sender_full_name": "starseeker",
        "timestamp": 1588792877
    },
    {
        "content": "<p>I'm on a newer cmake too 3.16</p>",
        "id": 196683983,
        "sender_full_name": "Sean",
        "timestamp": 1588793065
    },
    {
        "content": "<p>also have 3.12 to test with when I'm trying to make sure things work back a ways</p>",
        "id": 196684094,
        "sender_full_name": "Sean",
        "timestamp": 1588793136
    },
    {
        "content": "<p>well hot diggity, looks like github workflows will let me kick off a Mac build</p>",
        "id": 196686527,
        "sender_full_name": "starseeker",
        "timestamp": 1588794138
    },
    {
        "content": "<p>And now (of course) it doesn't want to give me the remove error.  Did it happen on a clean CMake run, or is it when reconfiguring with an existing build dir?</p>",
        "id": 196687285,
        "sender_full_name": "starseeker",
        "timestamp": 1588794448
    },
    {
        "content": "<p>growl... the non-enable-all github osx build didn't help any - it built</p>",
        "id": 196691553,
        "sender_full_name": "starseeker",
        "timestamp": 1588796426
    },
    {
        "content": "<p>enable_all might be more promising, but also quite slow...</p>",
        "id": 196691592,
        "sender_full_name": "starseeker",
        "timestamp": 1588796451
    },
    {
        "content": "<p>arrrrgh.  that built as well.</p>",
        "id": 196694687,
        "sender_full_name": "starseeker",
        "timestamp": 1588797955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I've got Xcode_11.4.1.app with AppleClang 11.0.3.11030032 on the runner - is that radically different from yours?</p>",
        "id": 196694833,
        "sender_full_name": "starseeker",
        "timestamp": 1588798016
    },
    {
        "content": "<p>may be a different tool chain or different compiler version or different cmake.  i'll see if I can repeat the error with everything reverted.</p>",
        "id": 196694900,
        "sender_full_name": "Sean",
        "timestamp": 1588798051
    },
    {
        "content": "<p>appreciate you checking.  maybe something in my newer cmake's find zlib or something with newer clang (I have multiple compilers installed, xcode's isn't sufficient for some things, e.g., fuzzing)</p>",
        "id": 196695777,
        "sender_full_name": "Sean",
        "timestamp": 1588798503
    },
    {
        "content": "<p>The log and cache files may help, once you get them.  If we absolutely have to we can revert back to pre 8.6.</p>",
        "id": 196696516,
        "sender_full_name": "starseeker",
        "timestamp": 1588798835
    },
    {
        "content": "<p>Yeah, struck out - got a successful make check run on github's osx runner.  Only build failure I've got right now is on OpenBSD, and that's something totally different.</p>",
        "id": 196706431,
        "sender_full_name": "starseeker",
        "timestamp": 1588804112
    },
    {
        "content": "<p>OK, pretty sure I found the source of the spurious .build/remove messages (cmake --trace to the rescue.)</p>",
        "id": 196717709,
        "sender_full_name": "starseeker",
        "timestamp": 1588814204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>   There's a slight chance that the \"build/remove\" messages error could have had an impact on what was being found on the Mac - if configurations were switched between system and local, that was the piece of logic that was supposed to be clearing out stale files.  The files didn't end up removed.  My initial guess would have been that that failure was more likely to result in a local copy being found instead of a system copy rather than the other way around, but it certainly could have caused something unexpected to happen.</p>",
        "id": 196720221,
        "sender_full_name": "starseeker",
        "timestamp": 1588817331
    },
    {
        "content": "<p>okay, I've got several builds going at the moment so I'll let you know how things are looking</p>",
        "id": 196720396,
        "sender_full_name": "Sean",
        "timestamp": 1588817534
    },
    {
        "content": "<p>I think that's about as good as it's going to get for OpenBSD right now, at least until they add a way to get the executable pathname.</p>",
        "id": 196722214,
        "sender_full_name": "starseeker",
        "timestamp": 1588819954
    },
    {
        "content": "<p>how's that?  none of the implemented methods work?</p>",
        "id": 196722233,
        "sender_full_name": "Sean",
        "timestamp": 1588819999
    },
    {
        "content": "<p>Apparently not.  Poked around online a bit and it seems like that's just a feature that OpenBSD either deliberately doesn't support or hasn't bothered to support.</p>",
        "id": 196722294,
        "sender_full_name": "starseeker",
        "timestamp": 1588820052
    },
    {
        "content": "<p>but one of the methods is a gcc method</p>",
        "id": 196722303,
        "sender_full_name": "Sean",
        "timestamp": 1588820076
    },
    {
        "content": "<p>or are they llvm only?</p>",
        "id": 196722309,
        "sender_full_name": "Sean",
        "timestamp": 1588820087
    },
    {
        "content": "<p>Primary compilation is clang/llvm now - don't know if gcc is still in there or not, but my understanding is that it's on its way out if it is</p>",
        "id": 196722340,
        "sender_full_name": "starseeker",
        "timestamp": 1588820124
    },
    {
        "content": "<p>HAVE_PROGRAM_INVOCATION_NAME is false?</p>",
        "id": 196722346,
        "sender_full_name": "Sean",
        "timestamp": 1588820145
    },
    {
        "content": "<p>Looking at the whoami.c code, I think they need some runtime support from the kernel to be able to know their location</p>",
        "id": 196722348,
        "sender_full_name": "starseeker",
        "timestamp": 1588820149
    },
    {
        "content": "<p>er, whereami.c rather</p>",
        "id": 196722425,
        "sender_full_name": "starseeker",
        "timestamp": 1588820242
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/31494901/how-to-get-the-executable-path-on-openbsd\" title=\"https://stackoverflow.com/questions/31494901/how-to-get-the-executable-path-on-openbsd\">https://stackoverflow.com/questions/31494901/how-to-get-the-executable-path-on-openbsd</a></p>",
        "id": 196722495,
        "sender_full_name": "starseeker",
        "timestamp": 1588820287
    },
    {
        "content": "<p>This seems to be the email referenced in the second comment:  <a href=\"https://marc.info/?l=openbsd-misc&amp;m=144987773230417&amp;w=2\" title=\"https://marc.info/?l=openbsd-misc&amp;m=144987773230417&amp;w=2\">https://marc.info/?l=openbsd-misc&amp;m=144987773230417&amp;w=2</a></p>",
        "id": 196722675,
        "sender_full_name": "starseeker",
        "timestamp": 1588820541
    },
    {
        "content": "<p>I think streams are getting crossed there.  Theo is talking about the kernel providing some intrinsic storage/lookup capability.  Similarly one of the responses is about whether it's immediately available, but even that is half wrong.</p>",
        "id": 196722809,
        "sender_full_name": "Sean",
        "timestamp": 1588820741
    },
    {
        "content": "<p>you don't need either of those. <br>\nin fact the second SO response is closer to being on track</p>",
        "id": 196722860,
        "sender_full_name": "Sean",
        "timestamp": 1588820772
    },
    {
        "content": "<p>guarantee there's a way to figure it out.  worst case, we can repeat what the shell does to invoke the binary (which I originally had in there but found it to be unnecessary complexity, even as a fallback, so I stripped it out).</p>",
        "id": 196722892,
        "sender_full_name": "Sean",
        "timestamp": 1588820871
    },
    {
        "content": "<p>still, I'm surprised llvm doesn't supply program_invocation_name -- can you check the cmakeerror?</p>",
        "id": 196722938,
        "sender_full_name": "Sean",
        "timestamp": 1588820911
    },
    {
        "content": "<p>ld: error: undefined symbol: program_invocation_name</p>",
        "id": 196723019,
        "sender_full_name": "starseeker",
        "timestamp": 1588820982
    },
    {
        "content": "<p>from CheckFunctionExists test</p>",
        "id": 196723083,
        "sender_full_name": "starseeker",
        "timestamp": 1588821013
    },
    {
        "content": "<p>yeah, darn.  that's the easiest.  clang totally could have stashed it during _start</p>",
        "id": 196723105,
        "sender_full_name": "Sean",
        "timestamp": 1588821064
    },
    {
        "content": "<p>Does getprogname do anything useful? <a href=\"https://man.openbsd.org/getprogname.3\" title=\"https://man.openbsd.org/getprogname.3\">https://man.openbsd.org/getprogname.3</a></p>",
        "id": 196723226,
        "sender_full_name": "starseeker",
        "timestamp": 1588821189
    },
    {
        "content": "<p>well yeah, but it should already be testing for that and using it</p>",
        "id": 196723283,
        "sender_full_name": "Sean",
        "timestamp": 1588821248
    },
    {
        "content": "<p>grep GETPROGNAME in the cache</p>",
        "id": 196723290,
        "sender_full_name": "Sean",
        "timestamp": 1588821260
    },
    {
        "content": "<p>Doesn't look like it's realpathed anyway...</p>",
        "id": 196723295,
        "sender_full_name": "starseeker",
        "timestamp": 1588821270
    },
    {
        "content": "<p>bu_getprogname() uses it</p>",
        "id": 196723301,
        "sender_full_name": "Sean",
        "timestamp": 1588821275
    },
    {
        "content": "<p>neither is program_invocation_name, they are just faster alternatives to stashing argv0</p>",
        "id": 196723345,
        "sender_full_name": "Sean",
        "timestamp": 1588821301
    },
    {
        "content": "<p>&lt;not&gt; - what we need is the all-up full path</p>",
        "id": 196723372,
        "sender_full_name": "starseeker",
        "timestamp": 1588821329
    },
    {
        "content": "<p>&lt;nod&gt; rather</p>",
        "id": 196723387,
        "sender_full_name": "starseeker",
        "timestamp": 1588821343
    },
    {
        "content": "<p>it's undesirable to have to call setprogname(argv[0]) in every application, so half the code in question is simply trying to figure out the name of the running app.</p>",
        "id": 196723392,
        "sender_full_name": "Sean",
        "timestamp": 1588821352
    },
    {
        "content": "<p>the other half figures out the path to that app</p>",
        "id": 196723427,
        "sender_full_name": "Sean",
        "timestamp": 1588821362
    },
    {
        "content": "<p>if you have the name, you can always find the path brute force in all but theoretical edge cases that we don't care about.</p>",
        "id": 196723454,
        "sender_full_name": "Sean",
        "timestamp": 1588821399
    },
    {
        "content": "<p>we've got getprogname detected - it's the whereami.c code that doesn't know how to resolve the full path on OpenBSD</p>",
        "id": 196723459,
        "sender_full_name": "starseeker",
        "timestamp": 1588821405
    },
    {
        "content": "<p>whereami's that external code you added for bu_dir right?</p>",
        "id": 196723468,
        "sender_full_name": "Sean",
        "timestamp": 1588821424
    },
    {
        "content": "<p>right</p>",
        "id": 196723472,
        "sender_full_name": "starseeker",
        "timestamp": 1588821430
    },
    {
        "content": "<p>you recall what exactly in bu_dir is using it?  I just see the include.</p>",
        "id": 196723484,
        "sender_full_name": "Sean",
        "timestamp": 1588821467
    },
    {
        "content": "<p>wai_getExecutablePath</p>",
        "id": 196723531,
        "sender_full_name": "starseeker",
        "timestamp": 1588821490
    },
    {
        "content": "<p>ah, I found it</p>",
        "id": 196723534,
        "sender_full_name": "Sean",
        "timestamp": 1588821493
    },
    {
        "content": "<p>did whereis.c compile?</p>",
        "id": 196723548,
        "sender_full_name": "Sean",
        "timestamp": 1588821530
    },
    {
        "content": "<p>Originally, it bailed.</p>",
        "id": 196723557,
        "sender_full_name": "starseeker",
        "timestamp": 1588821544
    },
    {
        "content": "<p>I added a \"always return -1\" fallback</p>",
        "id": 196723565,
        "sender_full_name": "starseeker",
        "timestamp": 1588821558
    },
    {
        "content": "<p>not whereami.c .. the other, whereis.c</p>",
        "id": 196723567,
        "sender_full_name": "Sean",
        "timestamp": 1588821558
    },
    {
        "content": "<p>ah - let me check</p>",
        "id": 196723571,
        "sender_full_name": "starseeker",
        "timestamp": 1588821571
    },
    {
        "content": "<p>yes, compiled - makes a .o file</p>",
        "id": 196723637,
        "sender_full_name": "starseeker",
        "timestamp": 1588821616
    },
    {
        "content": "<p>so then we have the means</p>",
        "id": 196723639,
        "sender_full_name": "Sean",
        "timestamp": 1588821627
    },
    {
        "content": "<p>we just have to merge or replace whereami.c with whereis.c</p>",
        "id": 196723650,
        "sender_full_name": "Sean",
        "timestamp": 1588821648
    },
    {
        "content": "<p>they do the same thing, there were just platform robustness differences</p>",
        "id": 196723658,
        "sender_full_name": "Sean",
        "timestamp": 1588821667
    },
    {
        "content": "<p>I don't recall the exact motivation for why you pulled in whereami.c but I think you had some concern with whereis.c for some reason.  You remember what the issue was?</p>",
        "id": 196723801,
        "sender_full_name": "Sean",
        "timestamp": 1588821856
    },
    {
        "content": "<p>it wasn't robust to arbitrary maneuvering on the file system, IIRC</p>",
        "id": 196723849,
        "sender_full_name": "starseeker",
        "timestamp": 1588821962
    },
    {
        "content": "<p>Illustrated simply:</p>\n<p>mged&gt; bu_brlcad_root bin<br>\n/home/user/brlcad/build/bin<br>\nmged&gt; cd ../../<br>\nmged&gt; bu_brlcad_root bin<br>\nmged&gt; bu_dir bin<br>\n/home/user/brlcad/build/bin</p>",
        "id": 196723954,
        "sender_full_name": "starseeker",
        "timestamp": 1588822088
    },
    {
        "content": "<p>(that's on Linux)</p>",
        "id": 196723955,
        "sender_full_name": "starseeker",
        "timestamp": 1588822100
    },
    {
        "content": "<p>that's not bu_whereis() though ... what's the bu_whereis() call -- I'm not sure how whereis would even be put to work there because bin is a directory, not a command</p>",
        "id": 196723973,
        "sender_full_name": "Sean",
        "timestamp": 1588822197
    },
    {
        "content": "<p>maybe bu_brlcad_root had/has misuse?</p>",
        "id": 196724028,
        "sender_full_name": "Sean",
        "timestamp": 1588822229
    },
    {
        "content": "<p>No, bu_brlcad_root doesn't use whereis.  The above is just illustrating why I put whereami.c in.</p>",
        "id": 196724044,
        "sender_full_name": "starseeker",
        "timestamp": 1588822281
    },
    {
        "content": "<p>heh, yeah I seemed to remember it being some bug and instead of debugging, you pulled in someone else's code.  :)</p>",
        "id": 196724135,
        "sender_full_name": "Sean",
        "timestamp": 1588822414
    },
    {
        "content": "<p>and now we have code debt from both  :D</p>",
        "id": 196724184,
        "sender_full_name": "Sean",
        "timestamp": 1588822456
    },
    {
        "content": "<p>and a working feature :P</p>",
        "id": 196724190,
        "sender_full_name": "starseeker",
        "timestamp": 1588822489
    },
    {
        "content": "<p>not on openbsd apparently</p>",
        "id": 196724193,
        "sender_full_name": "Sean",
        "timestamp": 1588822502
    },
    {
        "content": "<p>I don't think it ever worked there with any of the methods except probably your shell mimicking code.</p>",
        "id": 196724216,
        "sender_full_name": "starseeker",
        "timestamp": 1588822535
    },
    {
        "content": "<p>bu_dir didn't, you're right -- that was all stubbed empty</p>",
        "id": 196724231,
        "sender_full_name": "Sean",
        "timestamp": 1588822553
    },
    {
        "content": "<p>bu_brlcad_root is still just a straight up bug -- it shouldn't be invariant to cwd at all</p>",
        "id": 196724273,
        "sender_full_name": "Sean",
        "timestamp": 1588822576
    },
    {
        "content": "<p>s/invariant/variant/</p>",
        "id": 196724275,
        "sender_full_name": "Sean",
        "timestamp": 1588822581
    },
    {
        "content": "<p>the method that whereami code is using is the method to use on windows, and I think it's using the same as other code on linux</p>",
        "id": 196724293,
        "sender_full_name": "Sean",
        "timestamp": 1588822640
    },
    {
        "content": "<p>In fairness - the above mged log I showed used an mged invoked from the build/lib dir as follows:</p>\n<p>../bin/mged -c -a nu ../share/db/moss.g</p>",
        "id": 196724398,
        "sender_full_name": "starseeker",
        "timestamp": 1588822841
    },
    {
        "content": "<p>I think the only immediate solution is extending bu_dir with different methods</p>",
        "id": 196724402,
        "sender_full_name": "Sean",
        "timestamp": 1588822851
    },
    {
        "content": "<p>or, hm</p>",
        "id": 196724417,
        "sender_full_name": "Sean",
        "timestamp": 1588822910
    },
    {
        "content": "<p>So I should more precisely have said it isn't just cwd but cwd+invocation argv0</p>",
        "id": 196724418,
        "sender_full_name": "starseeker",
        "timestamp": 1588822915
    },
    {
        "content": "<p>getExecutablePath() intrinsically relies on a global program name, we could just feed it the name we know</p>",
        "id": 196724458,
        "sender_full_name": "Sean",
        "timestamp": 1588822924
    },
    {
        "content": "<p>you mean the relative path from argv[0]?</p>",
        "id": 196724478,
        "sender_full_name": "starseeker",
        "timestamp": 1588822989
    },
    {
        "content": "<p>bu_getprogname()</p>",
        "id": 196724481,
        "sender_full_name": "Sean",
        "timestamp": 1588823005
    },
    {
        "content": "<p>which worst case will just be argv[0] passed from the app</p>",
        "id": 196724485,
        "sender_full_name": "Sean",
        "timestamp": 1588823034
    },
    {
        "content": "<p>it can call bu_whereis to get the resolved path as another method either in getExecutablePath() or in bu_dir() if we want to keep our code separate</p>",
        "id": 196724533,
        "sender_full_name": "Sean",
        "timestamp": 1588823076
    },
    {
        "content": "<p>what will happen once the cwd changes though?  Do we replace the recorded argv[0] with it's resolution immediately upon program launch before the app has a chance to change it's working directory?</p>",
        "id": 196724555,
        "sender_full_name": "starseeker",
        "timestamp": 1588823143
    },
    {
        "content": "<p>I think you're getting issues mixed up -- that's some bu_brlcad_root issue</p>",
        "id": 196724617,
        "sender_full_name": "Sean",
        "timestamp": 1588823210
    },
    {
        "content": "<p>getprogname doesn't stop working after cwd</p>",
        "id": 196724629,
        "sender_full_name": "Sean",
        "timestamp": 1588823236
    },
    {
        "content": "<p>Maybe - to me the \"user level\" issue is I want bu_dir to always resolve correctly.</p>",
        "id": 196724632,
        "sender_full_name": "starseeker",
        "timestamp": 1588823245
    },
    {
        "content": "<p>bu_which logic has nothing that introspects cwd</p>",
        "id": 196724633,
        "sender_full_name": "Sean",
        "timestamp": 1588823248
    },
    {
        "content": "<p>heh, um, yes... and me too...</p>",
        "id": 196724686,
        "sender_full_name": "Sean",
        "timestamp": 1588823320
    },
    {
        "content": "<p>Are you saying that the bu_brlcad_root issue is independent of the program name?</p>",
        "id": 196724703,
        "sender_full_name": "starseeker",
        "timestamp": 1588823364
    },
    {
        "content": "<p>i'm saying nothing about the bu_brlcad_root issue at the moment -- there is some issue there to be looked into at some point, but I didn't refer to it</p>",
        "id": 196724772,
        "sender_full_name": "Sean",
        "timestamp": 1588823444
    },
    {
        "content": "<p>OK</p>",
        "id": 196724778,
        "sender_full_name": "starseeker",
        "timestamp": 1588823453
    },
    {
        "content": "<p>the issue at hand I thought was getting bu_dir to return the path that getExecutablePath() is/should be providing because there's some compilation issue on obsd</p>",
        "id": 196724828,
        "sender_full_name": "Sean",
        "timestamp": 1588823555
    },
    {
        "content": "<p>we have everything needed to get the current executable path on obsd</p>",
        "id": 196724839,
        "sender_full_name": "Sean",
        "timestamp": 1588823577
    },
    {
        "content": "<p>OK... that's the whereis.c code?</p>",
        "id": 196724867,
        "sender_full_name": "starseeker",
        "timestamp": 1588823642
    },
    {
        "content": "<p>that can be got using bu_getprogname and bu_which, or we could tweak the logic in whereami.c -- there is a bsd section in there, so I'm a little surprised i it doesn't work</p>",
        "id": 196724896,
        "sender_full_name": "Sean",
        "timestamp": 1588823644
    },
    {
        "content": "<p>er, yes s/which/whereis/</p>",
        "id": 196724902,
        "sender_full_name": "Sean",
        "timestamp": 1588823659
    },
    {
        "content": "<p>I tried - OpenBSD doesn't define KERN_PROC_PATHNAME</p>",
        "id": 196724906,
        "sender_full_name": "starseeker",
        "timestamp": 1588823686
    },
    {
        "content": "<p>sure, but what about KERN_PROC_ARGS and KERN_PROC_ARGV ?</p>",
        "id": 196724927,
        "sender_full_name": "Sean",
        "timestamp": 1588823743
    },
    {
        "content": "<p>assuming it supplies access to argv globally, then we either call bu_whereis/bu_which or replicate that logic in whereami.c for obsd</p>",
        "id": 196725050,
        "sender_full_name": "Sean",
        "timestamp": 1588823886
    },
    {
        "content": "<p>I believe it has those...</p>",
        "id": 196725072,
        "sender_full_name": "starseeker",
        "timestamp": 1588823954
    },
    {
        "content": "<p>that's what I was originally saying -- the choice is between modifying whereami.c to extend it with openbsd support or using existing support at the higher call in bu_dir to call getprogname+whereis</p>",
        "id": 196725073,
        "sender_full_name": "Sean",
        "timestamp": 1588823956
    },
    {
        "content": "<p>Thomas' response at <a href=\"https://stackoverflow.com/questions/31494901/how-to-get-the-executable-path-on-openbsd\" title=\"https://stackoverflow.com/questions/31494901/how-to-get-the-executable-path-on-openbsd\">https://stackoverflow.com/questions/31494901/how-to-get-the-executable-path-on-openbsd</a> looks like a near drop-in for whereami.c if you want to try it on openbsd; that might make a good upstream patch anyways</p>",
        "id": 196725150,
        "sender_full_name": "Sean",
        "timestamp": 1588824067
    },
    {
        "content": "<p>whereami.c supports a nice variety of platforms already, so second choice would be to extend it with a LIBBU fallback method using getprogname+whereis</p>",
        "id": 196725161,
        "sender_full_name": "Sean",
        "timestamp": 1588824121
    },
    {
        "content": "<p>I think either of those are superior to doing anything in bu_dir</p>",
        "id": 196725205,
        "sender_full_name": "Sean",
        "timestamp": 1588824155
    },
    {
        "content": "<p>Agreed - I guess I'm going to have to try it before it will \"click\"</p>",
        "id": 196725215,
        "sender_full_name": "starseeker",
        "timestamp": 1588824210
    },
    {
        "content": "<p>I suppose this is something relatively safe for me to chew on...</p>",
        "id": 196725262,
        "sender_full_name": "starseeker",
        "timestamp": 1588824293
    },
    {
        "content": "<p>for what it's worth, that stack overflow response  is basically doing a argv0 lookup followed by a PATH search, which is essentially the exact same code as calling bu_getprogname+bu_whereis</p>",
        "id": 196725263,
        "sender_full_name": "Sean",
        "timestamp": 1588824296
    },
    {
        "content": "<p>bu_whereis searches the system path a lot harder, so I guess his method is actually identical to bu_which()</p>",
        "id": 196725282,
        "sender_full_name": "Sean",
        "timestamp": 1588824362
    },
    {
        "content": "<p>searching env(PATH)</p>",
        "id": 196725329,
        "sender_full_name": "Sean",
        "timestamp": 1588824370
    },
    {
        "content": "<p>Am I wrong, or will bu_whereis fail in the case with a relative path to an executable that isn't in any normal binary launching path?</p>",
        "id": 196725371,
        "sender_full_name": "starseeker",
        "timestamp": 1588824481
    },
    {
        "content": "<p>I.e. not in PATH, not in any standard system bin dir</p>",
        "id": 196725413,
        "sender_full_name": "starseeker",
        "timestamp": 1588824508
    },
    {
        "content": "<p>it should fail, that's what 'whereis' does.  'which' will return the relative path.  calling code must call realpath on relative paths.</p>",
        "id": 196725482,
        "sender_full_name": "Sean",
        "timestamp": 1588824669
    },
    {
        "content": "<p>But realpath will only succeed if the current path is still the same as it was when the original invocation occurred?</p>",
        "id": 196725493,
        "sender_full_name": "starseeker",
        "timestamp": 1588824710
    },
    {
        "content": "<p>bingo</p>",
        "id": 196725529,
        "sender_full_name": "Sean",
        "timestamp": 1588824722
    },
    {
        "content": "<p>and isn't that the problem?</p>",
        "id": 196725534,
        "sender_full_name": "starseeker",
        "timestamp": 1588824732
    },
    {
        "content": "<p>(and yes, that's a problem)</p>",
        "id": 196725537,
        "sender_full_name": "Sean",
        "timestamp": 1588824737
    },
    {
        "content": "<p>my understanding was that <em>that</em> is the issue whereami.c was trying to resolve</p>",
        "id": 196725543,
        "sender_full_name": "starseeker",
        "timestamp": 1588824759
    },
    {
        "content": "<p>hah, my sausage fingers are slow tonight .. fell down the stairs</p>",
        "id": 196725547,
        "sender_full_name": "Sean",
        "timestamp": 1588824762
    },
    {
        "content": "<p>yikes!</p>",
        "id": 196725554,
        "sender_full_name": "starseeker",
        "timestamp": 1588824779
    },
    {
        "content": "<p>gonna be sore tomorrow</p>",
        "id": 196725560,
        "sender_full_name": "Sean",
        "timestamp": 1588824794
    },
    {
        "content": "<p>it is, it's the same reason bu_argv0_full_path() exists too</p>",
        "id": 196725618,
        "sender_full_name": "Sean",
        "timestamp": 1588824894
    },
    {
        "content": "<p>So... won't what we're proposing to implement for OpenBSD end up failing in those cases without something like KERN_PROC_PATHNAME to fall back on?</p>",
        "id": 196725658,
        "sender_full_name": "starseeker",
        "timestamp": 1588824962
    },
    {
        "content": "<p>same reason it's deprecated, but almost impossible to remove.  the only full-proof way for it to work is to either do a realpath() lookup right away (which should be happening when bu_setprogname() is called) or otherwise stashing the cwd on init</p>",
        "id": 196725687,
        "sender_full_name": "Sean",
        "timestamp": 1588824987
    },
    {
        "content": "<p>if you just pull that persons code as-is, yes -- it will be suseptiple to path changes, but we did resolve the initial path issue in our code</p>",
        "id": 196725701,
        "sender_full_name": "Sean",
        "timestamp": 1588825055
    },
    {
        "content": "<p>bu_getiwd()</p>",
        "id": 196725705,
        "sender_full_name": "Sean",
        "timestamp": 1588825069
    },
    {
        "content": "<p>bu_setprogname is currently just copying argv0 - no realpath resolution at all that I can see...</p>",
        "id": 196725708,
        "sender_full_name": "starseeker",
        "timestamp": 1588825073
    },
    {
        "content": "<p>that's likely the bit missing that makes all the realpath() callers in libbu fail after a chdir</p>",
        "id": 196725760,
        "sender_full_name": "Sean",
        "timestamp": 1588825151
    },
    {
        "content": "<p>will try that tomorrow - might be able to ditch the whereami.c code if that does the trick...</p>",
        "id": 196725839,
        "sender_full_name": "starseeker",
        "timestamp": 1588825226
    },
    {
        "content": "<p>like I said, I wouldn't ditch it.</p>",
        "id": 196725842,
        "sender_full_name": "Sean",
        "timestamp": 1588825249
    },
    {
        "content": "<p>it's got good platform case variety and they're good, just not piecewise generalized</p>",
        "id": 196725849,
        "sender_full_name": "Sean",
        "timestamp": 1588825272
    },
    {
        "content": "<p>that's why I didn't complain about it being added, it's a good path forward</p>",
        "id": 196725851,
        "sender_full_name": "Sean",
        "timestamp": 1588825284
    },
    {
        "content": "<p>ah - so, bu_realpath the progname at set time, then use it as a fallback implementation if we don't have a platform answer?</p>",
        "id": 196725908,
        "sender_full_name": "starseeker",
        "timestamp": 1588825325
    },
    {
        "content": "<p>s/as/to support a/</p>",
        "id": 196725917,
        "sender_full_name": "starseeker",
        "timestamp": 1588825342
    },
    {
        "content": "<p>to be ditched would probably be path_normalize and all the bu_brlcad* routines and the bu_argv0_full_path logic (and callers)</p>",
        "id": 196725918,
        "sender_full_name": "Sean",
        "timestamp": 1588825342
    },
    {
        "content": "<p>Actually, I think I use path_normalize for some .g path operations, not just filesystem stuff</p>",
        "id": 196725937,
        "sender_full_name": "starseeker",
        "timestamp": 1588825385
    },
    {
        "content": "<p>would need to check, but I think search calls it</p>",
        "id": 196725946,
        "sender_full_name": "starseeker",
        "timestamp": 1588825406
    },
    {
        "content": "<p>yeah, libged/search.c</p>",
        "id": 196726015,
        "sender_full_name": "starseeker",
        "timestamp": 1588825499
    },
    {
        "content": "<p>it's just redundant with something else in libbu iirc</p>",
        "id": 196726017,
        "sender_full_name": "Sean",
        "timestamp": 1588825502
    },
    {
        "content": "<p>O.o</p>",
        "id": 196726024,
        "sender_full_name": "starseeker",
        "timestamp": 1588825541
    },
    {
        "content": "<p>I sure missed it if it is...</p>",
        "id": 196726035,
        "sender_full_name": "starseeker",
        "timestamp": 1588825558
    },
    {
        "content": "<p>I could be wrong</p>",
        "id": 196726105,
        "sender_full_name": "Sean",
        "timestamp": 1588825596
    },
    {
        "content": "<p>it's just one func with no system calls too, so not a big deal even if that logic is somewhere, and like you said it might not be</p>",
        "id": 196726159,
        "sender_full_name": "Sean",
        "timestamp": 1588825686
    },
    {
        "content": "<p>If you're thinking of realpath_bsd.c, that's the actual filesystem resolver from OpenBSD - using that to avoid that crazy crasher case we hit trying to use the Linux realpath</p>",
        "id": 196726169,
        "sender_full_name": "starseeker",
        "timestamp": 1588825720
    },
    {
        "content": "<p>OK, that's enough finger torture - get some rest!</p>",
        "id": 196726256,
        "sender_full_name": "starseeker",
        "timestamp": 1588825857
    },
    {
        "content": "<p>yeah you're right, file_path_normalize() is cool.  I think I was remembering bu_file_realpath() and GetFullPathName()'s behavior, but it's not the same as realpath().</p>",
        "id": 196731704,
        "sender_full_name": "Sean",
        "timestamp": 1588833530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>   To be sure I understand - we shouldn't be using bio.h in our public header files, correct?</p>",
        "id": 196767882,
        "sender_full_name": "starseeker",
        "timestamp": 1588857349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> you probably told me, but I'm afraid I don't recall - what's the reason we don't call bu_setprogname from libbu_init along with bu_getiwd?</p>",
        "id": 196794193,
        "sender_full_name": "starseeker",
        "timestamp": 1588868003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196767882\" title=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196767882\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span>   To be sure I understand - we shouldn't be using bio.h in our public header files, correct?</p>\n</blockquote>\n<p>No, it's fine for use in our headers.  I mean, usage should be minimized, but there's not a problem.  Why you ask?</p>",
        "id": 196812602,
        "sender_full_name": "Sean",
        "timestamp": 1588876495
    },
    {
        "content": "<p>The <a href=\"http://repository.sh\" title=\"http://repository.sh\">repository.sh</a> script has a test that says \"make sure nobody includes private headers like bio.h in a public header\"</p>",
        "id": 196813094,
        "sender_full_name": "starseeker",
        "timestamp": 1588876693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196794193\" title=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196794193\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> you probably told me, but I'm afraid I don't recall - what's the reason we don't call bu_setprogname from libbu_init along with bu_getiwd?</p>\n</blockquote>\n<p>Because we don't have the argument to pass that it needs.  bu_init() is called before main(), before argv0 exists.</p>",
        "id": 196813097,
        "sender_full_name": "Sean",
        "timestamp": 1588876694
    },
    {
        "content": "<p>Ah.</p>",
        "id": 196813124,
        "sender_full_name": "starseeker",
        "timestamp": 1588876708
    },
    {
        "content": "<p>I implemented a C++ version that looked for bio.h in include/ and there were a fair number.  I scrubbed them back out, but I was wondering if the comment was wrong or the test was broken...</p>",
        "id": 196813318,
        "sender_full_name": "starseeker",
        "timestamp": 1588876797
    },
    {
        "content": "<p>\"why not both\"?</p>",
        "id": 196814094,
        "sender_full_name": "Sean",
        "timestamp": 1588877158
    },
    {
        "content": "<p>I'm looking</p>",
        "id": 196814128,
        "sender_full_name": "Sean",
        "timestamp": 1588877163
    },
    {
        "content": "<p>yeah, that test was broken.  I removed it.  the single quotes stop expansion of ${i} so grep will never report a match</p>\n<p>but also, the restriction that bio.h and friends not be included was removed a few years ago, so it's no longer needed.</p>",
        "id": 196815059,
        "sender_full_name": "Sean",
        "timestamp": 1588877599
    },
    {
        "content": "<p>Well crud</p>",
        "id": 196815092,
        "sender_full_name": "starseeker",
        "timestamp": 1588877616
    },
    {
        "content": "<p>good catch</p>",
        "id": 196815099,
        "sender_full_name": "Sean",
        "timestamp": 1588877622
    },
    {
        "content": "<p>I'll put it back for the windows.h includes then - those are the messy ones.</p>",
        "id": 196815205,
        "sender_full_name": "starseeker",
        "timestamp": 1588877667
    },
    {
        "content": "<p>note the other bio check is still good, make sure no redundant bio.h and stdio.h inclusions together</p>",
        "id": 196815206,
        "sender_full_name": "Sean",
        "timestamp": 1588877667
    },
    {
        "content": "<p>I think we've even used the wrapper headers in src/other .. though maybe not any longer</p>",
        "id": 196815290,
        "sender_full_name": "Sean",
        "timestamp": 1588877713
    },
    {
        "content": "<p>yeah looks like no longer</p>",
        "id": 196815434,
        "sender_full_name": "Sean",
        "timestamp": 1588877779
    },
    {
        "content": "<p>you mean put the bio.h public header inclusion test back?  no entiendo</p>",
        "id": 196815575,
        "sender_full_name": "Sean",
        "timestamp": 1588877856
    },
    {
        "content": "<p>brep/defines.h bu/tcl.h and fb/fb_wgl.h were using bio.h because they need window.h - I switched it to just the guarded windows.h include, but it's a lot more verbose.</p>",
        "id": 196815698,
        "sender_full_name": "starseeker",
        "timestamp": 1588877899
    },
    {
        "content": "<p>So I'll put bio.h back in those three headers</p>",
        "id": 196815718,
        "sender_full_name": "starseeker",
        "timestamp": 1588877909
    },
    {
        "content": "<p>Ah, I hadn't noticed you'd removed them yet</p>",
        "id": 196815805,
        "sender_full_name": "Sean",
        "timestamp": 1588877948
    },
    {
        "content": "<p>I compile tested the snot out of it this time, so hopefully it shouldn't hurt anything...</p>",
        "id": 196815840,
        "sender_full_name": "starseeker",
        "timestamp": 1588877971
    },
    {
        "content": "<p>you're on point, duplication and verbosity trump as being problematic</p>",
        "id": 196816019,
        "sender_full_name": "Sean",
        "timestamp": 1588878034
    },
    {
        "content": "<p>the only reason they had that rule at the beginning is because they weren't originally safe for public header inclusion.  and once we had something they provided needed in a couple places, the refactoring and testing cleanup happened to make sure they were safe.</p>",
        "id": 196816282,
        "sender_full_name": "Sean",
        "timestamp": 1588878155
    },
    {
        "content": "<p>Ah, yeah I remember that now.</p>",
        "id": 196816370,
        "sender_full_name": "starseeker",
        "timestamp": 1588878203
    },
    {
        "content": "<p>OK.  I think I've got a working whereami.c fallback for OpenBSD now - once that's in I'll go test VS2019 and do a final across the board check.  If that's all good it will mean trunk is building on everything I have access to.</p>",
        "id": 196816585,
        "sender_full_name": "starseeker",
        "timestamp": 1588878298
    },
    {
        "content": "<p>the main issue is their usage of cmake-tested symbols to define/set/unset logic (for example HAVE_SYS_TIME_H is defined, so we know we can #include &lt;sys/time.h&gt;).  we suddenly have a header that is dependent on compilation logic that may not be true on an installed system where the headers get used.</p>",
        "id": 196816593,
        "sender_full_name": "Sean",
        "timestamp": 1588878302
    },
    {
        "content": "<p>the solution was to simply minimize cmake-test-symbol usage as much possible (which is a good practice for public headers regardless) and to at last document their usage in each header.</p>",
        "id": 196816779,
        "sender_full_name": "Sean",
        "timestamp": 1588878367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196816585\" title=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196816585\">said</a>:</p>\n<blockquote>\n<p>OK.  I think I've got a working whereami.c fallback for OpenBSD now - once that's in I'll go test VS2019 and do a final across the board check.  If that's all good it will mean trunk is building on everything I have access to.</p>\n</blockquote>\n<p>cool, did you end up using bu_getiwd() or doing something else?</p>",
        "id": 196816860,
        "sender_full_name": "Sean",
        "timestamp": 1588878406
    },
    {
        "content": "<p>Yep, bu_getiwd</p>",
        "id": 196816875,
        "sender_full_name": "starseeker",
        "timestamp": 1588878419
    },
    {
        "content": "<p>I have a distcheck-full running on RELEASE going, so should have a status check there once that finishes</p>",
        "id": 196817019,
        "sender_full_name": "Sean",
        "timestamp": 1588878488
    },
    {
        "content": "<p>did you end up getting any CMakeCache.txt files or logs with failures?</p>",
        "id": 196817060,
        "sender_full_name": "starseeker",
        "timestamp": 1588878509
    },
    {
        "content": "<p>I need to test RELEASE with a large .g file.</p>",
        "id": 196817289,
        "sender_full_name": "starseeker",
        "timestamp": 1588878632
    },
    {
        "content": "<p>that's what's running.  I'm going methodically through settings  to help make sure a failure doesn't come from something from a previous test, or different compiler, etc</p>",
        "id": 196817300,
        "sender_full_name": "Sean",
        "timestamp": 1588878637
    },
    {
        "content": "<p>OK, sounds good.  Once you've got that take a shot at trunk, if you can - I'm trying to get trunk into a solid state, and then I'll switch off into branches for a while to keep it stable.</p>",
        "id": 196817404,
        "sender_full_name": "starseeker",
        "timestamp": 1588878705
    },
    {
        "content": "<p>Yep, RELEASE on Windows was able to open a big .g test - phew</p>",
        "id": 196818829,
        "sender_full_name": "starseeker",
        "timestamp": 1588879411
    },
    {
        "content": "<p>alright, let's see what VS2019 has to say...</p>",
        "id": 196819543,
        "sender_full_name": "starseeker",
        "timestamp": 1588879762
    },
    {
        "content": "<p>shouldn't 75729 be reverted? looks like all of the bio.h's pushed down into headers were because the bu headers didn' declare something they needed (FILE), which means the public headers are incomplete, possibly broken  now</p>",
        "id": 196822006,
        "sender_full_name": "Sean",
        "timestamp": 1588881045
    },
    {
        "content": "<p>I don't think we have a test in there any more that tests isolated header compilation, but that'd probably be good to restore</p>",
        "id": 196822033,
        "sender_full_name": "Sean",
        "timestamp": 1588881066
    },
    {
        "content": "<p>hm, looks like we need that -- doing a quick test, looks like we have a dozen or so headers on trunk that have type declaration errors, missing headers, and most look like relatively recent changes.  would be neat to get cmake doing something like this:</p>\n<p>find include -name \\*.h -exec g++ -Iinclude -I.build/include -Isrc/other/openNURBS  -fsyntax-only -Wall -Wextra -Wno-deprecated {} \\;</p>",
        "id": 196822659,
        "sender_full_name": "Sean",
        "timestamp": 1588881440
    },
    {
        "content": "<p>Can revert it, but I build tested on multiple platforms... you're thinking it's still broken somewhere?</p>",
        "id": 196822768,
        "sender_full_name": "starseeker",
        "timestamp": 1588881487
    },
    {
        "content": "<p>I added stdio.h in lieu of bio.h when it just needed FILE, for example</p>",
        "id": 196822817,
        "sender_full_name": "starseeker",
        "timestamp": 1588881513
    },
    {
        "content": "<p>Hmm.  That might be possible, actually...</p>",
        "id": 196822983,
        "sender_full_name": "starseeker",
        "timestamp": 1588881601
    },
    {
        "content": "<p>I'll try it in the branch</p>",
        "id": 196823171,
        "sender_full_name": "starseeker",
        "timestamp": 1588881693
    },
    {
        "content": "<p>Erm.  How do I configure test for a compiler flag that by design produces no .o file?</p>",
        "id": 196824466,
        "sender_full_name": "starseeker",
        "timestamp": 1588882356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  A rough attempt at such a header testing target is in trunk:</p>\n<p>cmake .. -DBRLCAD_HDR_CHECK=ON &amp;&amp; make check-headers -k</p>",
        "id": 196828729,
        "sender_full_name": "starseeker",
        "timestamp": 1588884831
    },
    {
        "content": "<p>I don't see any  at first glance that look like they're due to r75729...</p>",
        "id": 196829413,
        "sender_full_name": "starseeker",
        "timestamp": 1588885226
    },
    {
        "content": "<p>Do you want me to start fixing them?  The two I'm not sure how to handle are vector_x86.h and vector_fpu.h</p>",
        "id": 196829580,
        "sender_full_name": "starseeker",
        "timestamp": 1588885312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196822768\" title=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196822768\">said</a>:</p>\n<blockquote>\n<p>Can revert it, but I build tested on multiple platforms... you're thinking it's still broken somewhere?</p>\n</blockquote>\n<p>Not a big deal yet, but there is an issue there.  </p>\n<p>The headers are likely broken by the nature of using a symbol that hasn't been declared yet, but compilation won't stop because you added the header in all the places it was used (thus masking the fact the header didn't declare it like it should have).</p>\n<p>Later someone goes to use the header and gets the error, and they either perpetuate by adding stdio/bio to their source or the fix the header leaving a lot of unnecessary redundant includes in all the callers.</p>",
        "id": 196830012,
        "sender_full_name": "Sean",
        "timestamp": 1588885543
    },
    {
        "content": "<p>Wouldn't the g++ check you ran see the  undeclared symbols?  Maybe I'm misunderstanding what' that's telling us...</p>",
        "id": 196830228,
        "sender_full_name": "starseeker",
        "timestamp": 1588885659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196822817\" title=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196822817\">said</a>:</p>\n<blockquote>\n<p>I added stdio.h in lieu of bio.h when it just needed FILE, for example</p>\n</blockquote>\n<p>if you actually did catch them all, then they're not broken, but then it means all the bio.h in the usage locations are redundant/unnecessary right?</p>",
        "id": 196830241,
        "sender_full_name": "Sean",
        "timestamp": 1588885664
    },
    {
        "content": "<p>Some yes, some no - open/close calls need unistd.h</p>",
        "id": 196830319,
        "sender_full_name": "starseeker",
        "timestamp": 1588885689
    },
    {
        "content": "<p>which is to say those headers aren't right</p>",
        "id": 196830376,
        "sender_full_name": "Sean",
        "timestamp": 1588885720
    },
    {
        "content": "<p>sorry, I was talking about the source files</p>",
        "id": 196830461,
        "sender_full_name": "starseeker",
        "timestamp": 1588885757
    },
    {
        "content": "<p>you're talking about bio.h usage in the headers?</p>",
        "id": 196830495,
        "sender_full_name": "starseeker",
        "timestamp": 1588885781
    },
    {
        "content": "<p>if the symbols were only in the source files then it's certainly fine</p>",
        "id": 196830500,
        "sender_full_name": "Sean",
        "timestamp": 1588885784
    },
    {
        "content": "<p>there are only 3 bio.h usages in the headers, and they should all be for windows.h (things like HANDLE, iirc, or getting ahead of opennurbs.h in one case.)</p>",
        "id": 196830619,
        "sender_full_name": "starseeker",
        "timestamp": 1588885835
    },
    {
        "content": "<p>I mean symbols in the public headers that were satisfied by bio.h (regardless of the comment about it being for whatever reason)</p>",
        "id": 196830622,
        "sender_full_name": "Sean",
        "timestamp": 1588885837
    },
    {
        "content": "<p>right, I tried to get all of those when I made the switch.</p>",
        "id": 196830678,
        "sender_full_name": "starseeker",
        "timestamp": 1588885872
    },
    {
        "content": "<p>but did you get them by making sure they included what they declared, or did you get them by putting a header in a source file</p>",
        "id": 196830733,
        "sender_full_name": "Sean",
        "timestamp": 1588885911
    },
    {
        "content": "<p>including what they declared</p>",
        "id": 196830803,
        "sender_full_name": "starseeker",
        "timestamp": 1588885933
    },
    {
        "content": "<p>then there's no problem</p>",
        "id": 196830814,
        "sender_full_name": "Sean",
        "timestamp": 1588885942
    },
    {
        "content": "<p>a little surprising, but not a problem if true ;)</p>",
        "id": 196830852,
        "sender_full_name": "Sean",
        "timestamp": 1588885969
    },
    {
        "content": "<p>if that means what I think it means - i.e. bu_function(FILE *stream) needs stdio in the header because the function signature exposes the FILE type</p>",
        "id": 196830869,
        "sender_full_name": "starseeker",
        "timestamp": 1588885984
    },
    {
        "content": "<p>yep, that's exactly it</p>",
        "id": 196831000,
        "sender_full_name": "Sean",
        "timestamp": 1588886043
    },
    {
        "content": "<p>you tested windows?  iirc, there's a handful of things that come from stdio.h on linux that come from windows.h on windows.</p>",
        "id": 196831038,
        "sender_full_name": "Sean",
        "timestamp": 1588886061
    },
    {
        "content": "<p>I've built on windows - haven't tried your g++ style test there (can it be done with msvc?)</p>",
        "id": 196831094,
        "sender_full_name": "starseeker",
        "timestamp": 1588886091
    },
    {
        "content": "<p>I don't think we have any in public headers, but wouldn't bet on it</p>",
        "id": 196831120,
        "sender_full_name": "Sean",
        "timestamp": 1588886103
    },
    {
        "content": "<p>I think I listed the platforms I tested in the commit message... let me see...  ah:</p>\n<p>Passes make check on MSVC 2017, Linux GCC 9.2, Linux clang 9,  OSX (github runner), and OpenBSD (clang 8)</p>",
        "id": 196831230,
        "sender_full_name": "starseeker",
        "timestamp": 1588886158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196829580\" title=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196829580\">said</a>:</p>\n<blockquote>\n<p>Do you want me to start fixing them?  The two I'm not sure how to handle are vector_x86.h and vector_fpu.h</p>\n</blockquote>\n<p>If you want, but I wouldn't mix it with that branch work.  Adding missing headers should be low risk (because in theory all the callers will simply have redundant includes once they get fixed).</p>",
        "id": 196831349,
        "sender_full_name": "Sean",
        "timestamp": 1588886206
    },
    {
        "content": "<p>would be fun to test the new gcc that came out today</p>",
        "id": 196831417,
        "sender_full_name": "Sean",
        "timestamp": 1588886252
    },
    {
        "content": "<p>it's been a year I think?</p>",
        "id": 196831436,
        "sender_full_name": "Sean",
        "timestamp": 1588886264
    },
    {
        "content": "<p>The branch is pretty well closed out at this point - adding the header check in basic form was simple and non-invasive, and if you decide you want it in that form we can juice it up later in trunk.</p>",
        "id": 196831521,
        "sender_full_name": "starseeker",
        "timestamp": 1588886293
    },
    {
        "content": "<p>Last thing I should need to do in trunk (unless your mac builds identify more problems)  is clean up the bot command refactor I started.</p>",
        "id": 196831703,
        "sender_full_name": "starseeker",
        "timestamp": 1588886437
    },
    {
        "content": "<p>don't understand -- you added the header check to trunk</p>",
        "id": 196831709,
        "sender_full_name": "Sean",
        "timestamp": 1588886440
    },
    {
        "content": "<p>just now, yeah - I did the initial experimentation in the branch</p>",
        "id": 196831738,
        "sender_full_name": "starseeker",
        "timestamp": 1588886457
    },
    {
        "content": "<p>Once it proved simple to add, I went ahead and merged it to trunk</p>",
        "id": 196831858,
        "sender_full_name": "starseeker",
        "timestamp": 1588886473
    },
    {
        "content": "<p>ah, it's no risk so <em>shrug</em></p>",
        "id": 196831860,
        "sender_full_name": "Sean",
        "timestamp": 1588886476
    },
    {
        "content": "<p>the header check is cool, thanks!</p>",
        "id": 196831899,
        "sender_full_name": "Sean",
        "timestamp": 1588886511
    },
    {
        "content": "<p>It's a little more work to tie in compiler flag detection and hook it into make regress (which presumably is where you eventually want it to go) but for now now it's a quick manual check if the hard-coded build flags work for the current platform.</p>",
        "id": 196831977,
        "sender_full_name": "starseeker",
        "timestamp": 1588886549
    },
    {
        "content": "<p>is there a way to get rid of all the line added to every header dir though?  it's ancillary to that file's purpose and begs questions to newcomers</p>",
        "id": 196831992,
        "sender_full_name": "Sean",
        "timestamp": 1588886561
    },
    {
        "content": "<p>make regress only after all headers are fixed.  they were all last clean and verified maybe 5 years ago</p>",
        "id": 196832053,
        "sender_full_name": "Sean",
        "timestamp": 1588886609
    },
    {
        "content": "<p>yes, but there are trade-offs - using the lists this way we can be sure we aren't testing stray files stashed in the directories (CMAKEFILES ignored files, for example.)  I could do one toplevel build that reaches down into the lower directories, but then any renaming done a lower levels will have non-obvious breakage consequences.</p>",
        "id": 196832201,
        "sender_full_name": "starseeker",
        "timestamp": 1588886686
    },
    {
        "content": "<p>this is one of the rare instances where recursive globbing would have been kosher :)</p>",
        "id": 196832262,
        "sender_full_name": "Sean",
        "timestamp": 1588886721
    },
    {
        "content": "<p>how do we exclude files though?</p>",
        "id": 196832287,
        "sender_full_name": "starseeker",
        "timestamp": 1588886738
    },
    {
        "content": "<p>besides CMakeLists.txt I mean...</p>",
        "id": 196832297,
        "sender_full_name": "starseeker",
        "timestamp": 1588886748
    },
    {
        "content": "<p>For example, bu has column.h and tbl.h stashed in it - a recursive glob will grab those, which we don't want</p>",
        "id": 196832410,
        "sender_full_name": "starseeker",
        "timestamp": 1588886790
    },
    {
        "content": "<p>I suppose I can try it and see if any of those cause breakage - maybe it won't matter</p>",
        "id": 196832485,
        "sender_full_name": "starseeker",
        "timestamp": 1588886833
    },
    {
        "content": "<p>why not?<br>\nI would expect to glob on *.h .. and if there's a header in our include folder, good to know if it's busted.</p>",
        "id": 196832488,
        "sender_full_name": "Sean",
        "timestamp": 1588886836
    },
    {
        "content": "<p>if they work, then no problem, great to know if we ever do add a broken one</p>",
        "id": 196832515,
        "sender_full_name": "Sean",
        "timestamp": 1588886854
    },
    {
        "content": "<p>if they don't work, they they specifically could be excluded ... the downside is completely localized to the test itself</p>",
        "id": 196832602,
        "sender_full_name": "Sean",
        "timestamp": 1588886883
    },
    {
        "content": "<p>A couple are \"headers in progress\" I left there years ago.  I suppose if they're a problem they've just now qualified for removal as a maintenance burden ;-)</p>",
        "id": 196832604,
        "sender_full_name": "starseeker",
        "timestamp": 1588886884
    },
    {
        "content": "<p>it's also super easy to fix headers in general if they are broken.  it's just they propagate a slew of unnecessary includes and #ifdef logic to callers when they're broken</p>",
        "id": 196832706,
        "sender_full_name": "Sean",
        "timestamp": 1588886955
    },
    {
        "content": "<p>bsd used to be notorious for that</p>",
        "id": 196832752,
        "sender_full_name": "Sean",
        "timestamp": 1588886985
    },
    {
        "content": "<p>OK, r75745 localizes it</p>",
        "id": 196833780,
        "sender_full_name": "starseeker",
        "timestamp": 1588887644
    },
    {
        "content": "<p>r75746 gets most of them - we're down to the weirdly recursive trio of bn/dvec.h bn/vector_fpu.h and bn/vector_x86.h and RtServerImpl.h wanting JNIEXPORT (which our headers don't define anywhere.)</p>",
        "id": 196836401,
        "sender_full_name": "starseeker",
        "timestamp": 1588889183
    },
    {
        "content": "<p>my vote would be to yank RtServerImpl.h, unless someone is still using it...</p>",
        "id": 196836443,
        "sender_full_name": "starseeker",
        "timestamp": 1588889214
    },
    {
        "content": "<p>I've tangled with the bn/vec* files once or twice in the past and lost - IIRC they have something to do with the NURBS code</p>",
        "id": 196836629,
        "sender_full_name": "starseeker",
        "timestamp": 1588889341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> back to clean build state and confirmed.  distcheck-full failures are consistent and repeatable.  iges error is real, i'm back debugging it.  Looks like it's crashing during a boolean evaluation export.</p>",
        "id": 196838949,
        "sender_full_name": "Sean",
        "timestamp": 1588890976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  excellent</p>",
        "id": 196846315,
        "sender_full_name": "starseeker",
        "timestamp": 1588896829
    },
    {
        "content": "<p>There we go - make check-headers is now clean!</p>",
        "id": 196846414,
        "sender_full_name": "starseeker",
        "timestamp": 1588896899
    },
    {
        "content": "<p>once project I did many many mmmmany years ago (before I met yall), I had a 'no recursive include' policy and occasionally tried commenting out includes, the compile time was amazeballs</p>",
        "id": 196846751,
        "sender_full_name": "Erik",
        "timestamp": 1588897230
    },
    {
        "content": "<p>Heh - I'd hate to even contemplate what that would take for BRL-CAD</p>",
        "id": 196847284,
        "sender_full_name": "starseeker",
        "timestamp": 1588898012
    },
    {
        "content": "<p>Heh - seven commits away from 75757</p>",
        "id": 196847351,
        "sender_full_name": "starseeker",
        "timestamp": 1588898073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span>  haven't yet isolated if it's bsd-specific, probably not, but it is only exhibiting on freebsd (thus far) and only in optimized builds.  it's not limited to g-iges, just happens to be the tool more reliably triggering the race.  error appears to be not new, so it doesn't have to be a release blocker.</p>",
        "id": 196855891,
        "sender_full_name": "Sean",
        "timestamp": 1588910539
    },
    {
        "content": "<p>freebsd, not OSX?</p>",
        "id": 196900401,
        "sender_full_name": "starseeker",
        "timestamp": 1588947306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Is RELEASE branch still good for you?</p>",
        "id": 196900479,
        "sender_full_name": "starseeker",
        "timestamp": 1588947358
    },
    {
        "content": "<p>I don't think I've changed anything since your last test, but it's now last call ;-)</p>",
        "id": 196900589,
        "sender_full_name": "starseeker",
        "timestamp": 1588947409
    },
    {
        "content": "<p>No, nothing has changed. It's still revision 75755.</p>",
        "id": 196900866,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588947565
    },
    {
        "content": "<p>I.e., it's still good.</p>",
        "id": 196900904,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1588947589
    },
    {
        "content": "<p>OK.  Changelog updates are going in, release date gets updated (again), and then we're tagging!</p>",
        "id": 196901008,
        "sender_full_name": "starseeker",
        "timestamp": 1588947615
    },
    {
        "content": "<p>Whew</p>",
        "id": 196901964,
        "sender_full_name": "starseeker",
        "timestamp": 1588948089
    },
    {
        "content": "<p>Lot of fun for a \"patch\" release...</p>",
        "id": 196901983,
        "sender_full_name": "starseeker",
        "timestamp": 1588948101
    },
    {
        "content": "<p>Thank you, OpenBSD.  Getting a core file from MGED (but no other failure report in make regress, so don't know what's producing it) and the old gdb can't read it.  Compiled the new gdb from ports, ran egdb... and gdb itself crashed trying to read the core file.  Now I have a gdb core dump.</p>",
        "id": 196971515,
        "sender_full_name": "starseeker",
        "timestamp": 1588995722
    },
    {
        "content": "<p>That's a big help.</p>",
        "id": 196971553,
        "sender_full_name": "starseeker",
        "timestamp": 1588995791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196900401\" title=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/196900401\">said</a>:</p>\n<blockquote>\n<p>freebsd, not OSX?</p>\n</blockquote>\n<p>ugh, I literally lost track of which platform I was debugging on (I have like 20 terminals open atm) and somehow got into an \"i'm on freebsd\" because the debugging looked exactly like the issue we've been having on freebsd.</p>\n<p>I was wrong, very wrong.  the corruption is on mac, release builds, not limited to g-iges.</p>",
        "id": 196971944,
        "sender_full_name": "Sean",
        "timestamp": 1588996460
    },
    {
        "content": "<p>talk about a massive brain fart.</p>",
        "id": 196971958,
        "sender_full_name": "Sean",
        "timestamp": 1588996520
    },
    {
        "content": "<p>anyways, I have a reliable stack trace and have a lead on the cause.  going to keep at it this weekend to see if I can suss it out.</p>",
        "id": 196972024,
        "sender_full_name": "Sean",
        "timestamp": 1588996567
    },
    {
        "content": "<p>I think you might need to change your brain drawers, boy :D</p>",
        "id": 196991619,
        "sender_full_name": "Erik",
        "timestamp": 1589030671
    },
    {
        "content": "<p>I do.  Got too much going on.</p>",
        "id": 196999781,
        "sender_full_name": "Sean",
        "timestamp": 1589041799
    },
    {
        "content": "<p>well, poop, I grabbed an rpi3b+ to pop up a new backup server and they only have usb2, I think writing to the disk may be slower than my network O.o :/</p>",
        "id": 197051269,
        "sender_full_name": "Erik",
        "timestamp": 1589112029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> Just did an update and now seeing this error again:</p>\n<div class=\"codehilite\"><pre><span></span><code>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -std=c11  -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -pipe -fno-strict-aliasing -fn\\\no-common -fexceptions -m64 -ggdb -Qunused-arguments -fstack-protector-all -fno-omit-frame-pointer -pedantic -pedantic-errors -Wall -Wextra -Wundef -Wfloat-equal -Wshadow -Wbad-\\\nfunction-cast -Wc++-compat -Winline -Wno-long-long -Wno-variadic-macros -Wdocumentation -Wno-c11-extensions -Werror -isysroot /Applications/Xcode.app/Contents/Developer/Platfor\\\nms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk -mmacosx-version-min=10.14 -dynamiclib -Wl,-headerpad_max_install_names  -m64 -ggdb -compatibility_version 20.0.0 -current_ver\\\nsion 20.0.1 -o ../../lib/libicv.20.0.1.dylib -install_name @rpath/libicv.20.dylib CMakeFiles/libicv-obj.dir/fileformat.c.o CMakeFiles/libicv-obj.dir/rot.c.o CMakeFiles/libicv-o\\\nbj.dir/color_space.c.o CMakeFiles/libicv-obj.dir/crop.c.o CMakeFiles/libicv-obj.dir/filter.c.o CMakeFiles/libicv-obj.dir/encoding.c.o CMakeFiles/libicv-obj.dir/operations.c.o C\\\nMakeFiles/libicv-obj.dir/stat.c.o CMakeFiles/libicv-obj.dir/size.c.o CMakeFiles/libicv-obj.dir/pix.c.o CMakeFiles/libicv-obj.dir/png.c.o CMakeFiles/libicv-obj.dir/ppm.c.o CMake\\\nFiles/libicv-obj.dir/bw.c.o CMakeFiles/libicv-obj.dir/dpix.c.o  -Wl,-rpath,/Users/morrison/brlcad.trunk/.build/lib ../../lib/libbn.20.0.1.dylib /usr/local/lib/libpng.dylib ../.\\\n./lib/libnetpbm.dylib ../../lib/libbu.20.0.1.dylib -framework Foundation -ldl -framework System /usr/lib/libc.dylib -lm\nUndefined symbols for architecture x86_64:\n  &quot;_brl_png_create_info_struct&quot;, referenced from:\n      _png_write in png.c.o\n      _png_read in png.c.o\n  &quot;_brl_png_create_read_struct&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_create_write_struct&quot;, referenced from:\n      _png_write in png.c.o\n  &quot;_brl_png_destroy_read_struct&quot;, referenced from:\n      _png_write in png.c.o\n  &quot;_brl_png_destroy_write_struct&quot;, referenced from:\n      _png_write in png.c.o\n  &quot;_brl_png_get_bKGD&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_get_bit_depth&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_get_color_type&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_get_gAMA&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_get_image_height&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_get_image_width&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_init_io&quot;, referenced from:\n      _png_write in png.c.o\n      _png_read in png.c.o\n  &quot;_brl_png_read_image&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_read_info&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_read_update_info&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_set_IHDR&quot;, referenced from:\n      _png_write in png.c.o\n  &quot;_brl_png_set_background&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_set_expand&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_set_gAMA&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_set_gray_to_rgb&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_set_longjmp_fn&quot;, referenced from:\n      _png_write in png.c.o\n  &quot;_brl_png_set_sig_bytes&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_set_strip_16&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_sig_cmp&quot;, referenced from:\n      _png_read in png.c.o\n  &quot;_brl_png_write_end&quot;, referenced from:\n      _png_write in png.c.o\n  &quot;_brl_png_write_info&quot;, referenced from:\n      _png_write in png.c.o\n  &quot;_brl_png_write_row&quot;, referenced from:\n      _png_write in png.c.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake[2]: *** [lib/libicv.20.0.1.dylib] Error 1\n</code></pre></div>",
        "id": 197454858,
        "sender_full_name": "Sean",
        "timestamp": 1589393967
    },
    {
        "content": "<p>Any ideas?  It seems like maybe something stateful as it didn't error on a fresh build, but did after a simple re-run that had nothing to do with libicv.</p>",
        "id": 197454972,
        "sender_full_name": "Sean",
        "timestamp": 1589394023
    },
    {
        "content": "<p>So it got /usr/local/lib/libpng.dylib somehow.... weird.</p>",
        "id": 197473305,
        "sender_full_name": "starseeker",
        "timestamp": 1589401782
    },
    {
        "content": "<p>@Sean CMakeCache.txt file available?</p>",
        "id": 197473494,
        "sender_full_name": "starseeker",
        "timestamp": 1589401841
    },
    {
        "content": "<p>Somehow PNG_LIBRARIES must be getting overridden - that's the variable libicv is referencing.  When you say \"rerun\" is that a CMake re-run or a re-build?</p>",
        "id": 197475989,
        "sender_full_name": "starseeker",
        "timestamp": 1589403079
    },
    {
        "content": "<p>If it's a CMake re-run you'll probably see something in the CMake output about \"finding\" PNG - that would be when things are getting messed up.  The question would be why it thinks it needs to look for PNG in the first place.  I'll see if I can try a double-configure on github...</p>",
        "id": 197476828,
        "sender_full_name": "starseeker",
        "timestamp": 1589403562
    },
    {
        "content": "<p>Sorry, I already wiped some files out and have it working again</p>",
        "id": 197478027,
        "sender_full_name": "Sean",
        "timestamp": 1589404161
    },
    {
        "content": "<p>it was an svn up followed by make, which re-ran cmake, which then failed.  did make clean, wiped out cmake cache, wiped out cmakefiles dir, and still failed.  deleted build/cmake* and build/include, re-ran cmake, and seems to be back working.  is there perhaps something getting written into the brlcad_config that gets screwed up on a second pass?</p>",
        "id": 197478419,
        "sender_full_name": "Sean",
        "timestamp": 1589404357
    },
    {
        "content": "<p>this is a simple default \"cmake ..\" so it's the auto-detect default and there is a proper libpng for it to find</p>",
        "id": 197478601,
        "sender_full_name": "Sean",
        "timestamp": 1589404454
    },
    {
        "content": "<p>this is the fresh start cmakecache results that succeeds:</p>\n<div class=\"codehilite\"><pre><span></span><code>agua:.build morrison$ grep -r -i png CMakeCache.txt\nCMakeCache.txt://define BRLCAD_PNG\nCMakeCache.txt:BRLCAD_PNG:STRING=SYSTEM (AUTO)\nCMakeCache.txt://PNG_INCLUDE_DIR\nCMakeCache.txt:PNG_INCLUDE_DIR:STRING=PNG-NOTFOUND\nCMakeCache.txt://PNG include directory\nCMakeCache.txt:PNG_INCLUDE_DIRS:STRING=/usr/local/include\nCMakeCache.txt://PNG_LIBRARIES\nCMakeCache.txt:PNG_LIBRARIES:STRING=/usr/local/lib/libpng.dylib\nCMakeCache.txt://PNG_LIBRARY\nCMakeCache.txt:PNG_LIBRARY:STRING=PNG-NOTFOUND\nCMakeCache.txt:PNG_LIBRARY_DEBUG:FILEPATH=PNG_LIBRARY_DEBUG-NOTFOUND\nCMakeCache.txt:PNG_LIBRARY_RELEASE:FILEPATH=/usr/local/lib/libpng.dylib\nCMakeCache.txt://Set PNG_MAN_DIR to the global MAN_DIR\nCMakeCache.txt:PNG_MAN_DIR:STRING=share/man\nCMakeCache.txt://Option to disable Console IO in PNG\nCMakeCache.txt:PNG_NO_CONSOLE_IO:BOOL=OFF\nCMakeCache.txt://Option to disable STDIO in PNG\nCMakeCache.txt:PNG_NO_STDIO:BOOL=OFF\nCMakeCache.txt:PNG_PNG_INCLUDE_DIR:PATH=/usr/local/include\nCMakeCache.txt://BRL-CAD prefix for libpng\nCMakeCache.txt:PNG_PREFIX:STRING=brl_\nCMakeCache.txt://Disable building png test executables\nCMakeCache.txt:PNG_TESTS:STRING=0\nCMakeCache.txt:libdm_LIB_DEPENDS:STATIC=general;librt;general;libfb;general;/usr/X11/lib/libSM.dylib;general;/usr/X11/lib/libICE.dylib;general;/usr/X11/lib/libX11.dylib;general;/usr/X11/lib/libXext.dylib;general;/usr/X11/lib/libXi.dylib;general;/usr/lib/libtcl.dylib;general;/usr/lib/libtk.dylib;general;/usr/local/lib/libpng.dylib;\nCMakeCache.txt:libfb_LIB_DEPENDS:STATIC=general;libbu;general;libpkg;general;/usr/local/lib/libpng.dylib;general;/usr/lib/libtcl.dylib;general;/usr/X11/lib/libSM.dylib;general;/usr/X11/lib/libICE.dylib;general;/usr/X11/lib/libX11.dylib;general;/usr/X11/lib/libXext.dylib;general;/usr/X11/lib/libXi.dylib;general;/usr/X11/lib/libGLU.dylib;general;/usr/X11/lib/libGL.dylib;general;/usr/X11/lib/libSM.dylib;general;/usr/X11/lib/libICE.dylib;general;/usr/X11/lib/libX11.dylib;general;/usr/X11/lib/libXext.dylib;general;/usr/X11/lib/libXi.dylib;general;/usr/lib/libtk.dylib;\nCMakeCache.txt:libged_LIB_DEPENDS:STATIC=general;libwdb;general;liboptical;general;librt;general;libbrep;general;libnmg;general;libfb;general;libbg;general;libbn;general;libbu;general;libicv;general;libanalyze;general;/usr/local/lib/libpng.dylib;general;/usr/lib/libc.dylib;general;m;\nCMakeCache.txt:libicv_LIB_DEPENDS:STATIC=general;libbu;general;libbn;general;/usr/local/lib/libpng.dylib;general;netpbm;\nCMakeCache.txt://STRINGS property for variable: BRLCAD_PNG\nCMakeCache.txt:BRLCAD_PNG-STRINGS:INTERNAL=AUTO;BUNDLED;SYSTEM\nCMakeCache.txt://Details about finding PNG\nCMakeCache.txt:FIND_PACKAGE_MESSAGE_DETAILS_PNG:INTERNAL=[/usr/local/lib/libpng.dylib][/usr/local/include][v1.6.37()]\nCMakeCache.txt://ADVANCED property for variable: PNG_INCLUDE_DIR\nCMakeCache.txt:PNG_INCLUDE_DIR-ADVANCED:INTERNAL=1\nCMakeCache.txt://ADVANCED property for variable: PNG_INCLUDE_DIRS\nCMakeCache.txt:PNG_INCLUDE_DIRS-ADVANCED:INTERNAL=1\nCMakeCache.txt://ADVANCED property for variable: PNG_LIBRARIES\nCMakeCache.txt:PNG_LIBRARIES-ADVANCED:INTERNAL=1\nCMakeCache.txt://ADVANCED property for variable: PNG_LIBRARY\nCMakeCache.txt:PNG_LIBRARY-ADVANCED:INTERNAL=1\nCMakeCache.txt://ADVANCED property for variable: PNG_LIBRARY_DEBUG\nCMakeCache.txt:PNG_LIBRARY_DEBUG-ADVANCED:INTERNAL=1\nCMakeCache.txt://ADVANCED property for variable: PNG_LIBRARY_RELEASE\nCMakeCache.txt:PNG_LIBRARY_RELEASE-ADVANCED:INTERNAL=1\nCMakeCache.txt://ADVANCED property for variable: PNG_MAN_DIR\nCMakeCache.txt:PNG_MAN_DIR-ADVANCED:INTERNAL=1\nCMakeCache.txt://ADVANCED property for variable: PNG_NO_CONSOLE_IO\nCMakeCache.txt:PNG_NO_CONSOLE_IO-ADVANCED:INTERNAL=1\nCMakeCache.txt://ADVANCED property for variable: PNG_NO_STDIO\nCMakeCache.txt:PNG_NO_STDIO-ADVANCED:INTERNAL=1\nCMakeCache.txt://ADVANCED property for variable: PNG_PNG_INCLUDE_DIR\nCMakeCache.txt:PNG_PNG_INCLUDE_DIR-ADVANCED:INTERNAL=1\nCMakeCache.txt://ADVANCED property for variable: PNG_PREFIX\nCMakeCache.txt:PNG_PREFIX-ADVANCED:INTERNAL=1\nCMakeCache.txt://ADVANCED property for variable: PNG_TESTS\nCMakeCache.txt:PNG_TESTS-ADVANCED:INTERNAL=1\n</code></pre></div>",
        "id": 197478679,
        "sender_full_name": "Sean",
        "timestamp": 1589404492
    },
    {
        "content": "<p>OK, so the error was the prefix definition being set when it should <em>not</em> have been set?</p>",
        "id": 197478694,
        "sender_full_name": "starseeker",
        "timestamp": 1589404500
    },
    {
        "content": "<p>presumably</p>",
        "id": 197478717,
        "sender_full_name": "Sean",
        "timestamp": 1589404508
    },
    {
        "content": "<p>so second pass, somehow the header has _brl_ getting defined, so libicv can't resolve when it tries to link</p>",
        "id": 197478746,
        "sender_full_name": "Sean",
        "timestamp": 1589404532
    },
    {
        "content": "<p>I'm a little surprised that succeeded - PNG_PREFIX is set.</p>",
        "id": 197478938,
        "sender_full_name": "starseeker",
        "timestamp": 1589404642
    },
    {
        "content": "<p>testing a simple touch CMakelists.txt src/libicv/* + make, cmake rerunning now to see if it triggers</p>",
        "id": 197478944,
        "sender_full_name": "Sean",
        "timestamp": 1589404647
    },
    {
        "content": "<p>that worked, so it's something a bit more complex than just re-running cmake</p>",
        "id": 197479196,
        "sender_full_name": "Sean",
        "timestamp": 1589404775
    },
    {
        "content": "<p>A stale pnglibconf.h is one possibility</p>",
        "id": 197479357,
        "sender_full_name": "starseeker",
        "timestamp": 1589404860
    },
    {
        "content": "<p>$ nm src/libicv/CMakeFiles/libicv-obj.dir/png.c.o <br>\ndoes not have _brl_</p>",
        "id": 197479373,
        "sender_full_name": "Sean",
        "timestamp": 1589404872
    },
    {
        "content": "<p>If it's finding a local pnglibconf.h but a system libpng, that'll most likely blow up</p>",
        "id": 197479386,
        "sender_full_name": "starseeker",
        "timestamp": 1589404883
    },
    {
        "content": "<p>Ah, that could very well be actually.  pnglibconf.h, IIRC, is generated as a build output.  Just switching the third party setting probably isn't clearing it out.  Let me see where it ends up in the output...</p>",
        "id": 197479584,
        "sender_full_name": "starseeker",
        "timestamp": 1589404953
    },
    {
        "content": "<p>Looking at the cache file, an initial configure leaves PNG_INCLUDE_DIR set to NOTFOUND.  The ENABLE_ALL is actually setting that.  Let me see if libicv is looking at the wrong PNG include var...</p>",
        "id": 197480079,
        "sender_full_name": "starseeker",
        "timestamp": 1589405253
    },
    {
        "content": "<p>no...</p>",
        "id": 197480098,
        "sender_full_name": "starseeker",
        "timestamp": 1589405273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>   with that result, something somehow is getting an ENABLE_ALL header with a system libpng, since clearly the PNG_PREFIX CMake variable by itself didn't trigger the issue (and I see why it doesn't, looking at libpng)</p>",
        "id": 197480493,
        "sender_full_name": "starseeker",
        "timestamp": 1589405520
    },
    {
        "content": "<p>Maybe I should go back to getting that third party build system rework done, even if it does mean a rewrite of the top level flow... I've lost count of the number of times that ThirdParty.cmake state management has bitten me subtly over the years...</p>",
        "id": 197480662,
        "sender_full_name": "starseeker",
        "timestamp": 1589405631
    },
    {
        "content": "<p>(no, I'm not going to, don't worry...)</p>",
        "id": 197480716,
        "sender_full_name": "starseeker",
        "timestamp": 1589405645
    },
    {
        "content": "<p>Don't think it needs to a nuclear option.  It's almost certainly a single var mispelled, misplaced, ifdef/ifndef switcheroo or something else really simple.</p>",
        "id": 197486075,
        "sender_full_name": "Sean",
        "timestamp": 1589409456
    },
    {
        "content": "<p>Updated, and now seeing after make test:</p>\n<div class=\"codehilite\"><pre><span></span><code>    881 - regress-flawfinder (Failed)\n    882 - regress-mged (Failed)\n    901 - regress-gcv-dem (Failed)\n    905 - regress-pkg (Timeout)\n</code></pre></div>",
        "id": 197979023,
        "sender_full_name": "Sean",
        "timestamp": 1589827419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  make test is the one that won't work reliably - it runs everything, even the non-working tests.  You probably wanted make check?</p>",
        "id": 197979216,
        "sender_full_name": "starseeker",
        "timestamp": 1589827538
    },
    {
        "content": "<p>I know that, but I thought the first three were working</p>",
        "id": 197979320,
        "sender_full_name": "Sean",
        "timestamp": 1589827574
    },
    {
        "content": "<p>I know the pkg one is nwe</p>",
        "id": 197979333,
        "sender_full_name": "Sean",
        "timestamp": 1589827583
    },
    {
        "content": "<p>Flawfinder I don't think has ever worked fully (or at least, not in a long time.)  If that mged test is the old one I was working on it hasn't worked in a long time.  The gcv-dem is too sensitive, IIRC - it's md5summing the output dsp</p>",
        "id": 197979623,
        "sender_full_name": "starseeker",
        "timestamp": 1589827723
    },
    {
        "content": "<p>okay, hrm.  thanks!  will ignore.</p>",
        "id": 197980249,
        "sender_full_name": "Sean",
        "timestamp": 1589828039
    },
    {
        "content": "<p>Is Archer working in the latest revision?</p>",
        "id": 202095183,
        "sender_full_name": "Sadeep Darshana",
        "timestamp": 1593180655
    },
    {
        "content": "<p>also MGED</p>",
        "id": 202095220,
        "sender_full_name": "Sadeep Darshana",
        "timestamp": 1593180670
    },
    {
        "content": "<p>It should be...</p>",
        "id": 202103405,
        "sender_full_name": "starseeker",
        "timestamp": 1593184546
    },
    {
        "content": "<p>What are the errors?</p>",
        "id": 202103421,
        "sender_full_name": "starseeker",
        "timestamp": 1593184558
    },
    {
        "content": "<p>Which Visual Studio are you using?  The testing I've done was with 2017, so 2019 might have some issues...</p>",
        "id": 202103982,
        "sender_full_name": "starseeker",
        "timestamp": 1593184805
    },
    {
        "content": "<p><strong>Archer</strong><br>\nC:\\summer\\brlcad-code\\build\\Debug\\bin\\archer.exe<br>\nERROR:  Requisite display manager is not available.<br>\nBRL-CAD may need to be recompiled with support for:  <br>\nRun 'fbhelp' for a list of available display managers.</p>\n<p>Unexpected error encountered while running Archer.<br>\nAborting.</p>\n<p>Process finished with exit code 1<br>\n<strong>MGED</strong><br>\nThis is what MGED looks like. <a href=\"/user_uploads/1549/gaXhCgjQLD8bK9xk6Hvm3v_t/image.png\">image.png</a><br>\nVisual Studio 16 2019, no special build options used</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/gaXhCgjQLD8bK9xk6Hvm3v_t/image.png\" title=\"image.png\"><img src=\"/user_uploads/1549/gaXhCgjQLD8bK9xk6Hvm3v_t/image.png\"></a></div>",
        "id": 202107284,
        "sender_full_name": "Sadeep Darshana",
        "timestamp": 1593186371
    },
    {
        "content": "<p>OK.  Something about the new display manager setup must be unhappy.  We've shifted to plugins, and that failure mode indicates that it can't locate the plugins.</p>",
        "id": 202107681,
        "sender_full_name": "starseeker",
        "timestamp": 1593186584
    },
    {
        "content": "<p>Let me see what 2017 does, then I'll see if I can try 2019</p>",
        "id": 202107770,
        "sender_full_name": "starseeker",
        "timestamp": 1593186617
    },
    {
        "content": "<p>I'll check that</p>",
        "id": 202107782,
        "sender_full_name": "Sadeep Darshana",
        "timestamp": 1593186623
    },
    {
        "content": "<p>Do you have a \"libexec\" directory in your build output (in either Release or Debug, depending on which configuration you used to build...)</p>",
        "id": 202108026,
        "sender_full_name": "starseeker",
        "timestamp": 1593186744
    },
    {
        "content": "<p>I didn't build ALL_BUILD, but archer</p>",
        "id": 202108034,
        "sender_full_name": "Sadeep Darshana",
        "timestamp": 1593186748
    },
    {
        "content": "<p>Ah.  OK, you'll need to build dm-wgl as well</p>",
        "id": 202108064,
        "sender_full_name": "starseeker",
        "timestamp": 1593186764
    },
    {
        "content": "<p>That's a point, archer and mged should explicitly depend on those targets now...</p>",
        "id": 202108180,
        "sender_full_name": "starseeker",
        "timestamp": 1593186823
    },
    {
        "content": "<p>It works <span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> . Thanks</p>",
        "id": 202108372,
        "sender_full_name": "Sadeep Darshana",
        "timestamp": 1593186914
    },
    {
        "content": "<p>I thought building archer builds all dependancies</p>",
        "id": 202108391,
        "sender_full_name": "Sadeep Darshana",
        "timestamp": 1593186929
    },
    {
        "content": "<p>Is it not what used to happen? (or did I build ALL_BUILD last time, because it used to work)</p>",
        "id": 202108486,
        "sender_full_name": "Sadeep Darshana",
        "timestamp": 1593186967
    },
    {
        "content": "<p>It should.  I didn't think through all the implications of moving to plugin based architectures - there's no longer a link time dependency between the backends and applications, so the build system won't automatically make the connection</p>",
        "id": 202108496,
        "sender_full_name": "starseeker",
        "timestamp": 1593186974
    },
    {
        "content": "<p>The introduction of plugins into trunk is very new, so you might not have seen it previously, but ALL_BUILD would also have avoided it (that's why I didn't see it in earlier testing)</p>",
        "id": 202108595,
        "sender_full_name": "starseeker",
        "timestamp": 1593187030
    },
    {
        "content": "<p>Easy to fix - just need to specify the required backends as build dependencies.</p>",
        "id": 202108641,
        "sender_full_name": "starseeker",
        "timestamp": 1593187061
    },
    {
        "content": "<p>Testing now, hang on...</p>",
        "id": 202108670,
        "sender_full_name": "starseeker",
        "timestamp": 1593187076
    },
    {
        "content": "<p>cool</p>",
        "id": 202108678,
        "sender_full_name": "Sadeep Darshana",
        "timestamp": 1593187080
    },
    {
        "content": "<p>r76220 should handle it for the most obvious cases - there are more that will need similar logic to build in isolation, but those will catch the most common cases.</p>",
        "id": 202109504,
        "sender_full_name": "starseeker",
        "timestamp": 1593187468
    },
    {
        "content": "<p>-- Could NOT find TCL (missing: TCL_STUB_LIBRARY TCL_INCLUDE_PATH) <br>\n-- Could NOT find TCLTK (missing: TCL_STUB_LIBRARY TCL_INCLUDE_PATH TK_STUB_LIBRARY TK_INCLUDE_PATH) <br>\n-- Could NOT find TK (missing: TK_STUB_LIBRARY TK_INCLUDE_PATH) <br>\n-- Could NOT find TCLTK (missing: TK_STUB_LIBRARY TK_INCLUDE_PATH) <br>\n-- Could NOT find TK (missing: TK_STUB_LIBRARY TK_INCLUDE_PATH) </p>\n<p>Any idea why this happens eve after I installed required libraries under <a href=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/doc/README.Linux\">https://sourceforge.net/p/brlcad/code/HEAD/tree/brlcad/trunk/doc/README.Linux</a><br>\n(apt-get install xserver-xorg-dev libx11-dev libxi-dev libxext-dev  libfontconfig-dev libglu1-mesa-dev)<br>\nSee everything is installed.</p>\n<p>root@sadeep-VirtualBox:/media/sf_summer/brlcad-code/build_linux# apt-get install xserver-xorg-dev libx11-dev libxi-dev libxext-dev  libfontconfig-dev libglu1-mesa-dev<br>\nReading package lists... Done<br>\nBuilding dependency tree       <br>\nReading state information... Done<br>\nNote, selecting 'libfontconfig1-dev' instead of 'libfontconfig-dev'<br>\nlibfontconfig1-dev is already the newest version (2.13.1-2ubuntu3).<br>\nlibglu1-mesa-dev is already the newest version (9.0.1-1build1).<br>\nlibx11-dev is already the newest version (2:1.6.9-2ubuntu1).<br>\nlibxext-dev is already the newest version (2:1.3.4-0ubuntu1).<br>\nlibxi-dev is already the newest version (2:1.7.10-0ubuntu1).<br>\nxserver-xorg-dev is already the newest version (2:1.20.8-2ubuntu2.1).<br>\n0 upgraded, 0 newly installed, 0 to remove and 218 not upgraded.</p>",
        "id": 202400151,
        "sender_full_name": "Sadeep Darshana",
        "timestamp": 1593499243
    },
    {
        "content": "<p>(Ubuntu)</p>",
        "id": 202400594,
        "sender_full_name": "Sadeep Darshana",
        "timestamp": 1593499622
    },
    {
        "content": "<p>Fixed this. Had to delete the cmake directory and reload after installing missing libraries. Simply reloading was not sufficient.</p>",
        "id": 202406196,
        "sender_full_name": "Sadeep Darshana",
        "timestamp": 1593504782
    },
    {
        "content": "<p>Yeah, it will usually default to cache'd results, so you have to nuke it all.</p>",
        "id": 202537417,
        "sender_full_name": "Sean",
        "timestamp": 1593587749
    },
    {
        "content": "<p>What is the background of revision 75933 \"ON_DLL_EXPORTS/ON_DLL_IMPORTS is no longer specific enough for an MSVC only override.\"? It breaks my MS Visual Studio brlcad.dll build with static libs.</p>",
        "id": 206113959,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1596701150
    },
    {
        "content": "<p>The import/export logic was generalized to be enabled both on MSVC and on GCC/clang - the latter has had such an ability for a little while, but we didn't use it.  When enabling it (mostly so we could detect changes that would break the import/export bit on platforms other than Windows) we had to adjust the import/export logic to be more general.  OpenNURBS was one of the libraries that had to be adjusted to accommodate it.</p>",
        "id": 206135023,
        "sender_full_name": "starseeker",
        "timestamp": 1596717754
    },
    {
        "content": "<p>If I recall correctly, that change triggered MSVC only logic in opennurbs, which is what prompted the change - I think your adjustment should be fine.</p>",
        "id": 206135528,
        "sender_full_name": "starseeker",
        "timestamp": 1596718027
    },
    {
        "content": "<p>Okay, good.</p>",
        "id": 206135801,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1596718194
    },
    {
        "content": "<p>@starseeker got a new failure -- btclsh is crashing on launch on Mac inside dm_init()</p>",
        "id": 206967391,
        "sender_full_name": "Sean",
        "timestamp": 1597432938
    },
    {
        "content": "<p>frame #4: 0x000000010077cd2e libdm.20.dylib`libdm_init() at dm_init.cpp:109:18</p>",
        "id": 206967395,
        "sender_full_name": "Sean",
        "timestamp": 1597432941
    },
    {
        "content": "<p>dm_get_name() returned NULL, code didn't handle it</p>",
        "id": 206967429,
        "sender_full_name": "Sean",
        "timestamp": 1597432971
    },
    {
        "content": "<p>er, not just btclsh. looks like mged is crashing too, anything doing dm init</p>",
        "id": 206967709,
        "sender_full_name": "Sean",
        "timestamp": 1597433116
    },
    {
        "content": "<p>trunk or RELEASE?</p>",
        "id": 206967956,
        "sender_full_name": "starseeker",
        "timestamp": 1597433227
    },
    {
        "content": "<p>trunk</p>",
        "id": 206968347,
        "sender_full_name": "Sean",
        "timestamp": 1597433444
    },
    {
        "content": "<p>I haven't tested RELEASE in a long while.</p>",
        "id": 206968406,
        "sender_full_name": "Sean",
        "timestamp": 1597433486
    },
    {
        "content": "<p>OK.  Let me see what happens here... I've been hitting RELEASE so something may have slipped on trunk...</p>",
        "id": 206968501,
        "sender_full_name": "starseeker",
        "timestamp": 1597433529
    },
    {
        "content": "<p>That's a strange error... it indicates that the plugin loaded but didn't define a display manager with a name?</p>",
        "id": 206968585,
        "sender_full_name": "starseeker",
        "timestamp": 1597433600
    },
    {
        "content": "<p>Linux doesn't reproduce it...</p>",
        "id": 206968969,
        "sender_full_name": "starseeker",
        "timestamp": 1597433779
    },
    {
        "content": "<p>Looking at the code, dmp must be NULL so there are at least two issues in the code.  First issue is introducing a bunch of getter functions in dm-generic.c that can return NULL in r76200 -- every place those are called must check for NULL or the functions should get changed so NULL is not returnable.  Second issue is obviously whatever caused dmp to be NULL.</p>",
        "id": 206969940,
        "sender_full_name": "Sean",
        "timestamp": 1597434007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I just committed a check and err msg to dm_init.cpp - can you rebuild and run src/libdm/tests/dm_test  to see what happens?</p>",
        "id": 206970665,
        "sender_full_name": "starseeker",
        "timestamp": 1597434192
    },
    {
        "content": "<p>looks like that list is dm_interp, dm_get_fb, dm_get_dm_name, dm_get_dm_lname, dm_get_bg, dm_get_fg, dm_get_pathname, dm_get_name, dm_get_dname, dm_get_graphics_system, dm_get_tkname, dm_get_vp, dm_get_vparse, and dm_get_mvars</p>",
        "id": 206970669,
        "sender_full_name": "Sean",
        "timestamp": 1597434195
    },
    {
        "content": "<p>sure</p>",
        "id": 206970694,
        "sender_full_name": "Sean",
        "timestamp": 1597434208
    },
    {
        "content": "<p>hm, now cmake is failing</p>",
        "id": 206971364,
        "sender_full_name": "Sean",
        "timestamp": 1597434371
    },
    {
        "content": "<p>/me closes eyes in pain</p>",
        "id": 206971438,
        "sender_full_name": "starseeker",
        "timestamp": 1597434387
    },
    {
        "content": "<p>It's a build from scratch, but I wouldn't expect that necessarily for the minor changes just made.. don't yet see why it's actually halting.</p>",
        "id": 206971769,
        "sender_full_name": "Sean",
        "timestamp": 1597434453
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>agua:.build morrison$ make\n**********************************************************\n*** Configuring BRL-CAD Release 7.31.0, Build 20200814 ***\n**********************************************************\nX11 detected and enabled\nDefining HAVE_X11_XLIB_H\nDefining HAVE_X11_EXTENSIONS_XINPUT_H\n-- Could NOT find Appleseed (missing: Appleseed_INCLUDE_DIR Appleseed_LIBRARY)\n^[[D^[[D\n\n-------------------- BRL-CAD Release 7.31.0, Build 20200814 --------------------\n\n        Prefix: /usr/brlcad/dev-7.31.0\n      Binaries: /usr/brlcad/dev-7.31.0/bin\n     Libraries: /usr/brlcad/dev-7.31.0/lib\n  Manual pages: /usr/brlcad/dev-7.31.0/share/man\nData resources: /usr/brlcad/dev-7.31.0/share\n\nCC       = /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc\nCXX      = /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++\nCFLAGS   = -std=c11 -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -pipe\n           -fvisibility=hidden -fno-strict-aliasing -fno-common -fexceptions\n           -m64 -ggdb -Qunused-arguments -fstack-protector-all\n           -fno-omit-frame-pointer -pedantic -pedantic-errors -Wall -Wextra\n           -Wundef -Wfloat-equal -Wshadow -Wbad-function-cast -Wc++-compat\n           -Winline -Wno-long-long -Wno-variadic-macros -Wdocumentation\n           -Wno-c11-extensions -Werror\nCXXFLAGS = -std=c++11 -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -pipe\n           -fvisibility=hidden -fno-strict-aliasing -fno-common -fexceptions\n           -ftemplate-depth-128 -m64 -ggdb -Qunused-arguments\n           -fstack-protector-all -fno-omit-frame-pointer -pedantic -Wall\n           -Wextra -Wundef -Wfloat-equal -Wshadow -Wbad-function-cast -Winline\n           -Wno-long-long -Wno-variadic-macros -Wdocumentation\n           -Wno-c11-extensions -Werror\nLDFLAGS  = -m64 -ggdb\n\nCompile Tcl ........................: ON\nCompile Tk .........................: ON\nCompile Itcl/Itk ...................: ON\nCompile Iwidgets ...................: ON\nCompile Tkhtml .....................: ON\nCompile Tktable ....................: ON\nCompile libpng .....................: ON\nCompile libregex ...................: ON\nCompile zlib .......................: ON\nCompile Utah Raster Toolkit ........: ON\nCompile openNURBS ..................: ON\nCompile STEPcode....................: ON\n\nOpenGL support (optional) ..........: ON\nX11 support (optional) .............: ON\nQt support (optional) ..............: OFF\nRun-time debuggability (optional) ..: ON\n\nBuild 32/64-bit release ............: 64BIT (Auto)\nBuild optimized release ............: OFF\nBuild static libraries .............: ON\nBuild dynamic libraries ............: ON\nInstall example geometry models ....: ON\nGenerate extra docs ................: ON (html/man)\n\n\n&quot;/Users/morrison/brlcad.trunk/INSTALL&quot; is out of date.  An updated version has been generated at &quot;/Users/morrison/brlcad.trunk/.build/INSTALL.new&quot;\nTo clear this warning, replace &quot;/Users/morrison/brlcad.trunk/INSTALL&quot; with &quot;/Users/morrison/brlcad.trunk/.build/INSTALL.new&quot;\n\n\n&quot;/Users/morrison/brlcad.trunk/configure&quot; is out of date.  An updated version has been generated at &quot;/Users/morrison/brlcad.trunk/.build/configure.new&quot;\nTo clear this warning, replace &quot;/Users/morrison/brlcad.trunk/configure&quot; with &quot;/Users/morrison/brlcad.trunk/.build/configure.new&quot;\n\nCMake Error at misc/CMake/BRLCAD_Util.cmake:90 (_message):\n  Configure haulted.\nCall Stack (most recent call first):\n  CMakeLists.txt:3728 (message)\n\n\n-- Configuring incomplete, errors occurred!\nSee also &quot;/Users/morrison/brlcad.trunk/.build/CMakeFiles/CMakeOutput.log&quot;.\nSee also &quot;/Users/morrison/brlcad.trunk/.build/CMakeFiles/CMakeError.log&quot;.\n</code></pre></div>",
        "id": 206971930,
        "sender_full_name": "Sean",
        "timestamp": 1597434482
    },
    {
        "content": "<p>Oh.  For whatever reason, it's generated INSTALL and configure files that don't match the ones in the source tree</p>",
        "id": 206972199,
        "sender_full_name": "starseeker",
        "timestamp": 1597434534
    },
    {
        "content": "<p>I've gotten those messages about INSTALL and configure before, so I can't imagine it's those are causing the halt?</p>",
        "id": 206972212,
        "sender_full_name": "Sean",
        "timestamp": 1597434538
    },
    {
        "content": "<p>Plus it says they are warnings...</p>",
        "id": 206972264,
        "sender_full_name": "Sean",
        "timestamp": 1597434552
    },
    {
        "content": "<p>They're supposed to be fatal errors.  The only reason they're warnings is so we can check for both files before halting the configure</p>",
        "id": 206972430,
        "sender_full_name": "starseeker",
        "timestamp": 1597434586
    },
    {
        "content": "<p>what's the diff between INSTALL.new and INSTALL?</p>",
        "id": 206972747,
        "sender_full_name": "starseeker",
        "timestamp": 1597434649
    },
    {
        "content": "<p>Hm.  Is there not a way for it to at least report them as errors instead of warnings, and still check both?</p>",
        "id": 206972756,
        "sender_full_name": "Sean",
        "timestamp": 1597434652
    },
    {
        "content": "<p>We could alter the message that's printed</p>",
        "id": 206972876,
        "sender_full_name": "starseeker",
        "timestamp": 1597434689
    },
    {
        "content": "<p>CMakeLists.txt line 3702</p>",
        "id": 206972950,
        "sender_full_name": "starseeker",
        "timestamp": 1597434715
    },
    {
        "content": "<p>configure.new is missing all of the dependency toggles (e.g., --enable-scl, --enable-step, --enable-gdiam, etc)</p>",
        "id": 206973018,
        "sender_full_name": "Sean",
        "timestamp": 1597434723
    },
    {
        "content": "<p>O.o</p>",
        "id": 206973076,
        "sender_full_name": "starseeker",
        "timestamp": 1597434735
    },
    {
        "content": "<p>Which version of CMake are you using?</p>",
        "id": 206973137,
        "sender_full_name": "starseeker",
        "timestamp": 1597434750
    },
    {
        "content": "<p>that's the same problem with INSTALL.new .. they're all gone</p>",
        "id": 206973144,
        "sender_full_name": "Sean",
        "timestamp": 1597434752
    },
    {
        "content": "<p>cmake version 3.16.20200125-g33e7bd6</p>",
        "id": 206973229,
        "sender_full_name": "Sean",
        "timestamp": 1597434770
    },
    {
        "content": "<p>I wouldn't think that would be an issue...</p>",
        "id": 206973317,
        "sender_full_name": "starseeker",
        "timestamp": 1597434788
    },
    {
        "content": "<p>this was fine a week ago, so I'm not sure what changed</p>",
        "id": 206973335,
        "sender_full_name": "Sean",
        "timestamp": 1597434796
    },
    {
        "content": "<p>This is from a clean build dir?</p>",
        "id": 206973347,
        "sender_full_name": "starseeker",
        "timestamp": 1597434806
    },
    {
        "content": "<p>of course not, I have a lot of in-progress work in there</p>",
        "id": 206973420,
        "sender_full_name": "Sean",
        "timestamp": 1597434838
    },
    {
        "content": "<p>I can blow away the cmake bits though</p>",
        "id": 206973498,
        "sender_full_name": "Sean",
        "timestamp": 1597434857
    },
    {
        "content": "<p>Maybe try removing CMakeCache.txt</p>",
        "id": 206973521,
        "sender_full_name": "starseeker",
        "timestamp": 1597434866
    },
    {
        "content": "<p>rm -rfing cmake* CMake*</p>",
        "id": 206973561,
        "sender_full_name": "Sean",
        "timestamp": 1597434886
    },
    {
        "content": "<p>how is the INSTALL/configure file contents built up?  implies there's some bug there at least.</p>",
        "id": 206973796,
        "sender_full_name": "Sean",
        "timestamp": 1597434939
    },
    {
        "content": "<p>should be obvious/categoric</p>",
        "id": 206973941,
        "sender_full_name": "Sean",
        "timestamp": 1597434963
    },
    {
        "content": "<p>updated the error message</p>",
        "id": 206975091,
        "sender_full_name": "Sean",
        "timestamp": 1597435218
    },
    {
        "content": "<p>The BRLCAD_OPTION function in misc/CMake/BRLCAD_Options.cmake does that, calling some helper functions to generate the text.  BRLCAD_OPTION is usually invoked by ThirdParty.cmake</p>",
        "id": 206975540,
        "sender_full_name": "starseeker",
        "timestamp": 1597435349
    },
    {
        "content": "<p>looks like the OPTIONS file it wrote has them</p>",
        "id": 206975650,
        "sender_full_name": "Sean",
        "timestamp": 1597435408
    },
    {
        "content": "<p>at least now, wish I'd looked before running clean</p>",
        "id": 206975673,
        "sender_full_name": "Sean",
        "timestamp": 1597435418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/206975540\">said</a>:</p>\n<blockquote>\n<p>The BRLCAD_OPTION function in misc/CMake/BRLCAD_Options.cmake does that, calling some helper functions to generate the text.  BRLCAD_OPTION is usually invoked by ThirdParty.cmake</p>\n</blockquote>\n<p>Thanks, will see if I can catch it next time.</p>",
        "id": 206976062,
        "sender_full_name": "Sean",
        "timestamp": 1597435655
    },
    {
        "content": "<p>gah, now the X11 error again.  I really need to figure out what's wrong there.</p>",
        "id": 206976146,
        "sender_full_name": "Sean",
        "timestamp": 1597435700
    },
    {
        "content": "<p>I'm not too surprised if you're running for long periods of time in the same build dir without clearing it - that's not a mode I usually work in (it tends to produce weird intermediate build system states that are hard to debug) so I won't usually know ahead of time if those issues are in there...</p>",
        "id": 206976214,
        "sender_full_name": "starseeker",
        "timestamp": 1597435754
    },
    {
        "content": "<p>Clearing the CMake files should do it though.</p>",
        "id": 206976384,
        "sender_full_name": "starseeker",
        "timestamp": 1597435862
    },
    {
        "content": "<p>I know, you say that every time.  To me it's a mode we've always supported and that's even worked in our cmake era robustly-enough until relatively recently.</p>",
        "id": 206976394,
        "sender_full_name": "Sean",
        "timestamp": 1597435867
    },
    {
        "content": "<p>maybe an indication that issues are piling up, maybe just random chance, but it is absolutely more unproductive time if I have to wait for cmake to fully re-run every single time.  these failures aren't that often, so they really should be isolated issues.</p>",
        "id": 206976515,
        "sender_full_name": "Sean",
        "timestamp": 1597435962
    },
    {
        "content": "<p>the fact that it works at least 9/10 times is a testament that it can work and usually does</p>",
        "id": 206976568,
        "sender_full_name": "Sean",
        "timestamp": 1597436002
    },
    {
        "content": "<p>or 19/20, whatever it is</p>",
        "id": 206976583,
        "sender_full_name": "Sean",
        "timestamp": 1597436016
    },
    {
        "content": "<p>Heh.  OK, fair enough - I don't re-run every time either.  Hopefully clearing the CMake files will right the ship</p>",
        "id": 206976696,
        "sender_full_name": "starseeker",
        "timestamp": 1597436082
    },
    {
        "content": "<p>case in point, I have to wait another 10 minutes (5min into compile, 5 to re-run cmake) to re-run because default build has been non-functional since the tcl upgrade.  have to enable all and run cmake again, then rebuild.</p>",
        "id": 206976751,
        "sender_full_name": "Sean",
        "timestamp": 1597436146
    },
    {
        "content": "<p>ugh, and it doesn't help when I typo the darn var name like I just did and have to wait for cmake yet again...</p>",
        "id": 206976818,
        "sender_full_name": "Sean",
        "timestamp": 1597436182
    },
    {
        "content": "<p>/me nods.  That's a good point - I forget how slow it is to run CMake on the mac.  I'm spoiled on Linux - it's fast enough there to be a much less severe pain point.</p>",
        "id": 206976897,
        "sender_full_name": "starseeker",
        "timestamp": 1597436235
    },
    {
        "content": "<p>The github macOS runner does build successfully - maybe because it doesn't have Tk enabled?</p>",
        "id": 206976998,
        "sender_full_name": "starseeker",
        "timestamp": 1597436292
    },
    {
        "content": "<p>even when I'm on the 128 core linux box and compile takes 2min, it's annoying that cmake takes 2 min too :)</p>",
        "id": 206977016,
        "sender_full_name": "Sean",
        "timestamp": 1597436309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/206976998\">said</a>:</p>\n<blockquote>\n<p>The github macOS runner does build successfully - maybe because it doesn't have Tk enabled?</p>\n</blockquote>\n<p>probably, I don't remember the specifics.  I spent time debugging months back, but didn't get it resolved.  it was broken on the branch and working on trunk and it'd been merged, so I didn't look too much into it.  eventually appeared on trunk too.</p>",
        "id": 206977232,
        "sender_full_name": "Sean",
        "timestamp": 1597436458
    },
    {
        "content": "<p>I wish Mac had some kind of remote open source development environments we could set up with for testing - the main environment I <em>can't</em> test is the one you use as your primary environment.</p>",
        "id": 206977261,
        "sender_full_name": "starseeker",
        "timestamp": 1597436473
    },
    {
        "content": "<p>Short of buying a Mac (which I suppose is what Apple wants) it's a conundrum</p>",
        "id": 206977291,
        "sender_full_name": "starseeker",
        "timestamp": 1597436498
    },
    {
        "content": "<p>Even the github CI doesn't seem to help much</p>",
        "id": 206977391,
        "sender_full_name": "starseeker",
        "timestamp": 1597436549
    },
    {
        "content": "<p>I think cmake is doing the right thing -- it found a viable system Tcl/Tk.  the problem (I think) is that it's finding Tk's X11 stub headers before the actual system X11 headers.</p>",
        "id": 206977393,
        "sender_full_name": "Sean",
        "timestamp": 1597436553
    },
    {
        "content": "<p>I've seen both compilation and linkage errors, so likely two issues.</p>",
        "id": 206977433,
        "sender_full_name": "Sean",
        "timestamp": 1597436577
    },
    {
        "content": "<p>Oh.  That reminds me of the fink/macports issues - I never did know what the \"right\" answer to that was.  I ended up forcing an ordering, but I think you really didn't like what I did... it was pretty quirky/custom and specific to that setup.</p>",
        "id": 206977501,
        "sender_full_name": "starseeker",
        "timestamp": 1597436620
    },
    {
        "content": "<p>Example build output (parallel unfortunately so it's a bit messy to read):</p>",
        "id": 206977613,
        "sender_full_name": "Sean",
        "timestamp": 1597436669
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[ 61%] Building CXX object src/gtools/CMakeFiles/glint.dir/glint.cpp.o\nScanning dependencies of target gex\nScanning dependencies of target libdm\n[ 61%] Linking CXX shared library ../../lib/libdm.dylib\n[ 61%] Linking C executable gtransfer\n[ 61%] Building CXX object src/gtools/CMakeFiles/gex.dir/gex.cpp.o\n[ 61%] Linking C executable ../../../bin/vdeck\n[ 61%] Built target gtransfer\nScanning dependencies of target libwdb\n[ 61%] Built target libdm\n[ 61%] Linking CXX shared library ../../lib/libwdb.dylib\nScanning dependencies of target liboptical\n[ 61%] Linking C shared library ../../lib/liboptical.dylib\n[ 61%] Built target vdeck\n[ 61%] Linking CXX static library ../../lib/libdm.a\n[ 61%] Built target libwdb\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: ../../lib/libdm.a(knob.c.o) has no symbols\nScanning dependencies of target dm-X\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: ../../lib/libdm.a(knob.c.o) has no symbols\n[ 61%] Built target liboptical\n[ 61%] Built target libdm-static\nScanning dependencies of target dm-ogl\nScanning dependencies of target dm-plot\nScanning dependencies of target dm-ps\n[ 61%] Building C object src/libdm/X/CMakeFiles/dm-X.dir/dm-X.c.o\n[ 61%] Building C object src/libdm/plot/CMakeFiles/dm-plot.dir/dm-plot.c.o\n[ 61%] Building C object src/libdm/postscript/CMakeFiles/dm-ps.dir/dm-ps.c.o\n[ 61%] Linking CXX executable gen-attributes-file\n[ 61%] Building C object src/libdm/glx/CMakeFiles/dm-ogl.dir/dm-ogl.c.o\n[ 61%] Built target libanalyze-obj\n[ 61%] Built target gen-attributes-file\n[ 61%] Building C object src/libdm/X/CMakeFiles/dm-X.dir/color.c.o\nScanning dependencies of target dm-txt\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:118:10: error: implicit\n      declaration of function &#39;XAllocColor&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n    st = XAllocColor(dpy, cmap, color);\n         ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:182:5: error: implicit\n      declaration of function &#39;XGetWindowAttributes&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n    XGetWindowAttributes(pubvars-&gt;dpy,\n    ^\n/Users/morrison/brlcad.trunk/src/libdm/X/color.c:88:5: error: implicit\n      declaration of function &#39;XQueryColors&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n    XQueryColors(dpy, src, colors, ncolors);\n    ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:212:7: error: implicit\n      declaration of function &#39;XLoadQueryFont&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n             XLoadQueryFont(pubvars-&gt;dpy, FONT9)) == NULL) {\n             ^\n/Users/morrison/brlcad.trunk/src/libdm/X/color.c:91:2: error: implicit\n      declaration of function &#39;XStoreColors&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n        XStoreColors(dpy, dest, colors, ncolors);\n        ^\n/Users/morrison/brlcad.trunk/src/libdm/X/color.c:91:2: note: did you mean\n      &#39;XQueryColors&#39;?\n/Users/morrison/brlcad.trunk/src/libdm/X/color.c:88:5: note: &#39;XQueryColors&#39;\n      declared here\n    XQueryColors(dpy, src, colors, ncolors);\n    ^\n/Users/morrison/brlcad.trunk/src/libdm/X/color.c:94:6: error: implicit\n      declaration of function &#39;XAllocColor&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n            XAllocColor(dpy, dest, &amp;colors[i]);\n            ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:211:27: error: incompatible\n      integer to pointer conversion assigning to &#39;XFontStruct *&#39; from &#39;int&#39;\n      [-Werror,-Wint-conversion]\n        if ((pubvars-&gt;fontstruct =\n                                 ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:214:31: error: incompatible\n      integer to pointer conversion assigning to &#39;XFontStruct *&#39; from &#39;int&#39;\n      [-Werror,-Wint-conversion]\n            if ((pubvars-&gt;fontstruct =\n                                     ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:222:2: error: implicit\n      declaration of function &#39;XChangeGC&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n        XChangeGC(pubvars-&gt;dpy,\n        ^\n/Users/morrison/brlcad.trunk/src/libdm/X/color.c:139:7: error: implicit\n      declaration of function &#39;XStoreColor&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n                    XStoreColor(dpy, cmap, &amp;color);\n                    ^\n/Users/morrison/brlcad.trunk/src/libdm/X/color.c:141:7: error: implicit\n      declaration of function &#39;XAllocColor&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n                    XAllocColor(dpy, cmap, &amp;color);\n                    ^\n5 errors generated.\nmake[2]: *** [src/libdm/X/CMakeFiles/dm-X.dir/color.c.o] Error 1\nmake[2]: *** Waiting for unfinished jobs....\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:231:27: error: implicit\n      declaration of function &#39;XLoadQueryFont&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n            if ((newfontstruct = XLoadQueryFont(pubvars-&gt;dpy,\n                                 ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:231:25: error: incompatible\n      integer to pointer conversion assigning to &#39;XFontStruct *&#39; from &#39;int&#39;\n      [-Werror,-Wint-conversion]\n            if ((newfontstruct = XLoadQueryFont(pubvars-&gt;dpy,\n                               ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:233:3: error: implicit\n      declaration of function &#39;XFreeFont&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n                XFreeFont(pubvars-&gt;dpy,\n                ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:233:3: note: did you mean\n      &#39;Tk_FreeFont&#39;?\n/Users/morrison/brlcad.trunk/.build/include/tkDecls.h:270:14: note:\n      &#39;Tk_FreeFont&#39; declared here\nEXTERN void             Tk_FreeFont(Tk_Font f);\n                        ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:237:3: error: implicit\n      declaration of function &#39;XChangeGC&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n                XChangeGC(pubvars-&gt;dpy,\n                ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:243:27: error: implicit\n      declaration of function &#39;XLoadQueryFont&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n            if ((newfontstruct = XLoadQueryFont(pubvars-&gt;dpy,\n                                 ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:243:25: error: incompatible\n      integer to pointer conversion assigning to &#39;XFontStruct *&#39; from &#39;int&#39;\n      [-Werror,-Wint-conversion]\n            if ((newfontstruct = XLoadQueryFont(pubvars-&gt;dpy,\n                               ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:245:3: error: implicit\n      declaration of function &#39;XFreeFont&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n                XFreeFont(pubvars-&gt;dpy,\n                ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:249:3: error: implicit\n      declaration of function &#39;XChangeGC&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n                XChangeGC(pubvars-&gt;dpy,\n                ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:255:27: error: implicit\n      declaration of function &#39;XLoadQueryFont&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n            if ((newfontstruct = XLoadQueryFont(pubvars-&gt;dpy,\n                                 ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:255:25: error: incompatible\n      integer to pointer conversion assigning to &#39;XFontStruct *&#39; from &#39;int&#39;\n      [-Werror,-Wint-conversion]\n            if ((newfontstruct = XLoadQueryFont(pubvars-&gt;dpy,\n                               ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:257:3: error: implicit\n      declaration of function &#39;XFreeFont&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n                XFreeFont(pubvars-&gt;dpy,\n                ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:261:3: error: implicit\n      declaration of function &#39;XChangeGC&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n                XChangeGC(pubvars-&gt;dpy,\n                ^\n/Users/morrison/brlcad.trunk/src/libdm/X/dm-X.c:267:27: error: implicit\n      declaration of function &#39;XLoadQueryFont&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n            if ((newfontstruct = XLoadQueryFont(pubvars-&gt;dpy,\n                                 ^\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n[ 61%] Building C object src/libdm/glx/CMakeFiles/dm-ogl.dir/if_ogl.c.o\n20 errors generated.\nmake[2]: *** [src/libdm/X/CMakeFiles/dm-X.dir/dm-X.c.o] Error 1\nmake[1]: *** [src/libdm/X/CMakeFiles/dm-X.dir/all] Error 2\nmake[1]: *** Waiting for unfinished jobs....\n[ 61%] Linking C shared library ../../../libexec/dm/libdm-ps.dylib\n[ 61%] Linking C shared library ../../../libexec/dm/libdm-plot.dylib\n[ 61%] Building C object src/libdm/txt/CMakeFiles/dm-txt.dir/if_debug.c.o\n[ 61%] Building C object src/libdm/txt/CMakeFiles/dm-txt.dir/dm-txt.c.o\n/Users/morrison/brlcad.trunk/src/libdm/glx/dm-ogl.c:236:5: error: implicit\n      declaration of function &#39;XGetWindowAttributes&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n    XGetWindowAttributes(pubvars-&gt;dpy,\n    ^\n[ 61%] Built target libgcv_fastgen4-obj\n/Users/morrison/brlcad.trunk/src/libdm/glx/dm-ogl.c:250:7: error: implicit\n      declaration of function &#39;XLoadQueryFont&#39; is invalid in C99\n      [-Werror,-Wimplicit-function-declaration]\n             XLoadQueryFont(pubvars-&gt;dpy,\n             ^\n/Users/morrison/brlcad.trunk/src/libdm/glx/dm-ogl.c:249:27: error: incompatible\n      integer to pointer conversion assigning to &#39;XFontStruct *&#39; from &#39;int&#39;\n      [-Werror,-Wint-conversion]\n        if ((pubvars-&gt;fontstruct =\n                                 ^\n</code></pre></div>",
        "id": 206977632,
        "sender_full_name": "Sean",
        "timestamp": 1597436681
    },
    {
        "content": "<p>Would putting the X11 header includes before the Tk includes deal with that?</p>",
        "id": 206977831,
        "sender_full_name": "starseeker",
        "timestamp": 1597436779
    },
    {
        "content": "<p>I actually don't know the status of fink/macports... homebrew kind of took over that market</p>",
        "id": 206977834,
        "sender_full_name": "Sean",
        "timestamp": 1597436781
    },
    {
        "content": "<p>maybe, like I said, I didn't dig</p>",
        "id": 206977850,
        "sender_full_name": "Sean",
        "timestamp": 1597436791
    },
    {
        "content": "<p>/me looks...</p>",
        "id": 206977884,
        "sender_full_name": "starseeker",
        "timestamp": 1597436810
    },
    {
        "content": "<p>looks like at least for dm-ogl.c that they're already first</p>",
        "id": 206977964,
        "sender_full_name": "Sean",
        "timestamp": 1597436871
    },
    {
        "content": "<p>probably need to do a header-trace to see where the declarations are coming from (or not coming from)</p>",
        "id": 206978069,
        "sender_full_name": "Sean",
        "timestamp": 1597436928
    },
    {
        "content": "<p>hah, that's great! (just saw the benchmark results)</p>",
        "id": 206978152,
        "sender_full_name": "Sean",
        "timestamp": 1597436994
    },
    {
        "content": "<p>\"Run 'C:/RELEASE-build/Release/bin/benchmark clean' to remove generated pix files.\" ... Seeing a windows path there might be a first</p>",
        "id": 206978259,
        "sender_full_name": "Sean",
        "timestamp": 1597437028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> one thing to make sure of with the plugins is that any stale .so files are cleared out of the libexec directory - if they aren't removed they'll stand a decent change of causing problems.</p>",
        "id": 206978645,
        "sender_full_name": "starseeker",
        "timestamp": 1597437262
    },
    {
        "content": "<p>src/libdm/tests/dm_test is my \"diagnostic\" goto to figure out what's going on, at least with the libdm plugins.</p>",
        "id": 206978726,
        "sender_full_name": "starseeker",
        "timestamp": 1597437306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/206978645\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> one thing to make sure of with the plugins is that any stale .so files are cleared out of the libexec directory - if they aren't removed they'll stand a decent change of causing problems.</p>\n</blockquote>\n<p>Why is that?  None of the other binary products have an issue with that I'm aware of.</p>",
        "id": 206983102,
        "sender_full_name": "Sean",
        "timestamp": 1597439776
    },
    {
        "content": "<p>that's not something i'm likely going to remember a month from now, so if something isn't stable, that should get fixed.</p>",
        "id": 206983290,
        "sender_full_name": "Sean",
        "timestamp": 1597439919
    },
    {
        "content": "<p>The library initializes at runtime, looking for whatever .so files are in the directory.  It has no way of knowing what is and isn't a stale file.</p>",
        "id": 206985974,
        "sender_full_name": "starseeker",
        "timestamp": 1597441767
    },
    {
        "content": "<p>what does stale mean in that context?  I would still expect the plugins to recompile if they were changed</p>",
        "id": 206986195,
        "sender_full_name": "Sean",
        "timestamp": 1597441919
    },
    {
        "content": "<p>even with dynamic loading, it's possible to detect actual incompatibility and we may need to if this is a potential issue</p>",
        "id": 206986425,
        "sender_full_name": "Sean",
        "timestamp": 1597442051
    },
    {
        "content": "<p>I'm not sure what staleness potential you're referring to though..</p>",
        "id": 206986446,
        "sender_full_name": "Sean",
        "timestamp": 1597442065
    },
    {
        "content": "<p>Stale would be a plugin file that dates to an older build (say, a dm backend that was removed from the build and then the plugin API changed.)  Attempting to load the old .so file in that case wouldn't work.</p>",
        "id": 206986654,
        "sender_full_name": "starseeker",
        "timestamp": 1597442261
    },
    {
        "content": "<p>Also might be an issue if the .so file linked to older versions of BRL-CAD libraries that no longer are compatible with the current environment.</p>",
        "id": 206986744,
        "sender_full_name": "starseeker",
        "timestamp": 1597442312
    },
    {
        "content": "<p>well, so that's a different issue no?  that's got nothing to do with my build dir and needing to remember to wipe out .so files</p>",
        "id": 206986806,
        "sender_full_name": "Sean",
        "timestamp": 1597442385
    },
    {
        "content": "<p>unless you just recently changed the plugin interface and I only partially recompile, that's not so much a concern.  the headers will have changed and the plugins will recompile (at least I would expect them to)</p>",
        "id": 206986902,
        "sender_full_name": "Sean",
        "timestamp": 1597442450
    },
    {
        "content": "<p>Well, if you do a lot of builds over time in a build dir without doing make clean, it's possible to accumulate such files (similar to how stale symlinks were sometimes left over).  The scenario I was thinking of:</p>\n<ol>\n<li>Build plugins</li>\n<li>Remove (say) the plot backend from the CMake build.</li>\n<li>Change plugin API.</li>\n<li>Rebuild.</li>\n</ol>\n<p>The old libdm plot plugin would still be in libexec in that scenario.</p>",
        "id": 206987036,
        "sender_full_name": "starseeker",
        "timestamp": 1597442538
    },
    {
        "content": "<p>I see, so how about preventing that then.  sounds like this is a new category of concern.</p>",
        "id": 206987152,
        "sender_full_name": "Sean",
        "timestamp": 1597442652
    },
    {
        "content": "<p>I'm open to suggestions...</p>",
        "id": 206987182,
        "sender_full_name": "starseeker",
        "timestamp": 1597442681
    },
    {
        "content": "<p>could prevent it just by putting a plugin api version number into the header file.  if the loaded version is less, skips that plugin.  just have to remember to bump the api version whenever the calling interface changes.</p>",
        "id": 206987221,
        "sender_full_name": "Sean",
        "timestamp": 1597442718
    },
    {
        "content": "<p>could make the api number simply be the composite of the version number -- that way they're always locked to their compiled version only.</p>",
        "id": 206987354,
        "sender_full_name": "Sean",
        "timestamp": 1597442802
    },
    {
        "content": "<p>So it would be a \"bu_dlsym\" to look for something like \"dm_api_version\" from the plugin?</p>",
        "id": 206987513,
        "sender_full_name": "starseeker",
        "timestamp": 1597442943
    },
    {
        "content": "<p>something like:  </p>\n<div class=\"codehilite\"><pre><span></span><code>#define DM_API ((BRLCAD_MAJOR*10000) + (BRLCAD_MINOR*100) + BRLCAD_PATCH)\n</code></pre></div>\n\n\n<p>so 7.32.12 becomes api version 703212</p>",
        "id": 206987555,
        "sender_full_name": "Sean",
        "timestamp": 1597442994
    },
    {
        "content": "<p>you'll have to make it plugin-specific, like an: int dm_ogl_version=DM_API;<br>\nthen bu_dlsym that out after loading the plugin, before looking at any symbols</p>",
        "id": 206987714,
        "sender_full_name": "Sean",
        "timestamp": 1597443097
    },
    {
        "content": "<p>if var &lt; DM_API, skip it</p>",
        "id": 206987741,
        "sender_full_name": "Sean",
        "timestamp": 1597443123
    },
    {
        "content": "<p>heck, could start if var != DM_API, skip it</p>",
        "id": 206987789,
        "sender_full_name": "Sean",
        "timestamp": 1597443139
    },
    {
        "content": "<p>Why plugin specific?</p>",
        "id": 206987792,
        "sender_full_name": "starseeker",
        "timestamp": 1597443143
    },
    {
        "content": "<p>that ties the variable name to the file name of the plugin...</p>",
        "id": 206987841,
        "sender_full_name": "starseeker",
        "timestamp": 1597443183
    },
    {
        "content": "<p>oh my, you're using the same symbol names across all plugins??</p>",
        "id": 206988013,
        "sender_full_name": "Sean",
        "timestamp": 1597443294
    },
    {
        "content": "<p>ah, I see, yes and no</p>",
        "id": 206988058,
        "sender_full_name": "Sean",
        "timestamp": 1597443322
    },
    {
        "content": "<p>they symbols are all unique, but in a dm_plugin pinfo struct</p>",
        "id": 206988093,
        "sender_full_name": "Sean",
        "timestamp": 1597443346
    },
    {
        "content": "<p>Yes.  That's a single point of entry - went that way for simplicity.</p>",
        "id": 206988196,
        "sender_full_name": "starseeker",
        "timestamp": 1597443389
    },
    {
        "content": "<p>hm, well that is fine for now I guess but it's a little awkward for dynamic libs to do that.  I don't think that's entirely portable in the general case for dlsym, though those cases aren't necessarily a major concern any more.</p>",
        "id": 206988342,
        "sender_full_name": "Sean",
        "timestamp": 1597443485
    },
    {
        "content": "<p>it's the same reason why Tcl has the library name the loading function specifically LIB_Init()</p>",
        "id": 206988423,
        "sender_full_name": "Sean",
        "timestamp": 1597443547
    },
    {
        "content": "<p>it also precludes portability to any new systems that don't (yet) support dynamic libraries and precludes static linking if for some case we later need/want that.</p>",
        "id": 206988494,
        "sender_full_name": "Sean",
        "timestamp": 1597443601
    },
    {
        "content": "<p>OS X was out for years before they added support for dynamic libs for example.  now Mac does, of course, but the potential for other/new OS environments is definitely still a modern concern.</p>",
        "id": 206988626,
        "sender_full_name": "Sean",
        "timestamp": 1597443681
    },
    {
        "content": "<p>we can cross that bring later.  it's trivial to change pinfo to ogl_pinfo or whatever, and to change the version var.</p>",
        "id": 206988690,
        "sender_full_name": "Sean",
        "timestamp": 1597443722
    },
    {
        "content": "<p>hm, it will screw with tags (msvc, emacs, vim jump-to-symbol/definition support) so maybe still something to consider</p>",
        "id": 206988799,
        "sender_full_name": "Sean",
        "timestamp": 1597443785
    },
    {
        "content": "<p>would simplify the code by eliminating the preprocessor conditional, one benefit</p>",
        "id": 206988924,
        "sender_full_name": "Sean",
        "timestamp": 1597443849
    },
    {
        "content": "<p>Are those environments capable of following those linkages?  I figured as a runtime-only connection they were left out anyway...</p>",
        "id": 206988931,
        "sender_full_name": "starseeker",
        "timestamp": 1597443853
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 206989051,
        "sender_full_name": "Sean",
        "timestamp": 1597443947
    },
    {
        "content": "<p>I just am not clear what conditions would allow emacs/vim to jump to the name - as a plugin, wouldn't it just be a pointer anyway?</p>",
        "id": 206989169,
        "sender_full_name": "starseeker",
        "timestamp": 1597444015
    },
    {
        "content": "<p>the editors?  they can certainly follow a symbol if I'm looking at a header on struct dm_plugin and ask it to show me the definition</p>",
        "id": 206989172,
        "sender_full_name": "Sean",
        "timestamp": 1597444016
    },
    {
        "content": "<p>it's going to jump to one of them</p>",
        "id": 206989182,
        "sender_full_name": "Sean",
        "timestamp": 1597444024
    },
    {
        "content": "<p>some do dynamic symbol searching, some do string matching</p>",
        "id": 206989228,
        "sender_full_name": "Sean",
        "timestamp": 1597444072
    },
    {
        "content": "<p>(most do the latter I think, especially the 'tags' system)</p>",
        "id": 206989329,
        "sender_full_name": "Sean",
        "timestamp": 1597444110
    },
    {
        "content": "<p>OK, so just directly (say) return dm_ogl instead of pinfo</p>",
        "id": 206989369,
        "sender_full_name": "starseeker",
        "timestamp": 1597444134
    },
    {
        "content": "<p>Except I thought we needed that static wrapper</p>",
        "id": 206989393,
        "sender_full_name": "starseeker",
        "timestamp": 1597444155
    },
    {
        "content": "<p>it's whatever symbol you load -- I'm guessing you load \"dm_plugin_info\" currently, so that would change to \"dm_ogl_plugin\" or whatever.  that pinfo struct is already static so it's not going to collide with anything, even if compiled static.</p>",
        "id": 206989566,
        "sender_full_name": "Sean",
        "timestamp": 1597444270
    },
    {
        "content": "<p>OK.  So I just need something then to make sure the names match the filenames (so the init function knows what to ask for for any given file)</p>",
        "id": 206989648,
        "sender_full_name": "starseeker",
        "timestamp": 1597444323
    },
    {
        "content": "<p>could put the version field right into the dm_impl as the first field</p>",
        "id": 206989676,
        "sender_full_name": "Sean",
        "timestamp": 1597444354
    },
    {
        "content": "<p>then you dont' need to actually introduce another lookup</p>",
        "id": 206989691,
        "sender_full_name": "Sean",
        "timestamp": 1597444364
    },
    {
        "content": "<p>Sort of like the bu_magic trick?</p>",
        "id": 206989727,
        "sender_full_name": "starseeker",
        "timestamp": 1597444407
    },
    {
        "content": "<p>sort of</p>",
        "id": 206989735,
        "sender_full_name": "Sean",
        "timestamp": 1597444415
    },
    {
        "content": "<p>I take it we should get this in pre-release?</p>",
        "id": 206989826,
        "sender_full_name": "starseeker",
        "timestamp": 1597444483
    },
    {
        "content": "<p>I would .. this is going to be 7.32 right?</p>",
        "id": 206989868,
        "sender_full_name": "Sean",
        "timestamp": 1597444556
    },
    {
        "content": "<p>seems pretty major</p>",
        "id": 206989914,
        "sender_full_name": "Sean",
        "timestamp": 1597444565
    },
    {
        "content": "<p>Yes.  (Or what's in RELEASE will be, at any rate - I branched off of trunk a while back.)</p>",
        "id": 206989928,
        "sender_full_name": "starseeker",
        "timestamp": 1597444581
    },
    {
        "content": "<p>also warrants a NEWS mention I think, dynamic behavior is a user-visible architecture change</p>",
        "id": 206989988,
        "sender_full_name": "Sean",
        "timestamp": 1597444639
    },
    {
        "content": "<p>OK - I'll hit that first, then see if I can make rtweight do something saner.</p>",
        "id": 206989992,
        "sender_full_name": "starseeker",
        "timestamp": 1597444641
    },
    {
        "content": "<p>Really?  I had thought if I got it right the user wouldn't notice anything...</p>",
        "id": 206990015,
        "sender_full_name": "starseeker",
        "timestamp": 1597444667
    },
    {
        "content": "<p>you're right, user shouldn't -- but it's a different runtime and exposure profile, and definitely results in different runtime behavior when something is not what we expected</p>",
        "id": 206990575,
        "sender_full_name": "Sean",
        "timestamp": 1597445169
    },
    {
        "content": "<p>it's like when we made shaders optionally load dynamically.  user didn't necessarily see that except it resulted in dynamic load failure messages when a typo'd shader name wasn't found.  not something that was anticipated, but the arch change was user visible and the messages obviously could be traced to it's introduction.</p>",
        "id": 206990622,
        "sender_full_name": "Sean",
        "timestamp": 1597445253
    },
    {
        "content": "<p>documented</p>",
        "id": 206990834,
        "sender_full_name": "Sean",
        "timestamp": 1597445466
    },
    {
        "content": "<p>so same deal for the ged commands</p>",
        "id": 206990966,
        "sender_full_name": "starseeker",
        "timestamp": 1597445640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> was <a href=\"https://sourceforge.net/p/brlcad/code/76767/\">https://sourceforge.net/p/brlcad/code/76767/</a> what you were thinking (more or less)?</p>",
        "id": 206996667,
        "sender_full_name": "starseeker",
        "timestamp": 1597451807
    },
    {
        "content": "<p>(Want to settle on a pattern before I do libged, that'll be more painful...)</p>",
        "id": 206996734,
        "sender_full_name": "starseeker",
        "timestamp": 1597451883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/206996667\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> was <a href=\"https://sourceforge.net/p/brlcad/code/76767/\">https://sourceforge.net/p/brlcad/code/76767/</a> what you were thinking (more or less)?</p>\n</blockquote>\n<p>Yes, that's spot on!  You could even make it an explicit plugin-&gt;api_version check if you want to support the version moving around the struct, but what you have checking the first byte is a good contract to require too.</p>",
        "id": 207023657,
        "sender_full_name": "Sean",
        "timestamp": 1597500823
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>2020-08-15T14:51:35.0885582Z /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_debug/brlcad-7.31.0/include/bu/magic.h:244:21: error: the address of ‘jaunt_tbl’ will always evaluate as ‘true’ [-Werror=address]\n2020-08-15T14:51:35.0886308Z      if (UNLIKELY(( (!(_ptr)) /* non-NULL pointer */ \\\n2020-08-15T14:51:35.0886756Z                      ^\n2020-08-15T14:51:35.0887896Z /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_debug/brlcad-7.31.0/include/common.h:364:50: note: in definition of macro ‘UNLIKELY’\n2020-08-15T14:51:35.0888280Z  #  define UNLIKELY(expression) __builtin_expect((expression), 0)\n2020-08-15T14:51:35.0888663Z                                                   ^~~~~~~~~~\n2020-08-15T14:51:35.0889257Z /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_debug/brlcad-7.31.0/include/bu/ptbl.h:65:24: note: in expansion of macro ‘BU_CKMAG’\n2020-08-15T14:51:35.0889945Z  #define BU_CK_PTBL(_p) BU_CKMAG(_p, BU_PTBL_MAGIC, &quot;bu_ptbl&quot;)\n2020-08-15T14:51:35.0890236Z                         ^~~~~~~~\n2020-08-15T14:51:35.0890818Z /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_debug/brlcad-7.31.0/src/libnmg/mod.c:3061:2: note: in expansion of macro ‘BU_CK_PTBL’\n2020-08-15T14:51:35.0891507Z   BU_CK_PTBL(&amp;jaunt_tbl);\n</code></pre></div>",
        "id": 207025799,
        "sender_full_name": "starseeker",
        "timestamp": 1597504421
    },
    {
        "content": "<p>Oh, I see - r76785</p>",
        "id": 207026093,
        "sender_full_name": "starseeker",
        "timestamp": 1597504917
    },
    {
        "content": "<p>If we want the extra test, maybe devise a configure time check to see whether the platform in question lets us do it without the error?</p>",
        "id": 207026148,
        "sender_full_name": "starseeker",
        "timestamp": 1597504983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> What issues do you know of that you would consider release blockers?</p>",
        "id": 207047026,
        "sender_full_name": "starseeker",
        "timestamp": 1597538564
    },
    {
        "content": "<p>ah, right, constant expression.  hrm.</p>",
        "id": 207083139,
        "sender_full_name": "Sean",
        "timestamp": 1597602635
    },
    {
        "content": "<p>I have vague recollection of that issue being the reason it was removed now too..</p>",
        "id": 207083201,
        "sender_full_name": "Sean",
        "timestamp": 1597602737
    },
    {
        "content": "<p>can you recheck the runner with the latest? trying a different approach.</p>",
        "id": 207083915,
        "sender_full_name": "Sean",
        "timestamp": 1597604020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/207047026\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> What issues do you know of that you would consider release blockers?</p>\n</blockquote>\n<p>rtweight no longer reporting volume unless there's a material defined is pretty significant change.  the spew wouldn't be a blocker, but I think lacking a report is.  also didn't seem to be outputting the report when run from mged -c, but I'd need to verify with a clean build.</p>",
        "id": 207084066,
        "sender_full_name": "Sean",
        "timestamp": 1597604158
    },
    {
        "content": "<p>only issue that come to mind is peer review isn't yet complete on all outstanding commits, and that's supposed to be a blocker for IA compliance, particularly it it's a build intended to be deployed (which I think it is, yes?)  I think I can get through the remaining commits by tuesday if you can hold off tagging.</p>",
        "id": 207084135,
        "sender_full_name": "Sean",
        "timestamp": 1597604263
    },
    {
        "content": "<p>also, still seeing this:</p>",
        "id": 207084174,
        "sender_full_name": "Sean",
        "timestamp": 1597604288
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[ 80%] Linking C shared library ../../../libexec/dm/libdm-ps.dylib\nUndefined symbols for architecture x86_64:\n  &quot;_Tcl_AppendStringsToObj&quot;, referenced from:\n      _ps_open in dm-ps.c.o\n      _ps_loadMatrix in dm-ps.c.o\n  &quot;_Tcl_DuplicateObj&quot;, referenced from:\n      _ps_open in dm-ps.c.o\n      _ps_loadMatrix in dm-ps.c.o\n  &quot;_Tcl_GetObjResult&quot;, referenced from:\n      _ps_open in dm-ps.c.o\n      _ps_loadMatrix in dm-ps.c.o\n  &quot;_Tcl_SetObjResult&quot;, referenced from:\n      _ps_open in dm-ps.c.o\n      _ps_loadMatrix in dm-ps.c.o\n</code></pre></div>",
        "id": 207084177,
        "sender_full_name": "Sean",
        "timestamp": 1597604295
    },
    {
        "content": "<p>Huh, that means it's still not linking Tcl - I thought I fixed that.</p>",
        "id": 207084234,
        "sender_full_name": "starseeker",
        "timestamp": 1597604326
    },
    {
        "content": "<p>I saw the commit and thought so too.  it's re-run cmake cleanly since.</p>",
        "id": 207084249,
        "sender_full_name": "Sean",
        "timestamp": 1597604350
    },
    {
        "content": "<p>Yeah, I can hold off til tuesday - still banging my head on the Ninja Windows build anyway (The msbuild run on the runner is less than 100% reliable, so far...)</p>",
        "id": 207084274,
        "sender_full_name": "starseeker",
        "timestamp": 1597604378
    },
    {
        "content": "<p>That's really strange then.  Is TCL_LIBRARY set correctly in CMakeCache.txt?</p>",
        "id": 207084361,
        "sender_full_name": "starseeker",
        "timestamp": 1597604407
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>agua:.build morrison$ grep TCL_LIBRARY CMakeCache.txt\n//ITCL_LIBRARY\nITCL_LIBRARY:STRING=itcl\n//TCL_LIBRARY\nTCL_LIBRARY:STRING=tcl\n//TCL_LIBRARY\n//ADVANCED property for variable: ITCL_LIBRARY\nITCL_LIBRARY-ADVANCED:INTERNAL=1\n//ADVANCED property for variable: TCL_LIBRARY\nTCL_LIBRARY-ADVANCED:INTERNAL=1\n</code></pre></div>",
        "id": 207084395,
        "sender_full_name": "Sean",
        "timestamp": 1597604448
    },
    {
        "content": "<p>OK, that should be correct.</p>",
        "id": 207084404,
        "sender_full_name": "starseeker",
        "timestamp": 1597604466
    },
    {
        "content": "<p>What does otool say about what the dm-ps libexec lib is seeing?</p>",
        "id": 207084418,
        "sender_full_name": "starseeker",
        "timestamp": 1597604497
    },
    {
        "content": "<p>here's verbose: </p>\n<div class=\"codehilite\"><pre><span></span><code>[100%] Linking C shared library ../../../libexec/dm/libdm-ps.dylib\ncd /Users/morrison/brlcad.trunk/.build/src/libdm/postscript &amp;&amp; /Users/morrison/Applications/bin/cmake -E cmake_link_script CMakeFiles/dm-ps.dir/link.txt --verbose=1\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -std=c11  -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -pipe -fvisibility=hidden -fno-strict-aliasing -fno-common -fexceptions -m64 -ggdb -Qunused-arguments -fstack-protector-all -fno-omit-frame-pointer -pedantic -pedantic-errors -Wall -Wextra -Wundef -Wfloat-equal -Wshadow -Wbad-function-cast -Wc++-compat -Winline -Wno-long-long -Wno-variadic-macros -Wdocumentation -Wno-c11-extensions -Werror -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk -mmacosx-version-min=10.14 -dynamiclib -Wl,-headerpad_max_install_names  -m64 -ggdb -o ../../../libexec/dm/libdm-ps.dylib -install_name @rpath/libdm-ps.dylib CMakeFiles/dm-ps.dir/dm-ps.c.o  -Wl,-rpath,/Users/morrison/brlcad.trunk/.build/lib ../../../lib/libdm.20.0.1.dylib ../../../lib/librt.20.0.1.dylib ../../../lib/libgdiam.dylib ../../../lib/libvds.dylib ../../../lib/libbrep.20.0.1.dylib ../../../lib/libnmg.dylib ../../../lib/libbg.20.0.1.dylib ../../../lib/libSPSR.dylib ../../../lib/libopenNURBS.2012.10.245.dylib ../../../lib/libpoly2tri.dylib ../../../lib/libicv.20.0.1.dylib ../../../lib/libbn.20.0.1.dylib ../../../lib/libnetpbm.dylib ../../../lib/libpkg.20.0.1.dylib ../../../lib/libbu.20.0.1.dylib -framework Foundation -ldl -framework System ../../../lib/libregex_brl.1.0.4.dylib -lm /usr/X11/lib/libGLU.dylib /usr/X11/lib/libGL.dylib /usr/X11/lib/libSM.dylib /usr/X11/lib/libICE.dylib /usr/X11/lib/libX11.dylib /usr/X11/lib/libXext.dylib /usr/X11/lib/libXi.dylib ../../../lib/libpng_brl.16.37.0.dylib ../../../lib/libz_brl.1.2.11.dylib\nUndefined symbols for architecture x86_64:\n  &quot;_Tcl_AppendStringsToObj&quot;, referenced from:\n      _ps_open in dm-ps.c.o\n      _ps_loadMatrix in dm-ps.c.o\n  &quot;_Tcl_DuplicateObj&quot;, referenced from:\n      _ps_open in dm-ps.c.o\n      _ps_loadMatrix in dm-ps.c.o\n  &quot;_Tcl_GetObjResult&quot;, referenced from:\n      _ps_open in dm-ps.c.o\n      _ps_loadMatrix in dm-ps.c.o\n  &quot;_Tcl_SetObjResult&quot;, referenced from:\n      _ps_open in dm-ps.c.o\n      _ps_loadMatrix in dm-ps.c.o\n</code></pre></div>",
        "id": 207084422,
        "sender_full_name": "Sean",
        "timestamp": 1597604506
    },
    {
        "content": "<p>Yeah, I don't see tcl in that list.. what the heck?</p>",
        "id": 207084504,
        "sender_full_name": "starseeker",
        "timestamp": 1597604601
    },
    {
        "content": "<p>there's no tcl listed</p>",
        "id": 207084506,
        "sender_full_name": "Sean",
        "timestamp": 1597604604
    },
    {
        "content": "<p>Does line 20 in src/libdm/postscript/CMakeLists.txt have TCL_LIBRARY on it?</p>",
        "id": 207084609,
        "sender_full_name": "starseeker",
        "timestamp": 1597604646
    },
    {
        "content": "<p>hm, it didn't but does now -- different tree got updated.  this is probably my bad.  rebuilding.</p>",
        "id": 207084766,
        "sender_full_name": "Sean",
        "timestamp": 1597604781
    },
    {
        "content": "<p>yep, my issue.  sorry!  enable-all is all good.</p>",
        "id": 207085206,
        "sender_full_name": "Sean",
        "timestamp": 1597605239
    },
    {
        "content": "<p>No problem.  Github runner kicked off - I'm trying with Ninja again, so if that fails I'll have to go again with msbuild, but either way should have an answer within about 2-3 hours.</p>",
        "id": 207085378,
        "sender_full_name": "starseeker",
        "timestamp": 1597605389
    },
    {
        "content": "<p>Actually, the Ubuntu GCC should work either way, come to think of it</p>",
        "id": 207085388,
        "sender_full_name": "starseeker",
        "timestamp": 1597605423
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>2020-08-16T19:39:35.8704061Z FAILED: src/librt/CMakeFiles/librt-obj.dir/reduce_db.cpp.o\n2020-08-16T19:39:35.8706430Z /usr/bin/c++  -DBRLCADBUILD -DDB5_DLL_EXPORTS -DGDIAM_DLL_IMPORTS -DHAVE_CONFIG_H -DRT_DLL_EXPORTS -DTIE_DLL_EXPORTS -DVDS_DLL_IMPORTS -I/home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_release/brlcad-7.31.0/include -Iinclude -I/home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_release/brlcad-7.31.0/src/librt -Iinclude/brlcad -isystem src/other/openNURBS -isystem src/other/libz -isystem src/other/libregex -isystem src/other/libvds -isystem src/other/libgdiam -isystem /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_release/brlcad-7.31.0/src/other/poly2tri -isystem /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_release/brlcad-7.31.0/src/other/openNURBS -isystem /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_release/brlcad-7.31.0/src/other/libz -isystem /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_release/brlcad-7.31.0/src/other/libregex -isystem /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_release/brlcad-7.31.0/src/other/libvds -isystem /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_release/brlcad-7.31.0/src/other/libgdiam -std=c++11  -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -pipe -fvisibility=hidden -fno-strict-aliasing -fno-common -fexceptions -ftemplate-depth-128 -m64 -g -ggdb3 -O3 -fipa-pta -fstrength-reduce -fexpensive-optimizations -finline-functions -flto -fno-omit-frame-pointer -pedantic -Wall -Wextra -Wundef -Wfloat-equal -Wshadow -Wno-inline -Wno-long-long -Wno-variadic-macros -Werror -fPIC   -std=c++11 -MD -MT src/librt/CMakeFiles/librt-obj.dir/reduce_db.cpp.o -MF src/librt/CMakeFiles/librt-obj.dir/reduce_db.cpp.o.d -o src/librt/CMakeFiles/librt-obj.dir/reduce_db.cpp.o -c /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_release/brlcad-7.31.0/src/librt/reduce_db.cpp\n2020-08-16T19:39:35.8707398Z In file included from /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_release/brlcad-7.31.0/src/librt/reduce_db.cpp:27:0:\n2020-08-16T19:39:35.8708379Z /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_release/brlcad-7.31.0/src/librt/reduce_db.cpp: In function ‘reduce_db::remove_dead_references(db_i&amp;)’:\n2020-08-16T19:39:35.8708883Z /home/runner/work/cadcitest/cadcitest/build/distcheck-enableall_release/brlcad-7.31.0/include/bu/magic.h:245:6: error: nonnull argument ‘db’ compared to NULL [-Werror=nonnull-compare]\n2020-08-16T19:39:35.8709297Z      if (UNLIKELY(( ((uintptr_t)(_ptr) == (uintptr_t)NULL) /* non-NULL pointer */ \\\n2020-08-16T19:39:35.8709452Z                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n2020-08-16T19:39:35.8709757Z       || ((uintptr_t)(_ptr) == 0) /* non-zero pointer */ \\\n2020-08-16T19:39:35.8709894Z       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n2020-08-16T19:39:35.8710114Z cc1plus: all warnings being treated as errors\n</code></pre></div>",
        "id": 207090603,
        "sender_full_name": "starseeker",
        "timestamp": 1597613174
    },
    {
        "content": "<p>rtweight breakage looks like it was introduced by commit 72190</p>",
        "id": 207211293,
        "sender_full_name": "starseeker",
        "timestamp": 1597709344
    },
    {
        "content": "<p>OK, now I'm really confused.  In the 7.26.4 in non-interactive mode src/mged/cmd.c line 1043 is executed, the program quits by eventually calling Tcl_Exit(), and then the queued up stdout output is dumped to the terminal.  In trunk this doesn't happen, even though the same sequence still seems to be followed, and I am now getting output in the interactive classic mode.</p>",
        "id": 207219860,
        "sender_full_name": "starseeker",
        "timestamp": 1597720747
    },
    {
        "content": "<p>that's a terrible commit message. :P</p>",
        "id": 207226305,
        "sender_full_name": "Sean",
        "timestamp": 1597730787
    },
    {
        "content": "<p>My that was painful.  <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I think I've gotten the output restored in all three modes - GUI, interactive classic, and command execution.  Only tested on Linux so far.</p>",
        "id": 207251196,
        "sender_full_name": "starseeker",
        "timestamp": 1597752617
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/LBzebrF9bpsTUC7q6Oe9vp-I/IMG_0399.jpeg\">IMG_0399.jpeg</a>  <span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> any thoughts on the source of this?  recent build on windows by bill.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/1549/LBzebrF9bpsTUC7q6Oe9vp-I/IMG_0399.jpeg\" title=\"IMG_0399.jpeg\"><img src=\"/user_uploads/1549/LBzebrF9bpsTUC7q6Oe9vp-I/IMG_0399.jpeg\"></a></div>",
        "id": 207291463,
        "sender_full_name": "Sean",
        "timestamp": 1597772818
    },
    {
        "content": "<p>cmake 3.18.1, so pretty recent</p>",
        "id": 207293754,
        "sender_full_name": "Sean",
        "timestamp": 1597773930
    },
    {
        "content": "<p>build succeeded so it is apparently innocuous (perhaps regress is busted if it could try)</p>",
        "id": 207293869,
        "sender_full_name": "Sean",
        "timestamp": 1597773966
    },
    {
        "content": "<p>That matches a problem I had trying to run the \"clean\" target with msbuild</p>",
        "id": 207296763,
        "sender_full_name": "starseeker",
        "timestamp": 1597775438
    },
    {
        "content": "<p>Strange issue - when I grepped through the directory I could only find one match for a regress target, so I'm not quite sure where it's getting the duplicate.</p>",
        "id": 207296858,
        "sender_full_name": "starseeker",
        "timestamp": 1597775492
    },
    {
        "content": "<p><a href=\"https://github.com/dotnet/msbuild/issues/3019\">https://github.com/dotnet/msbuild/issues/3019</a> <em>might</em> be related if CMake's generation of names is doing something a little quirky, but not sure.</p>",
        "id": 207297026,
        "sender_full_name": "starseeker",
        "timestamp": 1597775568
    },
    {
        "content": "<p>Let me try again with 3.18.1 - I don't recall getting a GUI pop-up, it showed only on the command prompt.  'course I was using a newer VS, that may make a difference too.</p>",
        "id": 207297819,
        "sender_full_name": "starseeker",
        "timestamp": 1597775934
    },
    {
        "content": "<p>Yeah, 2017 loaded without that message, with 3.18.1.  Not sure if I have the space to install 2015 on this laptop...</p>",
        "id": 207300706,
        "sender_full_name": "starseeker",
        "timestamp": 1597777297
    },
    {
        "content": "<p>Which version of CAD is he building?</p>",
        "id": 207300737,
        "sender_full_name": "starseeker",
        "timestamp": 1597777312
    },
    {
        "content": "<p>lastest checkout</p>",
        "id": 207300853,
        "sender_full_name": "Sean",
        "timestamp": 1597777350
    },
    {
        "content": "<p>OK, yeah - that's what I tried too.  Weird.</p>",
        "id": 207300917,
        "sender_full_name": "starseeker",
        "timestamp": 1597777376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> did you test if_disk and if_remote?</p>",
        "id": 207709018,
        "sender_full_name": "Sean",
        "timestamp": 1598074643
    },
    {
        "content": "<p>and what's the deal with bu_exit()??  that's not ignorable/replaceable.  there are over 1500 calls to bu_exit</p>",
        "id": 207709171,
        "sender_full_name": "Sean",
        "timestamp": 1598074966
    },
    {
        "content": "<p>if it's crashing, we have to investigate and fix it</p>",
        "id": 207709172,
        "sender_full_name": "Sean",
        "timestamp": 1598074980
    },
    {
        "content": "<p>if bu_exit() is crashing dauto, that's pretty much guaranteed to be corruption</p>",
        "id": 207709544,
        "sender_full_name": "Sean",
        "timestamp": 1598075769
    },
    {
        "content": "<p>I'm still working through all the if_* cases - should be done by the end of the day.</p>",
        "id": 207724460,
        "sender_full_name": "starseeker",
        "timestamp": 1598102690
    },
    {
        "content": "<p>I didn't have much luck debugging the dauto bit - it cropped up when I was trying the <a href=\"http://usage.sh\">usage.sh</a> script, appeared only some of the time, and the only thing GDB could tell me when I popped a sleep into bu_bomb so I could attach was that the BU_SETJUMP test was true when bu_exit was called.</p>",
        "id": 207724546,
        "sender_full_name": "starseeker",
        "timestamp": 1598102803
    },
    {
        "content": "<p>I couldn't figure out where corruption might be introduced - dauto basically did the isatty checks and then quit immediately.</p>",
        "id": 207724561,
        "sender_full_name": "starseeker",
        "timestamp": 1598102851
    },
    {
        "content": "<p>bu_setprogname was the only other call.</p>",
        "id": 207725226,
        "sender_full_name": "starseeker",
        "timestamp": 1598103899
    },
    {
        "content": "<p>The only other thing I can think of is that maybe we need to initialize the bu_jmpbuf array somehow...</p>",
        "id": 207725284,
        "sender_full_name": "starseeker",
        "timestamp": 1598103966
    },
    {
        "content": "<p>AH!  My bad - I misinterpreted where the failure was occurring.  I thought bu_bomb would be called only when something when wrong, but that's not the case.  I put my test in the wrong part of the code.</p>",
        "id": 207726932,
        "sender_full_name": "starseeker",
        "timestamp": 1598106682
    },
    {
        "content": "<p>dauto needs to validate the atoi conversion before mallocing</p>",
        "id": 207727438,
        "sender_full_name": "starseeker",
        "timestamp": 1598107461
    },
    {
        "content": "<p>Grr.  Now I can't get fbstretch to repeat it's bomb log file generation, with or without the dauto failure in the <a href=\"http://usage.sh\">usage.sh</a> run.  Will just have to keep an eye out to see if it repeats.</p>",
        "id": 207729057,
        "sender_full_name": "starseeker",
        "timestamp": 1598109995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/207724561\">said</a>:</p>\n<blockquote>\n<p>I couldn't figure out where corruption might be introduced - dauto basically did the isatty checks and then quit immediately.</p>\n</blockquote>\n<p>sounds like you figured it out, but another thing to keep in mind is all static initialization also occurs before main().  this includes globals and statics getting initialized (which in the case of C++ can be arbitrarily complex) as well as any library initialization like we're doing in libbu.</p>",
        "id": 207741474,
        "sender_full_name": "Sean",
        "timestamp": 1598129176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/207729057\">said</a>:</p>\n<blockquote>\n<p>Grr.  Now I can't get fbstretch to repeat it's bomb log file generation, with or without the dauto failure in the <a href=\"http://usage.sh\">usage.sh</a> run.  Will just have to keep an eye out to see if it repeats.</p>\n</blockquote>\n<p>yeah, we actually had to remove the __attribute__ \"never returns\" marking on it because technically it can (and often does) return control -- bu_exit() is guaranteed to not return (it calls _exit() hard), but bu_bomb is not.</p>",
        "id": 207741541,
        "sender_full_name": "Sean",
        "timestamp": 1598129288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  how exactly do I test the disk and stack interfaces?  I'm not seeing where they get used.</p>",
        "id": 207744622,
        "sender_full_name": "starseeker",
        "timestamp": 1598135052
    },
    {
        "content": "<p>You can/could specify all types via the -F option, though some of the builtins use conventions (e.g., if_network is used when you used a hostname).  I believe disk is used when you specify a filepath, mem uses a convention iirc.  They have been documented in several places over the decades (especially the old green manuals).</p>",
        "id": 207744929,
        "sender_full_name": "Sean",
        "timestamp": 1598135577
    },
    {
        "content": "<p>I think I recall some examples in the code.  Don't know but libfb man page might have relevant info (where FB_FILE is mentioned).</p>",
        "id": 207744943,
        "sender_full_name": "Sean",
        "timestamp": 1598135623
    },
    {
        "content": "<p>the env var is another way they can be set</p>",
        "id": 207744945,
        "sender_full_name": "Sean",
        "timestamp": 1598135632
    },
    {
        "content": "<p>The mem gets used by rtwizard, and -F&lt;filepath&gt; seems to work for disk.</p>\n<p>stack I can trigger and it wants some sort of args (but don't know what to feed it, old or new config)</p>",
        "id": 207746919,
        "sender_full_name": "starseeker",
        "timestamp": 1598139444
    },
    {
        "content": "<p>Ah, there we go (buried in one of the old emails)</p>\n<p>export FB_FILE=\"/dev/stack /dev/debug;/home/user/moss.pix;\"<br>\n./bin/rt share/db/moss.g all.g</p>",
        "id": 207747081,
        "sender_full_name": "starseeker",
        "timestamp": 1598139828
    },
    {
        "content": "<p>OK, looks like we're in business.</p>\n<p>btw:  not reproducible, but this happened once if it's of interest:<br>\nbu_semaphore_free(): pthread_mutex_destroy() failed on [18] of [20]</p>",
        "id": 207747303,
        "sender_full_name": "starseeker",
        "timestamp": 1598140256
    },
    {
        "content": "<p>I don't recall stack being explicit, could be wrong though.</p>",
        "id": 207747404,
        "sender_full_name": "Sean",
        "timestamp": 1598140460
    },
    {
        "content": "<p>thought it let you do things like -F\"/dev/mem -\" to read from stdin and write to a memory buffer</p>",
        "id": 207747411,
        "sender_full_name": "Sean",
        "timestamp": 1598140509
    },
    {
        "content": "<p>html/ReleaseNotes/email3.0.html was where I pulled that from, FWIW</p>",
        "id": 207747416,
        "sender_full_name": "starseeker",
        "timestamp": 1598140528
    },
    {
        "content": "<p>ah, great good find then</p>",
        "id": 207747419,
        "sender_full_name": "Sean",
        "timestamp": 1598140545
    },
    {
        "content": "<p>First time I've actually used one of those old emails practically... nifty!</p>",
        "id": 207747460,
        "sender_full_name": "starseeker",
        "timestamp": 1598140576
    },
    {
        "content": "<p>how's it actually going through /dev/disk without it being in that switch list?</p>",
        "id": 207747462,
        "sender_full_name": "Sean",
        "timestamp": 1598140588
    },
    {
        "content": "<p>fb_open - falls through to the disk interface if no other matches</p>",
        "id": 207747480,
        "sender_full_name": "starseeker",
        "timestamp": 1598140671
    },
    {
        "content": "<p>dm_plugins.cpp:405</p>",
        "id": 207747521,
        "sender_full_name": "starseeker",
        "timestamp": 1598140693
    },
    {
        "content": "<p>cool, and remote?  triggered on something else?</p>",
        "id": 207747528,
        "sender_full_name": "Sean",
        "timestamp": 1598140730
    },
    {
        "content": "<p>if (fb_totally_numeric(file) || strchr(file, ':') != NULL) {</p>",
        "id": 207747533,
        "sender_full_name": "starseeker",
        "timestamp": 1598140749
    },
    {
        "content": "<p>hm, interesting</p>",
        "id": 207747538,
        "sender_full_name": "Sean",
        "timestamp": 1598140772
    },
    {
        "content": "<p>Not sure what happens with a full C:\\ windows path, that could get ugly...</p>",
        "id": 207747542,
        "sender_full_name": "starseeker",
        "timestamp": 1598140789
    },
    {
        "content": "<p>That's been there though, I don't think I changed any of that...</p>",
        "id": 207747588,
        "sender_full_name": "starseeker",
        "timestamp": 1598140808
    },
    {
        "content": "<p>yeah, probably wrong for that, but probably always been wrong for that</p>",
        "id": 207747589,
        "sender_full_name": "Sean",
        "timestamp": 1598140809
    },
    {
        "content": "<p>I would have thought <a href=\"http://-Fbrlcad.org\">-Fbrlcad.org</a> would use the default port, but it might have always required the colon</p>",
        "id": 207747612,
        "sender_full_name": "Sean",
        "timestamp": 1598140850
    },
    {
        "content": "<p>/me double checks the rel-7-30-10 code...</p>",
        "id": 207747636,
        "sender_full_name": "starseeker",
        "timestamp": 1598140889
    },
    {
        "content": "<p>yep, same conditional</p>",
        "id": 207747682,
        "sender_full_name": "starseeker",
        "timestamp": 1598140935
    },
    {
        "content": "<p>/me checks 7.24, though it's been broken it was probably broken long before that</p>",
        "id": 207747683,
        "sender_full_name": "Sean",
        "timestamp": 1598140937
    },
    {
        "content": "<p>At least as far back as 1990 per git blame</p>",
        "id": 207747746,
        "sender_full_name": "starseeker",
        "timestamp": 1598141087
    },
    {
        "content": "<p>svn:revision:4527</p>",
        "id": 207747748,
        "sender_full_name": "starseeker",
        "timestamp": 1598141096
    },
    {
        "content": "<p>/me must concede that was fun... git blame FTW</p>",
        "id": 207747758,
        "sender_full_name": "starseeker",
        "timestamp": 1598141145
    },
    {
        "content": "<p>cool</p>",
        "id": 207747761,
        "sender_full_name": "Sean",
        "timestamp": 1598141159
    },
    {
        "content": "<p>yeah, 7.24 treats it as a file</p>",
        "id": 207747800,
        "sender_full_name": "Sean",
        "timestamp": 1598141166
    },
    {
        "content": "<p>don't see a documented way to override in the man page, good to go</p>",
        "id": 207747803,
        "sender_full_name": "Sean",
        "timestamp": 1598141187
    },
    {
        "content": "<p>svn:revision:3680<br>\nI think that's where it's original form got added.</p>",
        "id": 207747832,
        "sender_full_name": "starseeker",
        "timestamp": 1598141245
    },
    {
        "content": "<p>er, so did you test that remote actually works? :)  run fbserv on <a href=\"http://brlcad.org\">brlcad.org</a> something</p>",
        "id": 207747834,
        "sender_full_name": "Sean",
        "timestamp": 1598141254
    },
    {
        "content": "<p>something like -Fbrlcad.org:file.pix</p>",
        "id": 207747882,
        "sender_full_name": "Sean",
        "timestamp": 1598141299
    },
    {
        "content": "<p>that should be a remote /dev/disk</p>",
        "id": 207747883,
        "sender_full_name": "Sean",
        "timestamp": 1598141313
    },
    {
        "content": "<p>What is that supposed to do?  Upload a file to <a href=\"http://brlcad.org\">brlcad.org</a>?</p>",
        "id": 207747885,
        "sender_full_name": "starseeker",
        "timestamp": 1598141323
    },
    {
        "content": "<p>wherever the framebuffer server is, yeah</p>",
        "id": 207747908,
        "sender_full_name": "Sean",
        "timestamp": 1598141351
    },
    {
        "content": "<p>manpage example is using it to launch remote transient windows</p>",
        "id": 207747919,
        "sender_full_name": "Sean",
        "timestamp": 1598141371
    },
    {
        "content": "<p>Do I have permissions to make that work?</p>",
        "id": 207747925,
        "sender_full_name": "starseeker",
        "timestamp": 1598141387
    },
    {
        "content": "<p>like from <a href=\"http://brlcad.org\">brlcad.org</a>, you could -Fyour_local_ip:/dev/Xl assuming networking routes are open</p>",
        "id": 207747973,
        "sender_full_name": "Sean",
        "timestamp": 1598141411
    },
    {
        "content": "<p>try localhost  -- that should still go through the interface</p>",
        "id": 207747976,
        "sender_full_name": "Sean",
        "timestamp": 1598141434
    },
    {
        "content": "<p>-/</p>",
        "id": 207747978,
        "sender_full_name": "Sean",
        "timestamp": 1598141437
    },
    {
        "content": "<p>things like -Flocalhost:/dev/X  and -Flocalhost:file.pix</p>",
        "id": 207747981,
        "sender_full_name": "Sean",
        "timestamp": 1598141449
    },
    {
        "content": "<p>can see examples in brlman libfb</p>",
        "id": 207747987,
        "sender_full_name": "Sean",
        "timestamp": 1598141470
    },
    {
        "content": "<p>How do I launch an fbserver to listen for that?</p>",
        "id": 207748039,
        "sender_full_name": "starseeker",
        "timestamp": 1598141561
    },
    {
        "content": "<p>man fbserv ;)</p>",
        "id": 207748042,
        "sender_full_name": "Sean",
        "timestamp": 1598141575
    },
    {
        "content": "<p>fbserv 0 /dev/X</p>",
        "id": 207748046,
        "sender_full_name": "Sean",
        "timestamp": 1598141585
    },
    {
        "content": "<p>So localhost:/dev/X is an alternative to just specifying the port number?</p>",
        "id": 207748050,
        "sender_full_name": "starseeker",
        "timestamp": 1598141615
    },
    {
        "content": "<p>no</p>",
        "id": 207748053,
        "sender_full_name": "Sean",
        "timestamp": 1598141638
    },
    {
        "content": "<p>at least I don't think so -- it's saying launch a transient /dev/X on the remote host</p>",
        "id": 207748111,
        "sender_full_name": "Sean",
        "timestamp": 1598141718
    },
    {
        "content": "<p>./bin/fbserv 0 /dev/X<br>\n./bin/rt -Flocalhost:/dev/X share/db/moss.g all.g<br>\npkg_open(localhost, remotefb): unknown service<br>\npkg_open: client connect: errno=111<br>\nrem_open: can't connect to remotefb server on host \"localhost\".<br>\nfb_open: can't open device \"localhost:/dev/X\", ret=-4.<br>\nrt:  can't open frame buffer</p>",
        "id": 207748118,
        "sender_full_name": "starseeker",
        "timestamp": 1598141755
    },
    {
        "content": "<p>Oh, duh</p>",
        "id": 207748161,
        "sender_full_name": "starseeker",
        "timestamp": 1598141797
    },
    {
        "content": "<p>./bin/rt -Flocalhost:0:/dev/X share/db/moss.g all.g</p>",
        "id": 207748164,
        "sender_full_name": "starseeker",
        "timestamp": 1598141806
    },
    {
        "content": "<p>OK, so yes - works in trunk</p>",
        "id": 207748170,
        "sender_full_name": "starseeker",
        "timestamp": 1598141841
    },
    {
        "content": "<p>testing 24 behavior</p>",
        "id": 207748173,
        "sender_full_name": "Sean",
        "timestamp": 1598141855
    },
    {
        "content": "<p>hm, it's not doing anything with  anything after the :0 if you put a port</p>",
        "id": 207748221,
        "sender_full_name": "Sean",
        "timestamp": 1598141955
    },
    {
        "content": "<p>That whole aspect of the framebuffer I/O gets very little exercise, to the best of my knowledge - the closest I know of that happens semi-regularly is when rtwizard does its wackier stuff with multiple programs targeting one fb.</p>",
        "id": 207748270,
        "sender_full_name": "starseeker",
        "timestamp": 1598142065
    },
    {
        "content": "<p>looks like it's a space if the man page is right</p>",
        "id": 207748271,
        "sender_full_name": "Sean",
        "timestamp": 1598142075
    },
    {
        "content": "<p>yeah, it's not working even following the man page example in 7.24 so not a release issue at least.  maybe broken long ago.</p>",
        "id": 207748368,
        "sender_full_name": "Sean",
        "timestamp": 1598142249
    },
    {
        "content": "<p>The only other instance I can think of where any of the over-the-network features were at play was your distributed rendering</p>",
        "id": 207748369,
        "sender_full_name": "starseeker",
        "timestamp": 1598142250
    },
    {
        "content": "<p>That's a thought - wonder if remrt works</p>",
        "id": 207748415,
        "sender_full_name": "starseeker",
        "timestamp": 1598142366
    },
    {
        "content": "<p>give it a go</p>",
        "id": 207748420,
        "sender_full_name": "Sean",
        "timestamp": 1598142391
    },
    {
        "content": "<p>I'm not much good with the multiple machines and network communication stuff Sean - I can try, but the only thing that comes to mind is running a remrt here and trying to enlist bz</p>",
        "id": 207748425,
        "sender_full_name": "starseeker",
        "timestamp": 1598142447
    },
    {
        "content": "<p>that'll work -- I've used it before that way</p>",
        "id": 207748467,
        "sender_full_name": "Sean",
        "timestamp": 1598142493
    },
    {
        "content": "<p>fb_open(name?name:framebuffer, xx, yy)) is it's invocation pattern - is that what we need to test here?</p>",
        "id": 207748469,
        "sender_full_name": "starseeker",
        "timestamp": 1598142501
    },
    {
        "content": "<p>Do you usually launch it from within MGED?</p>",
        "id": 207748474,
        "sender_full_name": "starseeker",
        "timestamp": 1598142551
    },
    {
        "content": "<p>it's really just replace an rt call with remrt, then run rtsrv pointing it to that host</p>",
        "id": 207748476,
        "sender_full_name": "Sean",
        "timestamp": 1598142554
    },
    {
        "content": "<p>no, that'd get ugly</p>",
        "id": 207748478,
        "sender_full_name": "Sean",
        "timestamp": 1598142564
    },
    {
        "content": "<p>usually start with a saveview script</p>",
        "id": 207748480,
        "sender_full_name": "Sean",
        "timestamp": 1598142577
    },
    {
        "content": "<p>Man page calls out \"rrt remrt -M -s###\"</p>",
        "id": 207748481,
        "sender_full_name": "starseeker",
        "timestamp": 1598142581
    },
    {
        "content": "<p>then edit the script to replace rt with remrt</p>",
        "id": 207748482,
        "sender_full_name": "Sean",
        "timestamp": 1598142585
    },
    {
        "content": "<p>rrt should work, but that's introducing a whole other thing too  just fyi</p>",
        "id": 207748529,
        "sender_full_name": "Sean",
        "timestamp": 1598142615
    },
    {
        "content": "<p>er, and rrt -M is going to wait for stdin</p>",
        "id": 207748531,
        "sender_full_name": "Sean",
        "timestamp": 1598142636
    },
    {
        "content": "<p>/me just noting that the man page could use a step-by-step example</p>",
        "id": 207748534,
        "sender_full_name": "starseeker",
        "timestamp": 1598142643
    },
    {
        "content": "<p>which is a lil tricky from mged</p>",
        "id": 207748535,
        "sender_full_name": "Sean",
        "timestamp": 1598142646
    },
    {
        "content": "<p>i mean, with all the proc changes, should also make sure rrt still works ...</p>",
        "id": 207748541,
        "sender_full_name": "Sean",
        "timestamp": 1598142693
    },
    {
        "content": "<p>but would test that separate from remrt</p>",
        "id": 207748545,
        "sender_full_name": "Sean",
        "timestamp": 1598142704
    },
    {
        "content": "<p>just try like rrt rtedge</p>",
        "id": 207748546,
        "sender_full_name": "Sean",
        "timestamp": 1598142713
    },
    {
        "content": "<p>/me nods</p>",
        "id": 207748547,
        "sender_full_name": "starseeker",
        "timestamp": 1598142714
    },
    {
        "content": "<p>but yeah, remrt is usually for big long-running jobs -- no way I'd do that inside mged</p>",
        "id": 207748594,
        "sender_full_name": "Sean",
        "timestamp": 1598142761
    },
    {
        "content": "<p>First let me see if I can get anything to work... considering how long it too me to get hello world going with libpkg this could be good for some comedy</p>",
        "id": 207748595,
        "sender_full_name": "starseeker",
        "timestamp": 1598142762
    },
    {
        "content": "<p>so to assist, here's what you'll need (from memory).  0) start an fbserv -S2048 0 /dev/mem, 1) run mgd saveview, 2) edit script to call remrt, 3) edit script switches to remove -o outputfile and file logging lines, 4) edit script to -F0 or whatever your fbserv is running on, 5) run script make sure it's waiting for clients, 6) run rtsrv from two hosts</p>",
        "id": 207748724,
        "sender_full_name": "Sean",
        "timestamp": 1598143019
    },
    {
        "content": "<p>you'll of course want to make sure the render job is expensive enough to not immediately terminate.  one of the nurbs samples with ambient occlusion should easily do, so you could add -c \"set ambSamples=1024 ambSlow=1\" to the script</p>",
        "id": 207748736,
        "sender_full_name": "Sean",
        "timestamp": 1598143070
    },
    {
        "content": "<p>unrelated 76891 needs NEWS</p>",
        "id": 207748776,
        "sender_full_name": "Sean",
        "timestamp": 1598143139
    },
    {
        "content": "<p>also, your 76890 comment sounds like you might not be familiar with that convention, but '-' means stdin or stdout depending on the context and tool, it's like a magic name so a user can specify stdin/stdout via args</p>",
        "id": 207748824,
        "sender_full_name": "Sean",
        "timestamp": 1598143283
    },
    {
        "content": "<p>we're not consistent but a few of our tools support that, that many also don't yet</p>",
        "id": 207748866,
        "sender_full_name": "Sean",
        "timestamp": 1598143331
    },
    {
        "content": "<p>/me nods.  Not familiar with it, so good to know.</p>",
        "id": 207748867,
        "sender_full_name": "starseeker",
        "timestamp": 1598143331
    },
    {
        "content": "<p>can see examples of it in action: grep \\\"-\\\" src/util/*.c</p>",
        "id": 207748914,
        "sender_full_name": "Sean",
        "timestamp": 1598143474
    },
    {
        "content": "<p>usually it'll be something like \"cat file2.pix | pixdiff file1.pix -\"</p>",
        "id": 207748971,
        "sender_full_name": "Sean",
        "timestamp": 1598143564
    },
    {
        "content": "<p>So... How will I know when the rtsrv command has connected with remrt?</p>",
        "id": 207749028,
        "sender_full_name": "starseeker",
        "timestamp": 1598143703
    },
    {
        "content": "<p>and of course -- typically means \"stop processing args, pass the rest along to the next thing that processes args\"</p>",
        "id": 207749029,
        "sender_full_name": "Sean",
        "timestamp": 1598143704
    },
    {
        "content": "<p>Blast - can't contact</p>",
        "id": 207749034,
        "sender_full_name": "starseeker",
        "timestamp": 1598143764
    },
    {
        "content": "<p>remrt logs it getting jobs</p>",
        "id": 207749035,
        "sender_full_name": "Sean",
        "timestamp": 1598143765
    },
    {
        "content": "<p>rtsrv: unable to contact &lt;ip&gt;, port &lt;num&gt;</p>",
        "id": 207749040,
        "sender_full_name": "starseeker",
        "timestamp": 1598143784
    },
    {
        "content": "<p>it's instantaneous when everything is correct</p>",
        "id": 207749041,
        "sender_full_name": "Sean",
        "timestamp": 1598143786
    },
    {
        "content": "<p>use rtsrv -d for debugging</p>",
        "id": 207749095,
        "sender_full_name": "Sean",
        "timestamp": 1598143892
    },
    {
        "content": "<p>OK the port it was listening on wasn't the port that remrt claimed it was listening on</p>",
        "id": 207749150,
        "sender_full_name": "starseeker",
        "timestamp": 1598143989
    },
    {
        "content": "<p>Uh... \"setpgid: Operation not permitted\" and rtsrv died.</p>",
        "id": 207749152,
        "sender_full_name": "starseeker",
        "timestamp": 1598144025
    },
    {
        "content": "<p>defaults to port 4446</p>",
        "id": 207749156,
        "sender_full_name": "Sean",
        "timestamp": 1598144040
    },
    {
        "content": "<p>08/22 20:45:45 Automatic REMRT on ubuntu2019<br>\n08/22 20:45:45 Listening at port 24081, reading script on stdin</p>\n<p>what port is it referring to there?</p>",
        "id": 207749198,
        "sender_full_name": "starseeker",
        "timestamp": 1598144075
    },
    {
        "content": "<p>the \"Listening at port .. #\" is that whole automatic transient port thing we were talking about months ago</p>",
        "id": 207749200,
        "sender_full_name": "Sean",
        "timestamp": 1598144095
    },
    {
        "content": "<p>Oh, that business.  ugh.</p>",
        "id": 207749211,
        "sender_full_name": "starseeker",
        "timestamp": 1598144132
    },
    {
        "content": "<p>that's not the connection port, that's just the internal listening reassignment the kernel gave it</p>",
        "id": 207749212,
        "sender_full_name": "Sean",
        "timestamp": 1598144133
    },
    {
        "content": "<p>there's not really much value in it printing it .. obviously misleading</p>",
        "id": 207749215,
        "sender_full_name": "Sean",
        "timestamp": 1598144149
    },
    {
        "content": "<p>all it really means is that it's listening, and a rtsrv -d localhost 4446 should attach</p>",
        "id": 207749260,
        "sender_full_name": "Sean",
        "timestamp": 1598144192
    },
    {
        "content": "<p>It does, but rtsrv is dying when it tries to fork with the setpgid error</p>",
        "id": 207749318,
        "sender_full_name": "starseeker",
        "timestamp": 1598144346
    },
    {
        "content": "<p>uh oh, looks like fbclear -c is broken</p>",
        "id": 207749433,
        "sender_full_name": "Sean",
        "timestamp": 1598144541
    },
    {
        "content": "<p>And launching rtsrv from bz isn't getting through to remrt</p>",
        "id": 207749551,
        "sender_full_name": "starseeker",
        "timestamp": 1598144817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I don't think my machine is accessible from the outside back in...</p>",
        "id": 207749611,
        "sender_full_name": "starseeker",
        "timestamp": 1598144965
    },
    {
        "content": "<p>try via localhost</p>",
        "id": 207749615,
        "sender_full_name": "Sean",
        "timestamp": 1598144997
    },
    {
        "content": "<p>and yes, you'd definitely need to configure your router if you're not using a DMZ</p>",
        "id": 207749655,
        "sender_full_name": "Sean",
        "timestamp": 1598145027
    },
    {
        "content": "<p>remrt sees a connection attempt, but that's when I get setpgid: Operation not permitted</p>",
        "id": 207749720,
        "sender_full_name": "starseeker",
        "timestamp": 1598145197
    },
    {
        "content": "<p>and rtsrv dies</p>",
        "id": 207749722,
        "sender_full_name": "starseeker",
        "timestamp": 1598145206
    },
    {
        "content": "<p>add -d</p>",
        "id": 207749767,
        "sender_full_name": "Sean",
        "timestamp": 1598145276
    },
    {
        "content": "<p>PROTOCOL_VERSION='BRL-CAD REMRT Protocol v2.0'<br>\nusing 12 of 12 cpus<br>\nph_loglvl 1<br>\nph_dirbuild: NIST_MBE_PMI_2.g</p>\n<p>ph_dirbuild:  rt_dirbuild(NIST_MBE_PMI_2.g) failure</p>",
        "id": 207749768,
        "sender_full_name": "starseeker",
        "timestamp": 1598145298
    },
    {
        "content": "<p>make sure the .g is in cwd</p>",
        "id": 207749776,
        "sender_full_name": "Sean",
        "timestamp": 1598145328
    },
    {
        "content": "<p>there's ways to tell remrt to transfer it, but I don't know how to set that up</p>",
        "id": 207749778,
        "sender_full_name": "Sean",
        "timestamp": 1598145344
    },
    {
        "content": "<p>Ah, there we go.  I thought it would send the .g over the wire</p>",
        "id": 207749779,
        "sender_full_name": "starseeker",
        "timestamp": 1598145348
    },
    {
        "content": "<p>default assumes all rtsrv's have access</p>",
        "id": 207749781,
        "sender_full_name": "Sean",
        "timestamp": 1598145353
    },
    {
        "content": "<p>-d or not, it should probably print the file not found error - that setpgid thing was extremely confusing</p>",
        "id": 207749832,
        "sender_full_name": "starseeker",
        "timestamp": 1598145387
    },
    {
        "content": "<p>looking at the code, setpgid is probably just a perror warning</p>",
        "id": 207749839,
        "sender_full_name": "Sean",
        "timestamp": 1598145431
    },
    {
        "content": "<p>meaning it's not authorized to run in a proper daemon server mode</p>",
        "id": 207749840,
        "sender_full_name": "Sean",
        "timestamp": 1598145445
    },
    {
        "content": "<p>which is part of what it's trying to set up there</p>",
        "id": 207749847,
        "sender_full_name": "Sean",
        "timestamp": 1598145470
    },
    {
        "content": "<p>debug mode skips all that including skipping the fork+exec</p>",
        "id": 207749889,
        "sender_full_name": "Sean",
        "timestamp": 1598145506
    },
    {
        "content": "<p>If you don't mind, I'm going to add these steps as an example to the remrt man page...</p>",
        "id": 207749951,
        "sender_full_name": "starseeker",
        "timestamp": 1598145614
    },
    {
        "content": "<p>heh, why would I mind??  It is a whole section in the advanced rendering guide I started last year</p>",
        "id": 207749999,
        "sender_full_name": "Sean",
        "timestamp": 1598145751
    },
    {
        "content": "<p>I really need to format that into docbook</p>",
        "id": 207750002,
        "sender_full_name": "Sean",
        "timestamp": 1598145759
    },
    {
        "content": "<p>Wanted to make sure you weren't already altering the man page.</p>",
        "id": 207750004,
        "sender_full_name": "starseeker",
        "timestamp": 1598145781
    },
    {
        "content": "<p>no, as awesome as it is for production rendering, it's been strictly minimally maintained thus far -- every big render I've done I've come across <em>dozens</em> of bugs and inflexibilities and things that need to be improved.</p>",
        "id": 207750121,
        "sender_full_name": "Sean",
        "timestamp": 1598146034
    },
    {
        "content": "<p>I've only done the minimum needed to get it working, try to justify making a few improvements until the next time.</p>",
        "id": 207750122,
        "sender_full_name": "Sean",
        "timestamp": 1598146041
    },
    {
        "content": "<p>things like setpgid() and the error reporting just scratch the surface.</p>",
        "id": 207750126,
        "sender_full_name": "Sean",
        "timestamp": 1598146073
    },
    {
        "content": "<p>I don't want to get distracted from the release, but I'll at least try to write down what it took to get it running so I don't have to repeat the flopping a second time...</p>",
        "id": 207750166,
        "sender_full_name": "starseeker",
        "timestamp": 1598146094
    },
    {
        "content": "<p>I'm not sure what's wrong, but remrt isn't working here for me</p>",
        "id": 207750169,
        "sender_full_name": "Sean",
        "timestamp": 1598146098
    },
    {
        "content": "<p>and fbclear -c does seem to be fully busted</p>",
        "id": 207750173,
        "sender_full_name": "Sean",
        "timestamp": 1598146120
    },
    {
        "content": "<p>dont' know if that's new</p>",
        "id": 207750178,
        "sender_full_name": "Sean",
        "timestamp": 1598146128
    },
    {
        "content": "<p>I'll check in a few minutes, once I'm done with the man page... one sec...</p>",
        "id": 207750185,
        "sender_full_name": "starseeker",
        "timestamp": 1598146148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  is the fbclear breakage new?</p>",
        "id": 207751507,
        "sender_full_name": "starseeker",
        "timestamp": 1598148859
    },
    {
        "content": "<p>If it's hanging indefinitely, I'm seeing that in 7.30.10.  if_remote.c:702 is doing a pkg_send, then waiting on 719 for a response that's apparently not coming.</p>",
        "id": 207751694,
        "sender_full_name": "starseeker",
        "timestamp": 1598149205
    },
    {
        "content": "<p>what's up with r76889?  sounds like you disabled a failing regression test...</p>",
        "id": 207754616,
        "sender_full_name": "Sean",
        "timestamp": 1598154824
    },
    {
        "content": "<p>I partially re-enabled a test that I had fully disabled earlier.  The input file being fed to asc2dsp for the other part is reporting an invalid character - I can't tell if it ever worked or even should have worked...</p>",
        "id": 207771709,
        "sender_full_name": "starseeker",
        "timestamp": 1598187345
    },
    {
        "content": "<p>That's a drawback with how some of the regression tests are set up (or at least, it has been - I've not done a systematic audit) - intermediate commands can fail, but as long as the final command executed by the script returns 0 the intermediated failures don't always fail the test.</p>\n<p>If I remember correctly with asc2dsp, the input file names passed to asc2dsp were incorrect (probably after something got moved or renamed).  However, asc2dsp still creates an empty output file in that case.  So the test created two empty output files, which cmp found were the same, ergo the test passed.</p>",
        "id": 207772163,
        "sender_full_name": "starseeker",
        "timestamp": 1598187946
    },
    {
        "content": "<p>I'm not sure if asc2dsp just doesn't really support the \"old\" format, or this is one of those cases where a .dsp file got tagged as ASCII rather than binary (or vice versa) and the file contents at SVN checkout don't match what asc2dsp is expecting.</p>",
        "id": 207772229,
        "sender_full_name": "starseeker",
        "timestamp": 1598188036
    },
    {
        "content": "<p>Barring bugs or new deviations introduced, all of the tests were structured to accumulate any errors and return that as a result.  Relying on the last command's status is not a good idea for a whole host of reasons.</p>",
        "id": 207844548,
        "sender_full_name": "Sean",
        "timestamp": 1598276786
    },
    {
        "content": "<p>To that specific commit, sounds good if the test was already disabled and it's a partial re-enabling.  We shouldn't disable a test if it was working was the only concern.</p>",
        "id": 207845056,
        "sender_full_name": "Sean",
        "timestamp": 1598277044
    },
    {
        "content": "<p>It's not doing any regression testing from the looks of the code either, so since it's presenting a maintenance cost, may make sense to remove it.</p>",
        "id": 207845252,
        "sender_full_name": "Sean",
        "timestamp": 1598277127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> on the matter of NULL checking, given the state of all the calling sites needing a null check and most still not really looking like they'd gracefully handle a NULL condition at all, it's worth considering making the API never return NULL (i.e., making it impossible).</p>",
        "id": 207845585,
        "sender_full_name": "Sean",
        "timestamp": 1598277295
    },
    {
        "content": "<p>You mean returning an \"(NULL)\" string?</p>",
        "id": 207845799,
        "sender_full_name": "starseeker",
        "timestamp": 1598277396
    },
    {
        "content": "<p>General way to do that would be to make the error condition a special value instead of a special pointer.  Any value could work but ideally on that might make sense when printed.</p>",
        "id": 207845854,
        "sender_full_name": "Sean",
        "timestamp": 1598277422
    },
    {
        "content": "<p>I'm working my way through the list of functions you itemized earlier, trying to make sure they do something sane.</p>",
        "id": 207845892,
        "sender_full_name": "starseeker",
        "timestamp": 1598277438
    },
    {
        "content": "<p>so yeah, \"(NULL)\" could work though that's what stdio uses on Linux, so wouldn't be able to disambiguate.</p>",
        "id": 207845929,
        "sender_full_name": "Sean",
        "timestamp": 1598277466
    },
    {
        "content": "<p>I noticed, appreciated as there were a slew of potential null derefs introduced -- that's why I mention it.</p>",
        "id": 207846027,
        "sender_full_name": "Sean",
        "timestamp": 1598277499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I'm leery of going too far down this rabbit hole, since the case of a null DMP isn't going to  come up in normal usage and the entire structure of this whole thing (IMHO) needs some serious TLC</p>",
        "id": 207846087,
        "sender_full_name": "starseeker",
        "timestamp": 1598277525
    },
    {
        "content": "<p>yes</p>",
        "id": 207846168,
        "sender_full_name": "Sean",
        "timestamp": 1598277566
    },
    {
        "content": "<p>that's why I mention it, I was leery too -- adding all the null checks doesn't feel right because it's decreasing readability, increasing complexity</p>",
        "id": 207846272,
        "sender_full_name": "Sean",
        "timestamp": 1598277604
    },
    {
        "content": "<p>bu_list everywhere, globals galore... feels like trying to paint a rust bucket, in some ways</p>",
        "id": 207846296,
        "sender_full_name": "starseeker",
        "timestamp": 1598277619
    },
    {
        "content": "<p>but that's the API.  so either the API should change to not return NULL, or the callers are technically required to test it, however rare a condition</p>",
        "id": 207846337,
        "sender_full_name": "Sean",
        "timestamp": 1598277642
    },
    {
        "content": "<p>I'm seeing a fair number of null checks already, actually, as I'm going through - found a few missing</p>",
        "id": 207846402,
        "sender_full_name": "starseeker",
        "timestamp": 1598277675
    },
    {
        "content": "<p>whether the calling code does something \"sane\" after doing the check is another matter, but that was presumably baked in from the get go...</p>",
        "id": 207846462,
        "sender_full_name": "starseeker",
        "timestamp": 1598277717
    },
    {
        "content": "<p>I think the reason it looks funky now is mostly that I straight up replaced all variable accesses with function calls, which resulted in a lot of double calls in if tests and bu_vls string outputs - that's most of what I'm trying to clean up now.</p>",
        "id": 207846603,
        "sender_full_name": "starseeker",
        "timestamp": 1598277784
    },
    {
        "content": "<p>I'm game to make it return not null, but I'm not sure what to do about the functions returning bu_vls strings in that respect.</p>",
        "id": 207846673,
        "sender_full_name": "starseeker",
        "timestamp": 1598277828
    },
    {
        "content": "<p>Do we malloc a vls internally in the null case, and then the caller has to check for a null vls and free it if that's what they get?  that feels wrong...</p>",
        "id": 207846768,
        "sender_full_name": "starseeker",
        "timestamp": 1598277858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/207846296\">said</a>:</p>\n<blockquote>\n<p>bu_list everywhere, globals galore... feels like trying to paint a rust bucket, in some ways</p>\n</blockquote>\n<p>That can be said of almost any code, but I don't think it's a constructive perspective.  Dismissing any issue in code and more importantly allowing new ones to be introduced because someone else dismissed something is not something I support (and HACKING has explicitly called out since inception).  That's very much a canonical fallacy in my experience.</p>",
        "id": 207846936,
        "sender_full_name": "Sean",
        "timestamp": 1598277954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/207846603\">said</a>:</p>\n<blockquote>\n<p>I think the reason it looks funky now is mostly that I straight up replaced all variable accesses with function calls, which resulted in a lot of double calls in if tests and bu_vls string outputs - that's most of what I'm trying to clean up now.</p>\n</blockquote>\n<p>I realize that, but therein is now a new issue that did not exist before as functions express contracts, variables do not.  So you kind of birthed this beast <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 207847077,
        "sender_full_name": "Sean",
        "timestamp": 1598278022
    },
    {
        "content": "<p>Public struct members don't constitute a contract?</p>",
        "id": 207847319,
        "sender_full_name": "starseeker",
        "timestamp": 1598278162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/207846673\">said</a>:</p>\n<blockquote>\n<p>I'm game to make it return not null, but I'm not sure what to do about the functions returning bu_vls strings in that respect.</p>\n</blockquote>\n<p>That's tricky as there's dynamic memory associated.  How about eliminating them?</p>",
        "id": 207847321,
        "sender_full_name": "Sean",
        "timestamp": 1598278163
    },
    {
        "content": "<p>Not trivial to eliminate.  Calling code assumes ability to stash the tcl path in them, IIRC</p>",
        "id": 207847365,
        "sender_full_name": "starseeker",
        "timestamp": 1598278200
    },
    {
        "content": "<p>Tk window path rather</p>",
        "id": 207847498,
        "sender_full_name": "starseeker",
        "timestamp": 1598278267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/207847319\">said</a>:</p>\n<blockquote>\n<p>Public struct members don't constitute a contract?</p>\n</blockquote>\n<p>They're just containers.  There is no expectations for C or C++.  They often are assumptions on those containers, but they're all generally subject to error.  That's why for C and C++ at least the best you can generally do is dictate a convention of who owns the memory.</p>",
        "id": 207847613,
        "sender_full_name": "Sean",
        "timestamp": 1598278325
    },
    {
        "content": "<p>C++ formalizes that a fair bit better, but in C it's typically whomever allocated is responsible for releasing.</p>",
        "id": 207847650,
        "sender_full_name": "Sean",
        "timestamp": 1598278343
    },
    {
        "content": "<p>so whoever created the struct would be responsible for ensuring it's embedded values and pointers are \"sane\".  That's also still not a contract on those values by callers though -- it was just the creator/initializer's reponsibility to minimize the risk, ideally provide a safe API, which is what codifies expectations.</p>",
        "id": 207847788,
        "sender_full_name": "Sean",
        "timestamp": 1598278435
    },
    {
        "content": "<p>So, meta issue for a second... up until now we've not considered the libdm/libfb APIs truly public, since they were not intended to survive in their current form.  That's still true - this refactor is not what I would propose if the intent was to establish a proper API.  It feels like you're wanting to treat the function wrappers as something more \"public\" than the old libdm/fb structs - am I misunderstanding the intent?</p>",
        "id": 207848013,
        "sender_full_name": "starseeker",
        "timestamp": 1598278520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/207847365\">said</a>:</p>\n<blockquote>\n<p>Not trivial to eliminate.  Calling code assumes ability to stash the tcl path in them, IIRC</p>\n</blockquote>\n<p>How about making the caller pass a vls to it</p>",
        "id": 207848032,
        "sender_full_name": "Sean",
        "timestamp": 1598278533
    },
    {
        "content": "<p>Not sure how hard that would be - don't know if calling functions are set up to properly manage memory.  We might have to make application global vls strings for that to work in MGED.</p>",
        "id": 207848176,
        "sender_full_name": "starseeker",
        "timestamp": 1598278603
    },
    {
        "content": "<p>Would probably work, but even in MGED introducing new globals just feels wrong...</p>",
        "id": 207848221,
        "sender_full_name": "starseeker",
        "timestamp": 1598278626
    },
    {
        "content": "<p>To the meta point, no -- public API has a much higher burden still.  This is an issue with any functions, not one just applied to public functions.</p>",
        "id": 207848343,
        "sender_full_name": "Sean",
        "timestamp": 1598278675
    },
    {
        "content": "<p>The issue is functions that generate NULL.  It's one thing to be handed NULL and then pass that along, it's another to be the returning source of NULL.</p>",
        "id": 207848436,
        "sender_full_name": "Sean",
        "timestamp": 1598278708
    },
    {
        "content": "<p>For the code having issues from a NULL from one of these functions though, wouldn't it have had the same problems trying to access an invalid struct member in the old code?</p>",
        "id": 207848508,
        "sender_full_name": "starseeker",
        "timestamp": 1598278755
    },
    {
        "content": "<p>The only place that should be given a pass is performance-critical code, so you will/should find deviations in librt and some parts of libbn/libbu used in those performance paths.</p>",
        "id": 207848564,
        "sender_full_name": "Sean",
        "timestamp": 1598278789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/207848508\">said</a>:</p>\n<blockquote>\n<p>For the code having issues from a NULL from one of these functions though, wouldn't it have had the same problems trying to access an invalid struct member in the old code?</p>\n</blockquote>\n<p>It really depends on the specifics, devil in the details.  There are entire theories of corporate development that prohibit refactoring in NULL as it's exceptionally common for code to coincidentally work.  So there could be swaths of logic that happen to gracefully handle a variety of invalid conditions by accident, but handled none the less.  I don't think that's our issue here or concern -- it's the simple principle of having a function that can return NULL, you're supposed to check it otherwise there is no point whatsoever in returning NULL and the consequence will be eventual obscure crashing.</p>",
        "id": 207849244,
        "sender_full_name": "Sean",
        "timestamp": 1598279129
    },
    {
        "content": "<p>We've ran into this issue many times over the years too, so it's not just a rare hypothetical.</p>",
        "id": 207849389,
        "sender_full_name": "Sean",
        "timestamp": 1598279183
    },
    {
        "content": "<p>So is the shortest path forward for to finish the check through the code for the null checks, or should I try to look at excising the bu_vls slots from the dm implementation struct?</p>",
        "id": 207849439,
        "sender_full_name": "starseeker",
        "timestamp": 1598279207
    },
    {
        "content": "<p>Need to tie this off - I'm game to do the work, but need to have a finish line where this can be called done</p>",
        "id": 207849511,
        "sender_full_name": "starseeker",
        "timestamp": 1598279241
    },
    {
        "content": "<p>Shortest and safest path depends if we're talking long or short term, but the difference is probably only an hour or two effort either way.</p>",
        "id": 207849682,
        "sender_full_name": "Sean",
        "timestamp": 1598279307
    },
    {
        "content": "<p>All right - what in your estimate is the best way forward?</p>",
        "id": 207849785,
        "sender_full_name": "starseeker",
        "timestamp": 1598279359
    },
    {
        "content": "<p>Make it so caller doesn't have to check null, make caller pass in container if it would otherwise result in an allocation</p>",
        "id": 207849940,
        "sender_full_name": "Sean",
        "timestamp": 1598279425
    },
    {
        "content": "<p>if null must be returned for some deeper hard-to-untangle reason, then the call sites should get checked</p>",
        "id": 207850000,
        "sender_full_name": "Sean",
        "timestamp": 1598279463
    },
    {
        "content": "<p>I'll see what I can do. </p>\n<p>btw - is this the last big blocker, or have you see other things that'll need to be handled?</p>",
        "id": 207850123,
        "sender_full_name": "starseeker",
        "timestamp": 1598279522
    },
    {
        "content": "<p>(so far - I know you're still commit reviewing...)</p>",
        "id": 207850187,
        "sender_full_name": "starseeker",
        "timestamp": 1598279537
    },
    {
        "content": "<p>I've been getting through about 100 commits per day</p>",
        "id": 207850209,
        "sender_full_name": "Sean",
        "timestamp": 1598279548
    },
    {
        "content": "<p>so more than half way there now</p>",
        "id": 207850220,
        "sender_full_name": "Sean",
        "timestamp": 1598279557
    },
    {
        "content": "<p>course that includes reviewing the new stuff as it's coming in, so it's an uphill struggle :)</p>",
        "id": 207850270,
        "sender_full_name": "Sean",
        "timestamp": 1598279588
    },
    {
        "content": "<p>there's a lot of little undocumented things that I'm concerned about but not enough to hold things up</p>",
        "id": 207850309,
        "sender_full_name": "Sean",
        "timestamp": 1598279619
    },
    {
        "content": "<p>I could hold off and do one big commit to try and clean up libdm :-P</p>",
        "id": 207850321,
        "sender_full_name": "starseeker",
        "timestamp": 1598279629
    },
    {
        "content": "<p>lots of things that beg testing  :(</p>",
        "id": 207850384,
        "sender_full_name": "Sean",
        "timestamp": 1598279645
    },
    {
        "content": "<p>that'd just screw up the commit review rate :P</p>",
        "id": 207850415,
        "sender_full_name": "Sean",
        "timestamp": 1598279666
    },
    {
        "content": "<p>you heard about paragon's give to linux kernel? :)</p>",
        "id": 207850445,
        "sender_full_name": "Sean",
        "timestamp": 1598279689
    },
    {
        "content": "<p>just heard about that yesterday</p>",
        "id": 207850508,
        "sender_full_name": "Sean",
        "timestamp": 1598279721
    },
    {
        "content": "<p>No, haven't been plugged in to outside world much lately - what'd they give?</p>",
        "id": 207850527,
        "sender_full_name": "starseeker",
        "timestamp": 1598279731
    },
    {
        "content": "<p>they submitted their ntfs driver</p>",
        "id": 207850555,
        "sender_full_name": "Sean",
        "timestamp": 1598279748
    },
    {
        "content": "<p>it's a 27k line pull request</p>",
        "id": 207850575,
        "sender_full_name": "Sean",
        "timestamp": 1598279762
    },
    {
        "content": "<p>&lt;snork&gt;  Given how the Linux folks reacted to ZFS, I can't wait to see the comments on that one...</p>",
        "id": 207850677,
        "sender_full_name": "starseeker",
        "timestamp": 1598279790
    },
    {
        "content": "<p>Looks like we've got 4 vls strings in the dm container - two Tcl/Tk drawing window strings, the display name, and a log.</p>",
        "id": 207850794,
        "sender_full_name": "starseeker",
        "timestamp": 1598279863
    },
    {
        "content": "<p>paragon is known for having one of the best ntfs drivers and linux needs it, but they're also notorious for having crappy issues in their drivers (including the ntfs one)</p>",
        "id": 207850801,
        "sender_full_name": "Sean",
        "timestamp": 1598279867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/207850794\">said</a>:</p>\n<blockquote>\n<p>Looks like we've got 4 vls strings in the dm container - two Tcl/Tk drawing window strings, the display name, and a log.</p>\n</blockquote>\n<p>A real cheap 'punt' that avoids lots of restructuring could be to convert them into char[]</p>",
        "id": 207850940,
        "sender_full_name": "Sean",
        "timestamp": 1598279932
    },
    {
        "content": "<p>then you'd only need to worry about the handful of sites that write</p>",
        "id": 207850989,
        "sender_full_name": "Sean",
        "timestamp": 1598279955
    },
    {
        "content": "<p>/me nods - got to check where they're being accessed.</p>",
        "id": 207851028,
        "sender_full_name": "starseeker",
        "timestamp": 1598279973
    },
    {
        "content": "<p>like if you made them four char[255] arrays, just need to make sure nobody writes past that</p>",
        "id": 207851133,
        "sender_full_name": "Sean",
        "timestamp": 1598280011
    },
    {
        "content": "<p>dm_log looks like it should have been a flag from the comment</p>",
        "id": 207851217,
        "sender_full_name": "Sean",
        "timestamp": 1598280066
    },
    {
        "content": "<p>unless it's the actual log, then the comment is just wrong</p>",
        "id": 207851237,
        "sender_full_name": "Sean",
        "timestamp": 1598280077
    },
    {
        "content": "<p>Probably want the Tk paths a bit longer - some of the Itk names can get long.</p>\n<p>I'll have to check, but I think it's supposed to be a log filename.</p>",
        "id": 207851298,
        "sender_full_name": "starseeker",
        "timestamp": 1598280116
    },
    {
        "content": "<p>the other three look like they could get away with #define MAXNAME 255 ; char[MAXNAME] or similar</p>",
        "id": 207851362,
        "sender_full_name": "Sean",
        "timestamp": 1598280126
    },
    {
        "content": "<p>ah, if it's a filepath, then we really gobble up memory but that's fine</p>",
        "id": 207851410,
        "sender_full_name": "Sean",
        "timestamp": 1598280149
    },
    {
        "content": "<p>for filesystem paths use MAXPATHLEN</p>",
        "id": 207851439,
        "sender_full_name": "Sean",
        "timestamp": 1598280160
    },
    {
        "content": "<p>Does Tk have a maximum path length for their window names?  If so that's what we'd want there...</p>",
        "id": 207851512,
        "sender_full_name": "starseeker",
        "timestamp": 1598280200
    },
    {
        "content": "<p>/me flips a type to see what blows up in the build...</p>",
        "id": 207851549,
        "sender_full_name": "starseeker",
        "timestamp": 1598280221
    },
    {
        "content": "<p>I doubt it.</p>",
        "id": 207851552,
        "sender_full_name": "Sean",
        "timestamp": 1598280221
    },
    {
        "content": "<p>in practice for dm, though, the path names are things like .id_0.some_window.childsite.widgetfoo_window.dialog</p>",
        "id": 207851663,
        "sender_full_name": "Sean",
        "timestamp": 1598280259
    },
    {
        "content": "<p>that would be a pretty extreme example too.  most are far more concise</p>",
        "id": 207851755,
        "sender_full_name": "Sean",
        "timestamp": 1598280299
    },
    {
        "content": "<p>OK - as long as Archer doesn't do anything crazy - I remember Bob command line manipulating Itk windows once, and the names were kinda nutty</p>",
        "id": 207851814,
        "sender_full_name": "starseeker",
        "timestamp": 1598280329
    },
    {
        "content": "<p>I've never seen any get close to 256</p>",
        "id": 207851915,
        "sender_full_name": "Sean",
        "timestamp": 1598280371
    },
    {
        "content": "<p>/me nods we can give 255 a shot. I imagine we'll know pretty quick if there's an issue...</p>",
        "id": 207852080,
        "sender_full_name": "starseeker",
        "timestamp": 1598280456
    },
    {
        "content": "<p>I was thinking indexing when I wrote that 0-255 .. size should be 256 so it stays aligned in memory</p>",
        "id": 207852199,
        "sender_full_name": "Sean",
        "timestamp": 1598280493
    },
    {
        "content": "<p>that's also where the calling sites that write into the buffer can then just bu_bomb justifiably and continuing code can assume it always works</p>",
        "id": 207852323,
        "sender_full_name": "Sean",
        "timestamp": 1598280548
    },
    {
        "content": "<p>oh wait</p>",
        "id": 207852536,
        "sender_full_name": "Sean",
        "timestamp": 1598280646
    },
    {
        "content": "<p>so there is another solution here that may be even less work</p>",
        "id": 207852562,
        "sender_full_name": "Sean",
        "timestamp": 1598280661
    },
    {
        "content": "<p>and can keep the vls</p>",
        "id": 207852574,
        "sender_full_name": "Sean",
        "timestamp": 1598280666
    },
    {
        "content": "<p>the issue is strictly that they return NULL, so like dm_get_pathname()  you could just make it halt on that condition.  then callers never need to check.  It's not a great pattern to do aggressively, but it certainly seems reasonable for the four vls functions as they're in the dmp.</p>",
        "id": 207852815,
        "sender_full_name": "Sean",
        "timestamp": 1598280780
    },
    {
        "content": "<p>i.e., they're not pointers in the dmp</p>",
        "id": 207852911,
        "sender_full_name": "Sean",
        "timestamp": 1598280823
    },
    {
        "content": "<p>dm_get_vp() is a good counter-example.  it returns null and is potentially null itself in the dmp.</p>",
        "id": 207853054,
        "sender_full_name": "Sean",
        "timestamp": 1598280877
    },
    {
        "content": "<p>Make it hault?  You mean bu_exit?</p>",
        "id": 207853330,
        "sender_full_name": "starseeker",
        "timestamp": 1598281003
    },
    {
        "content": "<p>no, bu_exit is for applications</p>",
        "id": 207853411,
        "sender_full_name": "Sean",
        "timestamp": 1598281049
    },
    {
        "content": "<p>bu_bomb</p>",
        "id": 207853412,
        "sender_full_name": "Sean",
        "timestamp": 1598281051
    },
    {
        "content": "<p>or a magic number check</p>",
        "id": 207853424,
        "sender_full_name": "Sean",
        "timestamp": 1598281061
    },
    {
        "content": "<p>(which bu_bombs)</p>",
        "id": 207853435,
        "sender_full_name": "Sean",
        "timestamp": 1598281066
    },
    {
        "content": "<p>since that's conceptually what you're doing with the tests anyways, just checking the dmp</p>",
        "id": 207853478,
        "sender_full_name": "Sean",
        "timestamp": 1598281082
    },
    {
        "content": "<p>might as well shove a magic in there and BU_CKMAG it</p>",
        "id": 207853519,
        "sender_full_name": "Sean",
        "timestamp": 1598281093
    },
    {
        "content": "<p>then no null return possible</p>",
        "id": 207853545,
        "sender_full_name": "Sean",
        "timestamp": 1598281105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> a quick experiment with a BU_CKMAG in the dm causes a couple of MGED crashes...</p>",
        "id": 207857381,
        "sender_full_name": "starseeker",
        "timestamp": 1598282838
    },
    {
        "content": "<p>Working through them...</p>",
        "id": 207857472,
        "sender_full_name": "starseeker",
        "timestamp": 1598282872
    },
    {
        "content": "<p>There we go - was r76921 what you were thinking?</p>",
        "id": 207857943,
        "sender_full_name": "starseeker",
        "timestamp": 1598283071
    },
    {
        "content": "<p>(along with r76922)</p>",
        "id": 207859306,
        "sender_full_name": "starseeker",
        "timestamp": 1598283681
    },
    {
        "content": "<p>If so I'll have to make another pass in the calling code to handle the (DM-NULL) returns instead of NULL (there may still be cases were we don't want to feed that to a Tcl script for execution...)</p>",
        "id": 207859432,
        "sender_full_name": "starseeker",
        "timestamp": 1598283737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/207857381\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102902\">Sean</span> a quick experiment with a BU_CKMAG in the dm causes a couple of MGED crashes...</p>\n</blockquote>\n<p>Nominally means NULL is/was being returned at least somewhere/sometime!  That's why all the fuss... even if the condition is an unexpected/unintended behavior or even if it happened to work today (might not tomorrow after some other change or recompile).</p>",
        "id": 207863094,
        "sender_full_name": "Sean",
        "timestamp": 1598285860
    },
    {
        "content": "<p>I noticed several of the funcs are unused -- what's up with that? :)</p>",
        "id": 207863171,
        "sender_full_name": "Sean",
        "timestamp": 1598285890
    },
    {
        "content": "<p>At least one of them I just added as a get/set pairing, when only set was needed</p>",
        "id": 207868298,
        "sender_full_name": "starseeker",
        "timestamp": 1598288643
    },
    {
        "content": "<p>Actually, crash ended up being silly - just me missing one of the magic initialization cases in the allocation logic.</p>",
        "id": 207868596,
        "sender_full_name": "starseeker",
        "timestamp": 1598288811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/207868298\">said</a>:</p>\n<blockquote>\n<p>At least one of them I just added as a get/set pairing, when only set was needed</p>\n</blockquote>\n<p>But if nothing reads them, why bother setting them... can they be removed?</p>",
        "id": 207886357,
        "sender_full_name": "Sean",
        "timestamp": 1598297552
    },
    {
        "content": "<p>It's read internally by the ogl backend, IIRC - a parameter passed from the app to the backend.  I'm sure it can be refactored somehow - there's a TODO note about it - but I haven't had time to fool with it.  That level of the drawing logic, it's easy to break things in subtle ways that are hard to catch.</p>",
        "id": 207889838,
        "sender_full_name": "starseeker",
        "timestamp": 1598299306
    },
    {
        "content": "<p>OK, so upon further investigation (at least in latest trunk) the X dm seems to work embedded in Tk on Linux - it's only the dmtype set (runtime switching of the display manager types) that's failing.</p>\n<p>Setting it in the .mgedrc works fine.  That's not too surprising, really - dmtype was always a rather evil hack...</p>",
        "id": 207978497,
        "sender_full_name": "starseeker",
        "timestamp": 1598369511
    },
    {
        "content": "<p>does attach work?</p>",
        "id": 207987486,
        "sender_full_name": "Sean",
        "timestamp": 1598373855
    },
    {
        "content": "<p>attach X .. attach ogl</p>",
        "id": 207987504,
        "sender_full_name": "Sean",
        "timestamp": 1598373865
    },
    {
        "content": "<p>Yes, attach works.</p>",
        "id": 208003456,
        "sender_full_name": "starseeker",
        "timestamp": 1598380439
    },
    {
        "content": "<p>both simultaneously?</p>",
        "id": 208023400,
        "sender_full_name": "Sean",
        "timestamp": 1598389473
    },
    {
        "content": "<p>Yes.</p>",
        "id": 208023792,
        "sender_full_name": "starseeker",
        "timestamp": 1598389693
    },
    {
        "content": "<p>mged -c -a X share/db/moss brings up the X based version, then I can \"attach ogl\" and also get an OpenGL version.  \"e all.g\" draws to both.</p>",
        "id": 208024022,
        "sender_full_name": "starseeker",
        "timestamp": 1598389821
    },
    {
        "content": "<p>That's great.  It should accept an arbitrary number of attach calls.  That's wicked fun way to set up mged on CAVE walls and projection displays.</p>",
        "id": 208024105,
        "sender_full_name": "Sean",
        "timestamp": 1598389890
    },
    {
        "content": "<p>just fyi, in regex [12] and [1-2] are equivalent (saw the real error, missing a right bracket)</p>",
        "id": 208050856,
        "sender_full_name": "Sean",
        "timestamp": 1598414354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> any more issues pop up in commit review?</p>",
        "id": 208548238,
        "sender_full_name": "starseeker",
        "timestamp": 1598875762
    },
    {
        "content": "<p>quite a few flagged as needing testing, but none yet that warrant release blocking.  some still to document; more likely to miss one or two of those :/ ..  I think I'm over 90% through, so should be done soon.</p>",
        "id": 208607319,
        "sender_full_name": "Sean",
        "timestamp": 1598903654
    },
    {
        "content": "<p>/me stares at the MGED and dm-ogl code, and reluctantly concludes that a major shift in the way dm/fb rendering events are managed is too much of a time sink to tangle with for now...</p>",
        "id": 208630437,
        "sender_full_name": "starseeker",
        "timestamp": 1598918176
    },
    {
        "content": "<p>Will require a deep dive into Tk window setup, management, and events... blegh.</p>",
        "id": 208630563,
        "sender_full_name": "starseeker",
        "timestamp": 1598918282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> one thing you could check for me -- can you see if obj export is working?  see if an object from bot_dump and g-obj will open in anything else.</p>",
        "id": 208648158,
        "sender_full_name": "Sean",
        "timestamp": 1598940888
    },
    {
        "content": "<p>was reported and recorded but don't think it got checked at all as a release blocker, don't think we have anything that validates obj, only verification</p>",
        "id": 208648274,
        "sender_full_name": "Sean",
        "timestamp": 1598941041
    },
    {
        "content": "<p>/me is down to 165  remaining, woot!</p>",
        "id": 208653424,
        "sender_full_name": "Sean",
        "timestamp": 1598945739
    },
    {
        "content": "<p>bot_dump'ed a facetized sph to an obj file, and ran ./bin/g-obj -o g_obj.obj sph_bot.g sph.s on the same sph - both .obj files opened successfully in meshlab.</p>\n<p>So working at a basic level, at least on Linux.</p>",
        "id": 208675579,
        "sender_full_name": "starseeker",
        "timestamp": 1598960818
    },
    {
        "content": "<p>Is it me, or is sourceforge slow today?</p>",
        "id": 208697084,
        "sender_full_name": "starseeker",
        "timestamp": 1598971495
    },
    {
        "content": "<p>huh, okay.  thanks for checking!  that's really bizarre because I do recall that distinctly not working.  Does Blender open them?  I'll have to recheck xcode and cura, or maybe it's somehow mac-specific.</p>",
        "id": 209061344,
        "sender_full_name": "Sean",
        "timestamp": 1599203131
    },
    {
        "content": "<p>I'll try on Windows - rtwizard is barking only on Windows, so maybe it'll expose this as well...</p>",
        "id": 209086395,
        "sender_full_name": "starseeker",
        "timestamp": 1599221802
    },
    {
        "content": "<p>Seems OK on Windows as well.  Only thing noticed so far was an empty file getting created if I tried the -b option with -t obj for bot_dump.  It provided an informative error message, but ideally shouldn't have produced the empty output file.</p>",
        "id": 209112443,
        "sender_full_name": "starseeker",
        "timestamp": 1599235793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> do you have any more information you can give about the NUL file getting created -- what does \"test -f /dev/null\" report?</p>",
        "id": 209816956,
        "sender_full_name": "Sean",
        "timestamp": 1599848530
    },
    {
        "content": "<p>I'll see if I can tell - it only fails when run inside of CTest - a straight command-line run succeeds</p>",
        "id": 209817085,
        "sender_full_name": "starseeker",
        "timestamp": 1599848597
    },
    {
        "content": "<p>all the more bizarre.. 'test' is used all throughout the benchmark and other scripts run by ctest.</p>",
        "id": 209817650,
        "sender_full_name": "Sean",
        "timestamp": 1599848894
    },
    {
        "content": "<p>very concerning if something this fundamental isn't reliable</p>",
        "id": 209817836,
        "sender_full_name": "Sean",
        "timestamp": 1599848992
    },
    {
        "content": "<p>I'm not sure what to make of this.   If I put the following in:</p>\n<div class=\"codehilite\"><pre><span></span><code>if test -f /dev/null ; then\n    echo $?\n    echo &quot;have /dev/null&quot;\nelse\n    echo $?\n    echo &quot;no /dev/null&quot;\nfi\n</code></pre></div>\n\n\n<p>I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>875: 1\n875: no /dev/null\n</code></pre></div>",
        "id": 209818428,
        "sender_full_name": "starseeker",
        "timestamp": 1599849260
    },
    {
        "content": "<p>I get that both in and out of CTest, but if I make the \"NUL\" file that gets created read-only CTest will abort after trying to write to it and failing, but running outside of CTest benchmark still proceeds.</p>",
        "id": 209818536,
        "sender_full_name": "starseeker",
        "timestamp": 1599849336
    },
    {
        "content": "<p>put in something more explicit like \"echo <code>ls -la /dev/null</code>\" before the test and</p>",
        "id": 209818545,
        "sender_full_name": "Sean",
        "timestamp": 1599849339
    },
    {
        "content": "<p>those were backticked</p>",
        "id": 209818558,
        "sender_full_name": "Sean",
        "timestamp": 1599849348
    },
    {
        "content": "<p>could just put ls -la /dev/null to make sure it's not running in some kind of environment, also \"which test\" and see if /bin/test -f /dev/null and i [ -f /dev/null ]  behaves differently...</p>",
        "id": 209818701,
        "sender_full_name": "Sean",
        "timestamp": 1599849403
    },
    {
        "content": "<p>crw-rw-rw- 1 root root 1, 3 Sep 2 16:50 /dev/null</p>",
        "id": 209818750,
        "sender_full_name": "starseeker",
        "timestamp": 1599849430
    },
    {
        "content": "<p>/bin/test and /usr/bin/test don't seem to make a difference...</p>",
        "id": 209819102,
        "sender_full_name": "starseeker",
        "timestamp": 1599849606
    },
    {
        "content": "<p>what about:  if [ -f /dev/null ] ; then ...</p>",
        "id": 209819205,
        "sender_full_name": "Sean",
        "timestamp": 1599849670
    },
    {
        "content": "<p>No change.</p>",
        "id": 209819247,
        "sender_full_name": "starseeker",
        "timestamp": 1599849702
    },
    {
        "content": "<p>and this is linux you said??</p>",
        "id": 209819338,
        "sender_full_name": "Sean",
        "timestamp": 1599849741
    },
    {
        "content": "<p>Yes - Linux + CTest</p>",
        "id": 209819355,
        "sender_full_name": "starseeker",
        "timestamp": 1599849752
    },
    {
        "content": "<p>how are you invoking ctest?</p>",
        "id": 209819373,
        "sender_full_name": "Sean",
        "timestamp": 1599849761
    },
    {
        "content": "<p>ctest -R benchmark --verbose</p>",
        "id": 209819389,
        "sender_full_name": "starseeker",
        "timestamp": 1599849769
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>dvn=$(test -f /dev/null)\necho $dvn\necho $?\n</code></pre></div>\n\n\n<p>returns:</p>\n<div class=\"codehilite\"><pre><span></span><code>0\n</code></pre></div>",
        "id": 209819481,
        "sender_full_name": "starseeker",
        "timestamp": 1599849841
    },
    {
        "content": "<p>and silly question, but sure it's regenerating the benchmark script, picking up the changs?</p>",
        "id": 209819551,
        "sender_full_name": "Sean",
        "timestamp": 1599849869
    },
    {
        "content": "<p>this literally makes no sense...</p>",
        "id": 209819632,
        "sender_full_name": "Sean",
        "timestamp": 1599849914
    },
    {
        "content": "<p>I'm directly editing the copy in bin/benchmark, and not re-running CMake (not silly question, I made that mistake when I first started trying to fix)</p>",
        "id": 209819637,
        "sender_full_name": "starseeker",
        "timestamp": 1599849919
    },
    {
        "content": "<p>with ctest --verbose, does it show the actual shell command it's invoking?</p>",
        "id": 209819759,
        "sender_full_name": "Sean",
        "timestamp": 1599849973
    },
    {
        "content": "<p>/usr/bin/sh \"/home/cyapp/RELEASE/build2/bin/benchmark\" \"run\" \"TIMEFRAME=1\"</p>",
        "id": 209819790,
        "sender_full_name": "starseeker",
        "timestamp": 1599849988
    },
    {
        "content": "<p>But if I run that straight up, it does start running even with the NUL file read only (all the printouts seem to be the same though...)</p>",
        "id": 209819870,
        "sender_full_name": "starseeker",
        "timestamp": 1599850045
    },
    {
        "content": "<p>is there a trace flag  or something that can give more info?</p>",
        "id": 209819991,
        "sender_full_name": "Sean",
        "timestamp": 1599850090
    },
    {
        "content": "<p>-x to the shell script, but that's not helping much...</p>",
        "id": 209820330,
        "sender_full_name": "starseeker",
        "timestamp": 1599850294
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>+ ls -la /dev/null\n+ echo crw-rw-rw- 1 root root 1, 3 Sep 2 16:50 /dev/null\ncrw-rw-rw- 1 root root 1, 3 Sep 2 16:50 /dev/null\n+ test -f /dev/null\n+ dvn=\n+ echo\n\n+ echo 0\n0\n+ [ -f /dev/null ]\n+ echo 1\n1\n+ echo no /dev/null\nno /dev/null\n</code></pre></div>",
        "id": 209820438,
        "sender_full_name": "starseeker",
        "timestamp": 1599850344
    },
    {
        "content": "<p>Interesting, I didn't notice before, but I'm seeing the behavior here in ctest too</p>",
        "id": 209821017,
        "sender_full_name": "Sean",
        "timestamp": 1599850633
    },
    {
        "content": "<p>this is beyond messed up...</p>",
        "id": 209821055,
        "sender_full_name": "Sean",
        "timestamp": 1599850664
    },
    {
        "content": "<p>oh crap, right, huh.</p>",
        "id": 209821683,
        "sender_full_name": "Sean",
        "timestamp": 1599850989
    },
    {
        "content": "<p>my mistake all along.</p>",
        "id": 209821692,
        "sender_full_name": "Sean",
        "timestamp": 1599850995
    },
    {
        "content": "<p>While we're at it - should I go ahead and pull in the gcv changes?</p>",
        "id": 209821855,
        "sender_full_name": "starseeker",
        "timestamp": 1599851083
    },
    {
        "content": "<p>fixed</p>",
        "id": 209821892,
        "sender_full_name": "Sean",
        "timestamp": 1599851098
    },
    {
        "content": "<p>no, I'd hold up on them.  lots of potential for brokenness.</p>",
        "id": 209822017,
        "sender_full_name": "Sean",
        "timestamp": 1599851161
    },
    {
        "content": "<p>/me nods - agreed.  So RELEASE isn't quite equal to trunk, I misspoke earlier</p>",
        "id": 209822096,
        "sender_full_name": "starseeker",
        "timestamp": 1599851187
    },
    {
        "content": "<p>I didn't look in detail, but at a glance appeared to just wildcard it</p>",
        "id": 209822171,
        "sender_full_name": "Sean",
        "timestamp": 1599851252
    },
    {
        "content": "<p>The gcv changes?  Well, the intent was to explicitly set the context, instead of assuming MODEL.</p>",
        "id": 209822278,
        "sender_full_name": "starseeker",
        "timestamp": 1599851300
    },
    {
        "content": "<p>Essentially remove the implicit assumption, and check extensions and the like against more types than just the model types.</p>",
        "id": 209822328,
        "sender_full_name": "starseeker",
        "timestamp": 1599851332
    },
    {
        "content": "<p>right, but a plugin could be multiple / any contexts</p>",
        "id": 209822333,
        "sender_full_name": "Sean",
        "timestamp": 1599851336
    },
    {
        "content": "<p>Right.  In which case, it sets the generalized match, the gcv program will pass its inputs to the plugin regardless, and it's up to the plugin to figure it out.</p>",
        "id": 209822459,
        "sender_full_name": "starseeker",
        "timestamp": 1599851386
    },
    {
        "content": "<p>which then begs what are the contexts for, just complicates api and callers if most of our tools will want to allow multiple types</p>",
        "id": 209822538,
        "sender_full_name": "Sean",
        "timestamp": 1599851412
    },
    {
        "content": "<p>I'm not sure they will - for example, wouldn't icv want to accept just image types?</p>",
        "id": 209822612,
        "sender_full_name": "starseeker",
        "timestamp": 1599851471
    },
    {
        "content": "<p>already ran into a problem with sumanga's plugin where he had to force PNG mime type because some other plugin was happily parsing it as pix data</p>",
        "id": 209822615,
        "sender_full_name": "Sean",
        "timestamp": 1599851473
    },
    {
        "content": "<p>no, probably not .. same reasons it's a problem in gcv.  someone might want to import image data from a spreadsheet or some random application/vendor proprietary type</p>",
        "id": 209822758,
        "sender_full_name": "Sean",
        "timestamp": 1599851535
    },
    {
        "content": "<p>That's going to place a massive input validation burden on each individual plugin though - that feels wrong.</p>",
        "id": 209822812,
        "sender_full_name": "starseeker",
        "timestamp": 1599851568
    },
    {
        "content": "<p>that would be wrong, I agree, and it's worse than that</p>",
        "id": 209822884,
        "sender_full_name": "Sean",
        "timestamp": 1599851615
    },
    {
        "content": "<p>pix reader plugin isn't going to have any basis for denying input really</p>",
        "id": 209822930,
        "sender_full_name": "Sean",
        "timestamp": 1599851641
    },
    {
        "content": "<p>for exampl</p>",
        "id": 209822976,
        "sender_full_name": "Sean",
        "timestamp": 1599851645
    },
    {
        "content": "<p>Right. That's I think the original motivation for the contexts - there's no guarantee that file extensions are unique mappings to types, so we may need the context to disambiguate if (for example) an image extension and a geometry extension are the same.</p>",
        "id": 209823254,
        "sender_full_name": "starseeker",
        "timestamp": 1599851752
    },
    {
        "content": "<p>it's up to icv/gcv to somehow prioritize unless overridden based on file suffix and/or signature or some other measure .. a callback can't/shouldn't know about other formats</p>",
        "id": 209823256,
        "sender_full_name": "Sean",
        "timestamp": 1599851753
    },
    {
        "content": "<p>that's a case of clear ambiguity, that's fine</p>",
        "id": 209823384,
        "sender_full_name": "Sean",
        "timestamp": 1599851799
    },
    {
        "content": "<p>that has to be called out, it's fine if that case has to be explicit</p>",
        "id": 209823430,
        "sender_full_name": "Sean",
        "timestamp": 1599851818
    },
    {
        "content": "<p>How do we allow the user to specify the resolution?</p>",
        "id": 209823448,
        "sender_full_name": "starseeker",
        "timestamp": 1599851828
    },
    {
        "content": "<p>before even getting to options, there's a question of whether the file is even getting routed to the right plugin.  maybe a scoring system?</p>",
        "id": 209823578,
        "sender_full_name": "Sean",
        "timestamp": 1599851889
    },
    {
        "content": "<p>I don't quite follow about the callback - the callbacks can't really be format specific.  GDAL is currently the canonical example, but assimp will be similar.</p>",
        "id": 209823596,
        "sender_full_name": "starseeker",
        "timestamp": 1599851898
    },
    {
        "content": "<p>what do you mean the callbacks can't be format specific?</p>",
        "id": 209823736,
        "sender_full_name": "Sean",
        "timestamp": 1599851975
    },
    {
        "content": "<p>they are plugin specific</p>",
        "id": 209823754,
        "sender_full_name": "Sean",
        "timestamp": 1599851983
    },
    {
        "content": "<p>a plugin certainly could be specific to a format</p>",
        "id": 209823770,
        "sender_full_name": "Sean",
        "timestamp": 1599851992
    },
    {
        "content": "<p>and their callback would be specific to that format...</p>",
        "id": 209823828,
        "sender_full_name": "Sean",
        "timestamp": 1599852004
    },
    {
        "content": "<p>Right, but plugins in general aren't necessarily format specific.  Hence the \"wildcard\" specifier for types when hooking in a plugin</p>",
        "id": 209823864,
        "sender_full_name": "starseeker",
        "timestamp": 1599852027
    },
    {
        "content": "<p>(if that plugin does support multiple types - otherwise you specify the one it does support)</p>",
        "id": 209823897,
        "sender_full_name": "starseeker",
        "timestamp": 1599852048
    },
    {
        "content": "<p>Unless you're looking for some way for a plugin to register itself for multiple formats - that'd be a completely different architecture than what we've got now...</p>",
        "id": 209823962,
        "sender_full_name": "starseeker",
        "timestamp": 1599852086
    },
    {
        "content": "<p>sure, but that's a different statement than \"can't\" .. they can and are .. and they might not be, and sometimes aren't</p>",
        "id": 209823965,
        "sender_full_name": "Sean",
        "timestamp": 1599852089
    },
    {
        "content": "<p>if they're all wildcard, then there wouldn't really be much point in typing at all and the api complexity it entail</p>",
        "id": 209824067,
        "sender_full_name": "Sean",
        "timestamp": 1599852130
    },
    {
        "content": "<p>Sure, but the majority aren't general and if we can limit the types of data those limited ones get fed it bounds the data validation problem somewhat.</p>",
        "id": 209824150,
        "sender_full_name": "starseeker",
        "timestamp": 1599852189
    },
    {
        "content": "<p>sure but it doesn't solve the problem :)</p>",
        "id": 209824314,
        "sender_full_name": "Sean",
        "timestamp": 1599852272
    },
    {
        "content": "<p>i mean png-to-vol is a good example.  if we marked the mime type as auto, then gdal proceeded to grab the input and crash-n-burned on it.  if marked as png, then the new plugin got to try.</p>",
        "id": 209824522,
        "sender_full_name": "Sean",
        "timestamp": 1599852373
    },
    {
        "content": "<p>new plugin was made to use icv, so in theory it handles any icv type now, but can't set a type that gets it routed to it without it being specific</p>",
        "id": 209824586,
        "sender_full_name": "Sean",
        "timestamp": 1599852416
    },
    {
        "content": "<p>My off-the-cuff thought there was to set a generic type and an image context - that way the plugin would get a crack at anything gcv identifies as image data.</p>",
        "id": 209824690,
        "sender_full_name": "starseeker",
        "timestamp": 1599852468
    },
    {
        "content": "<p>The png only version would get a PNG image type instead of the generic type and the image context, which means it would only be invoked for PNG image data.</p>",
        "id": 209824813,
        "sender_full_name": "starseeker",
        "timestamp": 1599852525
    },
    {
        "content": "<p>I mean in fairness, this is probably a case where there's a genuine conflict -- both gdal and an icv reader can read images</p>",
        "id": 209824847,
        "sender_full_name": "Sean",
        "timestamp": 1599852548
    },
    {
        "content": "<p>so needs someway to force which and/or fallback to another when the one chose fails and there were alternatives</p>",
        "id": 209824883,
        "sender_full_name": "Sean",
        "timestamp": 1599852579
    },
    {
        "content": "<p>/me nods - I don't think we've worked out that part of the command option set yet - this may be the first case that's popped up that actually results in it tripping on the issue.</p>",
        "id": 209824983,
        "sender_full_name": "starseeker",
        "timestamp": 1599852624
    },
    {
        "content": "<p>in this case, we didn't actually want a png-only version -- want it to be any icv format</p>",
        "id": 209824985,
        "sender_full_name": "Sean",
        "timestamp": 1599852626
    },
    {
        "content": "<p>Right, but that's an interesting point.  If we did have a PNG specific version and the generic icv version both present, it would be a reasonable inference that the format specific one is in there because it could do a better job on that specific format than the generic alternative.  (Otherwise, why have both in the first place?)</p>\n<p>That breaks down when we get to more complex things like geometry where it's too complex to guarantee one of anything is better than another, of course, but the inference will likely still be drawn.</p>",
        "id": 209825172,
        "sender_full_name": "starseeker",
        "timestamp": 1599852731
    },
    {
        "content": "<p>I don't really  have any good answers - the existing gcv app was implemented with the mindset of replacing all of the <em>-g and g-</em> tools (which didn't impose any of the multiple plugin issues of the more general solution.)  So it's probably got quite a few limitations of that sort...</p>",
        "id": 209825533,
        "sender_full_name": "starseeker",
        "timestamp": 1599852929
    },
    {
        "content": "<p>yeah, I don't think we want to build assumptions like that into the system.  we either need to find a way to let plugins encode/grade/characterize themselves or let it get resolved explicitly by the caller</p>",
        "id": 209825536,
        "sender_full_name": "Sean",
        "timestamp": 1599852931
    },
    {
        "content": "<p>just because one plugin reads multiple formats (e.g., assimp) and another one format (e.g., stl) doesn't mean either is better at it and likely isn't the case</p>",
        "id": 209825627,
        "sender_full_name": "Sean",
        "timestamp": 1599852971
    },
    {
        "content": "<p>I know, but a naive user looking for solutions will see they have an stl file, see \"stl\" in the listed plugins, and almost certainly jump to that one.  If we're lucky, they may think to look for other options if that one fails, but even money they won't.</p>",
        "id": 209825714,
        "sender_full_name": "starseeker",
        "timestamp": 1599853045
    },
    {
        "content": "<p>if it were the same author, then I could see the case for inferring \"png\" plugin trumps \"*\"plugin when presented with a png file, but that's not an assumption we can make</p>",
        "id": 209825720,
        "sender_full_name": "Sean",
        "timestamp": 1599853048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/209825714\">said</a>:</p>\n<blockquote>\n<p>I know, but a naive user looking for solutions will see they have an stl file, see \"stl\" in the listed plugins, and almost certainly jump to that one.  If we're lucky, they may think to look for other options if that one fails, but even money they won't.</p>\n</blockquote>\n<p>sure and that behavior doesn't present a problem... let them explore</p>",
        "id": 209825803,
        "sender_full_name": "Sean",
        "timestamp": 1599853087
    },
    {
        "content": "<p>they can infer and assume whatever they like</p>",
        "id": 209825827,
        "sender_full_name": "Sean",
        "timestamp": 1599853100
    },
    {
        "content": "<p>it's whether the code is inferring and assuming anything that we have control over</p>",
        "id": 209825847,
        "sender_full_name": "Sean",
        "timestamp": 1599853114
    },
    {
        "content": "<p>I'm suggesting the code should not, for example, \"prefer\" sending a .png file to a particular plugin because it's name has 'png' in it or it's type was set to 'image/png\" whereas the icv and gdal and other plugins declared multiple image support</p>",
        "id": 209826019,
        "sender_full_name": "Sean",
        "timestamp": 1599853229
    },
    {
        "content": "<p>But it will need to prefer something, unless we want to scatter-gun multiple conversion attempts in parallel automatically and try to detect the \"best\" result somehow...</p>",
        "id": 209826096,
        "sender_full_name": "starseeker",
        "timestamp": 1599853285
    },
    {
        "content": "<p>i.e., specific type shouldn't intrinsically trump a wildcard type; wildcard should just be like a globbed expansion of types (and maybe we need to make it be something like that)</p>",
        "id": 209826130,
        "sender_full_name": "Sean",
        "timestamp": 1599853315
    },
    {
        "content": "<p>We can establish a plugin ranking for plugins we are providing, but if users start hooking in their own 3rd party plugins how will that interact?</p>",
        "id": 209826189,
        "sender_full_name": "starseeker",
        "timestamp": 1599853328
    },
    {
        "content": "<p>it could need to pick something, but not necessarily \"prefer\"</p>",
        "id": 209826201,
        "sender_full_name": "Sean",
        "timestamp": 1599853337
    },
    {
        "content": "<p>Oh, blast it:</p>\n<div class=\"codehilite\"><pre><span></span><code>Files present after distclean in /home/user/RELEASE-build/distcheck-autodetect_release/build:\nbench/NUL\n</code></pre></div>",
        "id": 209826275,
        "sender_full_name": "starseeker",
        "timestamp": 1599853379
    },
    {
        "content": "<p>yeah, I don't see how ranking would work (and not b totally gameable)</p>",
        "id": 209826279,
        "sender_full_name": "Sean",
        "timestamp": 1599853382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112516\">starseeker</span> <a href=\"#narrow/stream/104062-general/topic/Recent.20Compilation.20Errors/near/209826275\">said</a>:</p>\n<blockquote>\n<p>Oh, blast it:</p>\n<div class=\"codehilite\"><pre><span></span><code>Files present after distclean in /home/user/RELEASE-build/distcheck-autodetect_release/build:\nbench/NUL\n</code></pre></div>\n\n\n</blockquote>\n<p>that's certainly from earlier testing.</p>",
        "id": 209826334,
        "sender_full_name": "Sean",
        "timestamp": 1599853416
    },
    {
        "content": "<p>/me double checks to make sure he's got the test -e update from trunk</p>",
        "id": 209826338,
        "sender_full_name": "starseeker",
        "timestamp": 1599853419
    },
    {
        "content": "<p>I don't get a NUL any more</p>",
        "id": 209826468,
        "sender_full_name": "Sean",
        "timestamp": 1599853479
    },
    {
        "content": "<p>Doesn't look like it - let me make absolutely sure and start clean again...</p>",
        "id": 209826496,
        "sender_full_name": "starseeker",
        "timestamp": 1599853498
    },
    {
        "content": "<p>kind of funny that it seemed to work writing out a NUL file.. it almost certainly wasn't fully behaving and just appeared to work</p>",
        "id": 209826534,
        "sender_full_name": "Sean",
        "timestamp": 1599853518
    },
    {
        "content": "<p>make sure you don't still have a customized installed script</p>",
        "id": 209826605,
        "sender_full_name": "Sean",
        "timestamp": 1599853559
    },
    {
        "content": "<p>with debug printings and such</p>",
        "id": 209826657,
        "sender_full_name": "Sean",
        "timestamp": 1599853568
    },
    {
        "content": "<p>/me nods - clean SVN release branch, updated, with the trunk fix pulled in.</p>",
        "id": 209826760,
        "sender_full_name": "starseeker",
        "timestamp": 1599853617
    },
    {
        "content": "<p>it all makes sense now.  I got my flags mixed up forgetting that /dev/null is a file in the eyes of the filesystem, but not in the eyes of the test command where it only distinguishes \"regular\" files</p>",
        "id": 209826806,
        "sender_full_name": "Sean",
        "timestamp": 1599853634
    },
    {
        "content": "<p>note, test -f /dev/null did not return 0 for you.  looking back, your snippet printed the return code of running the 'echo' command. ;-)</p>",
        "id": 209827044,
        "sender_full_name": "Sean",
        "timestamp": 1599853777
    },
    {
        "content": "<p>OK, works in a clean toplevel test... kicking off distcheck-full again</p>",
        "id": 209827072,
        "sender_full_name": "starseeker",
        "timestamp": 1599853789
    },
    {
        "content": "<p>it returns 1</p>",
        "id": 209827076,
        "sender_full_name": "Sean",
        "timestamp": 1599853791
    },
    {
        "content": "<p>Ah.  Figures.   I still can't believe I'm enabling you to keep shell around by making it work on Windows... ;-)</p>",
        "id": 209827221,
        "sender_full_name": "starseeker",
        "timestamp": 1599853847
    },
    {
        "content": "<p>It's even worse than regex expressions</p>",
        "id": 209827250,
        "sender_full_name": "starseeker",
        "timestamp": 1599853871
    },
    {
        "content": "<p>OpenBSD behaved itself, by the way.</p>",
        "id": 209827409,
        "sender_full_name": "starseeker",
        "timestamp": 1599853937
    },
    {
        "content": "<p>I'd still love to create a proper geometry shell, gash or whatever for navigating a geometry filesystem using libged commands and shell intrinsics</p>",
        "id": 209827510,
        "sender_full_name": "Sean",
        "timestamp": 1599854002
    },
    {
        "content": "<p>then we could have some seriously (more) powerful scripting constructs for creating and manipulating geometry</p>",
        "id": 209827568,
        "sender_full_name": "Sean",
        "timestamp": 1599854035
    },
    {
        "content": "<p>we're so close</p>",
        "id": 209827890,
        "sender_full_name": "Sean",
        "timestamp": 1599854210
    },
    {
        "content": "<p>gsh is a start - still just a raw argc/argv interface right now, and I'm not happy with the subprocess callback, but it's heading in that direction.</p>",
        "id": 209827968,
        "sender_full_name": "starseeker",
        "timestamp": 1599854272
    },
    {
        "content": "<p>gsh is cool, but that's completely on the other end of the spectrum.</p>",
        "id": 209828163,
        "sender_full_name": "Sean",
        "timestamp": 1599854382
    },
    {
        "content": "<p>Oh, just so I know where to look - are you planning to update the NEWS file in trunk, or RELEASE?</p>",
        "id": 209828167,
        "sender_full_name": "starseeker",
        "timestamp": 1599854386
    },
    {
        "content": "<p>i'm talking about taking something like zsh or bash and replacing all the libc I/O calls with libg I/O calls</p>",
        "id": 209828257,
        "sender_full_name": "Sean",
        "timestamp": 1599854425
    },
    {
        "content": "<p>Ah - you mean a <em>complete</em> port of the shell environment, not just some shell interaction constructs on top of the argc/argv calls</p>",
        "id": 209828320,
        "sender_full_name": "starseeker",
        "timestamp": 1599854462
    },
    {
        "content": "<p>having a full \"geometry shell\" environment including notion of current working dir, most of the built-in commands like cd, pwd, ls, stat, etc, plus command-line editing, command history, key bindings, terminal interfacing, etc</p>",
        "id": 209828458,
        "sender_full_name": "Sean",
        "timestamp": 1599854540
    },
    {
        "content": "<p>right, full deal</p>",
        "id": 209828477,
        "sender_full_name": "Sean",
        "timestamp": 1599854549
    },
    {
        "content": "<p>we're literally less than a gsoc-project away from that being realizable</p>",
        "id": 209828492,
        "sender_full_name": "Sean",
        "timestamp": 1599854561
    },
    {
        "content": "<p>that's why I started putting in the libbu/librt dir.h API as that's the foundation of the shell</p>",
        "id": 209828556,
        "sender_full_name": "Sean",
        "timestamp": 1599854604
    },
    {
        "content": "<p>I considered for a while how we could actually use shells unmodified, but that would require some pretty heavy FUSE integration work.  when I last looked, it felt like creating a full FUSE filesystem driver was going to be quite a bit more work than porting and customizing a shell.</p>",
        "id": 209828787,
        "sender_full_name": "Sean",
        "timestamp": 1599854715
    },
    {
        "content": "<p>plus there are some legacy shell constructs we probably don't want to keep</p>",
        "id": 209828827,
        "sender_full_name": "Sean",
        "timestamp": 1599854744
    },
    {
        "content": "<p>/me nods.  How would terminal interaction work with Windows though?  Only native sh port I'm familiar with other than the Git thing is the Windows zsh port from about 10 years ago... zsh-nt or some such.</p>",
        "id": 209829223,
        "sender_full_name": "starseeker",
        "timestamp": 1599854982
    },
    {
        "content": "<p>terminal is a separate issue from the shell.  can display a shell in any text environment, even dumb ones like a Qt text widget (just a lot won't display and behave right)</p>",
        "id": 209829367,
        "sender_full_name": "Sean",
        "timestamp": 1599855098
    },
    {
        "content": "<p>terminal would likely be something like what git-bash is using (i.e., a customized msys)</p>",
        "id": 209829422,
        "sender_full_name": "Sean",
        "timestamp": 1599855122
    },
    {
        "content": "<p>Phew!  There we go - one of the distcheck tests passed clean.  Must have had a stale file somewhere in the old build.</p>",
        "id": 209829755,
        "sender_full_name": "starseeker",
        "timestamp": 1599855328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> distcheck full succeeded</p>",
        "id": 209840596,
        "sender_full_name": "starseeker",
        "timestamp": 1599861723
    },
    {
        "content": "<p>(Initial success was on Ubuntu - also checking CentOS and GhostBSD)</p>",
        "id": 209864360,
        "sender_full_name": "starseeker",
        "timestamp": 1599885822
    },
    {
        "content": "<p>distcheck-full passed on GhostBSD except for what looks like another manifestation of the BSD threading issue.</p>",
        "id": 209892640,
        "sender_full_name": "starseeker",
        "timestamp": 1599933570
    },
    {
        "content": "<p>CentOS 8 distcheck-full passed.</p>",
        "id": 209903449,
        "sender_full_name": "starseeker",
        "timestamp": 1599951303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> you are off by one throughout r 77191 .. strl*() all take the size of the allocated buffer.  they ensure the last byte is nul so you don't want to drop the +1 that was added for nul.</p>",
        "id": 210934159,
        "sender_full_name": "Sean",
        "timestamp": 1600810501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> - did I follow correctly?  (r77193)</p>",
        "id": 210953065,
        "sender_full_name": "starseeker",
        "timestamp": 1600827488
    },
    {
        "content": "<p>nope, wrong way</p>",
        "id": 210953076,
        "sender_full_name": "Sean",
        "timestamp": 1600827510
    },
    {
        "content": "<p>now off by 2</p>",
        "id": 210953078,
        "sender_full_name": "Sean",
        "timestamp": 1600827514
    },
    {
        "content": "<p>it's the size of the allocation</p>",
        "id": 210953080,
        "sender_full_name": "Sean",
        "timestamp": 1600827523
    },
    {
        "content": "<p>that's what strl wants</p>",
        "id": 210953082,
        "sender_full_name": "Sean",
        "timestamp": 1600827529
    },
    {
        "content": "<p>so find the buffer if it's static or the malloc/calloc size if it's dynamic</p>",
        "id": 210953087,
        "sender_full_name": "Sean",
        "timestamp": 1600827544
    },
    {
        "content": "<p>that's the size to put... they made it simple</p>",
        "id": 210953096,
        "sender_full_name": "Sean",
        "timestamp": 1600827560
    },
    {
        "content": "<p>so it's:</p>\n<p>char str[COUNT];<br>\nfunc(..., str, COUNT);</p>\n<p>You're saying inside func, it would be bu_strlcat(str, in_str, COUNT+1) to correctly copy in_str into str?</p>",
        "id": 210954132,
        "sender_full_name": "starseeker",
        "timestamp": 1600828953
    },
    {
        "content": "<p>heh, no...</p>",
        "id": 210954144,
        "sender_full_name": "Sean",
        "timestamp": 1600828971
    },
    {
        "content": "<p>str[COUNT] ... strlcat(str, str2, COUNT)</p>",
        "id": 210954157,
        "sender_full_name": "Sean",
        "timestamp": 1600828991
    },
    {
        "content": "<p>But... isn't that what I had in 77191?</p>",
        "id": 210954175,
        "sender_full_name": "starseeker",
        "timestamp": 1600829019
    },
    {
        "content": "<p>I saw str = malloc(cnt+1, ...) ... strlcat(str, .., cnt)</p>",
        "id": 210954231,
        "sender_full_name": "Sean",
        "timestamp": 1600829060
    },
    {
        "content": "<p>They may  have both...</p>",
        "id": 210954260,
        "sender_full_name": "starseeker",
        "timestamp": 1600829106
    },
    {
        "content": "<p>So looking at get_style_tag_for_cell...</p>",
        "id": 210954344,
        "sender_full_name": "starseeker",
        "timestamp": 1600829201
    },
    {
        "content": "<p>fort.c:2397 it looks like it's getting cell_style_tag, which is TEXT_STYLE_TAG_MAX_SIZE</p>",
        "id": 210954392,
        "sender_full_name": "starseeker",
        "timestamp": 1600829270
    },
    {
        "content": "<p>There was F_MALLOC((sz + 1) that was in the logic that got all up replaced with a call to bu_strdup in 77191....</p>",
        "id": 210954595,
        "sender_full_name": "starseeker",
        "timestamp": 1600829489
    },
    {
        "content": "<p>yeah, that's probably the sz+1 I saw replaced with a strlcat sz, but then the definition of sz changed too</p>",
        "id": 210954758,
        "sender_full_name": "Sean",
        "timestamp": 1600829686
    },
    {
        "content": "<p>As far as I can tell, it's these 4 functions that are calling the strl logic:</p>\n<p>get_style_tag_for_cell<br>\nget_reset_style_tag_for_cell<br>\nget_style_tag_for_content<br>\nget_reset_style_tag_for_content</p>",
        "id": 210954860,
        "sender_full_name": "starseeker",
        "timestamp": 1600829872
    },
    {
        "content": "<p>They're all, as far as I can tell, writing into static buffers defined with constants passed to sz.  The only more complex case is line 4469.</p>",
        "id": 210954924,
        "sender_full_name": "starseeker",
        "timestamp": 1600829955
    },
    {
        "content": "<p>And I think that's right?</p>",
        "id": 210954938,
        "sender_full_name": "starseeker",
        "timestamp": 1600829986
    },
    {
        "content": "<p>(I reverted 77193, btw)</p>",
        "id": 210955027,
        "sender_full_name": "starseeker",
        "timestamp": 1600830068
    },
    {
        "content": "<p>4469 looks right</p>",
        "id": 210955099,
        "sender_full_name": "Sean",
        "timestamp": 1600830139
    },
    {
        "content": "<p>yeah, I should have read the file instead of the patch, greater context</p>",
        "id": 210955111,
        "sender_full_name": "Sean",
        "timestamp": 1600830158
    },
    {
        "content": "<p>Wonder if they'd take a strlcat patch upstream?  As far as I know strlcpy is still non-standard...</p>",
        "id": 210955304,
        "sender_full_name": "starseeker",
        "timestamp": 1600830366
    },
    {
        "content": "<p>Although we might be able to use strncpy there, actually...</p>",
        "id": 210955328,
        "sender_full_name": "starseeker",
        "timestamp": 1600830412
    },
    {
        "content": "<p>can always use strn .. it's just much more error prone, especially when cat'ing into existing buffers like the 4469 case where it's appending</p>",
        "id": 210956015,
        "sender_full_name": "Sean",
        "timestamp": 1600831412
    },
    {
        "content": "<p>Did glibc ever add strlcpy?  I know they were adamantly opposed to it for a long time...</p>",
        "id": 210956077,
        "sender_full_name": "starseeker",
        "timestamp": 1600831509
    },
    {
        "content": "<p>Oh well, no biggie - easy to adjust for regress once the pattern is clear.</p>",
        "id": 210956228,
        "sender_full_name": "starseeker",
        "timestamp": 1600831759
    },
    {
        "content": "<p>Now just need  to make sure it works on Windows...</p>",
        "id": 210956241,
        "sender_full_name": "starseeker",
        "timestamp": 1600831786
    },
    {
        "content": "<p>Ah, there we go.</p>",
        "id": 210956422,
        "sender_full_name": "starseeker",
        "timestamp": 1600832032
    },
    {
        "content": "<p><a href=\"https://sourceware.org/glibc/wiki/strlcpy\">https://sourceware.org/glibc/wiki/strlcpy</a></p>",
        "id": 210956499,
        "sender_full_name": "Sean",
        "timestamp": 1600832137
    },
    {
        "content": "<p>sigh.  figures</p>",
        "id": 210956508,
        "sender_full_name": "starseeker",
        "timestamp": 1600832160
    },
    {
        "content": "<p>looks like there was a second patch 6 years ago that's getting better reception but still not integrated / released</p>",
        "id": 210956547,
        "sender_full_name": "Sean",
        "timestamp": 1600832167
    },
    {
        "content": "<p>bu_strlcpy it is</p>",
        "id": 210956549,
        "sender_full_name": "starseeker",
        "timestamp": 1600832179
    },
    {
        "content": "<p>I see MSVCRT isn't on board either</p>",
        "id": 210956566,
        "sender_full_name": "starseeker",
        "timestamp": 1600832219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span> seeing a weird ged plugin issue.  the bigdb gtools test is failing on mac.  It works when called directly in the build dir (e.g., src/gtools/tests/bigdb 1), but fails when run via ctest with:</p>\n<div class=\"codehilite\"><pre><span></span><code>    Start 874: slow-bigdb_1gb\n\n874: Test command: /Users/morrison/brlcad.trunk/.build/src/gtools/tests/bigdb &quot;1&quot;\n874: Test timeout computed to be: 1500\n874: bigdb_tops=&quot;unknown command: tops&quot;\n874: bigdb_idlen=43\n874: bigdb_szlen=1073741825\n874: bigdb_lenmatch=0\n874: bigdb_strmatch=0\n1/1 Test #874: slow-bigdb_1gb ...................***Failed    8.97 sec\n</code></pre></div>",
        "id": 214079427,
        "sender_full_name": "Sean",
        "timestamp": 1603298860
    },
    {
        "content": "<p>I can only imagine this has something to do with the plugin system, but don't have time to debug it at the moment.</p>",
        "id": 214079562,
        "sender_full_name": "Sean",
        "timestamp": 1603298901
    },
    {
        "content": "<p>all the rtwiz tests have also been out for a while with tclcad init failures, assumed you know about those but maybe not?  they report \"can't find package cadwidgets::RtImage\"<br>\njust fyi, haven't tried a rebuild today if you made a recent change as I'm in the middle of debugging session.</p>",
        "id": 214079986,
        "sender_full_name": "Sean",
        "timestamp": 1603299092
    },
    {
        "content": "<p>I think r77523 will take care of the bigdb error.  Wasn't aware of rtwiz failures - they're not part of the standard tests because they can't be safely run in parallel.  I'll see if I can run it to ground.</p>",
        "id": 214121689,
        "sender_full_name": "starseeker",
        "timestamp": 1603318426
    },
    {
        "content": "<p>How are you launching the rtwizard tests?  ninja regress-rtwizard just succeeded on Linux...</p>",
        "id": 214127032,
        "sender_full_name": "starseeker",
        "timestamp": 1603322564
    },
    {
        "content": "<p>Ah, fails on BSD</p>",
        "id": 214127610,
        "sender_full_name": "starseeker",
        "timestamp": 1603323124
    },
    {
        "content": "<p>OK...</p>",
        "id": 214127640,
        "sender_full_name": "starseeker",
        "timestamp": 1603323130
    },
    {
        "content": "<p>Oh - it's a bundled vs system tcl issue, I'll bet...</p>",
        "id": 214128523,
        "sender_full_name": "starseeker",
        "timestamp": 1603323938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span>  I think r77525 should have it.</p>",
        "id": 214128948,
        "sender_full_name": "starseeker",
        "timestamp": 1603324322
    },
    {
        "content": "<p>just got a successful regress-rtwizard on bz</p>",
        "id": 214129002,
        "sender_full_name": "starseeker",
        "timestamp": 1603324350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112516\">@starseeker</span>  I don't know how long it's been an issue, but I'm seeing a pretty big behavior change on trunk with rt blocking until the framebuffer window is closed.  This is on a default build on Mac, affecting both classic and non-classic runtime.</p>\n<p>Anyone else seeing similar?  (just run \"rt\" in windows on some geometry)</p>",
        "id": 217719734,
        "sender_full_name": "Sean",
        "timestamp": 1606200918
    },
    {
        "content": "<p>You mean launching rt from within MGED?  Not seeing that on Linux...</p>",
        "id": 217764547,
        "sender_full_name": "starseeker",
        "timestamp": 1606229903
    },
    {
        "content": "<p>Yes, it's blocking for some reason.</p>",
        "id": 217764874,
        "sender_full_name": "Sean",
        "timestamp": 1606230030
    },
    {
        "content": "<p>Might be the r77436-77454 libtclcad changes to fix an issue with Windows.</p>",
        "id": 217764907,
        "sender_full_name": "starseeker",
        "timestamp": 1606230045
    },
    {
        "content": "<p>I finally got a test Mac graphical setup.  Can confirm the MGED prompt ignoring input while rt is processing, although it seems to be a bit more subtle than just the framebuffer being up - if I wait long enough, it will resume taking input with the fb lingering.</p>\n<p>It's almost as if rt and MGED are sharing channels.  Definitely something to do with the rt callback handler rework</p>",
        "id": 220319827,
        "sender_full_name": "starseeker",
        "timestamp": 1608249186
    },
    {
        "content": "<p>Very surprised this is unique to the Mac... wonder what's different?</p>",
        "id": 220319977,
        "sender_full_name": "starseeker",
        "timestamp": 1608249279
    },
    {
        "content": "<p>the bad news is right at this second I have absolutely no idea how to fix it...</p>",
        "id": 220321107,
        "sender_full_name": "starseeker",
        "timestamp": 1608250056
    },
    {
        "content": "<p>r77435 isn't any better, so it's an older issue than those changes...</p>",
        "id": 220322603,
        "sender_full_name": "starseeker",
        "timestamp": 1608251160
    },
    {
        "content": "<p>r77073 has the same problem...</p>",
        "id": 220323727,
        "sender_full_name": "starseeker",
        "timestamp": 1608252118
    },
    {
        "content": "<p>r76199 works</p>",
        "id": 220326267,
        "sender_full_name": "starseeker",
        "timestamp": 1608254288
    },
    {
        "content": "<p>r76226 works</p>",
        "id": 220327075,
        "sender_full_name": "starseeker",
        "timestamp": 1608254979
    },
    {
        "content": "<p>r76621 works</p>",
        "id": 220327626,
        "sender_full_name": "starseeker",
        "timestamp": 1608255495
    },
    {
        "content": "<p>r76654 works</p>",
        "id": 220328130,
        "sender_full_name": "starseeker",
        "timestamp": 1608255960
    },
    {
        "content": "<p>r76670 works</p>",
        "id": 220328819,
        "sender_full_name": "starseeker",
        "timestamp": 1608256649
    },
    {
        "content": "<p>r76903 does not work</p>",
        "id": 220329302,
        "sender_full_name": "starseeker",
        "timestamp": 1608257135
    },
    {
        "content": "<p>r76800 works</p>",
        "id": 220329620,
        "sender_full_name": "starseeker",
        "timestamp": 1608257507
    },
    {
        "content": "<p>r76850 does not work</p>",
        "id": 220332349,
        "sender_full_name": "starseeker",
        "timestamp": 1608260534
    },
    {
        "content": "<p>r76825 does not work</p>",
        "id": 220332643,
        "sender_full_name": "starseeker",
        "timestamp": 1608260895
    },
    {
        "content": "<p>r76824 is the one that broke the GUI MGED interactivity</p>",
        "id": 220333348,
        "sender_full_name": "starseeker",
        "timestamp": 1608261953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> Can you see if r77998 fixes your issue on the Mac?</p>",
        "id": 220336306,
        "sender_full_name": "starseeker",
        "timestamp": 1608266505
    },
    {
        "content": "<p>Sure, will do</p>",
        "id": 220336746,
        "sender_full_name": "Sean",
        "timestamp": 1608267124
    },
    {
        "content": "<p>Confirmed, appears to fix the issue.</p>",
        "id": 220340113,
        "sender_full_name": "Sean",
        "timestamp": 1608271754
    },
    {
        "content": "<p>nice work</p>",
        "id": 220340116,
        "sender_full_name": "Sean",
        "timestamp": 1608271779
    },
    {
        "content": "<p>so what was the problem?</p>",
        "id": 220340447,
        "sender_full_name": "Sean",
        "timestamp": 1608272329
    },
    {
        "content": "<p>I set up a handler on STDOUT, trying to fix a crash on Windows.  It avoided the crash on Windows, but it was the wrong way to do it.  It looks in the end like a copy-paste error setting up the original logic meant I was deleting a structure before stderr was actually clear (checked stdout twice instead of stdout+stderr), which (surprise) messed up the application.  A stdout handler avoided the crash all right, but messed with a channel the callbacks shouldn't have been hooked up to.</p>",
        "id": 220370905,
        "sender_full_name": "starseeker",
        "timestamp": 1608297727
    },
    {
        "content": "<p>It might explain a bit of quirky I/O behavior that's been reported on Windows too, although it's hard to know that for sure.</p>",
        "id": 220370968,
        "sender_full_name": "starseeker",
        "timestamp": 1608297764
    },
    {
        "content": "<p>In retrospect I'm surprised it only showed in the Mac GUI configuration.  Tcl/Tk has a rather irritating habit of \"almost\" working and masking problems, sometimes...</p>",
        "id": 220371049,
        "sender_full_name": "starseeker",
        "timestamp": 1608297809
    },
    {
        "content": "<p>I'll have to double check everything is working now across all platforms, but if that's got it the last significant blocker I know of now is the gqa plot file problem.  That was a user report, so I'll need to run it down before releasing.</p>",
        "id": 220371239,
        "sender_full_name": "starseeker",
        "timestamp": 1608297914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102902\">@Sean</span> I shifted a fair number of things down in the \"do before release\" queue - let me know if any of the ones I moved are \"need to haves\".</p>",
        "id": 220371448,
        "sender_full_name": "starseeker",
        "timestamp": 1608298034
    },
    {
        "content": "<p>Okay will do.</p>",
        "id": 220409085,
        "sender_full_name": "Sean",
        "timestamp": 1608315296
    },
    {
        "content": "<p>The only concerning thing I've noticed is that I encountered mged command line corruption again recently.  I need to fully rebuild clean to confirm as it's tricky to reproduce, but it's the same behavior we had a year ago when there was a bug in static initialization.</p>",
        "id": 220409178,
        "sender_full_name": "Sean",
        "timestamp": 1608315346
    },
    {
        "content": "<p>Becomes apparent when jumping around the mged command line in console mode, cutting to end of line, pasting, navigating with error keys, up arrow.  Resulted in unpredictable but obvious command line corruption.</p>",
        "id": 220409324,
        "sender_full_name": "Sean",
        "timestamp": 1608315426
    },
    {
        "content": "<p>Hmm.  Not ringing a bell - it was caused by static initialization error?</p>",
        "id": 220409396,
        "sender_full_name": "starseeker",
        "timestamp": 1608315469
    },
    {
        "content": "<p>Yes, fortunately/unfortunately the bug was found before release and never made public, but that means there's no NEWS breadcrumb on what the exact cause was not that it matters here.  I seem to recall the prior being bu init related and I don't think that code has changed.  It's probably just some other corruption.</p>",
        "id": 220409850,
        "sender_full_name": "Sean",
        "timestamp": 1608315695
    },
    {
        "content": "<p>But like I said, I need to confirm with a clean build before throwing up red flags.  Just a yellow caution for now.  :)</p>",
        "id": 220409935,
        "sender_full_name": "Sean",
        "timestamp": 1608315725
    },
    {
        "content": "<p>Was having some errors compiling <code>libbu</code> because there was an unresolved external symbol <code>BU_SEM_DATETIME</code>. Seems like in <code>bu_init.cpp</code>, there is <code>extern \"C\" int  BU_SEM_DATETIME</code> , but <code>BU_SEM_DATETIME</code> is  defined in <code>datetime.cpp</code> which is a C++ file. Removing the \"C\" part fixed the error for me.</p>",
        "id": 226465903,
        "sender_full_name": "Jeffrey Liu",
        "timestamp": 1613444331
    },
    {
        "content": "<p>^ would changing something like this cause issues outside of Windows?</p>",
        "id": 226466247,
        "sender_full_name": "Jeffrey Liu",
        "timestamp": 1613444708
    },
    {
        "content": "<p>Possibly - what if we do r78245 instead?  Does that work?</p>",
        "id": 226467506,
        "sender_full_name": "starseeker",
        "timestamp": 1613446444
    },
    {
        "content": "<p>I'm still compiling r78244 right now, but I'll let you know.</p>",
        "id": 226467698,
        "sender_full_name": "Jeffrey Liu",
        "timestamp": 1613446708
    }
]