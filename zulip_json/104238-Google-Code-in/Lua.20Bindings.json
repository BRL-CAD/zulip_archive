[
    {
        "content": "<p>Where is the task \"BRL-CAD Lua binding 1A\"?</p>",
        "id": 120611200,
        "sender_full_name": "caleb parks",
        "timestamp": 1515074828
    },
    {
        "content": "<p>someone else already claimed and completed it</p>",
        "id": 120612832,
        "sender_full_name": "Sean",
        "timestamp": 1515077699
    },
    {
        "content": "<p>yeah, and it's been applied -- if you svn update, you'll see Select and Unselect bindings in luadatabase.cpp</p>",
        "id": 120612919,
        "sender_full_name": "Sean",
        "timestamp": 1515077842
    },
    {
        "content": "<p>can only one person complete each of those tasks?</p>",
        "id": 120613348,
        "sender_full_name": "caleb parks",
        "timestamp": 1515078502
    },
    {
        "content": "<p>There is a limit set for each task, more can be added if candidates show interest.</p>",
        "id": 120613352,
        "sender_full_name": "William Cook",
        "timestamp": 1515078533
    },
    {
        "content": "<p>not usually, but I think in this instance, someone completed it and completed the 1b testing task which demonstrated it worked</p>",
        "id": 120613364,
        "sender_full_name": "Sean",
        "timestamp": 1515078565
    },
    {
        "content": "<p>we'd rather add more tasks that are similarly useful than have several of you do the same work, like write a different test!</p>",
        "id": 120613373,
        "sender_full_name": "Sean",
        "timestamp": 1515078596
    },
    {
        "content": "<p>Oh ok, i was just quoting lordofbikes lol.</p>",
        "id": 120613375,
        "sender_full_name": "William Cook",
        "timestamp": 1515078599
    },
    {
        "content": "<p>or more bindings</p>",
        "id": 120613419,
        "sender_full_name": "Sean",
        "timestamp": 1515078608
    },
    {
        "content": "<p>if it's a more complicated task whose implementation can vary, there may be multiple copies</p>",
        "id": 120613429,
        "sender_full_name": "Sean",
        "timestamp": 1515078650
    },
    {
        "content": "<p>Is making the site for LibreCAD a complicated task?</p>",
        "id": 120613441,
        "sender_full_name": "William Cook",
        "timestamp": 1515078682
    },
    {
        "content": "<p>relatively speaking, yes ... and there's lots of potential variation in the result as it's a design task -- they always have multiple instances</p>",
        "id": 120613499,
        "sender_full_name": "Sean",
        "timestamp": 1515078751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"calebparks29@gmail.com\" data-user-id=\"104884\">@caleb parks</span> There were originally 3 instances of the Lua 1a task but getting the first solution I saw no room for improvements, and I wanted to commit it to our repository.  The Lua tasks shall be about commonly extending the interface.  However, I left the 3 instances of 1b because testing is always good. <br>\nTask 2a is substantially harder than 1a because a structure has to be returned.  I want to see how you are doing before adding more of them.<br>\nHowever, the Lua tasks can be solved independently of each other, in contrast to the GUI tasks.</p>",
        "id": 120624896,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1515096613
    },
    {
        "content": "<p>What is lua binding task 1a?</p>",
        "id": 120907161,
        "sender_full_name": "Naseef",
        "timestamp": 1515652615
    },
    {
        "content": "<p>It was to add select and unselect all lua bindings</p>",
        "id": 120908422,
        "sender_full_name": "Jeff Sieu",
        "timestamp": 1515655730
    },
    {
        "content": "<p>Do you have the link to the task? Task description would be really helpful.</p>",
        "id": 120911177,
        "sender_full_name": "Naseef",
        "timestamp": 1515662241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"abdullah.umar.naseef@gmail.com\" data-user-id=\"104241\">@Naseef</span> </p>\n<div class=\"codehilite\"><pre><span></span>Create Lua bindings for the following BRL-CAD C++ core interface Database methods:\n* Select()\n* UnSelectAll()\n</pre></div>",
        "id": 120932539,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1515699028
    },
    {
        "content": "<p>There is already a test: <a href=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/rt%5E3/trunk/tests/embeddedLua/selectunselect.cpp\" target=\"_blank\" title=\"https://sourceforge.net/p/brlcad/code/HEAD/tree/rt%5E3/trunk/tests/embeddedLua/selectunselect.cpp\">https://sourceforge.net/p/brlcad/code/HEAD/tree/rt%5E3/trunk/tests/embeddedLua/selectunselect.cpp</a><br>\nYou had to write another one.</p>",
        "id": 120932637,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1515699131
    },
    {
        "content": "<p>\"DestroyEmbeddedLuaHandleInstance(handle);\"<br>\nJava-like function naming? <span class=\"emoji emoji-1f602\" title=\"joy\">:joy:</span></p>",
        "id": 121002583,
        "sender_full_name": "Naseef",
        "timestamp": 1515833675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252475\">@Himanshu Sekhar Nayak</span> The return value of the binding functions in rt^3/src/embeddedLua is the number of values which are pushed on the stack, which is equal to the number of return values of the corresponding Lua function. I.e., if there is no return, it's 0, if it's a string, it's 1, etc..</p>\n<p>But, this means as well that if you return something, you have to push it on the Lua stack, for example with lua_push~().</p>",
        "id": 183871158,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1576779808
    },
    {
        "content": "<p>thanks for info <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span></p>",
        "id": 183872222,
        "sender_full_name": "Himanshu",
        "timestamp": 1576780542
    },
    {
        "content": "<p>BTW, not all of the \"simple\" functions may work this way. For example, Clone() might work in the derived classes only.</p>",
        "id": 183872716,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1576780905
    },
    {
        "content": "<p>Simply, go on step by step - in small steps.</p>",
        "id": 183872783,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1576780946
    },
    {
        "content": "<p>btw these are declared in <code>protected:</code></p>",
        "id": 183872993,
        "sender_full_name": "Himanshu",
        "timestamp": 1576781085
    },
    {
        "content": "<p><code> void Copy(const Object&amp; original);\n    bool Validate(void) const;</code></p>",
        "id": 183873014,
        "sender_full_name": "Himanshu",
        "timestamp": 1576781101
    },
    {
        "content": "<p>protected (and private) means that they are internal functions and not part of the <strong>public</strong> API.</p>",
        "id": 183873137,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1576781171
    },
    {
        "content": "<p>I.e., don't provide Lua bindings for them. (It shouldn't be possible anyway.)</p>",
        "id": 183873183,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1576781224
    },
    {
        "content": "<p>so I think all the bindings should be done for <code>public</code> API</p>",
        "id": 183873187,
        "sender_full_name": "Himanshu",
        "timestamp": 1576781229
    },
    {
        "content": "<p>okay got it</p>",
        "id": 183873200,
        "sender_full_name": "Himanshu",
        "timestamp": 1576781238
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> I got your message</p>",
        "id": 183960802,
        "sender_full_name": "Himanshu",
        "timestamp": 1576866928
    },
    {
        "content": "<p>thanks for pointing it out</p>",
        "id": 183960820,
        "sender_full_name": "Himanshu",
        "timestamp": 1576866946
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> do you mean I have to push the boolean value into the stack ?</p>",
        "id": 183961648,
        "sender_full_name": "Himanshu",
        "timestamp": 1576867565
    },
    {
        "content": "<p>yeah I got it</p>",
        "id": 183962639,
        "sender_full_name": "Himanshu",
        "timestamp": 1576868357
    },
    {
        "content": "<p>but if IsValid() is returning boolean values then return type should <code>return 1;</code></p>",
        "id": 183962740,
        "sender_full_name": "Himanshu",
        "timestamp": 1576868404
    },
    {
        "content": "<p>like this</p>",
        "id": 183962794,
        "sender_full_name": "Himanshu",
        "timestamp": 1576868431
    },
    {
        "content": "<p><code>template&lt;_GetObject getObject&gt; static int IsValid\n(\n    lua_State* luaState\n) {\n    BRLCAD::Object&amp; object = (*getObject)(luaState, 1);\n    lua_pushboolean(luaState, object.IsValid());\n    return 1;\n}</code></p>",
        "id": 183962806,
        "sender_full_name": "Himanshu",
        "timestamp": 1576868437
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span>template&lt;_GetObject getObject&gt; static int IsValid\n(\n    lua_State* luaState\n) {\n    BRLCAD::Object&amp; object = (*getObject)(luaState, 1);\n    lua_pushboolean(luaState, object.IsValid());\n    return 1;\n}\n</pre></div>\n\n\n</blockquote>\n<p>Right, <code>IsValid()</code> pushes one value (the type is not important) on the stack, and has to return 1 therefore.</p>",
        "id": 184012248,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1576937681
    },
    {
        "content": "<p>thanks got it</p>",
        "id": 184014161,
        "sender_full_name": "Himanshu",
        "timestamp": 1576941338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> now I see you made two new tasks on lua</p>",
        "id": 184018778,
        "sender_full_name": "Himanshu",
        "timestamp": 1576949770
    },
    {
        "content": "<p>I will head towards from this <a href=\"https://codein.withgoogle.com/tasks/5971180779995136/?sp-organization=4884012200361984&amp;sp-categories=1&amp;sp-search=lua\" target=\"_blank\" title=\"https://codein.withgoogle.com/tasks/5971180779995136/?sp-organization=4884012200361984&amp;sp-categories=1&amp;sp-search=lua\">https://codein.withgoogle.com/tasks/5971180779995136/?sp-organization=4884012200361984&amp;sp-categories=1&amp;sp-search=lua</a></p>",
        "id": 184018995,
        "sender_full_name": "Himanshu",
        "timestamp": 1576950201
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> just created the patch. When you get time have a look <a href=\"/user_uploads/1549/sGaJw3tjYJ81CpcLWIJeSXGQ/binding_Halfspace.patch\" target=\"_blank\" title=\"binding_Halfspace.patch\">binding_Halfspace.patch</a></p>",
        "id": 184109968,
        "sender_full_name": "Himanshu",
        "timestamp": 1577113352
    },
    {
        "content": "<p>Okay, will do.</p>",
        "id": 184110091,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1577113466
    },
    {
        "content": "<p>I don't think that you want to change halfspace.h. And that's all what I could find in your patch.</p>",
        "id": 184115240,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1577118249
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> do you mean I have to change the functions that are implemented in <code>halfspace.cpp</code> into Lua code that I have implemented like in <code>objectbase.h</code></p>",
        "id": 184244983,
        "sender_full_name": "Himanshu",
        "timestamp": 1577338157
    },
    {
        "content": "<p>?</p>",
        "id": 184244984,
        "sender_full_name": "Himanshu",
        "timestamp": 1577338159
    },
    {
        "content": "<p>and also the bindings should happen in halfspace.h like objectbase.h ?</p>",
        "id": 184245093,
        "sender_full_name": "Himanshu",
        "timestamp": 1577338357
    },
    {
        "content": "<p>You don't need to touch the functions you already implemented in objectbase.h.</p>\n<p>The only file you need to change is src/embeddedLua/halfspace.cpp. Look at the functions already implemented there. Your code has to be similar to this.</p>",
        "id": 184255165,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1577356333
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> if I am sure then those function that are defined in halfspace.cpp should have template right ?</p>",
        "id": 184437454,
        "sender_full_name": "Himanshu",
        "timestamp": 1577655826
    },
    {
        "content": "<p>I think like this <a href=\"/user_uploads/1549/AFRsZ4a4mo9hrPtFXkzGfdU7/Luabinding_for_halfspace.patch\" target=\"_blank\" title=\"Luabinding_for_halfspace.patch\">Luabinding_for_halfspace.patch</a></p>",
        "id": 184457926,
        "sender_full_name": "Himanshu",
        "timestamp": 1577693529
    },
    {
        "content": "<p>see it when you are free</p>",
        "id": 184457928,
        "sender_full_name": "Himanshu",
        "timestamp": 1577693545
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> is there any way to push structure type in lua ?</p>",
        "id": 184501233,
        "sender_full_name": "Himanshu",
        "timestamp": 1577740664
    },
    {
        "content": "<p>also any function to check it is structure type or not ?</p>",
        "id": 184506730,
        "sender_full_name": "Himanshu",
        "timestamp": 1577745485
    },
    {
        "content": "<p>like something related to lua_checkstring()</p>",
        "id": 184506745,
        "sender_full_name": "Himanshu",
        "timestamp": 1577745497
    },
    {
        "content": "<p>You would need to implement Lua equivalents for the C++ structures. However, all structures needed for the Halfspace task are already there. This task is probably much easier than you might think.</p>\n<p>BTW, did you know, that classes and structs are the same in C++? The only difference is the default access permission.</p>",
        "id": 184541365,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1577795638
    },
    {
        "content": "<p>note that this is one way that C++ is not a strict extension of C, structs have numerous caveats due to implementation differences</p>",
        "id": 184546724,
        "sender_full_name": "Erik",
        "timestamp": 1577802732
    },
    {
        "content": "<p>okay got it</p>",
        "id": 184554769,
        "sender_full_name": "Himanshu",
        "timestamp": 1577812780
    },
    {
        "content": "<blockquote>\n<p>You would need to implement Lua equivalents for the C++ structures. However, all structures needed for the Halfspace task are already there. This task is probably much easier than you might think.</p>\n<p>BTW, did you know, that classes and structs are the same in C++? The only difference is the default access permission.</p>\n</blockquote>\n<p>I thought different as there is no class support in C.</p>",
        "id": 184555183,
        "sender_full_name": "Himanshu",
        "timestamp": 1577813168
    },
    {
        "content": "<p>Where is C involved?</p>",
        "id": 184555312,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1577813327
    },
    {
        "content": "<p>my fault all C++ coded</p>",
        "id": 184555482,
        "sender_full_name": "Himanshu",
        "timestamp": 1577813501
    },
    {
        "content": "<p>The basic Lua is written in C, but the extension to embed it in BRL-CAD is written in C++ (i.e., all the code in rt^3/src/embeddedLua).</p>",
        "id": 184555824,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1577813830
    },
    {
        "content": "<p>sorry, that was meant as a side note. Not important for this task, but it's a detail that often surprises</p>",
        "id": 184556038,
        "sender_full_name": "Erik",
        "timestamp": 1577814024
    },
    {
        "content": "<p>thanks for info :)</p>",
        "id": 184556169,
        "sender_full_name": "Himanshu",
        "timestamp": 1577814141
    },
    {
        "content": "<p>I think now it should be like this</p>",
        "id": 184556738,
        "sender_full_name": "Himanshu",
        "timestamp": 1577814876
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/4hJR30CECWIZeag37GQ59cFR/halfspace_binding.patch\" target=\"_blank\" title=\"halfspace_binding.patch\">halfspace_binding.patch</a></p>",
        "id": 184556743,
        "sender_full_name": "Himanshu",
        "timestamp": 1577814883
    },
    {
        "content": "<p>oops i commented some code part so here is the patch <a href=\"/user_uploads/1549/o_WNFXCvNbxGNETiIuwDZgQE/5725436345057280_1577815791_halfspace_binding.patch\" target=\"_blank\" title=\"5725436345057280_1577815791_halfspace_binding.patch\">5725436345057280_1577815791_halfspace_binding.patch</a></p>",
        "id": 184557743,
        "sender_full_name": "Himanshu",
        "timestamp": 1577816030
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> I am just working on this task <code>BRL-CAD Lua binding: Sphere</code>. Does it need to be done is separate file like sphere.h and sphere.cpp or same in halfspace.cpp ?</p>",
        "id": 184801984,
        "sender_full_name": "Himanshu",
        "timestamp": 1578140868
    },
    {
        "content": "<p>I also think CreateSphere(),  GetSphere(), InitSphere(), PushSphere(), TestSphere(), GetSphereMetatable() needs to be done for Sphere task but is that to be done is halfspace.cpp or in separate new file Sphere.cpp and Sphere.h ?</p>",
        "id": 184802507,
        "sender_full_name": "Himanshu",
        "timestamp": 1578141803
    },
    {
        "content": "<blockquote>\n<p>Hey <span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> I am just working on this task <code>BRL-CAD Lua binding: Sphere</code>. Does it need to be done is separate file like sphere.h and sphere.cpp or same in halfspace.cpp ?</p>\n</blockquote>\n<p>Separate files sphere.cpp and sphere.h of course <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>\n<p>And, initbrlcad.cpp has to be changed too. (Forgot to do this for Halfspace.)</p>",
        "id": 184803426,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578143351
    },
    {
        "content": "<p>okay got it</p>",
        "id": 184803505,
        "sender_full_name": "Himanshu",
        "timestamp": 1578143492
    },
    {
        "content": "<p>I've just added the Halfspace to initbrlcad.cpp.</p>",
        "id": 184803703,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578143779
    },
    {
        "content": "<p>okay I will do that once I complete this</p>",
        "id": 184803719,
        "sender_full_name": "Himanshu",
        "timestamp": 1578143826
    },
    {
        "content": "<p>Here is the patch file <a href=\"/user_uploads/1549/klr_qozxbRcTEdPn61R2I-yK/lua_binding_for_Sphere.patch\" target=\"_blank\" title=\"lua_binding_for_Sphere.patch\">lua_binding_for_Sphere.patch</a></p>",
        "id": 184808190,
        "sender_full_name": "Himanshu",
        "timestamp": 1578151501
    },
    {
        "content": "<p>This looks good. The only issue I see is the year in the copyright notice. Replace 2019 by 2020 in sphere.cpp and sphere.h.</p>\n<p>I's much of copy-n-paste, but this is what these tasks are about. If you know one, you now all ;)<br>\nI like it.</p>",
        "id": 184808668,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578152268
    },
    {
        "content": "<p>okay correcting the year in the copyright notice</p>",
        "id": 184808810,
        "sender_full_name": "Himanshu",
        "timestamp": 1578152440
    },
    {
        "content": "<p>Done !! :-)</p>",
        "id": 184809049,
        "sender_full_name": "Himanshu",
        "timestamp": 1578152801
    },
    {
        "content": "<p>and yeah I found some mismatch in spacings for sphere.cpp. So I will send another patch for right spacings :)</p>",
        "id": 184816112,
        "sender_full_name": "Himanshu",
        "timestamp": 1578165663
    },
    {
        "content": "<p>Should I name myself in <code>AUTHORS</code> list <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> ?</p>",
        "id": 184854540,
        "sender_full_name": "Himanshu",
        "timestamp": 1578241133
    },
    {
        "content": "<p>This isn't mandatory, but usual. If you want to get credited, you shall add your name to the AUTHORS file. The main AUTHORS file is in the brlcad branch. If the Lua code will once move to this branch, the AUTHORS files will be merged, I think.</p>",
        "id": 184854695,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578241416
    },
    {
        "content": "<p>okay done :)</p>",
        "id": 184855589,
        "sender_full_name": "Himanshu",
        "timestamp": 1578242914
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Since function redefination is not allowed. Any idea of naming a function ?</p>",
        "id": 185236447,
        "sender_full_name": "Himanshu",
        "timestamp": 1578591774
    },
    {
        "content": "<p><code>SetSemiMajorAxis</code> is overloaded so redefining is not possible but I am thinking to give separate names in lua binding.</p>",
        "id": 185236721,
        "sender_full_name": "Himanshu",
        "timestamp": 1578591954
    },
    {
        "content": "<p>Any name suggestion ?</p>",
        "id": 185236733,
        "sender_full_name": "Himanshu",
        "timestamp": 1578591963
    },
    {
        "content": "<p>Can I do like this ?</p>",
        "id": 185237172,
        "sender_full_name": "Himanshu",
        "timestamp": 1578592215
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>static int SetSemiMajorAxis\n(\n    lua_State* luaState\n) {\n    BRLCAD::Hyperboloid&amp; object = GetHyperboloid(luaState, 1);\n    BRLCAD::Vector3D     axis   = GetVector3D(luaState, 2);\n\n    object.SetSemiMajorAxis(axis);\n\n    return 0;\n}\n\nstatic int SetAnotherSemiMajorAxis\n(\n    lua_State* luaState\n) {\n    BRLCAD::Hyperboloid&amp; object    = GetHyperboloid(luaState, 1);\n    BRLCAD::Vector3D     direction = GetVector3D(luaState, 2);\n    double               length    = luaL_checknumber(luaState, 3);\n\n    object.SetSemiMajorAxis(direction, length);\n\n    return 0;\n}\n</pre></div>",
        "id": 185237348,
        "sender_full_name": "Himanshu",
        "timestamp": 1578592335
    },
    {
        "content": "<p>since the overloading functions are here</p>\n<div class=\"codehilite\"><pre><span></span>        void                  SetSemiMajorAxis(const Vector3D&amp; axis);\n        void                  SetSemiMajorAxis(const Vector3D&amp; direction,\n                                               double          length);\n</pre></div>",
        "id": 185238123,
        "sender_full_name": "Himanshu",
        "timestamp": 1578592847
    },
    {
        "content": "<p>I am thinking to do perform like this</p>",
        "id": 185238187,
        "sender_full_name": "Himanshu",
        "timestamp": 1578592872
    },
    {
        "content": "<p>You can overload functions in Lua, because you program deep in the guts of the interpreter. For example, you can ask for the number of parameters with <code>lua_gettop(luaState)</code>. If there is more than one parameter, use the second function. You can find an example of this method in vector3d.cpp.</p>",
        "id": 185240885,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578594588
    },
    {
        "content": "<p>hmm <code>lua_gettop(luaState)</code> returns the top element of the stack</p>",
        "id": 185241456,
        "sender_full_name": "Himanshu",
        "timestamp": 1578594971
    },
    {
        "content": "<p>Yes, a number, which is the stack size. Try it! Test it!</p>",
        "id": 185241527,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578595034
    },
    {
        "content": "<p>Okay I implemented like this <a href=\"/user_uploads/1549/HLK-QJdUab6bNJerQF8-eWKz/lua_binding_for_hyperboloid.patch\" target=\"_blank\" title=\"lua_binding_for_hyperboloid.patch\">lua_binding_for_hyperboloid.patch</a></p>",
        "id": 185246673,
        "sender_full_name": "Himanshu",
        "timestamp": 1578598262
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> I just modified the parameters numbers now here is the patch <a href=\"/user_uploads/1549/Jw5hEEV5TVpDbfcU6OeG3_S5/lua_binding_for_hyperboloid.patch\" target=\"_blank\" title=\"lua_binding_for_hyperboloid.patch\">lua_binding_for_hyperboloid.patch</a></p>",
        "id": 185303450,
        "sender_full_name": "Himanshu",
        "timestamp": 1578657382
    },
    {
        "content": "<p>Diff says, that you two patches are identical. Uploaded the wrong file?</p>",
        "id": 185338384,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578681804
    },
    {
        "content": "<p>my bad</p>",
        "id": 185340970,
        "sender_full_name": "Himanshu",
        "timestamp": 1578683398
    },
    {
        "content": "<p>I am sorry for that</p>",
        "id": 185340984,
        "sender_full_name": "Himanshu",
        "timestamp": 1578683403
    },
    {
        "content": "<p>same mistake</p>",
        "id": 185341030,
        "sender_full_name": "Himanshu",
        "timestamp": 1578683408
    },
    {
        "content": "<p>I sent you the same file</p>",
        "id": 185341067,
        "sender_full_name": "Himanshu",
        "timestamp": 1578683448
    },
    {
        "content": "<p>:(</p>",
        "id": 185341393,
        "sender_full_name": "Himanshu",
        "timestamp": 1578683719
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> here is the patch <a href=\"/user_uploads/1549/aut5gMAP49rPVwHdrPNXDQXq/lua_binding_for_hyperboloid.patch\" target=\"_blank\" title=\"lua_binding_for_hyperboloid.patch\">lua_binding_for_hyperboloid.patch</a></p>",
        "id": 185388580,
        "sender_full_name": "Himanshu",
        "timestamp": 1578746989
    },
    {
        "content": "<p>oops not this one</p>",
        "id": 185388642,
        "sender_full_name": "Himanshu",
        "timestamp": 1578747098
    },
    {
        "content": "<p>here is the one <a href=\"/user_uploads/1549/veD9Js4k67KuUSWXMkn2eNGe/lua_binding_for_hyperboloid.patch\" target=\"_blank\" title=\"lua_binding_for_hyperboloid.patch\">lua_binding_for_hyperboloid.patch</a></p>",
        "id": 185388686,
        "sender_full_name": "Himanshu",
        "timestamp": 1578747124
    },
    {
        "content": "<p>btw I have modified some spacings a little bit <a href=\"/user_uploads/1549/HuIi0Nd29NAE0EZe2p-KDooh/lua_binding_for_hyperboloid.patch\" target=\"_blank\" title=\"lua_binding_for_hyperboloid.patch\">lua_binding_for_hyperboloid.patch</a></p>",
        "id": 185388749,
        "sender_full_name": "Himanshu",
        "timestamp": 1578747290
    },
    {
        "content": "<p>Assuring a fine patch is the recent patch</p>",
        "id": 185388755,
        "sender_full_name": "Himanshu",
        "timestamp": 1578747318
    },
    {
        "content": "<p>The indents look correct now.</p>\n<p>BTW, I's simpler for me if you upload the patch to you task and set it to submitted. This way, I need to look only once at it and can approve it if it's okay.</p>",
        "id": 185388812,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578747448
    },
    {
        "content": "<p>okay done</p>",
        "id": 185388879,
        "sender_full_name": "Himanshu",
        "timestamp": 1578747561
    },
    {
        "content": "<p>:)</p>",
        "id": 185388880,
        "sender_full_name": "Himanshu",
        "timestamp": 1578747564
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Do you have any file name suggestions for testing <code>BRLCAD.database:Title()</code> function ?</p>",
        "id": 185432461,
        "sender_full_name": "Himanshu",
        "timestamp": 1578831913
    },
    {
        "content": "<p>Since there are some file names like this</p>",
        "id": 185432631,
        "sender_full_name": "Himanshu",
        "timestamp": 1578832248
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>h1manshu@asus:~/brlcad/rt^3/tests/embeddedLua\n$ ls\nboundingbox.cpp  CMakeLists.txt  hellobrlcad.cpp  helloworld.cpp  selectunselect.cpp\n</pre></div>",
        "id": 185432632,
        "sender_full_name": "Himanshu",
        "timestamp": 1578832262
    },
    {
        "content": "<p>can I name <code>databasetitle.cpp</code> for testing <code>BRLCAD.database:Title()</code> ?</p>",
        "id": 185433353,
        "sender_full_name": "Himanshu",
        "timestamp": 1578833606
    },
    {
        "content": "<p>Should it look like this ?</p>",
        "id": 185439315,
        "sender_full_name": "Himanshu",
        "timestamp": 1578844551
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>h1manshu@asus:~/brlcad/rt^3/build\n$ tests-bin/databasetitle ~/brlcad/brlcad-code/build/share/db/world.g\nTitle : Colorful version of the Moss World\n</pre></div>",
        "id": 185439317,
        "sender_full_name": "Himanshu",
        "timestamp": 1578844557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> ^^^</p>",
        "id": 185439548,
        "sender_full_name": "Himanshu",
        "timestamp": 1578844942
    },
    {
        "content": "<p>Don't panic, I'm not always online <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>\n<p><strong>databasetitle</strong> is a good name for the test.</p>\n<p>Important are the \"inner values\" of the test program. I.e., how it determines, if <code>BRLCAD.database:Title()</code> works correctly.</p>",
        "id": 185445692,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578855547
    },
    {
        "content": "<p>oops just got excited</p>",
        "id": 185447046,
        "sender_full_name": "Himanshu",
        "timestamp": 1578857846
    },
    {
        "content": "<p>btw I saw some examples of some tests</p>",
        "id": 185447234,
        "sender_full_name": "Himanshu",
        "timestamp": 1578858077
    },
    {
        "content": "<p>for printing title one is the command itself and the argument passed which will be .g file</p>",
        "id": 185447298,
        "sender_full_name": "Himanshu",
        "timestamp": 1578858134
    },
    {
        "content": "<p>For example, if you use hellobrlcad.cpp as a starting point for your own program: There is the line</p>\n<div class=\"codehilite\"><pre><span></span>EmbeddedLuaHandle* handle = CreateEmbeddedLuaHandleInstance(database, 0, 0);\n</pre></div>\n\n\n<p>The create function has 2 parameters which are NULL here, but can be replaced by function pointers of functions written by you (see embeddedlua.h). If you now write a function for <code>void (*stdOut)(const char* text)</code> which memorizes the text, and compare it with the C++ title method ...</p>",
        "id": 185447378,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578858296
    },
    {
        "content": "<p>yeah got the two function pointers</p>",
        "id": 185447500,
        "sender_full_name": "Himanshu",
        "timestamp": 1578858490
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        void      (*stdOut)(const char* text),\n        void      (*stdErr)(const char* text)\n</pre></div>",
        "id": 185447501,
        "sender_full_name": "Himanshu",
        "timestamp": 1578858501
    },
    {
        "content": "<p>Remember, you need an automatic test for the Lua <code>Title()</code> function. You can do this by comparing its output with the corresponding C++ <code>Title()</code> method.</p>",
        "id": 185447946,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578859217
    },
    {
        "content": "<p>To do this, you have to catch the Lua output. This can be done by providing an own function for the Lua stdOut.</p>",
        "id": 185447979,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578859270
    },
    {
        "content": "<p>so basically the function that will be passed to <code>void  (*stdOut)(const char* text)</code> will be a Lua <code>Title()</code> which has to be compared with C++ <code>Title()</code> ?</p>",
        "id": 185448130,
        "sender_full_name": "Himanshu",
        "timestamp": 1578859509
    },
    {
        "content": "<p>Yes, the Lua code to be executed would be <code>print(BRLCAD.database:Title())</code>.</p>",
        "id": 185448431,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578860052
    },
    {
        "content": "<p>if I am correct then <code>BRLCAD.database:Title()</code> will display </p>\n<div class=\"codehilite\"><pre><span></span>$ tests-bin/databasetitle ~/brlcad/brlcad-code/build/share/db/world.g\nTitle : Colorful version of the Moss World\n</pre></div>",
        "id": 185448572,
        "sender_full_name": "Himanshu",
        "timestamp": 1578860342
    },
    {
        "content": "<p>No really. First, your stdOut function should catch the output. This function could display a debug message (which can be useful if the test fails), but this isn't part of the test itself. And, if you print an additional \"Title :\", it will disturb the test.</p>",
        "id": 185448779,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578860670
    },
    {
        "content": "<p>hmm... so Lua Title() output will  be compared with C++ Title() Output</p>",
        "id": 185449003,
        "sender_full_name": "Himanshu",
        "timestamp": 1578861032
    },
    {
        "content": "<p>This would be an idea for a test for this function.</p>",
        "id": 185449101,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1578861236
    },
    {
        "content": "<p>the late night here. I will look into it in morning</p>",
        "id": 185449854,
        "sender_full_name": "Himanshu",
        "timestamp": 1578862505
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> How I can store <code>print(BRLCAD.database.Title())</code> into a string ?</p>",
        "id": 185598315,
        "sender_full_name": "Himanshu",
        "timestamp": 1579010768
    },
    {
        "content": "<p>or how I can convert that Lua <code>print()</code> into C++ string ?</p>",
        "id": 185600933,
        "sender_full_name": "Himanshu",
        "timestamp": 1579012364
    },
    {
        "content": "<p>I have implemented like this but I am not able to convert <code>print()</code> into a string <a href=\"https://paste.ofcode.org/33vk3RdC3xgEKvUS2N4GrcQ\" target=\"_blank\" title=\"https://paste.ofcode.org/33vk3RdC3xgEKvUS2N4GrcQ\">databasetitle</a></p>",
        "id": 185603769,
        "sender_full_name": "Himanshu",
        "timestamp": 1579014037
    },
    {
        "content": "<p>would .tostring() be better?</p>",
        "id": 185607581,
        "sender_full_name": "Erik",
        "timestamp": 1579016484
    },
    {
        "content": "<p>btw I want to convert without <code>LuaState</code> any idea for that?</p>",
        "id": 185618620,
        "sender_full_name": "Himanshu",
        "timestamp": 1579022929
    },
    {
        "content": "<p>looks like there are 5 binding tasks remaining. sweet!</p>",
        "id": 185619530,
        "sender_full_name": "Sean",
        "timestamp": 1579023568
    },
    {
        "content": "<p>I am thinking to complete it</p>",
        "id": 185619608,
        "sender_full_name": "Himanshu",
        "timestamp": 1579023609
    },
    {
        "content": "<p>how long has each binding taken?  looks like you've done about 10 of them</p>",
        "id": 185619614,
        "sender_full_name": "Sean",
        "timestamp": 1579023614
    },
    {
        "content": "<p>what was the fastest/longest?</p>",
        "id": 185619625,
        "sender_full_name": "Sean",
        "timestamp": 1579023628
    },
    {
        "content": "<p>are they getting easier now that you've done a bunch?</p>",
        "id": 185619641,
        "sender_full_name": "Sean",
        "timestamp": 1579023647
    },
    {
        "content": "<p>yeah after some binding, it's get easier</p>",
        "id": 185619687,
        "sender_full_name": "Himanshu",
        "timestamp": 1579023689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252475\">@Himanshu Sekhar Nayak</span></p>\n<blockquote>\n<p>I have implemented like this but I am not able to convert <code>print()</code> into a string <a href=\"https://paste.ofcode.org/33vk3RdC3xgEKvUS2N4GrcQ\" target=\"_blank\" title=\"https://paste.ofcode.org/33vk3RdC3xgEKvUS2N4GrcQ\">databasetitle</a></p>\n</blockquote>\n<p>Let's start with this one, which is probable your current state of work.</p>\n<p>I already mentioned, that you need to pass a printing function for stdout to CreateEmbeddedLuaHandleInstance(). Do this, and show me your code.</p>",
        "id": 185620110,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579023970
    },
    {
        "content": "<blockquote>\n<p>what was the fastest/longest?</p>\n</blockquote>\n<p>First 4 or 5 tasks of binding took some days me to understand and apply in rest of the tasks</p>",
        "id": 185620120,
        "sender_full_name": "Himanshu",
        "timestamp": 1579023976
    },
    {
        "content": "<p>Should I keep the current state of work or just create new one with passing a function ? Just got confused</p>",
        "id": 185621290,
        "sender_full_name": "Himanshu",
        "timestamp": 1579024756
    },
    {
        "content": "<p>You current state of work is obviously not the task's solution. Therefore, you have to change something and can't keep it therefore. What's your problem?</p>",
        "id": 185621633,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579024962
    },
    {
        "content": "<p>I am just little bit confused in passing a function to <code>stdOut</code> like I created <code>void databasetitle(const char *text)</code> so what will be the use of <code>text</code> ?</p>",
        "id": 185621855,
        "sender_full_name": "Himanshu",
        "timestamp": 1579025098
    },
    {
        "content": "<p>I said \"pass a ... function ... to CreateEmbeddedLuaHandleInstance()\".<br>\nWhere is <code>void databasetitle(const char *text)</code>? I can't see it in the provided code.</p>",
        "id": 185622078,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579025247
    },
    {
        "content": "<p>So for passing a function to <code>stdOut</code>I created a <code>databasetitle</code></p>",
        "id": 185622538,
        "sender_full_name": "Himanshu",
        "timestamp": 1579025525
    },
    {
        "content": "<p>Where do you pass a function to stdOut? And again, there is no <code>void databasetitle(const char *text)</code> in the provided code. Maybe, you want to show me code which has this function.</p>",
        "id": 185622796,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579025737
    },
    {
        "content": "<p>oh... sorry forgot to mention it</p>",
        "id": 185622931,
        "sender_full_name": "Himanshu",
        "timestamp": 1579025821
    },
    {
        "content": "<p><a href=\"https://paste.ofcode.org/QdTQJFgi3nnDtiDeScZCUj\" target=\"_blank\" title=\"https://paste.ofcode.org/QdTQJFgi3nnDtiDeScZCUj\">https://paste.ofcode.org/QdTQJFgi3nnDtiDeScZCUj</a></p>",
        "id": 185622935,
        "sender_full_name": "Himanshu",
        "timestamp": 1579025823
    },
    {
        "content": "<p>This looks better.</p>",
        "id": 185622979,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579025858
    },
    {
        "content": "<p>I am just confused what that <code>text</code> gonna work for <code>void (*stdOut)(const char *text)</code></p>",
        "id": 185623094,
        "sender_full_name": "Himanshu",
        "timestamp": 1579025919
    },
    {
        "content": "<p>Now, you can write the content of the <code>text</code> string to a global variable. Do you know what a global variable is?</p>",
        "id": 185623111,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579025936
    },
    {
        "content": "<p>yeah a variable which can be accessed by all</p>",
        "id": 185623377,
        "sender_full_name": "Himanshu",
        "timestamp": 1579025987
    },
    {
        "content": "<p>like it's scope can be seen to all</p>",
        "id": 185623436,
        "sender_full_name": "Himanshu",
        "timestamp": 1579026004
    },
    {
        "content": "<p>Therefore, this would be the next step.</p>",
        "id": 185623454,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579026018
    },
    {
        "content": "<p>like this <code>const char* text = \"print(BRLCAD.database:Title())\";</code></p>",
        "id": 185623568,
        "sender_full_name": "Himanshu",
        "timestamp": 1579026117
    },
    {
        "content": "<p>Well, I have a bad feeling with this <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> but if you write the code, you may see how it goes.</p>",
        "id": 185623753,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579026211
    },
    {
        "content": "<p>one doubt what that <code>text</code> should contain ?</p>",
        "id": 185623942,
        "sender_full_name": "Himanshu",
        "timestamp": 1579026309
    },
    {
        "content": "<p>Maybe this hint helps: In your code, <code>TheLuaScript</code> has to be <code>\"print(BRLCAD.database:Title())\"</code>.</p>",
        "id": 185623980,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579026329
    },
    {
        "content": "<blockquote>\n<p>one doubt what that <code>text</code> should contain ?</p>\n</blockquote>\n<p>What ever it contains, it's the function's parameter.</p>",
        "id": 185624081,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579026371
    },
    {
        "content": "<p>Again, write the content of <code>text</code> to a global variable.</p>",
        "id": 185624376,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579026555
    },
    {
        "content": "<p>then <code>TheLuaScript</code> and <code>text</code> will contain same strings ?</p>",
        "id": 185626230,
        "sender_full_name": "Himanshu",
        "timestamp": 1579027601
    },
    {
        "content": "<p>if <code>text</code> will be global varibale then it has to be like <code>TheLuaScript</code> ?</p>",
        "id": 185626305,
        "sender_full_name": "Himanshu",
        "timestamp": 1579027658
    },
    {
        "content": "<blockquote>\n<p>then <code>TheLuaScript</code> and <code>text</code> will contain same strings ?</p>\n</blockquote>\n<p>Not in general.</p>",
        "id": 185626397,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579027704
    },
    {
        "content": "<blockquote>\n<p>if <code>text</code> will be global varibale then it has to be like <code>TheLuaScript</code> ?</p>\n</blockquote>\n<p><code>text</code>is a function parameter, not a global variable.</p>",
        "id": 185626447,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579027741
    },
    {
        "content": "<p>then I have to compare <code>text</code> with C++ <code>Title()</code> since <code>text</code> is carrying Lua <code>Title()</code> ?</p>",
        "id": 185629795,
        "sender_full_name": "Himanshu",
        "timestamp": 1579029654
    },
    {
        "content": "<p>In principle yes, do you have the code which writes <code>text</code> to a global variable?</p>",
        "id": 185630353,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579029940
    },
    {
        "content": "<p><a href=\"https://paste.ofcode.org/DExtE25RS45Cvij7aZXmnZ\" target=\"_blank\" title=\"https://paste.ofcode.org/DExtE25RS45Cvij7aZXmnZ\">https://paste.ofcode.org/DExtE25RS45Cvij7aZXmnZ</a></p>",
        "id": 185630673,
        "sender_full_name": "Himanshu",
        "timestamp": 1579030093
    },
    {
        "content": "<p>Well, you write <code>TheLuaScript</code> to <code>text</code>. However, what I recommended was writing <code>text</code> to a global variable.</p>",
        "id": 185631293,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579030407
    },
    {
        "content": "<p>did you mean the content of <code>text</code> will be passed to a new global varibale ?</p>",
        "id": 185632029,
        "sender_full_name": "Himanshu",
        "timestamp": 1579030803
    },
    {
        "content": "<p>actually I am unable to understand writing text to a global varibale</p>",
        "id": 185632063,
        "sender_full_name": "Himanshu",
        "timestamp": 1579030837
    },
    {
        "content": "<blockquote>\n<p>did you mean the content of <code>text</code> will be passed to a new global varibale ?</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 185632221,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579030945
    },
    {
        "content": "<blockquote>\n<p>actually I am unable to understand writing text to a global varibale</p>\n</blockquote>\n<p>First, you need a global variable which can carry a string.</p>",
        "id": 185632249,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579030975
    },
    {
        "content": "<p>yeah got it</p>",
        "id": 185632816,
        "sender_full_name": "Himanshu",
        "timestamp": 1579031294
    },
    {
        "content": "<p>like this <a href=\"https://paste.ofcode.org/34Zp3g5gKy4fz5DirHGAxAB\" target=\"_blank\" title=\"https://paste.ofcode.org/34Zp3g5gKy4fz5DirHGAxAB\">https://paste.ofcode.org/34Zp3g5gKy4fz5DirHGAxAB</a></p>",
        "id": 185632919,
        "sender_full_name": "Himanshu",
        "timestamp": 1579031359
    },
    {
        "content": "<p>Almost, the memory of <code>text</code> is probably only temporary, i.e. already feed when you try to access <code>title</code>. Why not std::string?</p>",
        "id": 185633149,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579031499
    },
    {
        "content": "<p>actually I cannot relate my C into C++ and now I saw there is a new data type to handle strings which is std::string</p>",
        "id": 185633383,
        "sender_full_name": "Himanshu",
        "timestamp": 1579031630
    },
    {
        "content": "<p>For handling strings there is no such data type in C. So I thought to do that in that way</p>",
        "id": 185633650,
        "sender_full_name": "Himanshu",
        "timestamp": 1579031769
    },
    {
        "content": "<p>There isn't much more to do than <code>std::string title;</code> and <code>title = text;</code>.</p>",
        "id": 185633951,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579031968
    },
    {
        "content": "<p>btw I saw that <code>text</code> doesn't contain any string by using std::cout then how it is supposed to compare?</p>",
        "id": 185634534,
        "sender_full_name": "Himanshu",
        "timestamp": 1579032273
    },
    {
        "content": "<p>looks like <code>title</code> will store the <code>TheLuaScript</code> and it will be compared with C++ <code>Title()</code> ?</p>",
        "id": 185634907,
        "sender_full_name": "Himanshu",
        "timestamp": 1579032496
    },
    {
        "content": "<p>TheLuaScrip is only the program in Lua which will be executed.</p>",
        "id": 185635076,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579032609
    },
    {
        "content": "<blockquote>\n<p>btw I saw that <code>text</code> doesn't contain any string by using std::cout then how it is supposed to compare?</p>\n</blockquote>\n<p>That's remarkable. Which database have you used?</p>",
        "id": 185635141,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579032667
    },
    {
        "content": "<p><code>MemoryDatabase</code>. Looks like it's to be <code>ConstDatabase</code> ?</p>",
        "id": 185635282,
        "sender_full_name": "Himanshu",
        "timestamp": 1579032765
    },
    {
        "content": "<blockquote>\n<p><code>MemoryDatabase</code>. Looks like it's to be <code>ConstDatabase</code> ?</p>\n</blockquote>\n<p>No, its a writable BRLCAD::MemoryDatabase.</p>",
        "id": 185635421,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579032858
    },
    {
        "content": "<p>No, I meant which .g file did you used?</p>",
        "id": 185635459,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579032891
    },
    {
        "content": "<blockquote>\n<p>No, I meant which .g file did you used?</p>\n</blockquote>\n<p>castle.g</p>",
        "id": 185635510,
        "sender_full_name": "Himanshu",
        "timestamp": 1579032928
    },
    {
        "content": "<p>How often was databasetitle() called?</p>",
        "id": 185635782,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579033103
    },
    {
        "content": "<blockquote>\n<p>How often was databasetitle() called?</p>\n</blockquote>\n<p>only in 1 time <code>EmbeddedLuaHandle* handle = CreateEmbeddedLuaHandleInstance(database, databasetitle, 0);</code></p>",
        "id": 185635992,
        "sender_full_name": "Himanshu",
        "timestamp": 1579033231
    },
    {
        "content": "<p>This doesn't mean nothing. databasetitle() will be called from within Lua. This can be multiple times.</p>",
        "id": 185636184,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579033324
    },
    {
        "content": "<p>Yeah I saw it in embeddedLua.cpp</p>",
        "id": 185641727,
        "sender_full_name": "Himanshu",
        "timestamp": 1579036911
    },
    {
        "content": "<p>May be there is an issue with <code>stdOut</code> in embeddedlua.cpp</p>",
        "id": 185641884,
        "sender_full_name": "Himanshu",
        "timestamp": 1579037023
    },
    {
        "content": "<p>I will look into it in morning. Late night here</p>",
        "id": 185641914,
        "sender_full_name": "Himanshu",
        "timestamp": 1579037040
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> in this function <code>void      (*stdOut)(const char* text)</code> what <code>text</code> is referring to ?</p>",
        "id": 185721320,
        "sender_full_name": "Himanshu",
        "timestamp": 1579109240
    },
    {
        "content": "<p>btw I tried with several .g but still no string present in <code>text</code> for <code>databasetitle</code></p>",
        "id": 185721467,
        "sender_full_name": "Himanshu",
        "timestamp": 1579109323
    },
    {
        "content": "<blockquote>\n<p>Hey <span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> in this function <code>void      (*stdOut)(const char* text)</code> what <code>text</code> is referring to ?</p>\n</blockquote>\n<p>If this function pointer is not NULL, Lua will use it for sring output, for example in the Lua <code>print()</code> function. I.e., <code>text</code> is the processed string which was headed over to <code>print()</code>.</p>",
        "id": 185721769,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579109488
    },
    {
        "content": "<blockquote>\n<p>btw I tried with several .g but still no string present in <code>text</code> for <code>databasetitle</code></p>\n</blockquote>\n<p>I'm currently building BRL-CAD and rt^3, and will test your stuff then.</p>",
        "id": 185721862,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579109537
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Hey <span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> in this function <code>void      (*stdOut)(const char* text)</code> what <code>text</code> is referring to ?</p>\n</blockquote>\n<p>If this function pointer is not NULL, Lua will use it for sring output, for example in the Lua <code>print()</code> function. I.e., <code>text</code> is the processed string which was headed over to <code>print()</code>.</p>\n</blockquote>\n<p>so the <code>text</code> content will be passed to Lua <code>print()</code> ?</p>",
        "id": 185721958,
        "sender_full_name": "Himanshu",
        "timestamp": 1579109608
    },
    {
        "content": "<p>No, the other way round.</p>",
        "id": 185722168,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579109723
    },
    {
        "content": "<p>Just tested your version <a href=\"https://paste.ofcode.org/34Zp3g5gKy4fz5DirHGAxAB\" target=\"_blank\" title=\"https://paste.ofcode.org/34Zp3g5gKy4fz5DirHGAxAB\">https://paste.ofcode.org/34Zp3g5gKy4fz5DirHGAxAB</a> with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">databasetitle</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">text</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>It works as it should with havoc.g, and <code>databasetitle()</code> is called twice.</p>",
        "id": 185722467,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579109891
    },
    {
        "content": "<p><code>databasetitle()</code> called twice from within Lua</p>",
        "id": 185723193,
        "sender_full_name": "Himanshu",
        "timestamp": 1579110319
    },
    {
        "content": "<p>?</p>",
        "id": 185723197,
        "sender_full_name": "Himanshu",
        "timestamp": 1579110321
    },
    {
        "content": "<p>Do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">size_t</span>      <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">databasetitle</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"o\">++</span><span class=\"n\">counter</span><span class=\"p\">;</span>\n\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">counter</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">text</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 185723298,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579110373
    },
    {
        "content": "<p>You used helloworld.cpp as your starting point (which is okay), therefore my command line is</p>\n<div class=\"codehilite\"><pre><span></span>./helloworld havoc.g\n</pre></div>",
        "id": 185723438,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579110480
    },
    {
        "content": "<p>yeah got it</p>",
        "id": 185723522,
        "sender_full_name": "Himanshu",
        "timestamp": 1579110507
    },
    {
        "content": "<p>the function is called two times</p>",
        "id": 185723531,
        "sender_full_name": "Himanshu",
        "timestamp": 1579110515
    },
    {
        "content": "<p>And, you are interested in the first call only.</p>",
        "id": 185723614,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579110567
    },
    {
        "content": "<p>yeah in first call looks like the <code>text</code> is holding string but not in 2nd time</p>",
        "id": 185723727,
        "sender_full_name": "Himanshu",
        "timestamp": 1579110627
    },
    {
        "content": "<p>In the first call it holds a string too, namely \"\\ņ\" (new line).</p>",
        "id": 185723828,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579110694
    },
    {
        "content": "<p>so the <code>text</code> is holding Lua <code>Title()</code> correct ?</p>",
        "id": 185724278,
        "sender_full_name": "Himanshu",
        "timestamp": 1579110929
    },
    {
        "content": "<p>I have to compare with C++ <code>Title()</code></p>",
        "id": 185724325,
        "sender_full_name": "Himanshu",
        "timestamp": 1579110958
    },
    {
        "content": "<p>Well, it should. This would be the test.</p>",
        "id": 185724337,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579110962
    },
    {
        "content": "<p>okay then if both Lua <code>Title()</code> and C++ <code>Title()</code> will be equal then I will print the title otherwise a error message that both the strings are not equal</p>",
        "id": 185725107,
        "sender_full_name": "Himanshu",
        "timestamp": 1579111355
    },
    {
        "content": "<p>and for the return values I will make it global</p>",
        "id": 185725190,
        "sender_full_name": "Himanshu",
        "timestamp": 1579111411
    },
    {
        "content": "<p>and those values I will use it in <code>main()</code></p>",
        "id": 185725214,
        "sender_full_name": "Himanshu",
        "timestamp": 1579111429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> so far I have done like this <a href=\"https://paste.ofcode.org/BWP6gC85Wrg5nbJnvmm6Gm\" target=\"_blank\" title=\"https://paste.ofcode.org/BWP6gC85Wrg5nbJnvmm6Gm\">https://paste.ofcode.org/BWP6gC85Wrg5nbJnvmm6Gm</a></p>",
        "id": 185730099,
        "sender_full_name": "Himanshu",
        "timestamp": 1579114003
    },
    {
        "content": "<ul>\n<li>This is dangerous, because you cannot assure that <code>TheTitle</code> has still its memory when <code>databasetitle()</code> will be called.</li>\n<li>The important number is the return value of the <code>main()</code> function, which has ti reflect the result of the comparison.</li>\n</ul>",
        "id": 185730795,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579114383
    },
    {
        "content": "<p>so I will change it to std::string</p>",
        "id": 185731390,
        "sender_full_name": "Himanshu",
        "timestamp": 1579114693
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Can you apply the previous patch because so that my current patch will not mix with previous patch ?</p>",
        "id": 185735130,
        "sender_full_name": "Himanshu",
        "timestamp": 1579116903
    },
    {
        "content": "<p>just finished the code and I saw that previous Lua binding is not applied</p>",
        "id": 185735180,
        "sender_full_name": "Himanshu",
        "timestamp": 1579116932
    },
    {
        "content": "<p>Okay, done.</p>",
        "id": 185736208,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579117557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> here is the patch <a href=\"/user_uploads/1549/bWywTJMPf8K-rX0Wcgct1ovw/Unit_test_for_database_title.patch\" target=\"_blank\" title=\"Unit_test_for_database_title.patch\">Unit_test_for_database_title.patch</a></p>",
        "id": 185736700,
        "sender_full_name": "Himanshu",
        "timestamp": 1579117841
    },
    {
        "content": "<p>Please, create a new file. You can call it databasetitle.cpp, for example. However, it#s definitely not a hello-program (although it's okay tom use one as starting point).</p>",
        "id": 185736960,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579118006
    },
    {
        "content": "<p>okay</p>",
        "id": 185737224,
        "sender_full_name": "Himanshu",
        "timestamp": 1579118050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <a href=\"/user_uploads/1549/sbAoR3wfj-EX1F9AOV-e5G5F/Unit_test_for_database_title.patch\" target=\"_blank\" title=\"Unit_test_for_database_title.patch\">Unit_test_for_database_title.patch</a></p>",
        "id": 185738266,
        "sender_full_name": "Himanshu",
        "timestamp": 1579118670
    },
    {
        "content": "<p>So there is no need for returning other values like -- It cannot load file, Out of memory and cannot create BRLCAD embedded Lua Handle ? <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span></p>",
        "id": 185846074,
        "sender_full_name": "Himanshu",
        "timestamp": 1579200479
    },
    {
        "content": "<p>This are all errors too, and shall result in a return value other than 0.</p>",
        "id": 185846414,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579200666
    },
    {
        "content": "<p>btw I created a global variable which will store the 0 for success and 2 for fail. And I checked them in <code>main()</code> so global values will be assigned to <code>ret</code></p>",
        "id": 185846743,
        "sender_full_name": "Himanshu",
        "timestamp": 1579200869
    },
    {
        "content": "<p>okay I understood what you said :)</p>",
        "id": 185847053,
        "sender_full_name": "Himanshu",
        "timestamp": 1579201055
    },
    {
        "content": "<p>You don't initialize <code>check</code>and <code>if (check == 0) {</code> is before the Lua script will be executed.</p>",
        "id": 185847345,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579201213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> btw I am curious that is there any way I can produce the error ?</p>",
        "id": 185849252,
        "sender_full_name": "Himanshu",
        "timestamp": 1579202370
    },
    {
        "content": "<p>This is not so easy, but you can check with <code>if (TheText != TheTitle)</code> what happens if the test fails. Or, <code>TheTitle = database.Title() + \"a\"</code>.</p>",
        "id": 185849637,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579202566
    },
    {
        "content": "<p>yeah got all things done</p>",
        "id": 185849965,
        "sender_full_name": "Himanshu",
        "timestamp": 1579202751
    },
    {
        "content": "<p>since this task is part 1</p>",
        "id": 185850143,
        "sender_full_name": "Himanshu",
        "timestamp": 1579202831
    },
    {
        "content": "<p>then what about part 2 ?</p>",
        "id": 185850151,
        "sender_full_name": "Himanshu",
        "timestamp": 1579202837
    },
    {
        "content": "<p>Here is the patch <a href=\"/user_uploads/1549/yZ5jGbXFRAcjPymUwmicwfK_/unit_test_for_database_title.patch\" target=\"_blank\" title=\"unit_test_for_database_title.patch\">unit_test_for_database_title.patch</a></p>",
        "id": 185850501,
        "sender_full_name": "Himanshu",
        "timestamp": 1579203023
    },
    {
        "content": "<p>part 2 is to make the test run automatically</p>",
        "id": 185850534,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579203047
    },
    {
        "content": "<p>automatically ?</p>",
        "id": 185850634,
        "sender_full_name": "Himanshu",
        "timestamp": 1579203121
    },
    {
        "content": "<p>Why is check of size_t?</p>",
        "id": 185850678,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579203125
    },
    {
        "content": "<blockquote>\n<p>automatically ?</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 185850692,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579203134
    },
    {
        "content": "<p>then I will make it <code>int</code></p>",
        "id": 185850724,
        "sender_full_name": "Himanshu",
        "timestamp": 1579203151
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/EF6KpgRbNfF5kZS-SfTgOYl0/unit_test_for_database_title.patch\" target=\"_blank\" title=\"unit_test_for_database_title.patch\">unit_test_for_database_title.patch</a></p>",
        "id": 185850906,
        "sender_full_name": "Himanshu",
        "timestamp": 1579203274
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>automatically ?</p>\n</blockquote>\n<p>Yes.</p>\n</blockquote>\n<p>how ?</p>",
        "id": 185850938,
        "sender_full_name": "Himanshu",
        "timestamp": 1579203304
    },
    {
        "content": "<p>btw in the mean time, I completed Lua Binding for <code>Arb8</code> and <code>Paraboloid</code>. But I am thinking about test for part 2</p>",
        "id": 185919399,
        "sender_full_name": "Himanshu",
        "timestamp": 1579270827
    },
    {
        "content": "<p>You are rocking the lua interface himanshu</p>",
        "id": 185919475,
        "sender_full_name": "Sean",
        "timestamp": 1579270904
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102902\">@Sean</span></p>",
        "id": 185919540,
        "sender_full_name": "Himanshu",
        "timestamp": 1579270936
    },
    {
        "content": "<p>while I am waiting for approvation for Test but I am thinking to complete the rest Lua binding with new task for part 2</p>",
        "id": 185919600,
        "sender_full_name": "Himanshu",
        "timestamp": 1579270998
    },
    {
        "content": "<p>from last 5 Lua binding, I completed 2 at mean time and working in rest 3</p>",
        "id": 185919632,
        "sender_full_name": "Himanshu",
        "timestamp": 1579271034
    },
    {
        "content": "<p>but looks like 6 days left for end of gci</p>",
        "id": 185919688,
        "sender_full_name": "Himanshu",
        "timestamp": 1579271048
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p>automatically ?</p>\n</blockquote>\n<p>Yes.</p>\n</blockquote>\n<p>how ?</p>\n</blockquote>\n<p>In the rt^3 build directory type <code>make test</code>. This will run a test called \"tester_ci_primitives_01\".<br>\nLook at the CMakeLists.txt file in the tests/coreInterface directory to see how to add a program to the make test target.</p>",
        "id": 185938717,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579282409
    },
    {
        "content": "<p>okay</p>",
        "id": 185946025,
        "sender_full_name": "Himanshu",
        "timestamp": 1579287616
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> can I name it to <code>ci_database_title</code> or should it be <code>database_title </code>?</p>",
        "id": 185949234,
        "sender_full_name": "Himanshu",
        "timestamp": 1579289929
    },
    {
        "content": "<p>How about \"lua_database_title\"? \"ci\" is for Core Interface.</p>",
        "id": 185949559,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579290139
    },
    {
        "content": "<p>okay</p>",
        "id": 185949807,
        "sender_full_name": "Himanshu",
        "timestamp": 1579290335
    },
    {
        "content": "<p>looks like it is failing btw I have done this</p>",
        "id": 185950504,
        "sender_full_name": "Himanshu",
        "timestamp": 1579290893
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>add_executable(tester_lua_database_title databasetitle.cpp)\ntarget_link_libraries(tester_lua_database_title embeddedlua)\nadd_test(NAME tester_lua_database_title_01 COMMAND tester_lua_database_title test.g)\n</pre></div>",
        "id": 185950530,
        "sender_full_name": "Himanshu",
        "timestamp": 1579290914
    },
    {
        "content": "<p>Is there a <code>test.g</code>?</p>",
        "id": 185950560,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579290942
    },
    {
        "content": "<p>nope</p>",
        "id": 185950643,
        "sender_full_name": "Himanshu",
        "timestamp": 1579290988
    },
    {
        "content": "<p>BTW, the test logs are in the build directory in the Testing/Temporary directory. You can look at them to find the cause.</p>",
        "id": 185950686,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579291036
    },
    {
        "content": "<p>oh... <code>test.g</code> is not present</p>",
        "id": 185950836,
        "sender_full_name": "Himanshu",
        "timestamp": 1579291140
    },
    {
        "content": "<p>Then, you should use a database which is there.</p>",
        "id": 185951066,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579291275
    },
    {
        "content": "<p>so how <code>coreinterface</code> detects <code>test.g</code> ?</p>",
        "id": 185952001,
        "sender_full_name": "Himanshu",
        "timestamp": 1579291850
    },
    {
        "content": "<p>Is that pointing to <code>brlcad/brlcad-code/build/share/db/</code> ?</p>",
        "id": 185952204,
        "sender_full_name": "Himanshu",
        "timestamp": 1579291971
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> where is<code> test.g</code> present for <code>coreinterface </code>?</p>",
        "id": 185952732,
        "sender_full_name": "Himanshu",
        "timestamp": 1579292329
    },
    {
        "content": "<p>It generates it.</p>",
        "id": 185953453,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579292840
    },
    {
        "content": "<p>yeah saw that</p>",
        "id": 185953490,
        "sender_full_name": "Himanshu",
        "timestamp": 1579292873
    },
    {
        "content": "<p>btw I saw that test.g can't be loaded for <code>embededlua</code></p>",
        "id": 185953636,
        "sender_full_name": "Himanshu",
        "timestamp": 1579292944
    },
    {
        "content": "<p>looks like <code>if (database.Load(argv[1])</code> is unable to load the <code>.g</code> for <code>databasetitle.cpp</code> <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span></p>",
        "id": 185954624,
        "sender_full_name": "Himanshu",
        "timestamp": 1579293640
    },
    {
        "content": "<p>Maybe, you can load a database from share/db in the BRL-CAD installation directory.</p>",
        "id": 185956284,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579294793
    },
    {
        "content": "<blockquote>\n<p>Maybe, you can load a database from share/db in the BRL-CAD installation directory.</p>\n</blockquote>\n<p>yeah I am thinking about it</p>",
        "id": 185956464,
        "sender_full_name": "Himanshu",
        "timestamp": 1579294841
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> is it okay if I move <code>castle.g</code>to <code>embeddedlua</code> and do <code>${CMAKE_CURRENT_SOURCE_DIR}/castle.g</code> because test succesfully pass for this ?</p>",
        "id": 185958967,
        "sender_full_name": "Himanshu",
        "timestamp": 1579296213
    },
    {
        "content": "<p>btw here is the patch <a href=\"/user_uploads/1549/RB_PbAkNLygzjjlA-mNcQpk7/add_automatic_test_for_databasetitle.patch\" target=\"_blank\" title=\"add_automatic_test_for_databasetitle.patch\">add_automatic_test_for_databasetitle.patch</a></p>",
        "id": 185960586,
        "sender_full_name": "Himanshu",
        "timestamp": 1579297243
    },
    {
        "content": "<p>Oops I forgot to add castle.g in embeded Lua dir</p>",
        "id": 185963097,
        "sender_full_name": "Himanshu",
        "timestamp": 1579299064
    },
    {
        "content": "<p>here is the patch file after adding castle.g <a href=\"/user_uploads/1549/7CB62ulHeNYowqf7YeeUDxKm/automatic_test_for_database_title.patch\" target=\"_blank\" title=\"automatic_test_for_database_title.patch\">automatic_test_for_database_title.patch</a></p>",
        "id": 185986244,
        "sender_full_name": "Himanshu",
        "timestamp": 1579336366
    },
    {
        "content": "<p>How about <code>${BRLCAD_BASE_DIR}/share/db/castle.g</code>?</p>",
        "id": 185989602,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579343182
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> should I complete those rest Lua binding or you will create something else ?</p>",
        "id": 185995738,
        "sender_full_name": "Himanshu",
        "timestamp": 1579354542
    },
    {
        "content": "<p>Well, I could create some more regarding tests, completing the Object interface (the attributes), and more flexible primitive construction (similiar to the primitive constructors in C++), if you are interested.</p>",
        "id": 185995980,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579354960
    },
    {
        "content": "<p>like for an example attributes of Object interface which contains like <code>Type()</code> and <code>IsValid()</code> ?</p>",
        "id": 185996063,
        "sender_full_name": "Himanshu",
        "timestamp": 1579355142
    },
    {
        "content": "<blockquote>\n<p>Well, I could create some more regarding tests, completing the Object interface (the attributes), and more flexible primitive construction (similiar to the primitive constructors in C++), if you are interested.</p>\n</blockquote>\n<p>btw yes I am in <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 185997477,
        "sender_full_name": "Himanshu",
        "timestamp": 1579357605
    },
    {
        "content": "<p>I added some new tasks.</p>",
        "id": 186004186,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579368649
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> In this task <code>BRL-CAD Lua binding: Extend primitive creation features</code> the meaning of <code>Provide this feature for 3 primitive geometric objects</code>, you mean like <code>sphere</code>, <code>torus</code> and many more like that ?</p>",
        "id": 186009900,
        "sender_full_name": "Himanshu",
        "timestamp": 1579378020
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> btw in meantime I completed some other Lua bindings. Should I send those patches to you ?</p>",
        "id": 186038788,
        "sender_full_name": "Himanshu",
        "timestamp": 1579437317
    },
    {
        "content": "<p>Yes, you can send them to me. But also uploaded t their tasks, such that they count?</p>",
        "id": 186038907,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579437551
    },
    {
        "content": "<p>looks like not so many days left</p>",
        "id": 186038958,
        "sender_full_name": "Himanshu",
        "timestamp": 1579437609
    },
    {
        "content": "<p>so I have to claim their respective tasks and send those patches to you</p>",
        "id": 186038965,
        "sender_full_name": "Himanshu",
        "timestamp": 1579437638
    },
    {
        "content": "<p>?</p>",
        "id": 186038966,
        "sender_full_name": "Himanshu",
        "timestamp": 1579437641
    },
    {
        "content": "<p>claim new task deadline is 21st</p>",
        "id": 186038974,
        "sender_full_name": "Himanshu",
        "timestamp": 1579437668
    },
    {
        "content": "<p>You mean, I shall pre-check them before you claim the tasks?</p>",
        "id": 186038976,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579437682
    },
    {
        "content": "<p>no, I mean to apply those patch without having task count</p>",
        "id": 186039017,
        "sender_full_name": "Himanshu",
        "timestamp": 1579437744
    },
    {
        "content": "<p>because currently I am in <code>BRL-CAD Lua binding: Object Attributes (#1 of 2)</code></p>",
        "id": 186039022,
        "sender_full_name": "Himanshu",
        "timestamp": 1579437770
    },
    {
        "content": "<p>Well, lets start with one of them.</p>",
        "id": 186039025,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579437782
    },
    {
        "content": "<p>now ?</p>",
        "id": 186039030,
        "sender_full_name": "Himanshu",
        "timestamp": 1579437791
    },
    {
        "content": "<blockquote>\n<p>because currently I am in <code>BRL-CAD Lua binding: Object Attributes (#1 of 2)</code></p>\n</blockquote>\n<p>You can abandon a task and reclaim it later.</p>",
        "id": 186039077,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579437854
    },
    {
        "content": "<p>okay</p>",
        "id": 186039078,
        "sender_full_name": "Himanshu",
        "timestamp": 1579437866
    },
    {
        "content": "<p>sent you one of <code>Particle</code></p>",
        "id": 186039545,
        "sender_full_name": "Himanshu",
        "timestamp": 1579438699
    },
    {
        "content": "<p>sent you the patch. brb</p>",
        "id": 186041870,
        "sender_full_name": "Himanshu",
        "timestamp": 1579443258
    },
    {
        "content": "<p>just went for snacks</p>",
        "id": 186043313,
        "sender_full_name": "Himanshu",
        "timestamp": 1579445921
    },
    {
        "content": "<p>okay here I am</p>",
        "id": 186043314,
        "sender_full_name": "Himanshu",
        "timestamp": 1579445926
    },
    {
        "content": "<p>It isn't such that I don't have anything else to do <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 186043386,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579446034
    },
    {
        "content": "<p>sent you the <code>Paraboloid</code> Lua binding</p>",
        "id": 186044253,
        "sender_full_name": "Himanshu",
        "timestamp": 1579447628
    },
    {
        "content": "<p>sent you the last one <code>Ellipsoid</code></p>",
        "id": 186045791,
        "sender_full_name": "Himanshu",
        "timestamp": 1579450570
    },
    {
        "content": "<p>rest two Lua bindings I have not started but I will work on your new task</p>",
        "id": 186045801,
        "sender_full_name": "Himanshu",
        "timestamp": 1579450601
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> In <code>BRL-CAD Lua binding: Object Attributes (#1 of 2)</code> the <code>BRLCAD::Object::AttributeIterator class</code> has to be done in a separate file or in same <code>objectbase.h</code> ?</p>",
        "id": 186046469,
        "sender_full_name": "Himanshu",
        "timestamp": 1579451934
    },
    {
        "content": "<p>a separate file</p>",
        "id": 186046560,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579452076
    },
    {
        "content": "<p>okay</p>",
        "id": 186046633,
        "sender_full_name": "Himanshu",
        "timestamp": 1579452212
    },
    {
        "content": "<p>is there any function like <code>lua_gettop(luaState)</code> which not only checks number of arguments but data type of arguments passed to a function ?</p>",
        "id": 186046686,
        "sender_full_name": "Himanshu",
        "timestamp": 1579452279
    },
    {
        "content": "<p>suppose a function having same number of arguments but different data types</p>",
        "id": 186046694,
        "sender_full_name": "Himanshu",
        "timestamp": 1579452302
    },
    {
        "content": "<p>I am thinking to do in another way</p>",
        "id": 186046699,
        "sender_full_name": "Himanshu",
        "timestamp": 1579452312
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 186046706,
        "sender_full_name": "Himanshu",
        "timestamp": 1579452345
    },
    {
        "content": "<blockquote>\n<p>is there any function like <code>lua_gettop(luaState)</code> which not only checks number of arguments but data type of arguments passed to a function ?</p>\n</blockquote>\n<p>The answer is yes, but I haven't an example at hand.</p>",
        "id": 186046910,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579452696
    },
    {
        "content": "<p>Here is the patch file for ellipsoid <a href=\"/user_uploads/1549/s2rkLv4mIp4vFh5iORbYijUo/lua_binding_for_ellipsoid.patch\" target=\"_blank\" title=\"lua_binding_for_ellipsoid.patch\">lua_binding_for_ellipsoid.patch</a></p>",
        "id": 186048025,
        "sender_full_name": "Himanshu",
        "timestamp": 1579454663
    },
    {
        "content": "<p>btw I have implemented <code>check_Set</code> for <code>Cone</code> because both functions have same number of arguments but different type of arguments. So I have done like this <a href=\"https://paste.ofcode.org/acgtvLbG5JaWCaxRfu2YCw\" target=\"_blank\" title=\"https://paste.ofcode.org/acgtvLbG5JaWCaxRfu2YCw\">https://paste.ofcode.org/acgtvLbG5JaWCaxRfu2YCw</a></p>",
        "id": 186049764,
        "sender_full_name": "Himanshu",
        "timestamp": 1579457874
    },
    {
        "content": "<p>A global check_Set? This doesn't look right.<br>\nI need to look for some examples on how to distinguish between the parameter types, but can't do this at this weekend.</p>",
        "id": 186050017,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579458242
    },
    {
        "content": "<p>okay I will try to search in internet</p>",
        "id": 186050155,
        "sender_full_name": "Himanshu",
        "timestamp": 1579458571
    },
    {
        "content": "<p>for indents are you pointing to else part ?</p>",
        "id": 186050258,
        "sender_full_name": "Himanshu",
        "timestamp": 1579458749
    },
    {
        "content": "<p>I think that this is a copy-n-paste thing. Every block gets only 4 additional spaces.</p>",
        "id": 186050280,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579458828
    },
    {
        "content": "<p>okay got this</p>",
        "id": 186050383,
        "sender_full_name": "Himanshu",
        "timestamp": 1579459010
    },
    {
        "content": "<blockquote>\n<p>A global check_Set? This doesn't look right.<br>\nI need to look for some examples on how to distinguish between the parameter types, but can't do this at this weekend.</p>\n</blockquote>\n<p>So only <code>Cone</code> Lua binding task left which will depend on this</p>",
        "id": 186050501,
        "sender_full_name": "Himanshu",
        "timestamp": 1579459276
    },
    {
        "content": "<p>You did a lot today :)</p>",
        "id": 186050509,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579459321
    },
    {
        "content": "<p>btw after <code>Arb8</code> I will head towards the new tasks created by you</p>",
        "id": 186050556,
        "sender_full_name": "Himanshu",
        "timestamp": 1579459364
    },
    {
        "content": "<p>You can test with <code>lua_istable(luaState, index)</code> if a parameter is a vector or not.</p>",
        "id": 186084904,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579512077
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> I am thinking about a file name like <code>objectatrribute.h</code> which is related to <code>objectbase.h</code></p>",
        "id": 186105704,
        "sender_full_name": "Himanshu",
        "timestamp": 1579530115
    },
    {
        "content": "<p>or any you can suggest ?</p>",
        "id": 186105774,
        "sender_full_name": "Himanshu",
        "timestamp": 1579530147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252475\">@Himanshu Sekhar Nayak</span> <code>objectattributeiterator.~</code></p>",
        "id": 186125188,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579546016
    },
    {
        "content": "<p>Okay</p>",
        "id": 186125341,
        "sender_full_name": "Himanshu",
        "timestamp": 1579546163
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> busy day today ?</p>",
        "id": 186125793,
        "sender_full_name": "Himanshu",
        "timestamp": 1579546658
    },
    {
        "content": "<p>It's called working day ;)</p>",
        "id": 186126154,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579547003
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span>  here is the patch for <code>object::AtributeIterator</code> <a href=\"/user_uploads/1549/CMW-xfEyeFRFiQenhwfhYDaB/lua_binding_for_objectattributeiterator.patch\" target=\"_blank\" title=\"lua_binding_for_objectattributeiterator.patch\">lua_binding_for_objectattributeiterator.patch</a></p>",
        "id": 186126791,
        "sender_full_name": "Himanshu",
        "timestamp": 1579547725
    },
    {
        "content": "<p>oops didn't given a space for heading</p>",
        "id": 186127350,
        "sender_full_name": "Himanshu",
        "timestamp": 1579548307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252475\">@Himanshu Sekhar Nayak</span> It's not a template (base class of others), but a real well defined class/object which needs to be handled like the vector or a geometry primitive class.</p>",
        "id": 186128643,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579549615
    },
    {
        "content": "<p>Geometry primitive class ?</p>",
        "id": 186128779,
        "sender_full_name": "Himanshu",
        "timestamp": 1579549738
    },
    {
        "content": "<p>But it can't be created by the user (only an Object can this). That's why it doesn't need an Init~() function.</p>",
        "id": 186128788,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579549745
    },
    {
        "content": "<blockquote>\n<p>Geometry primitive class ?</p>\n</blockquote>\n<p>Arb8, Hafspace, Torus, ...</p>",
        "id": 186128799,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579549762
    },
    {
        "content": "<p>What you did in the last weeks.</p>",
        "id": 186128818,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579549783
    },
    {
        "content": "<p>oh..... got it</p>",
        "id": 186128904,
        "sender_full_name": "Himanshu",
        "timestamp": 1579549846
    },
    {
        "content": "<p>then after Lua binding of <code>objectbaseiterator</code>,it can applied in <code>objectbase.h</code></p>",
        "id": 186128937,
        "sender_full_name": "Himanshu",
        "timestamp": 1579549893
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> btw I made some progress like this.</p>",
        "id": 186135032,
        "sender_full_name": "Himanshu",
        "timestamp": 1579556270
    },
    {
        "content": "<p>Here is it</p>",
        "id": 186135264,
        "sender_full_name": "Himanshu",
        "timestamp": 1579556518
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/AynrwA8yW0UdSHssPZ6fnKnf/lua_binding_for_object_atrributeiterator.patch\" target=\"_blank\" title=\"lua_binding_for_object_atrributeiterator.patch\">lua_binding_for_object_atrributeiterator.patch</a></p>",
        "id": 186135315,
        "sender_full_name": "Himanshu",
        "timestamp": 1579556532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252475\">@Himanshu Sekhar Nayak</span> Some remarks:</p>\n<ul>\n<li>You need an equivalent to the C++ <code>operator++</code>. Maybe a <code>Next()</code> function. But, it wouldn't make much sense to return AttributeIterator there. Maybe, you could return <code>Good(()</code>. This way, one could do things like <code>while it.Next() do</code>.</li>\n<li>You need a possibility to create an AttributeIterator. Something like</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">PushObjectAttributeIterator</span>\n<span class=\"p\">(</span>\n    <span class=\"n\">lua_State</span><span class=\"o\">*</span>                               <span class=\"n\">luaState</span><span class=\"p\">,</span>\n    <span class=\"k\">const</span> <span class=\"n\">BRLCAD</span><span class=\"o\">::</span><span class=\"n\">Object</span><span class=\"o\">::</span><span class=\"n\">AttributeIterator</span><span class=\"o\">&amp;</span> <span class=\"n\">iterator</span>\n<span class=\"p\">);</span>\n</pre></div>\n\n\n<ul>\n<li>There is no need for ScriptObjectAttributeIterator. It's the same as BRLCAD::Object::AttributeIterator*.</li>\n<li>You need a destructor.</li>\n</ul>",
        "id": 186163037,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579595883
    },
    {
        "content": "<p>Noted</p>",
        "id": 186163221,
        "sender_full_name": "Himanshu",
        "timestamp": 1579596133
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252475\">Himanshu Sekhar Nayak</span> Some remarks:</p>\n<ul>\n<li>You need an equivalent to the C++ <code>operator++</code>. Maybe a <code>Next()</code> function. But, it wouldn't make much sense to return AttributeIterator there. Maybe, you could return <code>Good(()</code>. This way, one could do things like <code>while it.Next() do</code>.</li>\n<li>You need a possibility to create an AttributeIterator. Something like</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">PushObjectAttributeIterator</span>\n<span class=\"p\">(</span>\n    <span class=\"n\">lua_State</span><span class=\"o\">*</span>                               <span class=\"n\">luaState</span><span class=\"p\">,</span>\n    <span class=\"k\">const</span> <span class=\"n\">BRLCAD</span><span class=\"o\">::</span><span class=\"n\">Object</span><span class=\"o\">::</span><span class=\"n\">AttributeIterator</span><span class=\"o\">&amp;</span> <span class=\"n\">iterator</span>\n<span class=\"p\">);</span>\n</pre></div>\n\n\n<ul>\n<li>There is no need for ScriptObjectAttributeIterator. It's the same as BRLCAD::Object::AttributeIterator*.</li>\n<li>You need a destructor.</li>\n</ul>\n</blockquote>\n<p>if we need <code>PushObjectAttributeIterator</code> then we don't need <code>CreateObjectAttributeIterator</code> because only <code>Object</code> can create this(not by user) ?</p>",
        "id": 186188047,
        "sender_full_name": "Himanshu",
        "timestamp": 1579617163
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> and also regarding destructor, are you pointing towards <code>Destruct</code> function ?</p>",
        "id": 186197985,
        "sender_full_name": "Himanshu",
        "timestamp": 1579623106
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> can a nested class object can access parent class method ?</p>",
        "id": 186203658,
        "sender_full_name": "Himanshu",
        "timestamp": 1579626206
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 186203852,
        "sender_full_name": "Himanshu",
        "timestamp": 1579626336
    },
    {
        "content": "<p>so to call <code>Destroy</code> I need to declare a parent class object then I can access <code>Destroy</code></p>",
        "id": 186205866,
        "sender_full_name": "Himanshu",
        "timestamp": 1579627471
    },
    {
        "content": "<p>This is in principle possible, if the subclass has access to its parent.<br>\nWhat do you think about?</p>",
        "id": 186205917,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579627500
    },
    {
        "content": "<p>Okay.</p>",
        "id": 186205950,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579627521
    },
    {
        "content": "<p>yeah then I have to use access specifier as public</p>",
        "id": 186206036,
        "sender_full_name": "Himanshu",
        "timestamp": 1579627568
    },
    {
        "content": "<blockquote>\n<p>so to call <code>Destroy</code> I need to declare a parent class object then I can access <code>Destroy</code></p>\n</blockquote>\n<p>A simple <strong>delete</strong> will do it.</p>",
        "id": 186206108,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579627626
    },
    {
        "content": "<p>my overthinking <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 186206227,
        "sender_full_name": "Himanshu",
        "timestamp": 1579627685
    },
    {
        "content": "<p>AttributeIterator is a simple data object with no \"magic\" memory behind. It's like a proxy for it's values (the member variables).</p>",
        "id": 186206326,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579627778
    },
    {
        "content": "<p>oh.... okay</p>",
        "id": 186206488,
        "sender_full_name": "Himanshu",
        "timestamp": 1579627881
    },
    {
        "content": "<p>Almost all done and just stumbled upon operator overloading</p>",
        "id": 186207025,
        "sender_full_name": "Himanshu",
        "timestamp": 1579628227
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> can you explain me in creating <code>Next()</code> function ?</p>",
        "id": 186209154,
        "sender_full_name": "Himanshu",
        "timestamp": 1579629503
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\"><pre><span></span>if (object-&gt;Good())\n    ++(*object);\n\nreturn object-&gt;Good();\n</pre></div>",
        "id": 186211797,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579631255
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> here is the patch <a href=\"/user_uploads/1549/6SdrDD6L6vHI4qyjvsJ5xLyY/lua_binding_for_object_attribute.patch\" target=\"_blank\" title=\"lua_binding_for_object_attribute.patch\">lua_binding_for_object_attribute.patch</a></p>",
        "id": 186259791,
        "sender_full_name": "Himanshu",
        "timestamp": 1579674806
    },
    {
        "content": "<p>You are making progress, and there isn't so much to change. Let's start with these:</p>\n<ul>\n<li>I know what I wrote regarding the Next() function, but I let you a bit for thinking. Remember, you are implementing a Lua function hook here!</li>\n<li>Replace <code>BRLCAD::Object::AttributeIterator* TestObjectAttributeIterator()</code> by <code>BRLCAD::Object::AttributeIterator GetObjectAttributeIterator()</code>. I changed brlcad/Object.h such that this became possible.</li>\n</ul>",
        "id": 186268335,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579684899
    },
    {
        "content": "<p>... and reviewing the code again: You can remove the TestObjectAttributeIterator() function (and put their body into GetObjectAttributeIterator). The function won't be needed.<br>\nAnd, in PushObjectAttributeIterator() use <code>const BRLCAD::Object::AttributeIterator&amp; iterator</code>.</p>",
        "id": 186268743,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579685191
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> btw one doubt, <code>++object</code> add itself by 1 and I have to push it to the stack correct ?</p>",
        "id": 186316649,
        "sender_full_name": "Himanshu",
        "timestamp": 1579718445
    },
    {
        "content": "<p><code>++object</code> means to \"increment\" the iterator. What it really does, is defined in src/coreInterface/Object.cpp lines 46 - 67.<br>\nNo need to push it on the stack.</p>",
        "id": 186317244,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579718792
    },
    {
        "content": "<p>then <code>Next()</code> should only iterate the <code>object</code></p>",
        "id": 186317670,
        "sender_full_name": "Himanshu",
        "timestamp": 1579719026
    },
    {
        "content": "<p>Yes, and return <strong>true</strong> if there is a ext one and <strong>false</strong> if not.</p>",
        "id": 186321862,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579721489
    },
    {
        "content": "<p>btw, <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> I am thinking to increment the <code>object</code> first and then call <code>object.Good()</code> to check and return true and false accordingly. Also to detect <code>Next</code>, calling <code>Good</code> can detect it correct ?</p>",
        "id": 186332704,
        "sender_full_name": "Himanshu",
        "timestamp": 1579728398
    },
    {
        "content": "<p>like this</p>",
        "id": 186333142,
        "sender_full_name": "Himanshu",
        "timestamp": 1579728717
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    ++object;\n\n    if(object.Good())\n        return true;\n    else\n        return false;\n</pre></div>",
        "id": 186333195,
        "sender_full_name": "Himanshu",
        "timestamp": 1579728730
    },
    {
        "content": "<p>Well, this true and false is exactly what Good() returns ;)</p>\n<p>Remember what the Lua function hook returns: It's the number of return values (number of values pushed on the stack)!</p>",
        "id": 186336637,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579731195
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Here is the patch <a href=\"/user_uploads/1549/pG3Y4zeZc8nC8Q-qLa6CmwTE/lua_binding_for_object_attribute.patch\" target=\"_blank\" title=\"lua_binding_for_object_attribute.patch\">lua_binding_for_object_attribute.patch</a></p>",
        "id": 186384437,
        "sender_full_name": "Himanshu",
        "timestamp": 1579783447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252475\">@Himanshu Sekhar Nayak</span></p>\n<ul>\n<li>Why don't you return <code>*object</code> in GetObjectAttributeIterator()?</li>\n<li>Use \"BRLCAD.ObjectAttributeIterator\" as the table name. Your name won't work. <code>:</code> has a special meaning.</li>\n<li>And then there is the Next() function. It looks like you forgot everything about the required behavior of these functions. Look for example at the next function Good(). Take a deep breath, think, and try again.</li>\n</ul>",
        "id": 186391392,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579788481
    },
    {
        "content": "<p>You mean <code>Next</code> function should behave like as <code>Good</code> ?</p>",
        "id": 186392715,
        "sender_full_name": "Himanshu",
        "timestamp": 1579789242
    },
    {
        "content": "<p>It <strong>has to</strong> behave like a Lua function hook. For example, it has to return the number of values it puts on the stack (which are the return values of the corresponding function in the Lua script. That's why Good() returns <code>1</code>, because it pushes one Boolean value on the stack.</p>",
        "id": 186394728,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579790558
    },
    {
        "content": "<p>so <code>Next()</code> should return the values that are being pushed by <code>Good()</code></p>",
        "id": 186396107,
        "sender_full_name": "Himanshu",
        "timestamp": 1579791409
    },
    {
        "content": "<p>?</p>",
        "id": 186396109,
        "sender_full_name": "Himanshu",
        "timestamp": 1579791411
    },
    {
        "content": "<p>It's the same as in every other Lua function you implemented: Push the return values on the stack (in case of Good() it's a Boolean) and return the number of these values (in case of Good() it's only one).</p>\n<p>Therefore, what shall the Lua Next() function return? I.e., the one in a Lua script.</p>",
        "id": 186397056,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579791903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> looks like <code>Next()</code> cannot return <code>AttributeIterator</code> there</p>",
        "id": 186397536,
        "sender_full_name": "Himanshu",
        "timestamp": 1579792173
    },
    {
        "content": "<blockquote>\n<p>It's the same as in every other Lua function you implemented: Push the return values on the stack (in case of Good() it's a Boolean) and return the number of these values (in case of Good() it's only one).</p>\n<p>Therefore, what shall the Lua Next() function return? I.e., the one in a Lua script.</p>\n</blockquote>\n<p>yeah return 1 if it pushes a value and return 0 if not</p>",
        "id": 186398606,
        "sender_full_name": "Himanshu",
        "timestamp": 1579792808
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"102939\">Daniel Rossberg</span> looks like <code>Next()</code> cannot return <code>AttributeIterator</code> there</p>\n</blockquote>\n<p>Well, it could, but it would be better if it returns a Boolean: true, if there is a next value pair, false if not.</p>",
        "id": 186400583,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579793919
    },
    {
        "content": "<p>so after increamneting the iterator I have to check if there is next value pair or not then return true or false accordingly</p>",
        "id": 186400858,
        "sender_full_name": "Himanshu",
        "timestamp": 1579794080
    },
    {
        "content": "<p>?</p>",
        "id": 186400859,
        "sender_full_name": "Himanshu",
        "timestamp": 1579794081
    },
    {
        "content": "<p>okay here is the patch and one doubt is bool can be converted to int type ? I saw this in stack overflow</p>",
        "id": 186405502,
        "sender_full_name": "Himanshu",
        "timestamp": 1579796590
    },
    {
        "content": "<p><a href=\"/user_uploads/1549/egVeqVJz1AZX9ING4IQgkgBv/lua_binding_for_object_attribute.patch\" target=\"_blank\" title=\"lua_binding_for_object_attribute.patch\">lua_binding_for_object_attribute.patch</a></p>",
        "id": 186405528,
        "sender_full_name": "Himanshu",
        "timestamp": 1579796607
    },
    {
        "content": "<p>Look at the Good() function to see how to return a Boolean. You did it there!</p>",
        "id": 186406555,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579797069
    },
    {
        "content": "<p>then it should be like this</p>",
        "id": 186409737,
        "sender_full_name": "Himanshu",
        "timestamp": 1579798774
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    if (object.Good())\n        return 1;\n    else\n        return 0;\n</pre></div>",
        "id": 186409749,
        "sender_full_name": "Himanshu",
        "timestamp": 1579798782
    },
    {
        "content": "<p>oh... I got it</p>",
        "id": 186409931,
        "sender_full_name": "Himanshu",
        "timestamp": 1579798883
    },
    {
        "content": "<p>okay <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> here is the patch <a href=\"/user_uploads/1549/-YAfdQmiRKen15Z1iSxCXedf/lua_binding_for_object_attribute.patch\" target=\"_blank\" title=\"lua_binding_for_object_attribute.patch\">lua_binding_for_object_attribute.patch</a></p>",
        "id": 186410547,
        "sender_full_name": "Himanshu",
        "timestamp": 1579799198
    },
    {
        "content": "<p>You forgot one BRLCAD.Object::AttributeIterator, but despite this it looks good.</p>",
        "id": 186410701,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579799295
    },
    {
        "content": "<p>okay I will submit with corrections in dashboard</p>",
        "id": 186410826,
        "sender_full_name": "Himanshu",
        "timestamp": 1579799373
    },
    {
        "content": "<p>You see, Next() hasn't much code, but each line needs consideration.</p>",
        "id": 186410910,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579799403
    },
    {
        "content": "<p>yeah some times I don't know why but I overthink and ends up nothing</p>",
        "id": 186410965,
        "sender_full_name": "Himanshu",
        "timestamp": 1579799435
    },
    {
        "content": "<p>Maybe two things, because there is still time:</p>\n<ul>\n<li>Remove TestObjectAttributeIterator from objectattributeiterator.h.</li>\n<li>Push the first lines of the new files (the ones with the huge file names) a bit to the left, such that the are centered.</li>\n</ul>",
        "id": 186412524,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579800258
    },
    {
        "content": "<p>Here is the patch file <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> <a href=\"/user_uploads/1549/A-Dwqz8Q9nAg9snjCJX75Ri1/lua_binding_for_object_attribute.patch\" target=\"_blank\" title=\"lua_binding_for_object_attribute.patch\">lua_binding_for_object_attribute.patch</a></p>",
        "id": 186413096,
        "sender_full_name": "Himanshu",
        "timestamp": 1579800597
    },
    {
        "content": "<p>You forgot the first line in objectattributeiterator.h, which is a new file too.<br>\nAnd then, you can upload it to the task in your dashboard.</p>",
        "id": 186413281,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579800697
    },
    {
        "content": "<p>okay</p>",
        "id": 186413737,
        "sender_full_name": "Himanshu",
        "timestamp": 1579800948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> Submitted</p>",
        "id": 186414175,
        "sender_full_name": "Himanshu",
        "timestamp": 1579801201
    },
    {
        "content": "<p>Very much Thanks <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> I got to learn and implement more and more things from you. This 1 1/2 months, I got to learn many things from you and from this Organisation. I hope to learn more and more from this Organisation and I will push myself for being better day to day <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 186415489,
        "sender_full_name": "Himanshu",
        "timestamp": 1579801876
    },
    {
        "content": "<p>busy day today <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> ?</p>",
        "id": 186416454,
        "sender_full_name": "Himanshu",
        "timestamp": 1579802425
    },
    {
        "content": "<p>As (almost) always. :)</p>",
        "id": 186417940,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579803355
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"102939\">@Daniel Rossberg</span> done some minor adding that you can add to <code>src/embeddedLua</code><a href=\"/user_uploads/1549/XPn72itgZoT29jKj2BAvFy8b/some_minor_addings_to_geometry_primitive_class.patch\" target=\"_blank\" title=\"some_minor_addings_to_geometry_primitive_class.patch\">some_minor_addings_to_geometry_primitive_class.patch</a></p>",
        "id": 186492826,
        "sender_full_name": "Himanshu",
        "timestamp": 1579873613
    },
    {
        "content": "<p>Applied with revision 74740 <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 186517051,
        "sender_full_name": "Daniel Rossberg",
        "timestamp": 1579888834
    }
]